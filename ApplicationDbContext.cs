using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using AnimusApi.Domain.Entities;
using AnimusApi.Infrastructure.Data.Identity;

namespace AnimusApi.Infrastructure.Data.Context;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    { }

    public DbSet<Exemplo> Exemplo { get; set; }
    public DbSet<ExemploGeneric> ExemploGeneric { get; set; }
    public virtual DbSet<AdelantoCliente> AdelantoClientes { get; set; } = null!;
    public virtual DbSet<AdelantoContrato> AdelantoContratos { get; set; } = null!;
    public virtual DbSet<AdelantoFuncionario> AdelantoFuncionarios { get; set; } = null!;
    public virtual DbSet<AdelantoProveedor> AdelantoProveedors { get; set; } = null!;
    public virtual DbSet<Aduana> Aduanas { get; set; } = null!;
    public virtual DbSet<Aficion> Aficions { get; set; } = null!;
    public virtual DbSet<Agendum> Agenda { get; set; } = null!;
    public virtual DbSet<AgricolaCierre> AgricolaCierres { get; set; } = null!;
    public virtual DbSet<AgricolaCierreProducto> AgricolaCierreProductos { get; set; } = null!;
    public virtual DbSet<AgricolaCosecha> AgricolaCosechas { get; set; } = null!;
    public virtual DbSet<AgricolaDevolucion> AgricolaDevolucions { get; set; } = null!;
    public virtual DbSet<AgricolaDevolucionProducto> AgricolaDevolucionProductos { get; set; } = null!;
    public virtual DbSet<AgricolaEstancium> AgricolaEstancia { get; set; } = null!;
    public virtual DbSet<AgricolaFormacion> AgricolaFormacions { get; set; } = null!;
    public virtual DbSet<AgricolaFormacionProducto> AgricolaFormacionProductos { get; set; } = null!;
    public virtual DbSet<AgricolaGleba> AgricolaGlebas { get; set; } = null!;
    public virtual DbSet<AgricolaLote> AgricolaLotes { get; set; } = null!;
    public virtual DbSet<AgricolaRomaneo> AgricolaRomaneos { get; set; } = null!;
    public virtual DbSet<AgricolaSiembra> AgricolaSiembras { get; set; } = null!;
    public virtual DbSet<AgricolaSiembraVariedad> AgricolaSiembraVariedads { get; set; } = null!;
    public virtual DbSet<AgricolaSolicitud> AgricolaSolicituds { get; set; } = null!;
    public virtual DbSet<AgricolaSolicitudProducto> AgricolaSolicitudProductos { get; set; } = null!;
    public virtual DbSet<AnalisisProyeccion> AnalisisProyeccions { get; set; } = null!;
    public virtual DbSet<ArregloLoteOp> ArregloLoteOps { get; set; } = null!;
    public virtual DbSet<AsociacionGasto> AsociacionGastos { get; set; } = null!;
    public virtual DbSet<AsociacionGastoDet> AsociacionGastoDets { get; set; } = null!;
    public virtual DbSet<Autoimpresor> Autoimpresors { get; set; } = null!;
    public virtual DbSet<AutorizadorCompra> AutorizadorCompras { get; set; } = null!;
    public virtual DbSet<AutorizadorCompraSuplente> AutorizadorCompraSuplentes { get; set; } = null!;
    public virtual DbSet<AutorizadorPago> AutorizadorPagos { get; set; } = null!;
    public virtual DbSet<AutorizadorProduccion> AutorizadorProduccions { get; set; } = null!;
    public virtual DbSet<AutorizadorSuplente> AutorizadorSuplentes { get; set; } = null!;
    public virtual DbSet<AutorizarCompra> AutorizarCompras { get; set; } = null!;
    public virtual DbSet<AutorizarPago> AutorizarPagos { get; set; } = null!;
    public virtual DbSet<AutorizarProduccion> AutorizarProduccions { get; set; } = null!;
    public virtual DbSet<AuxCargaRack> AuxCargaRacks { get; set; } = null!;
    public virtual DbSet<BalanceMercado> BalanceMercados { get; set; } = null!;
    public virtual DbSet<BalanceVersion> BalanceVersions { get; set; } = null!;
    public virtual DbSet<BiAnho> BiAnhos { get; set; } = null!;
    public virtual DbSet<BiCarpeta> BiCarpetas { get; set; } = null!;
    public virtual DbSet<BiCiudade> BiCiudades { get; set; } = null!;
    public virtual DbSet<BiCliente> BiClientes { get; set; } = null!;
    public virtual DbSet<BiClienteLocalEntrega> BiClienteLocalEntregas { get; set; } = null!;
    public virtual DbSet<BiCultivo> BiCultivos { get; set; } = null!;
    public virtual DbSet<BiDeposito> BiDepositos { get; set; } = null!;
    public virtual DbSet<BiEnvase> BiEnvases { get; set; } = null!;
    public virtual DbSet<BiFuncionario> BiFuncionarios { get; set; } = null!;
    public virtual DbSet<BiHecho> BiHechos { get; set; } = null!;
    public virtual DbSet<BiHechosCuentaRecibir> BiHechosCuentaRecibirs { get; set; } = null!;
    public virtual DbSet<BiHechosFacturacion> BiHechosFacturacions { get; set; } = null!;
    public virtual DbSet<BiHechosGrano> BiHechosGranos { get; set; } = null!;
    public virtual DbSet<BiHechosGranosAux> BiHechosGranosAuxes { get; set; } = null!;
    public virtual DbSet<BiHechosLineaCredito> BiHechosLineaCreditos { get; set; } = null!;
    public virtual DbSet<BiHechosPagaresPendiente> BiHechosPagaresPendientes { get; set; } = null!;
    public virtual DbSet<BiHechosPedido> BiHechosPedidos { get; set; } = null!;
    public virtual DbSet<BiHechosPedidoTm> BiHechosPedidoTms { get; set; } = null!;
    public virtual DbSet<BiHechosPrevisionPedido> BiHechosPrevisionPedidos { get; set; } = null!;
    public virtual DbSet<BiHechosStock> BiHechosStocks { get; set; } = null!;
    public virtual DbSet<BiLote> BiLotes { get; set; } = null!;
    public virtual DbSet<BiMarcasProducto> BiMarcasProductos { get; set; } = null!;
    public virtual DbSet<BiPrincipiosActivo> BiPrincipiosActivos { get; set; } = null!;
    public virtual DbSet<BiProducto> BiProductos { get; set; } = null!;
    public virtual DbSet<BiRegione> BiRegiones { get; set; } = null!;
    public virtual DbSet<BiUnidade> BiUnidades { get; set; } = null!;
    public virtual DbSet<BiVendedore> BiVendedores { get; set; } = null!;
    public virtual DbSet<BiZafra> BiZafras { get; set; } = null!;
    public virtual DbSet<BolsaValore> BolsaValores { get; set; } = null!;
    public virtual DbSet<BolsaValoresSimbolo> BolsaValoresSimbolos { get; set; } = null!;
    public virtual DbSet<Camion> Camions { get; set; } = null!;
    public virtual DbSet<CamionCargaImp> CamionCargaImps { get; set; } = null!;
    public virtual DbSet<CampanhaPremio> CampanhaPremios { get; set; } = null!;
    public virtual DbSet<CampanhaPremioCultivo> CampanhaPremioCultivos { get; set; } = null!;
    public virtual DbSet<CampanhaPremioProducto> CampanhaPremioProductos { get; set; } = null!;
    public virtual DbSet<CampoSemilla> CampoSemillas { get; set; } = null!;
    public virtual DbSet<CampoSemillaDet> CampoSemillaDets { get; set; } = null!;
    public virtual DbSet<Carga> Cargas { get; set; } = null!;
    public virtual DbSet<CargaExportacion> CargaExportacions { get; set; } = null!;
    public virtual DbSet<CargaExportacionProducto> CargaExportacionProductos { get; set; } = null!;
    public virtual DbSet<CargaMaterialEspecial> CargaMaterialEspecials { get; set; } = null!;
    public virtual DbSet<CargaNotaRemision> CargaNotaRemisions { get; set; } = null!;
    public virtual DbSet<CargaProducto> CargaProductos { get; set; } = null!;
    public virtual DbSet<Cargo> Cargos { get; set; } = null!;
    public virtual DbSet<Carpetum> Carpeta { get; set; } = null!;
    public virtual DbSet<Cartera> Carteras { get; set; } = null!;
    public virtual DbSet<CarteraLocalEntrega> CarteraLocalEntregas { get; set; } = null!;
    public virtual DbSet<CarteraVendedor> CarteraVendedors { get; set; } = null!;
    public virtual DbSet<CategoriaCargaFabril> CategoriaCargaFabrils { get; set; } = null!;
    public virtual DbSet<CategoriaCargaFabrilDet> CategoriaCargaFabrilDets { get; set; } = null!;
    public virtual DbSet<CategoriaSemilla> CategoriaSemillas { get; set; } = null!;
    public virtual DbSet<CategoriaVentum> CategoriaVenta { get; set; } = null!;
    public virtual DbSet<Categorium> Categoria { get; set; } = null!;
    public virtual DbSet<CcaAnalisi> CcaAnalises { get; set; } = null!;
    public virtual DbSet<CcaAnalisisDet> CcaAnalisisDets { get; set; } = null!;
    public virtual DbSet<CcaMuestraEtapa> CcaMuestraEtapas { get; set; } = null!;
    public virtual DbSet<CcaMuestraPp> CcaMuestraPps { get; set; } = null!;
    public virtual DbSet<CcaMuestraPpAnalisi> CcaMuestraPpAnalises { get; set; } = null!;
    public virtual DbSet<CcaMuestraPpAnalisisDet> CcaMuestraPpAnalisisDets { get; set; } = null!;
    public virtual DbSet<Chequera> Chequeras { get; set; } = null!;
    public virtual DbSet<ChequeraDetalle> ChequeraDetalles { get; set; } = null!;
    public virtual DbSet<Chofer> Chofers { get; set; } = null!;
    public virtual DbSet<Ciudad> Ciudads { get; set; } = null!;
    public virtual DbSet<Clase> Clases { get; set; } = null!;
    public virtual DbSet<Cliente> Clientes { get; set; } = null!;
    public virtual DbSet<ClienteAccionistaCargo> ClienteAccionistaCargos { get; set; } = null!;
    public virtual DbSet<ClienteAccionistum> ClienteAccionista { get; set; } = null!;
    public virtual DbSet<ClienteAreaPotencial> ClienteAreaPotencials { get; set; } = null!;
    public virtual DbSet<ClienteBalance> ClienteBalances { get; set; } = null!;
    public virtual DbSet<ClienteBalanceTm> ClienteBalanceTms { get; set; } = null!;
    public virtual DbSet<ClienteBloqueo> ClienteBloqueos { get; set; } = null!;
    public virtual DbSet<ClienteBloqueoContrato> ClienteBloqueoContratos { get; set; } = null!;
    public virtual DbSet<ClienteBloqueoInmueble> ClienteBloqueoInmuebles { get; set; } = null!;
    public virtual DbSet<ClienteComentario> ClienteComentarios { get; set; } = null!;
    public virtual DbSet<ClienteComercial> ClienteComercials { get; set; } = null!;
    public virtual DbSet<ClienteContacto> ClienteContactos { get; set; } = null!;
    public virtual DbSet<ClienteContratoAr> ClienteContratoArs { get; set; } = null!;
    public virtual DbSet<ClienteContratoCv> ClienteContratoCvs { get; set; } = null!;
    public virtual DbSet<ClienteContratoPr> ClienteContratoPrs { get; set; } = null!;
    public virtual DbSet<ClienteGanado> ClienteGanados { get; set; } = null!;
    public virtual DbSet<ClienteGarante> ClienteGarantes { get; set; } = null!;
    public virtual DbSet<ClienteGarantium> ClienteGarantia { get; set; } = null!;
    public virtual DbSet<ClienteImplemento> ClienteImplementos { get; set; } = null!;
    public virtual DbSet<ClienteImpuestoRa> ClienteImpuestoRas { get; set; } = null!;
    public virtual DbSet<ClienteIndicadorCualitativo> ClienteIndicadorCualitativos { get; set; } = null!;
    public virtual DbSet<ClienteLocalEntrega> ClienteLocalEntregas { get; set; } = null!;
    public virtual DbSet<ClienteLocalEntregaHa> ClienteLocalEntregaHas { get; set; } = null!;
    public virtual DbSet<ClienteLocalEntregaVe> ClienteLocalEntregaVes { get; set; } = null!;
    public virtual DbSet<ClienteOtroActivo> ClienteOtroActivos { get; set; } = null!;
    public virtual DbSet<ClientePasivo> ClientePasivos { get; set; } = null!;
    public virtual DbSet<ClienteRecibir> ClienteRecibirs { get; set; } = null!;
    public virtual DbSet<ClienteReclamo> ClienteReclamos { get; set; } = null!;
    public virtual DbSet<ClienteReclamoDocumento> ClienteReclamoDocumentos { get; set; } = null!;
    public virtual DbSet<ClienteReclamoEmail> ClienteReclamoEmails { get; set; } = null!;
    public virtual DbSet<ClienteReclamoFactura> ClienteReclamoFacturas { get; set; } = null!;
    public virtual DbSet<ClienteReclamoFacturaDet> ClienteReclamoFacturaDets { get; set; } = null!;
    public virtual DbSet<ClienteReclamoFacturaPro> ClienteReclamoFacturaPros { get; set; } = null!;
    public virtual DbSet<ClienteReclamoProducto> ClienteReclamoProductos { get; set; } = null!;
    public virtual DbSet<ClienteReferenciaBancarium> ClienteReferenciaBancaria { get; set; } = null!;
    public virtual DbSet<ClienteReferenciaComercial> ClienteReferenciaComercials { get; set; } = null!;
    public virtual DbSet<ClienteResumenValoracion> ClienteResumenValoracions { get; set; } = null!;
    public virtual DbSet<ClienteResumenValoracionEmb> ClienteResumenValoracionEmbs { get; set; } = null!;
    public virtual DbSet<ClienteResumenValoracionHip> ClienteResumenValoracionHips { get; set; } = null!;
    public virtual DbSet<ClienteResumenValoracionTer> ClienteResumenValoracionTers { get; set; } = null!;
    public virtual DbSet<ClienteResumenValoracionTerEmb> ClienteResumenValoracionTerEmbs { get; set; } = null!;
    public virtual DbSet<ClienteResumenValoracionTerHip> ClienteResumenValoracionTerHips { get; set; } = null!;
    public virtual DbSet<ClienteRodado> ClienteRodados { get; set; } = null!;
    public virtual DbSet<ClienteRodadoTer> ClienteRodadoTers { get; set; } = null!;
    public virtual DbSet<CmdbCatalogo> CmdbCatalogos { get; set; } = null!;
    public virtual DbSet<CmdbCatalogoIc> CmdbCatalogoIcs { get; set; } = null!;
    public virtual DbSet<CmdbCatalogoSla> CmdbCatalogoSlas { get; set; } = null!;
    public virtual DbSet<CmdbGrupo> CmdbGrupos { get; set; } = null!;
    public virtual DbSet<CmdbIc> CmdbIcs { get; set; } = null!;
    public virtual DbSet<CmdbIcFuncionario> CmdbIcFuncionarios { get; set; } = null!;
    public virtual DbSet<CmdbIcRelacionamiento> CmdbIcRelacionamientos { get; set; } = null!;
    public virtual DbSet<CmdbIncidente> CmdbIncidentes { get; set; } = null!;
    public virtual DbSet<CmdbIncidenteAccion> CmdbIncidenteAccions { get; set; } = null!;
    public virtual DbSet<CmdbLocal> CmdbLocals { get; set; } = null!;
    public virtual DbSet<CmdbRdm> CmdbRdms { get; set; } = null!;
    public virtual DbSet<CmdbRevelado> CmdbRevelados { get; set; } = null!;
    public virtual DbSet<CmdbSla> CmdbSlas { get; set; } = null!;
    public virtual DbSet<CmdbTecnico> CmdbTecnicos { get; set; } = null!;
    public virtual DbSet<CmdbTipoIc> CmdbTipoIcs { get; set; } = null!;
    public virtual DbSet<CodigoBcp> CodigoBcps { get; set; } = null!;
    public virtual DbSet<ComercialClasifProducto> ComercialClasifProductos { get; set; } = null!;
    public virtual DbSet<ComercialGrupoProducto> ComercialGrupoProductos { get; set; } = null!;
    public virtual DbSet<ComercialMercadoMgProd> ComercialMercadoMgProds { get; set; } = null!;
    public virtual DbSet<ComercialMercadoProd> ComercialMercadoProds { get; set; } = null!;
    public virtual DbSet<ComercialTipoProducto> ComercialTipoProductos { get; set; } = null!;
    public virtual DbSet<Comision> Comisions { get; set; } = null!;
    public virtual DbSet<CompraAjuste> CompraAjustes { get; set; } = null!;
    public virtual DbSet<CompraAjusteProducto> CompraAjusteProductos { get; set; } = null!;
    public virtual DbSet<CompraComplemento> CompraComplementos { get; set; } = null!;
    public virtual DbSet<CompraComplementoFactura> CompraComplementoFacturas { get; set; } = null!;
    public virtual DbSet<CompraExtProductoSolicitud> CompraExtProductoSolicituds { get; set; } = null!;
    public virtual DbSet<CompraExterior> CompraExteriors { get; set; } = null!;
    public virtual DbSet<CompraExteriorFactura> CompraExteriorFacturas { get; set; } = null!;
    public virtual DbSet<CompraExteriorFacturaDet> CompraExteriorFacturaDets { get; set; } = null!;
    public virtual DbSet<CompraExteriorPagar> CompraExteriorPagars { get; set; } = null!;
    public virtual DbSet<CompraExteriorProducto> CompraExteriorProductos { get; set; } = null!;
    public virtual DbSet<CompraExteriorProductoLote> CompraExteriorProductoLotes { get; set; } = null!;
    public virtual DbSet<CompraLocal> CompraLocals { get; set; } = null!;
    public virtual DbSet<CompraLocalDet> CompraLocalDets { get; set; } = null!;
    public virtual DbSet<CompraLocalProducto> CompraLocalProductos { get; set; } = null!;
    public virtual DbSet<ComprobanteAuditorium> ComprobanteAuditoria { get; set; } = null!;
    public virtual DbSet<ComprobanteCargaImp> ComprobanteCargaImps { get; set; } = null!;
    public virtual DbSet<ComprobanteCargaImpDet> ComprobanteCargaImpDets { get; set; } = null!;
    public virtual DbSet<ComprobanteCargaTrasbDet> ComprobanteCargaTrasbDets { get; set; } = null!;
    public virtual DbSet<ComprobanteCargaTrasbordo> ComprobanteCargaTrasbordos { get; set; } = null!;
    public virtual DbSet<ConceptoIva> ConceptoIvas { get; set; } = null!;
    public virtual DbSet<ConceptoRentum> ConceptoRenta { get; set; } = null!;
    public virtual DbSet<Conciliacion> Conciliacions { get; set; } = null!;
    public virtual DbSet<ConciliacionDet> ConciliacionDets { get; set; } = null!;
    public virtual DbSet<ConfiguracionContable> ConfiguracionContables { get; set; } = null!;
    public virtual DbSet<Contenedor> Contenedors { get; set; } = null!;
    public virtual DbSet<ContenedorCargaImp> ContenedorCargaImps { get; set; } = null!;
    public virtual DbSet<ContratoCompra> ContratoCompras { get; set; } = null!;
    public virtual DbSet<ContratoCompraAplicacion> ContratoCompraAplicacions { get; set; } = null!;
    public virtual DbSet<ContratoCompraClasificacion> ContratoCompraClasificacions { get; set; } = null!;
    public virtual DbSet<ContratoCompraCosto> ContratoCompraCostos { get; set; } = null!;
    public virtual DbSet<ContratoCompraCt> ContratoCompraCts { get; set; } = null!;
    public virtual DbSet<ContratoCompraCtProcesado> ContratoCompraCtProcesados { get; set; } = null!;
    public virtual DbSet<ContratoCompraDeposito> ContratoCompraDepositos { get; set; } = null!;
    public virtual DbSet<ContratoCompraInfo> ContratoCompraInfos { get; set; } = null!;
    public virtual DbSet<ContratoCompraInmueble> ContratoCompraInmuebles { get; set; } = null!;
    public virtual DbSet<ContratoCompraLiq> ContratoCompraLiqs { get; set; } = null!;
    public virtual DbSet<ContratoCompraLiqFactura> ContratoCompraLiqFacturas { get; set; } = null!;
    public virtual DbSet<ContratoCompraLiqPrecio> ContratoCompraLiqPrecios { get; set; } = null!;
    public virtual DbSet<ContratoCompraLiqRomaneo> ContratoCompraLiqRomaneos { get; set; } = null!;
    public virtual DbSet<ContratoCompraLiqTipoPago> ContratoCompraLiqTipoPagos { get; set; } = null!;
    public virtual DbSet<ContratoCompraLiqVerifica> ContratoCompraLiqVerificas { get; set; } = null!;
    public virtual DbSet<ContratoCompraPedido> ContratoCompraPedidos { get; set; } = null!;
    public virtual DbSet<ContratoCompraPrecio> ContratoCompraPrecios { get; set; } = null!;
    public virtual DbSet<ContratoCompraRollover> ContratoCompraRollovers { get; set; } = null!;
    public virtual DbSet<ContratoCompraRolloverCosto> ContratoCompraRolloverCostos { get; set; } = null!;
    public virtual DbSet<ContratoCompraRomaneo> ContratoCompraRomaneos { get; set; } = null!;
    public virtual DbSet<ContratoCompraTrocaRef> ContratoCompraTrocaRefs { get; set; } = null!;
    public virtual DbSet<ContratoCompraWashout> ContratoCompraWashouts { get; set; } = null!;
    public virtual DbSet<ContratoTercero> ContratoTerceros { get; set; } = null!;
    public virtual DbSet<ContratoTransportadora> ContratoTransportadoras { get; set; } = null!;
    public virtual DbSet<ContratoVentaCosto> ContratoVentaCostos { get; set; } = null!;
    public virtual DbSet<ContratoVentaDeposito> ContratoVentaDepositos { get; set; } = null!;
    public virtual DbSet<ContratoVentaLiq> ContratoVentaLiqs { get; set; } = null!;
    public virtual DbSet<ContratoVentaLiqPrecio> ContratoVentaLiqPrecios { get; set; } = null!;
    public virtual DbSet<ContratoVentaLiqRef> ContratoVentaLiqRefs { get; set; } = null!;
    public virtual DbSet<ContratoVentaPrecio> ContratoVentaPrecios { get; set; } = null!;
    public virtual DbSet<ContratoVentaRefCompra> ContratoVentaRefCompras { get; set; } = null!;
    public virtual DbSet<ContratoVentaRollover> ContratoVentaRollovers { get; set; } = null!;
    public virtual DbSet<ContratoVentaRolloverCosto> ContratoVentaRolloverCostos { get; set; } = null!;
    public virtual DbSet<ContratoVentaSet> ContratoVentaSets { get; set; } = null!;
    public virtual DbSet<ContratoVentaSetDet> ContratoVentaSetDets { get; set; } = null!;
    public virtual DbSet<ContratoVentaWashout> ContratoVentaWashouts { get; set; } = null!;
    public virtual DbSet<ContratoVentum> ContratoVenta { get; set; } = null!;
    public virtual DbSet<ControlAsientoTm> ControlAsientoTms { get; set; } = null!;
    public virtual DbSet<CoordinadorVentaDet> CoordinadorVentaDets { get; set; } = null!;
    public virtual DbSet<CoordinadorVentum> CoordinadorVenta { get; set; } = null!;
    public virtual DbSet<Cotizacion> Cotizacions { get; set; } = null!;
    public virtual DbSet<Cotum> Cota { get; set; } = null!;
    public virtual DbSet<CuentaChe> CuentaChes { get; set; } = null!;
    public virtual DbSet<CuentaCorriente> CuentaCorrientes { get; set; } = null!;
    public virtual DbSet<CuentaCorrientePermiso> CuentaCorrientePermisos { get; set; } = null!;
    public virtual DbSet<CuentaFuncionario> CuentaFuncionarios { get; set; } = null!;
    public virtual DbSet<CuentaMov> CuentaMovs { get; set; } = null!;
    public virtual DbSet<CuentaPre> CuentaPres { get; set; } = null!;
    public virtual DbSet<CuentaProveedor> CuentaProveedors { get; set; } = null!;
    public virtual DbSet<Cultivo> Cultivos { get; set; } = null!;
    public virtual DbSet<Dac> Dacs { get; set; } = null!;
    public virtual DbSet<DacContrato> DacContratos { get; set; } = null!;
    public virtual DbSet<DacHipoteca> DacHipotecas { get; set; } = null!;
    public virtual DbSet<DacPagare> DacPagares { get; set; } = null!;
    public virtual DbSet<DacPedido> DacPedidos { get; set; } = null!;
    public virtual DbSet<DacPrendum> DacPrenda { get; set; } = null!;
    public virtual DbSet<De> Des { get; set; } = null!;
    public virtual DbSet<DeActiEco> DeActiEcos { get; set; } = null!;
    public virtual DbSet<DeAsoc> DeAsocs { get; set; } = null!;
    public virtual DbSet<DeCiudad> DeCiudads { get; set; } = null!;
    public virtual DbSet<DeCuota> DeCuotas { get; set; } = null!;
    public virtual DbSet<DeDepartamento> DeDepartamentos { get; set; } = null!;
    public virtual DbSet<DeDistrito> DeDistritos { get; set; } = null!;
    public virtual DbSet<DeDocumento> DeDocumentos { get; set; } = null!;
    public virtual DbSet<DeError> DeErrors { get; set; } = null!;
    public virtual DbSet<DeEvento> DeEventos { get; set; } = null!;
    public virtual DbSet<DeFechaVencimientoPago> DeFechaVencimientoPagos { get; set; } = null!;
    public virtual DbSet<DeItem> DeItems { get; set; } = null!;
    public virtual DbSet<DeLocalEntrega> DeLocalEntregas { get; set; } = null!;
    public virtual DbSet<DeLote> DeLotes { get; set; } = null!;
    public virtual DbSet<DeLoteItem> DeLoteItems { get; set; } = null!;
    public virtual DbSet<DeLoteResultado> DeLoteResultados { get; set; } = null!;
    public virtual DbSet<DePagoContEntregaIni> DePagoContEntregaInis { get; set; } = null!;
    public virtual DbSet<DeResultado> DeResultados { get; set; } = null!;
    public virtual DbSet<DeResultadoItem> DeResultadoItems { get; set; } = null!;
    public virtual DbSet<DeVehiculoTransp> DeVehiculoTransps { get; set; } = null!;
    public virtual DbSet<DemoraProductoImp> DemoraProductoImps { get; set; } = null!;
    public virtual DbSet<DemoraTrasbordo> DemoraTrasbordos { get; set; } = null!;
    public virtual DbSet<Departamento> Departamentos { get; set; } = null!;
    public virtual DbSet<Deposito> Depositos { get; set; } = null!;
    public virtual DbSet<DepositoUbicacion> DepositoUbicacions { get; set; } = null!;
    public virtual DbSet<DesarrollistaVen> DesarrollistaVens { get; set; } = null!;
    public virtual DbSet<Desarrollistum> Desarrollista { get; set; } = null!;
    public virtual DbSet<DespachoComex> DespachoComices { get; set; } = null!;
    public virtual DbSet<DevolucionAdelCli> DevolucionAdelClis { get; set; } = null!;
    public virtual DbSet<DevolucionAdelPro> DevolucionAdelPros { get; set; } = null!;
    public virtual DbSet<DiarioMe> DiarioMes { get; set; } = null!;
    public virtual DbSet<DiarioMeDetalle> DiarioMeDetalles { get; set; } = null!;
    public virtual DbSet<DiarioMeDetalleHist> DiarioMeDetalleHists { get; set; } = null!;
    public virtual DbSet<DiarioMeHist> DiarioMeHists { get; set; } = null!;
    public virtual DbSet<DiarioMl> DiarioMls { get; set; } = null!;
    public virtual DbSet<DiarioMlDetalle> DiarioMlDetalles { get; set; } = null!;
    public virtual DbSet<DiarioMlDetalleHist> DiarioMlDetalleHists { get; set; } = null!;
    public virtual DbSet<DiarioMlHist> DiarioMlHists { get; set; } = null!;
    public virtual DbSet<Documento> Documentos { get; set; } = null!;
    public virtual DbSet<DocumentoEstado> DocumentoEstados { get; set; } = null!;
    public virtual DbSet<DocumentoRastreo> DocumentoRastreos { get; set; } = null!;
    public virtual DbSet<DocumentoRastreoDet> DocumentoRastreoDets { get; set; } = null!;
    public virtual DbSet<Empresa> Empresas { get; set; } = null!;
    public virtual DbSet<EmpresaCentroCosto> EmpresaCentroCostos { get; set; } = null!;
    public virtual DbSet<EmpresaUnidad> EmpresaUnidads { get; set; } = null!;
    public virtual DbSet<Encomiendum> Encomienda { get; set; } = null!;
    public virtual DbSet<EntidadFinanciera> EntidadFinancieras { get; set; } = null!;
    public virtual DbSet<Envase> Envases { get; set; } = null!;
    public virtual DbSet<Error> Errors { get; set; } = null!;
    public virtual DbSet<EscaneoFactura> EscaneoFacturas { get; set; } = null!;
    public virtual DbSet<EscaneoFacturaAutoriza> EscaneoFacturaAutorizas { get; set; } = null!;
    public virtual DbSet<EscaneoFacturaEstado> EscaneoFacturaEstados { get; set; } = null!;
    public virtual DbSet<EscaneoFacturaVerifica> EscaneoFacturaVerificas { get; set; } = null!;
    public virtual DbSet<EspTecnicaPeligrosidad> EspTecnicaPeligrosidads { get; set; } = null!;
    public virtual DbSet<EspTecnicaPeligrosidadDet> EspTecnicaPeligrosidadDets { get; set; } = null!;
    public virtual DbSet<EspecificacionTecnica> EspecificacionTecnicas { get; set; } = null!;
    public virtual DbSet<EspecificacionTecnicaSimilar> EspecificacionTecnicaSimilars { get; set; } = null!;
    public virtual DbSet<Estado> Estados { get; set; } = null!;
    public virtual DbSet<EstadoOperacion> EstadoOperacions { get; set; } = null!;
    public virtual DbSet<EtapaSectorLinea> EtapaSectorLineas { get; set; } = null!;
    public virtual DbSet<Evento> Eventos { get; set; } = null!;
    public virtual DbSet<EventoDetalle> EventoDetalles { get; set; } = null!;
    public virtual DbSet<Expediente> Expedientes { get; set; } = null!;
    public virtual DbSet<ExpedienteDet> ExpedienteDets { get; set; } = null!;
    public virtual DbSet<Exposicion> Exposicions { get; set; } = null!;
    public virtual DbSet<Fabrica> Fabricas { get; set; } = null!;
    public virtual DbSet<FabricaEquipo> FabricaEquipos { get; set; } = null!;
    public virtual DbSet<FabricaEquipoDet> FabricaEquipoDets { get; set; } = null!;
    public virtual DbSet<FabricaEquipoParte> FabricaEquipoPartes { get; set; } = null!;
    public virtual DbSet<FabricaLinea> FabricaLineas { get; set; } = null!;
    public virtual DbSet<FabricaSector> FabricaSectors { get; set; } = null!;
    public virtual DbSet<FabricanteExt> FabricanteExts { get; set; } = null!;
    public virtual DbSet<FabrilAuxBoomPlanProduccion> FabrilAuxBoomPlanProduccions { get; set; } = null!;
    public virtual DbSet<FabrilAuxBoomSemana> FabrilAuxBoomSemanas { get; set; } = null!;
    public virtual DbSet<FabrilCcEstado> FabrilCcEstados { get; set; } = null!;
    public virtual DbSet<FabrilControlCalidad> FabrilControlCalidads { get; set; } = null!;
    public virtual DbSet<FabrilDesarmePack> FabrilDesarmePacks { get; set; } = null!;
    public virtual DbSet<FabrilDevSolicitud> FabrilDevSolicituds { get; set; } = null!;
    public virtual DbSet<FabrilDevSolicitudProducto> FabrilDevSolicitudProductos { get; set; } = null!;
    public virtual DbSet<FabrilLiquidoLavado> FabrilLiquidoLavados { get; set; } = null!;
    public virtual DbSet<FabrilMaterialEspecial> FabrilMaterialEspecials { get; set; } = null!;
    public virtual DbSet<FabrilPlanProduccion> FabrilPlanProduccions { get; set; } = null!;
    public virtual DbSet<FabrilPlanProduccionDet> FabrilPlanProduccionDets { get; set; } = null!;
    public virtual DbSet<FabrilPlanning> FabrilPlannings { get; set; } = null!;
    public virtual DbSet<FabrilPlanningAuxfechaetum> FabrilPlanningAuxfechaeta { get; set; } = null!;
    public virtual DbSet<FabrilPlanningDet> FabrilPlanningDets { get; set; } = null!;
    public virtual DbSet<FabrilRecepcionCodBarra> FabrilRecepcionCodBarras { get; set; } = null!;
    public virtual DbSet<FabrilRecepcionSolicitud> FabrilRecepcionSolicituds { get; set; } = null!;
    public virtual DbSet<FabrilRecepcionSolicitudProducto> FabrilRecepcionSolicitudProductos { get; set; } = null!;
    public virtual DbSet<FabrilRecepcionTransf> FabrilRecepcionTransfs { get; set; } = null!;
    public virtual DbSet<FabrilRecepcionTransfProducto> FabrilRecepcionTransfProductos { get; set; } = null!;
    public virtual DbSet<FabrilRecepcionTransfProductoPallet> FabrilRecepcionTransfProductoPallets { get; set; } = null!;
    public virtual DbSet<FabrilSemanaProduccion> FabrilSemanaProduccions { get; set; } = null!;
    public virtual DbSet<FabrilSimCosto> FabrilSimCostos { get; set; } = null!;
    public virtual DbSet<FabrilSimCostoDet> FabrilSimCostoDets { get; set; } = null!;
    public virtual DbSet<FabrilSimCostoProdDet> FabrilSimCostoProdDets { get; set; } = null!;
    public virtual DbSet<FabrilSolicitud> FabrilSolicituds { get; set; } = null!;
    public virtual DbSet<FabrilSolicitudProducto> FabrilSolicitudProductos { get; set; } = null!;
    public virtual DbSet<FabrilSolicitudTransf> FabrilSolicitudTransfs { get; set; } = null!;
    public virtual DbSet<FabrilSolicitudTransfProducto> FabrilSolicitudTransfProductos { get; set; } = null!;
    public virtual DbSet<FabrilTablaBoom> FabrilTablaBooms { get; set; } = null!;
    public virtual DbSet<FabrilTransferenciaProducto> FabrilTransferenciaProductos { get; set; } = null!;
    public virtual DbSet<FabrilTransferenciaProductoPallet> FabrilTransferenciaProductoPallets { get; set; } = null!;
    public virtual DbSet<FabrilTransferencium> FabrilTransferencia { get; set; } = null!;
    public virtual DbSet<FacturaCrecon> FacturaCrecons { get; set; } = null!;
    public virtual DbSet<FacturaCreconLote> FacturaCreconLotes { get; set; } = null!;
    public virtual DbSet<FacturaCreconProducto> FacturaCreconProductos { get; set; } = null!;
    public virtual DbSet<FacturaExportacion> FacturaExportacions { get; set; } = null!;
    public virtual DbSet<FacturaExportacionCierre> FacturaExportacionCierres { get; set; } = null!;
    public virtual DbSet<FacturaExportacionFactura> FacturaExportacionFacturas { get; set; } = null!;
    public virtual DbSet<FacturaExportacionProducto> FacturaExportacionProductos { get; set; } = null!;
    public virtual DbSet<Feriado> Feriados { get; set; } = null!;
    public virtual DbSet<FeriadoUnidad> FeriadoUnidads { get; set; } = null!;
    public virtual DbSet<FormaPago> FormaPagos { get; set; } = null!;
    public virtual DbSet<FormaPagoFleteImp> FormaPagoFleteImps { get; set; } = null!;
    public virtual DbSet<Formulario> Formularios { get; set; } = null!;
    public virtual DbSet<Forwarder> Forwarders { get; set; } = null!;
    public virtual DbSet<ForwarderCostoDemDet> ForwarderCostoDemDets { get; set; } = null!;
    public virtual DbSet<ForwarderCostoDemora> ForwarderCostoDemoras { get; set; } = null!;
    public virtual DbSet<Funcionario> Funcionarios { get; set; } = null!;
    public virtual DbSet<FuncionarioCargo> FuncionarioCargos { get; set; } = null!;
    public virtual DbSet<FuncionarioCarrera> FuncionarioCarreras { get; set; } = null!;
    public virtual DbSet<FuncionarioCoordenadum> FuncionarioCoordenada { get; set; } = null!;
    public virtual DbSet<FuncionarioCuestionario> FuncionarioCuestionarios { get; set; } = null!;
    public virtual DbSet<FuncionarioEscolaridad> FuncionarioEscolaridads { get; set; } = null!;
    public virtual DbSet<FuncionarioFamiliar> FuncionarioFamiliars { get; set; } = null!;
    public virtual DbSet<FuncionarioGuarderium> FuncionarioGuarderia { get; set; } = null!;
    public virtual DbSet<FuncionarioSeleccion> FuncionarioSeleccions { get; set; } = null!;
    public virtual DbSet<FuncionarioSeleccionDet> FuncionarioSeleccionDets { get; set; } = null!;
    public virtual DbSet<FuncionarioTraslado> FuncionarioTraslados { get; set; } = null!;
    public virtual DbSet<FuncionarioTrasladoAprobacion> FuncionarioTrasladoAprobacions { get; set; } = null!;
    public virtual DbSet<FuncionarioTrasladoDet> FuncionarioTrasladoDets { get; set; } = null!;
    public virtual DbSet<FuncionarioTurno> FuncionarioTurnos { get; set; } = null!;
    public virtual DbSet<FuncionarioUniversidad> FuncionarioUniversidads { get; set; } = null!;
    public virtual DbSet<GarantiaTercero> GarantiaTerceros { get; set; } = null!;
    public virtual DbSet<GarantiaTerceroDet> GarantiaTerceroDets { get; set; } = null!;
    public virtual DbSet<Gasto> Gastos { get; set; } = null!;
    public virtual DbSet<GastoClasificacion> GastoClasificacions { get; set; } = null!;
    public virtual DbSet<GastoDocumento> GastoDocumentos { get; set; } = null!;
    public virtual DbSet<GastoMasivo> GastoMasivos { get; set; } = null!;
    public virtual DbSet<GastoRetencion> GastoRetencions { get; set; } = null!;
    public virtual DbSet<GastoRetencionDet> GastoRetencionDets { get; set; } = null!;
    public virtual DbSet<GastoRetencionIrp> GastoRetencionIrps { get; set; } = null!;
    public virtual DbSet<GddDocumento> GddDocumentos { get; set; } = null!;
    public virtual DbSet<GddTipo> GddTipos { get; set; } = null!;
    public virtual DbSet<GpwAprobadorTipoDocumento> GpwAprobadorTipoDocumentos { get; set; } = null!;
    public virtual DbSet<GpwArchivo> GpwArchivos { get; set; } = null!;
    public virtual DbSet<GpwDepartamento> GpwDepartamentos { get; set; } = null!;
    public virtual DbSet<GpwDocumento> GpwDocumentos { get; set; } = null!;
    public virtual DbSet<GpwDocumentoAprobacion> GpwDocumentoAprobacions { get; set; } = null!;
    public virtual DbSet<GpwDocumentoVerificacion> GpwDocumentoVerificacions { get; set; } = null!;
    public virtual DbSet<GpwDocumentoVerificadorAdicional> GpwDocumentoVerificadorAdicionals { get; set; } = null!;
    public virtual DbSet<GpwMedidaConductividad> GpwMedidaConductividads { get; set; } = null!;
    public virtual DbSet<GpwMedidaDureza> GpwMedidaDurezas { get; set; } = null!;
    public virtual DbSet<GpwMedidaTemperatura> GpwMedidaTemperaturas { get; set; } = null!;
    public virtual DbSet<GpwNoConformidad> GpwNoConformidads { get; set; } = null!;
    public virtual DbSet<GpwNoConformidadDisposicion> GpwNoConformidadDisposicions { get; set; } = null!;
    public virtual DbSet<GpwNoConformidadDisposicionComentario> GpwNoConformidadDisposicionComentarios { get; set; } = null!;
    public virtual DbSet<GpwNoConformidadInforme> GpwNoConformidadInformes { get; set; } = null!;
    public virtual DbSet<GpwNoConformidadLote> GpwNoConformidadLotes { get; set; } = null!;
    public virtual DbSet<GpwOrigenAgua> GpwOrigenAguas { get; set; } = null!;
    public virtual DbSet<GpwPermiso> GpwPermisos { get; set; } = null!;
    public virtual DbSet<GpwReclamo> GpwReclamos { get; set; } = null!;
    public virtual DbSet<GpwReclamoAccion> GpwReclamoAccions { get; set; } = null!;
    public virtual DbSet<GpwReclamoLogistica> GpwReclamoLogisticas { get; set; } = null!;
    public virtual DbSet<GpwReclamoLote> GpwReclamoLotes { get; set; } = null!;
    public virtual DbSet<GpwRol> GpwRols { get; set; } = null!;
    public virtual DbSet<GpwRolFuncionario> GpwRolFuncionarios { get; set; } = null!;
    public virtual DbSet<GpwRolPermiso> GpwRolPermisos { get; set; } = null!;
    public virtual DbSet<GpwSession> GpwSessions { get; set; } = null!;
    public virtual DbSet<GpwSubtipoNoConformidad> GpwSubtipoNoConformidads { get; set; } = null!;
    public virtual DbSet<GpwTipoDisposicion> GpwTipoDisposicions { get; set; } = null!;
    public virtual DbSet<GpwTipoDocumento> GpwTipoDocumentos { get; set; } = null!;
    public virtual DbSet<GpwTipoNoConformidad> GpwTipoNoConformidads { get; set; } = null!;
    public virtual DbSet<GpwTipoNoConformidadXClase> GpwTipoNoConformidadXClases { get; set; } = null!;
    public virtual DbSet<GpwTipoReclamo> GpwTipoReclamos { get; set; } = null!;
    public virtual DbSet<GpwVerificadorTipoDocumento> GpwVerificadorTipoDocumentos { get; set; } = null!;
    public virtual DbSet<Grano> Granos { get; set; } = null!;
    public virtual DbSet<GratificacionFuncionario> GratificacionFuncionarios { get; set; } = null!;
    public virtual DbSet<HojaPago> HojaPagos { get; set; } = null!;
    public virtual DbSet<HojaPagoDet> HojaPagoDets { get; set; } = null!;
    public virtual DbSet<ImpDatoBancario> ImpDatoBancarios { get; set; } = null!;
    public virtual DbSet<ImpDatoBancarioDet> ImpDatoBancarioDets { get; set; } = null!;
    public virtual DbSet<ImpresionDocumento> ImpresionDocumentos { get; set; } = null!;
    public virtual DbSet<Incoterm> Incoterms { get; set; } = null!;
    public virtual DbSet<Informe> Informes { get; set; } = null!;
    public virtual DbSet<InformeBimestralMic> InformeBimestralMics { get; set; } = null!;
    public virtual DbSet<InformeBimestralMicSol> InformeBimestralMicSols { get; set; } = null!;
    public virtual DbSet<InformeBimestralMicSolDet> InformeBimestralMicSolDets { get; set; } = null!;
    public virtual DbSet<InformeLcCapacidadPago> InformeLcCapacidadPagos { get; set; } = null!;
    public virtual DbSet<InformeLcClieAccionistum> InformeLcClieAccionista { get; set; } = null!;
    public virtual DbSet<InformeLcClieAnalisi> InformeLcClieAnalises { get; set; } = null!;
    public virtual DbSet<InformeLcClieCualitativo> InformeLcClieCualitativos { get; set; } = null!;
    public virtual DbSet<InformeLcClieFact> InformeLcClieFacts { get; set; } = null!;
    public virtual DbSet<InformeLcClieGarante> InformeLcClieGarantes { get; set; } = null!;
    public virtual DbSet<InformeLcClieGarantia> InformeLcClieGarantias { get; set; } = null!;
    public virtual DbSet<InformeLcClieGrano> InformeLcClieGranos { get; set; } = null!;
    public virtual DbSet<InformeLcClieInmuebleTer> InformeLcClieInmuebleTers { get; set; } = null!;
    public virtual DbSet<InformeLcClieMaqTer> InformeLcClieMaqTers { get; set; } = null!;
    public virtual DbSet<InformeLcClieRecibir> InformeLcClieRecibirs { get; set; } = null!;
    public virtual DbSet<InformeLcClieRefCo> InformeLcClieRefCos { get; set; } = null!;
    public virtual DbSet<InformeLcClieTipoCredito> InformeLcClieTipoCreditos { get; set; } = null!;
    public virtual DbSet<InformeLcPromAtraso> InformeLcPromAtrasos { get; set; } = null!;
    public virtual DbSet<InformeLcRating> InformeLcRatings { get; set; } = null!;
    public virtual DbSet<InformeLcScoring> InformeLcScorings { get; set; } = null!;
    public virtual DbSet<InformeLcScoringRating> InformeLcScoringRatings { get; set; } = null!;
    public virtual DbSet<InformeLineacredClieBal> InformeLineacredClieBals { get; set; } = null!;
    public virtual DbSet<InformeLineacredCliente> InformeLineacredClientes { get; set; } = null!;
    public virtual DbSet<Ingrediente> Ingredientes { get; set; } = null!;
    public virtual DbSet<IngredienteComposicion> IngredienteComposicions { get; set; } = null!;
    public virtual DbSet<Ingreso> Ingresos { get; set; } = null!;
    public virtual DbSet<IntegracionLe> IntegracionLes { get; set; } = null!;
    public virtual DbSet<IntegracionLeDet> IntegracionLeDets { get; set; } = null!;
    public virtual DbSet<IntegracionLeHijo> IntegracionLeHijos { get; set; } = null!;
    public virtual DbSet<IntegralizacionProcedimiento> IntegralizacionProcedimientos { get; set; } = null!;
    public virtual DbSet<Juzgado> Juzgados { get; set; } = null!;
    public virtual DbSet<Laboratorio> Laboratorios { get; set; } = null!;
    public virtual DbSet<LaboratorioEstado> LaboratorioEstados { get; set; } = null!;
    public virtual DbSet<LaboratorioMezcla> LaboratorioMezclas { get; set; } = null!;
    public virtual DbSet<LcAnalisisPorUsu> LcAnalisisPorUsus { get; set; } = null!;
    public virtual DbSet<LcCapacidadPago> LcCapacidadPagos { get; set; } = null!;
    public virtual DbSet<LcDocumento> LcDocumentos { get; set; } = null!;
    public virtual DbSet<LcExcepcion> LcExcepcions { get; set; } = null!;
    public virtual DbSet<LcExcepcionDet> LcExcepcionDets { get; set; } = null!;
    public virtual DbSet<LcGarantiasOfrec> LcGarantiasOfrecs { get; set; } = null!;
    public virtual DbSet<LcGarantium> LcGarantia { get; set; } = null!;
    public virtual DbSet<LcTipoCredito> LcTipoCreditos { get; set; } = null!;
    public virtual DbSet<LimiteCargaRemisionExp> LimiteCargaRemisionExps { get; set; } = null!;
    public virtual DbSet<LineaCredito> LineaCreditos { get; set; } = null!;
    public virtual DbSet<LineaCreditoAdicional> LineaCreditoAdicionals { get; set; } = null!;
    public virtual DbSet<LineaCreditoDocumento> LineaCreditoDocumentos { get; set; } = null!;
    public virtual DbSet<LineaCreditoGarantium> LineaCreditoGarantia { get; set; } = null!;
    public virtual DbSet<LiquidacionFuncionario> LiquidacionFuncionarios { get; set; } = null!;
    public virtual DbSet<LiquidacionFuncionarioDet> LiquidacionFuncionarioDets { get; set; } = null!;
    public virtual DbSet<ListaPrecio> ListaPrecios { get; set; } = null!;
    public virtual DbSet<ListaPrecioDet> ListaPrecioDets { get; set; } = null!;
    public virtual DbSet<ListaPrecioServicio> ListaPrecioServicios { get; set; } = null!;
    public virtual DbSet<Log> Logs { get; set; } = null!;
    public virtual DbSet<LogFabrilOp> LogFabrilOps { get; set; } = null!;
    public virtual DbSet<LogImpresionEtiquetum> LogImpresionEtiqueta { get; set; } = null!;
    public virtual DbSet<LogMovimientoDeposito> LogMovimientoDepositos { get; set; } = null!;
    public virtual DbSet<LogVersion> LogVersions { get; set; } = null!;
    public virtual DbSet<Lote> Lotes { get; set; } = null!;
    public virtual DbSet<LoteInc> LoteIncs { get; set; } = null!;
    public virtual DbSet<LoteKude> LoteKudes { get; set; } = null!;
    public virtual DbSet<LpPrecioAutorizar> LpPrecioAutorizars { get; set; } = null!;
    public virtual DbSet<MailAutorizacionProduccion> MailAutorizacionProduccions { get; set; } = null!;
    public virtual DbSet<MailEvento> MailEventos { get; set; } = null!;
    public virtual DbSet<MailSolicitudProducto> MailSolicitudProductos { get; set; } = null!;
    public virtual DbSet<MailUsuarioEvento> MailUsuarioEventos { get; set; } = null!;
    public virtual DbSet<MarcaProducto> MarcaProductos { get; set; } = null!;
    public virtual DbSet<MateriaDet> MateriaDets { get; set; } = null!;
    public virtual DbSet<Material> Materials { get; set; } = null!;
    public virtual DbSet<Materium> Materia { get; set; } = null!;
    public virtual DbSet<Mercado> Mercados { get; set; } = null!;
    public virtual DbSet<MetasGrano> MetasGranos { get; set; } = null!;
    public virtual DbSet<MigracionCambioLoteG1> MigracionCambioLoteG1s { get; set; } = null!;
    public virtual DbSet<MktParcela> MktParcelas { get; set; } = null!;
    public virtual DbSet<Modelo> Modelos { get; set; } = null!;
    public virtual DbSet<Municipio> Municipios { get; set; } = null!;
    public virtual DbSet<Nacionalidad> Nacionalidads { get; set; } = null!;
    public virtual DbSet<NoConformidadSeguimiento> NoConformidadSeguimientos { get; set; } = null!;
    public virtual DbSet<NotaCredito> NotaCreditos { get; set; } = null!;
    public virtual DbSet<NotaCreditoCalculo> NotaCreditoCalculos { get; set; } = null!;
    public virtual DbSet<NotaCreditoLote> NotaCreditoLotes { get; set; } = null!;
    public virtual DbSet<NotaCreditoMotivo> NotaCreditoMotivos { get; set; } = null!;
    public virtual DbSet<NotaCreditoProducto> NotaCreditoProductos { get; set; } = null!;
    public virtual DbSet<NotaCreditoProveedor> NotaCreditoProveedors { get; set; } = null!;
    public virtual DbSet<NotaCreditoProveedorFat> NotaCreditoProveedorFats { get; set; } = null!;
    public virtual DbSet<NotaCreditoProveedorPro> NotaCreditoProveedorPros { get; set; } = null!;
    public virtual DbSet<NotaDebito> NotaDebitos { get; set; } = null!;
    public virtual DbSet<NotaDebitoProducto> NotaDebitoProductos { get; set; } = null!;
    public virtual DbSet<NotaDevolucion> NotaDevolucions { get; set; } = null!;
    public virtual DbSet<NotaDevolucionProducto> NotaDevolucionProductos { get; set; } = null!;
    public virtual DbSet<NotaEnvio> NotaEnvios { get; set; } = null!;
    public virtual DbSet<NotaEnvioProducto> NotaEnvioProductos { get; set; } = null!;
    public virtual DbSet<NotaEnvioRemisionAtraso> NotaEnvioRemisionAtrasos { get; set; } = null!;
    public virtual DbSet<NotaEnvioRemisionDifPeso> NotaEnvioRemisionDifPesos { get; set; } = null!;
    public virtual DbSet<NotaRemision> NotaRemisions { get; set; } = null!;
    public virtual DbSet<NotaRemisionExp> NotaRemisionExps { get; set; } = null!;
    public virtual DbSet<NotaRemisionExpProducto> NotaRemisionExpProductos { get; set; } = null!;
    public virtual DbSet<NotaRemisionMotivo> NotaRemisionMotivos { get; set; } = null!;
    public virtual DbSet<NotaRemisionProducto> NotaRemisionProductos { get; set; } = null!;
    public virtual DbSet<NotaRemisionRechazo> NotaRemisionRechazos { get; set; } = null!;
    public virtual DbSet<NotaRemisionVentum> NotaRemisionVenta { get; set; } = null!;
    public virtual DbSet<NumeroFolio> NumeroFolios { get; set; } = null!;
    public virtual DbSet<OpDeposito> OpDepositos { get; set; } = null!;
    public virtual DbSet<OrdenCarga> OrdenCargas { get; set; } = null!;
    public virtual DbSet<OrdenCargaDet> OrdenCargaDets { get; set; } = null!;
    public virtual DbSet<Pagar> Pagars { get; set; } = null!;
    public virtual DbSet<PagarPago> PagarPagos { get; set; } = null!;
    public virtual DbSet<PagarPagoFactura> PagarPagoFacturas { get; set; } = null!;
    public virtual DbSet<PagarPagoFormaPago> PagarPagoFormaPagos { get; set; } = null!;
    public virtual DbSet<PagarPagoRetencion> PagarPagoRetencions { get; set; } = null!;
    public virtual DbSet<PagarPagoRetencionDet> PagarPagoRetencionDets { get; set; } = null!;
    public virtual DbSet<PagarPagoRetencionIra> PagarPagoRetencionIras { get; set; } = null!;
    public virtual DbSet<PagarPagoRetencionIrp> PagarPagoRetencionIrps { get; set; } = null!;
    public virtual DbSet<Pagare> Pagares { get; set; } = null!;
    public virtual DbSet<PagareCodeudor> PagareCodeudors { get; set; } = null!;
    public virtual DbSet<PagareFactura> PagareFacturas { get; set; } = null!;
    public virtual DbSet<Pai> Pais { get; set; } = null!;
    public virtual DbSet<Pedido> Pedidos { get; set; } = null!;
    public virtual DbSet<PedidoCancelacion> PedidoCancelacions { get; set; } = null!;
    public virtual DbSet<PedidoCancelacionProducto> PedidoCancelacionProductos { get; set; } = null!;
    public virtual DbSet<PedidoCompra> PedidoCompras { get; set; } = null!;
    public virtual DbSet<PedidoCompraCan> PedidoCompraCans { get; set; } = null!;
    public virtual DbSet<PedidoCompraCanProducto> PedidoCompraCanProductos { get; set; } = null!;
    public virtual DbSet<PedidoCompraExterior> PedidoCompraExteriors { get; set; } = null!;
    public virtual DbSet<PedidoCompraExteriorCan> PedidoCompraExteriorCans { get; set; } = null!;
    public virtual DbSet<PedidoCompraExteriorCanDet> PedidoCompraExteriorCanDets { get; set; } = null!;
    public virtual DbSet<PedidoCompraExteriorDet> PedidoCompraExteriorDets { get; set; } = null!;
    public virtual DbSet<PedidoCompraExteriorSolicitante> PedidoCompraExteriorSolicitantes { get; set; } = null!;
    public virtual DbSet<PedidoCompraProducto> PedidoCompraProductos { get; set; } = null!;
    public virtual DbSet<PedidoDistribucion> PedidoDistribucions { get; set; } = null!;
    public virtual DbSet<PedidoDistribucionAux> PedidoDistribucionAuxes { get; set; } = null!;
    public virtual DbSet<PedidoDistribucionDet> PedidoDistribucionDets { get; set; } = null!;
    public virtual DbSet<PedidoHist> PedidoHists { get; set; } = null!;
    public virtual DbSet<PedidoImp> PedidoImps { get; set; } = null!;
    public virtual DbSet<PedidoImpDet> PedidoImpDets { get; set; } = null!;
    public virtual DbSet<PedidoPlaComex> PedidoPlaComices { get; set; } = null!;
    public virtual DbSet<PedidoPlaComexCan> PedidoPlaComexCans { get; set; } = null!;
    public virtual DbSet<PedidoPlaComexDet> PedidoPlaComexDets { get; set; } = null!;
    public virtual DbSet<PedidoPlaComexDetFecha> PedidoPlaComexDetFechas { get; set; } = null!;
    public virtual DbSet<PedidoProducto> PedidoProductos { get; set; } = null!;
    public virtual DbSet<PedidoProductoHist> PedidoProductoHists { get; set; } = null!;
    public virtual DbSet<PedidoTalonario> PedidoTalonarios { get; set; } = null!;
    public virtual DbSet<PedidoVencimiento> PedidoVencimientos { get; set; } = null!;
    public virtual DbSet<PedidoVersion> PedidoVersions { get; set; } = null!;
    public virtual DbSet<Pesaje> Pesajes { get; set; } = null!;
    public virtual DbSet<PesajeMonsanto> PesajeMonsantos { get; set; } = null!;
    public virtual DbSet<PesajeRomaneo> PesajeRomaneos { get; set; } = null!;
    public virtual DbSet<PesajeRomaneoCosecha> PesajeRomaneoCosechas { get; set; } = null!;
    public virtual DbSet<PesajeRomaneoSiembra> PesajeRomaneoSiembras { get; set; } = null!;
    public virtual DbSet<PictogramaRiesgo> PictogramaRiesgos { get; set; } = null!;
    public virtual DbSet<PlanCompra> PlanCompras { get; set; } = null!;
    public virtual DbSet<PlanCompraProducto> PlanCompraProductos { get; set; } = null!;
    public virtual DbSet<PlanCuentaClase> PlanCuentaClases { get; set; } = null!;
    public virtual DbSet<PlanCuentaGrupo> PlanCuentaGrupos { get; set; } = null!;
    public virtual DbSet<PlanCuentaPreSet> PlanCuentaPreSets { get; set; } = null!;
    public virtual DbSet<PlanCuentaSet> PlanCuentaSets { get; set; } = null!;
    public virtual DbSet<PlanCuentaSubgrupo> PlanCuentaSubgrupos { get; set; } = null!;
    public virtual DbSet<PlanCuentum> PlanCuenta { get; set; } = null!;
    public virtual DbSet<PorcentajeIrp> PorcentajeIrps { get; set; } = null!;
    public virtual DbSet<PrecioFlete> PrecioFletes { get; set; } = null!;
    public virtual DbSet<PrecioFleteDe> PrecioFleteDes { get; set; } = null!;
    public virtual DbSet<PrecioFleteExp> PrecioFleteExps { get; set; } = null!;
    public virtual DbSet<PrecioFleteExpDeposito> PrecioFleteExpDepositos { get; set; } = null!;
    public virtual DbSet<PrecioFleteExpLote> PrecioFleteExpLotes { get; set; } = null!;
    public virtual DbSet<PrecioFleteImportacion> PrecioFleteImportacions { get; set; } = null!;
    public virtual DbSet<PrecioFleteImportacionDet> PrecioFleteImportacionDets { get; set; } = null!;
    public virtual DbSet<PrecioFleteOri> PrecioFleteOris { get; set; } = null!;
    public virtual DbSet<PrestamoBancario> PrestamoBancarios { get; set; } = null!;
    public virtual DbSet<PrestamoBancarioDet> PrestamoBancarioDets { get; set; } = null!;
    public virtual DbSet<PrestamoCliente> PrestamoClientes { get; set; } = null!;
    public virtual DbSet<PrestamoFuncionario> PrestamoFuncionarios { get; set; } = null!;
    public virtual DbSet<PrestamoFuncionarioDetalle> PrestamoFuncionarioDetalles { get; set; } = null!;
    public virtual DbSet<PresupuestoGrupo> PresupuestoGrupos { get; set; } = null!;
    public virtual DbSet<PresupuestoProyectado> PresupuestoProyectados { get; set; } = null!;
    public virtual DbSet<PresupuestoSubGrupo> PresupuestoSubGrupos { get; set; } = null!;
    public virtual DbSet<PrevisionCliente> PrevisionClientes { get; set; } = null!;
    public virtual DbSet<PrevisionClienteBloqueo> PrevisionClienteBloqueos { get; set; } = null!;
    public virtual DbSet<PrevisionClienteDetalle> PrevisionClienteDetalles { get; set; } = null!;
    public virtual DbSet<PrevisionVentaBloqueo> PrevisionVentaBloqueos { get; set; } = null!;
    public virtual DbSet<PrevisionVentaCan> PrevisionVentaCans { get; set; } = null!;
    public virtual DbSet<PrevisionVentaCanDetalle> PrevisionVentaCanDetalles { get; set; } = null!;
    public virtual DbSet<PrevisionVentaDetalle> PrevisionVentaDetalles { get; set; } = null!;
    public virtual DbSet<PrevisionVentum> PrevisionVenta { get; set; } = null!;
    public virtual DbSet<ProcesoBloqueado> ProcesoBloqueados { get; set; } = null!;
    public virtual DbSet<ProcesoBloqueo> ProcesoBloqueos { get; set; } = null!;
    public virtual DbSet<ProcesoDesbloqueo> ProcesoDesbloqueos { get; set; } = null!;
    public virtual DbSet<Produccion> Produccions { get; set; } = null!;
    public virtual DbSet<ProduccionCierre> ProduccionCierres { get; set; } = null!;
    public virtual DbSet<ProduccionCierreComp> ProduccionCierreComps { get; set; } = null!;
    public virtual DbSet<ProduccionCierreCompInc> ProduccionCierreCompIncs { get; set; } = null!;
    public virtual DbSet<ProduccionCierreLiqLav> ProduccionCierreLiqLavs { get; set; } = null!;
    public virtual DbSet<ProduccionCierreMicronizado> ProduccionCierreMicronizados { get; set; } = null!;
    public virtual DbSet<ProduccionCierreMotParadum> ProduccionCierreMotParada { get; set; } = null!;
    public virtual DbSet<ProduccionCierreParadum> ProduccionCierreParada { get; set; } = null!;
    public virtual DbSet<ProduccionComposicion> ProduccionComposicions { get; set; } = null!;
    public virtual DbSet<ProduccionComposicionCalculoAux> ProduccionComposicionCalculoAuxes { get; set; } = null!;
    public virtual DbSet<ProduccionComposicionInc> ProduccionComposicionIncs { get; set; } = null!;
    public virtual DbSet<ProduccionEtapa> ProduccionEtapas { get; set; } = null!;
    public virtual DbSet<Producto> Productos { get; set; } = null!;
    public virtual DbSet<ProductoAtributoMic> ProductoAtributoMics { get; set; } = null!;
    public virtual DbSet<ProductoCatCargaFabril> ProductoCatCargaFabrils { get; set; } = null!;
    public virtual DbSet<ProductoCategorium> ProductoCategoria { get; set; } = null!;
    public virtual DbSet<ProductoClase> ProductoClases { get; set; } = null!;
    public virtual DbSet<ProductoCostoOpDif> ProductoCostoOpDifs { get; set; } = null!;
    public virtual DbSet<ProductoCultivo> ProductoCultivos { get; set; } = null!;
    public virtual DbSet<ProductoFabricanteExt> ProductoFabricanteExts { get; set; } = null!;
    public virtual DbSet<ProductoFormPieAnalisisDet> ProductoFormPieAnalisisDets { get; set; } = null!;
    public virtual DbSet<ProductoFormula> ProductoFormulas { get; set; } = null!;
    public virtual DbSet<ProductoFormulaComp> ProductoFormulaComps { get; set; } = null!;
    public virtual DbSet<ProductoFormulaLiquidoLavado> ProductoFormulaLiquidoLavados { get; set; } = null!;
    public virtual DbSet<ProductoFormulaPie> ProductoFormulaPies { get; set; } = null!;
    public virtual DbSet<ProductoFormulaPieAnalisi> ProductoFormulaPieAnalises { get; set; } = null!;
    public virtual DbSet<ProductoGrupo> ProductoGrupos { get; set; } = null!;
    public virtual DbSet<ProductoLiquidoLavado> ProductoLiquidoLavados { get; set; } = null!;
    public virtual DbSet<ProductoMicronizado> ProductoMicronizados { get; set; } = null!;
    public virtual DbSet<ProductoOpAjuste> ProductoOpAjustes { get; set; } = null!;
    public virtual DbSet<ProductoPlancuentum> ProductoPlancuenta { get; set; } = null!;
    public virtual DbSet<ProductoRelacionado> ProductoRelacionados { get; set; } = null!;
    public virtual DbSet<ProformaCargaExportacion> ProformaCargaExportacions { get; set; } = null!;
    public virtual DbSet<ProformaCargaExportacionDet> ProformaCargaExportacionDets { get; set; } = null!;
    public virtual DbSet<ProformaImportacion> ProformaImportacions { get; set; } = null!;
    public virtual DbSet<ProformaImportacionDet> ProformaImportacionDets { get; set; } = null!;
    public virtual DbSet<ProformaPagoVencimientoImp> ProformaPagoVencimientoImps { get; set; } = null!;
    public virtual DbSet<Protocolo> Protocolos { get; set; } = null!;
    public virtual DbSet<ProtocoloContrato> ProtocoloContratos { get; set; } = null!;
    public virtual DbSet<ProtocoloDocLegal> ProtocoloDocLegals { get; set; } = null!;
    public virtual DbSet<ProtocoloGarantium> ProtocoloGarantia { get; set; } = null!;
    public virtual DbSet<ProtocoloLiquidacion> ProtocoloLiquidacions { get; set; } = null!;
    public virtual DbSet<ProtocoloPagare> ProtocoloPagares { get; set; } = null!;
    public virtual DbSet<ProtocoloPagareProv> ProtocoloPagareProvs { get; set; } = null!;
    public virtual DbSet<Proveedor> Proveedors { get; set; } = null!;
    public virtual DbSet<ProveedorAccionistum> ProveedorAccionista { get; set; } = null!;
    public virtual DbSet<ProveedorClase> ProveedorClases { get; set; } = null!;
    public virtual DbSet<ProveedorCliente> ProveedorClientes { get; set; } = null!;
    public virtual DbSet<ProveedorContacto> ProveedorContactos { get; set; } = null!;
    public virtual DbSet<ProveedorCuentum> ProveedorCuenta { get; set; } = null!;
    public virtual DbSet<ProveedorRefComercial> ProveedorRefComercials { get; set; } = null!;
    public virtual DbSet<ProveedorTasa> ProveedorTasas { get; set; } = null!;
    public virtual DbSet<ProveedorTimbrado> ProveedorTimbrados { get; set; } = null!;
    public virtual DbSet<ProvisionFlete> ProvisionFletes { get; set; } = null!;
    public virtual DbSet<ProvisionFleteDet> ProvisionFleteDets { get; set; } = null!;
    public virtual DbSet<ProvisionFleteDoc> ProvisionFleteDocs { get; set; } = null!;
    public virtual DbSet<Puerto> Puertos { get; set; } = null!;
    public virtual DbSet<QuejaSugerencium> QuejaSugerencia { get; set; } = null!;
    public virtual DbSet<QuiebraSobra> QuiebraSobras { get; set; } = null!;
    public virtual DbSet<RecepEnvio> RecepEnvios { get; set; } = null!;
    public virtual DbSet<RecepEnvioProducto> RecepEnvioProductos { get; set; } = null!;
    public virtual DbSet<Recibir> Recibirs { get; set; } = null!;
    public virtual DbSet<RecibirCobro> RecibirCobros { get; set; } = null!;
    public virtual DbSet<RecibirCobroFactura> RecibirCobroFacturas { get; set; } = null!;
    public virtual DbSet<RecibirCobroFormaCobro> RecibirCobroFormaCobros { get; set; } = null!;
    public virtual DbSet<RecibirCobroRecibo> RecibirCobroRecibos { get; set; } = null!;
    public virtual DbSet<Recibo> Recibos { get; set; } = null!;
    public virtual DbSet<ReciboAdelanto> ReciboAdelantos { get; set; } = null!;
    public virtual DbSet<ReciboCheque> ReciboCheques { get; set; } = null!;
    public virtual DbSet<ReciboFactura> ReciboFacturas { get; set; } = null!;
    public virtual DbSet<ReciboRetencion> ReciboRetencions { get; set; } = null!;
    public virtual DbSet<RegClaseClaseusoDet> RegClaseClaseusoDets { get; set; } = null!;
    public virtual DbSet<RegClaseMarca> RegClaseMarcas { get; set; } = null!;
    public virtual DbSet<RegClaseUso> RegClaseUsos { get; set; } = null!;
    public virtual DbSet<RegEstadoMarca> RegEstadoMarcas { get; set; } = null!;
    public virtual DbSet<RegMarca> RegMarcas { get; set; } = null!;
    public virtual DbSet<RegMarcaClaseDet> RegMarcaClaseDets { get; set; } = null!;
    public virtual DbSet<RegMarcaDet> RegMarcaDets { get; set; } = null!;
    public virtual DbSet<RegMarcaLogo> RegMarcaLogos { get; set; } = null!;
    public virtual DbSet<RegMarcaOp> RegMarcaOps { get; set; } = null!;
    public virtual DbSet<RegMarcaOpDet> RegMarcaOpDets { get; set; } = null!;
    public virtual DbSet<RegMovEstado> RegMovEstados { get; set; } = null!;
    public virtual DbSet<RegMovimiento> RegMovimientos { get; set; } = null!;
    public virtual DbSet<RegSituacionMarca> RegSituacionMarcas { get; set; } = null!;
    public virtual DbSet<RegSolicitudProCla> RegSolicitudProClas { get; set; } = null!;
    public virtual DbSet<RegSolicitudProLogo> RegSolicitudProLogos { get; set; } = null!;
    public virtual DbSet<RegSolicitudProceso> RegSolicitudProcesos { get; set; } = null!;
    public virtual DbSet<Region> Regions { get; set; } = null!;
    public virtual DbSet<Reloj> Relojs { get; set; } = null!;
    public virtual DbSet<RemesaTercero> RemesaTerceros { get; set; } = null!;
    public virtual DbSet<RemesaTerceroProducto> RemesaTerceroProductos { get; set; } = null!;
    public virtual DbSet<RemisionCompra> RemisionCompras { get; set; } = null!;
    public virtual DbSet<RemisionCompraProducto> RemisionCompraProductos { get; set; } = null!;
    public virtual DbSet<RemisionCompraProductoPallet> RemisionCompraProductoPallets { get; set; } = null!;
    public virtual DbSet<Rendicion> Rendicions { get; set; } = null!;
    public virtual DbSet<RendicionFactura> RendicionFacturas { get; set; } = null!;
    public virtual DbSet<Requisicion> Requisicions { get; set; } = null!;
    public virtual DbSet<RequisicionProdEntrega> RequisicionProdEntregas { get; set; } = null!;
    public virtual DbSet<RequisicionProdEntregaDet> RequisicionProdEntregaDets { get; set; } = null!;
    public virtual DbSet<RequisicionProducto> RequisicionProductos { get; set; } = null!;
    public virtual DbSet<RetencionManual> RetencionManuals { get; set; } = null!;
    public virtual DbSet<RetencionManualDet> RetencionManualDets { get; set; } = null!;
    public virtual DbSet<RetencionValor> RetencionValors { get; set; } = null!;
    public virtual DbSet<RevaluoBien> RevaluoBiens { get; set; } = null!;
    public virtual DbSet<RevaluoClase> RevaluoClases { get; set; } = null!;
    public virtual DbSet<RevaluoCoeficiente> RevaluoCoeficientes { get; set; } = null!;
    public virtual DbSet<RevaluoGrupo> RevaluoGrupos { get; set; } = null!;
    public virtual DbSet<RevaluoItem> RevaluoItems { get; set; } = null!;
    public virtual DbSet<RodadoAccidenteVehicular> RodadoAccidenteVehiculars { get; set; } = null!;
    public virtual DbSet<RubroRodado> RubroRodados { get; set; } = null!;
    public virtual DbSet<SectorLinea> SectorLineas { get; set; } = null!;
    public virtual DbSet<SeguroMedico> SeguroMedicos { get; set; } = null!;
    public virtual DbSet<SeguroPoliza> SeguroPolizas { get; set; } = null!;
    public virtual DbSet<SeguroPolizaDet> SeguroPolizaDets { get; set; } = null!;
    public virtual DbSet<SeguroSiniestro> SeguroSiniestros { get; set; } = null!;
    public virtual DbSet<SeguroSiniestroDocumento> SeguroSiniestroDocumentos { get; set; } = null!;
    public virtual DbSet<SeguroTipoBien> SeguroTipoBiens { get; set; } = null!;
    public virtual DbSet<SeguroTipoPoliza> SeguroTipoPolizas { get; set; } = null!;
    public virtual DbSet<SeguroTipoSiniestro> SeguroTipoSiniestros { get; set; } = null!;
    public virtual DbSet<SerieEtapa> SerieEtapas { get; set; } = null!;
    public virtual DbSet<SerieSectorLinea> SerieSectorLineas { get; set; } = null!;
    public virtual DbSet<Servicio> Servicios { get; set; } = null!;
    public virtual DbSet<SigassAccidente> SigassAccidentes { get; set; } = null!;
    public virtual DbSet<SigassCapacitacion> SigassCapacitacions { get; set; } = null!;
    public virtual DbSet<SigassCapacitacionDet> SigassCapacitacionDets { get; set; } = null!;
    public virtual DbSet<SigassCapacitacionParticipante> SigassCapacitacionParticipantes { get; set; } = null!;
    public virtual DbSet<SigassConsumoAgua> SigassConsumoAguas { get; set; } = null!;
    public virtual DbSet<SigassDesinfeccionLocal> SigassDesinfeccionLocals { get; set; } = null!;
    public virtual DbSet<SigassDesinfeccionLocalDet> SigassDesinfeccionLocalDets { get; set; } = null!;
    public virtual DbSet<SigassDocumentoAmbiental> SigassDocumentoAmbientals { get; set; } = null!;
    public virtual DbSet<SigassGfw> SigassGfws { get; set; } = null!;
    public virtual DbSet<SigassIndiceAccidente> SigassIndiceAccidentes { get; set; } = null!;
    public virtual DbSet<SigassIndiceAccidenteDet> SigassIndiceAccidenteDets { get; set; } = null!;
    public virtual DbSet<SigassPermiso> SigassPermisos { get; set; } = null!;
    public virtual DbSet<SigassPermisoDet> SigassPermisoDets { get; set; } = null!;
    public virtual DbSet<SigassReforestacion> SigassReforestacions { get; set; } = null!;
    public virtual DbSet<SigevBoletaProductor> SigevBoletaProductors { get; set; } = null!;
    public virtual DbSet<SigevBoletaProductorDet> SigevBoletaProductorDets { get; set; } = null!;
    public virtual DbSet<SigevCarga> SigevCargas { get; set; } = null!;
    public virtual DbSet<SigevCargaProducto> SigevCargaProductos { get; set; } = null!;
    public virtual DbSet<SigevClasificacion> SigevClasificacions { get; set; } = null!;
    public virtual DbSet<SigevClasificacionCon> SigevClasificacionCons { get; set; } = null!;
    public virtual DbSet<SigevClasificacionDet> SigevClasificacionDets { get; set; } = null!;
    public virtual DbSet<SigevControlEnvase> SigevControlEnvases { get; set; } = null!;
    public virtual DbSet<SigevControlEnvaseDet> SigevControlEnvaseDets { get; set; } = null!;
    public virtual DbSet<SigevControlResiduo> SigevControlResiduos { get; set; } = null!;
    public virtual DbSet<SigevEnvase> SigevEnvases { get; set; } = null!;
    public virtual DbSet<SigevProduccion> SigevProduccions { get; set; } = null!;
    public virtual DbSet<SigevProduccionDet> SigevProduccionDets { get; set; } = null!;
    public virtual DbSet<SolicitudBorrado> SolicitudBorrados { get; set; } = null!;
    public virtual DbSet<SolicitudLavado> SolicitudLavados { get; set; } = null!;
    public virtual DbSet<SolicitudPermiso> SolicitudPermisos { get; set; } = null!;
    public virtual DbSet<SolicitudPermisoIp> SolicitudPermisoIps { get; set; } = null!;
    public virtual DbSet<SolicitudProductoMic> SolicitudProductoMics { get; set; } = null!;
    public virtual DbSet<SolicitudRepuesto> SolicitudRepuestos { get; set; } = null!;
    public virtual DbSet<SolicitudRevisionSalarial> SolicitudRevisionSalarials { get; set; } = null!;
    public virtual DbSet<SolicitudRevisionSalarialDet> SolicitudRevisionSalarialDets { get; set; } = null!;
    public virtual DbSet<SolicitudVacacion> SolicitudVacacions { get; set; } = null!;
    public virtual DbSet<SolicitudVehiculo> SolicitudVehiculos { get; set; } = null!;
    public virtual DbSet<Stock> Stocks { get; set; } = null!;
    public virtual DbSet<StockCosto> StockCostos { get; set; } = null!;
    public virtual DbSet<StockCostoMedioContable> StockCostoMedioContables { get; set; } = null!;
    public virtual DbSet<StockMinimo> StockMinimos { get; set; } = null!;
    public virtual DbSet<StockReserva> StockReservas { get; set; } = null!;
    public virtual DbSet<StockReservaCargaExp> StockReservaCargaExps { get; set; } = null!;
    public virtual DbSet<StockReservaConsumo> StockReservaConsumos { get; set; } = null!;
    public virtual DbSet<StockReservaProducto> StockReservaProductos { get; set; } = null!;
    public virtual DbSet<StockUbicacion> StockUbicacions { get; set; } = null!;
    public virtual DbSet<Tabla> Tablas { get; set; } = null!;
    public virtual DbSet<TablaCodigo> TablaCodigos { get; set; } = null!;
    public virtual DbSet<TallerEspecialidadOt> TallerEspecialidadOts { get; set; } = null!;
    public virtual DbSet<TallerEspecialidadRutina> TallerEspecialidadRutinas { get; set; } = null!;
    public virtual DbSet<TallerGuardium> TallerGuardia { get; set; } = null!;
    public virtual DbSet<TallerMovimiento> TallerMovimientos { get; set; } = null!;
    public virtual DbSet<TallerOrdenTrabajo> TallerOrdenTrabajos { get; set; } = null!;
    public virtual DbSet<TallerOrdenTrabajoCierre> TallerOrdenTrabajoCierres { get; set; } = null!;
    public virtual DbSet<TallerOrdenTrabajoConformidad> TallerOrdenTrabajoConformidads { get; set; } = null!;
    public virtual DbSet<TallerPedidoTrabajo> TallerPedidoTrabajos { get; set; } = null!;
    public virtual DbSet<TallerPedidoTrabajoAdjunto> TallerPedidoTrabajoAdjuntos { get; set; } = null!;
    public virtual DbSet<TallerRutina> TallerRutinas { get; set; } = null!;
    public virtual DbSet<TallerRutinaCierre> TallerRutinaCierres { get; set; } = null!;
    public virtual DbSet<TallerRutinaReprogramar> TallerRutinaReprogramars { get; set; } = null!;
    public virtual DbSet<TallerTipoOt> TallerTipoOts { get; set; } = null!;
    public virtual DbSet<TallerTipoRutina> TallerTipoRutinas { get; set; } = null!;
    public virtual DbSet<TiempoTraslado> TiempoTraslados { get; set; } = null!;
    public virtual DbSet<Timbrado> Timbrados { get; set; } = null!;
    public virtual DbSet<TimbradoExpedidor> TimbradoExpedidors { get; set; } = null!;
    public virtual DbSet<TimbradoExpedidorDet> TimbradoExpedidorDets { get; set; } = null!;
    public virtual DbSet<TimbradoNumeracion> TimbradoNumeracions { get; set; } = null!;
    public virtual DbSet<TipoActuacion> TipoActuacions { get; set; } = null!;
    public virtual DbSet<TipoAsiento> TipoAsientos { get; set; } = null!;
    public virtual DbSet<TipoAusencium> TipoAusencia { get; set; } = null!;
    public virtual DbSet<TipoCamion> TipoCamions { get; set; } = null!;
    public virtual DbSet<TipoComprobanteImp> TipoComprobanteImps { get; set; } = null!;
    public virtual DbSet<TipoEmbalajeComex> TipoEmbalajeComices { get; set; } = null!;
    public virtual DbSet<TipoProceso> TipoProcesos { get; set; } = null!;
    public virtual DbSet<TipoProducto> TipoProductos { get; set; } = null!;
    public virtual DbSet<TipoTransporte> TipoTransportes { get; set; } = null!;
    public virtual DbSet<TipoVehiculo> TipoVehiculos { get; set; } = null!;
    public virtual DbSet<TransfCreditoCliente> TransfCreditoClientes { get; set; } = null!;
    public virtual DbSet<TransfCreditoClienteDet> TransfCreditoClienteDets { get; set; } = null!;
    public virtual DbSet<TransfCreditoProvRetDet> TransfCreditoProvRetDets { get; set; } = null!;
    public virtual DbSet<TransfCreditoProveedor> TransfCreditoProveedors { get; set; } = null!;
    public virtual DbSet<TransfCreditoProveedorDet> TransfCreditoProveedorDets { get; set; } = null!;
    public virtual DbSet<TransfCreditoProveedorRetencion> TransfCreditoProveedorRetencions { get; set; } = null!;
    public virtual DbSet<TransfDeposito> TransfDepositos { get; set; } = null!;
    public virtual DbSet<TransfGrano> TransfGranos { get; set; } = null!;
    public virtual DbSet<TransfGranosRomaneo> TransfGranosRomaneos { get; set; } = null!;
    public virtual DbSet<TransfZafra> TransfZafras { get; set; } = null!;
    public virtual DbSet<TransferenciaCuentum> TransferenciaCuenta { get; set; } = null!;
    public virtual DbSet<Transformacion> Transformacions { get; set; } = null!;
    public virtual DbSet<TransformacionProducto> TransformacionProductos { get; set; } = null!;
    public virtual DbSet<Transportadora> Transportadoras { get; set; } = null!;
    public virtual DbSet<TransportadoraAjuste> TransportadoraAjustes { get; set; } = null!;
    public virtual DbSet<TransportadoraPrecio> TransportadoraPrecios { get; set; } = null!;
    public virtual DbSet<TransportadoraPrecioDet> TransportadoraPrecioDets { get; set; } = null!;
    public virtual DbSet<TransporteComex> TransporteComices { get; set; } = null!;
    public virtual DbSet<Turno> Turnos { get; set; } = null!;
    public virtual DbSet<UbicarCarga> UbicarCargas { get; set; } = null!;
    public virtual DbSet<UbicarCargaDet> UbicarCargaDets { get; set; } = null!;
    public virtual DbSet<UbicarTransf> UbicarTransfs { get; set; } = null!;
    public virtual DbSet<UbicarTransfDet> UbicarTransfDets { get; set; } = null!;
    public virtual DbSet<Usuario> Usuarios { get; set; } = null!;
    public virtual DbSet<UsuarioClave> UsuarioClaves { get; set; } = null!;
    public virtual DbSet<UsuarioEmpresa> UsuarioEmpresas { get; set; } = null!;
    public virtual DbSet<UsuarioForm> UsuarioForms { get; set; } = null!;
    public virtual DbSet<UsuarioUnidad> UsuarioUnidads { get; set; } = null!;
    public virtual DbSet<UtilesOficina> UtilesOficinas { get; set; } = null!;
    public virtual DbSet<VAgricola> VAgricolas { get; set; } = null!;
    public virtual DbSet<VAgricolaDevolucion> VAgricolaDevolucions { get; set; } = null!;
    public virtual DbSet<VAgricolaFormacion> VAgricolaFormacions { get; set; } = null!;
    public virtual DbSet<VAgricolaSolicitud> VAgricolaSolicituds { get; set; } = null!;
    public virtual DbSet<VAnalisisFijacion> VAnalisisFijacions { get; set; } = null!;
    public virtual DbSet<VAnalisisFijacionDeposito> VAnalisisFijacionDepositos { get; set; } = null!;
    public virtual DbSet<VAtcGerente> VAtcGerentes { get; set; } = null!;
    public virtual DbSet<VBiClientePrincipal> VBiClientePrincipals { get; set; } = null!;
    public virtual DbSet<VBiContratosDep> VBiContratosDeps { get; set; } = null!;
    public virtual DbSet<VBiContratosDepVenta> VBiContratosDepVentas { get; set; } = null!;
    public virtual DbSet<VBiDesarrollistaUlt> VBiDesarrollistaUlts { get; set; } = null!;
    public virtual DbSet<VCamion> VCamions { get; set; } = null!;
    public virtual DbSet<VCarga> VCargas { get; set; } = null!;
    public virtual DbSet<VCargo> VCargos { get; set; } = null!;
    public virtual DbSet<VChofer> VChofers { get; set; } = null!;
    public virtual DbSet<VCiudad> VCiudads { get; set; } = null!;
    public virtual DbSet<VCliente> VClientes { get; set; } = null!;
    public virtual DbSet<VClienteComercial> VClienteComercials { get; set; } = null!;
    public virtual DbSet<VClienteComercialNPrincipal> VClienteComercialNPrincipals { get; set; } = null!;
    public virtual DbSet<VClienteContacto> VClienteContactos { get; set; } = null!;
    public virtual DbSet<VClienteLocalEntrega> VClienteLocalEntregas { get; set; } = null!;
    public virtual DbSet<VClienteLocalEntregaHa> VClienteLocalEntregaHas { get; set; } = null!;
    public virtual DbSet<VClienteRelacionado> VClienteRelacionados { get; set; } = null!;
    public virtual DbSet<VClienteTotalFacturado> VClienteTotalFacturados { get; set; } = null!;
    public virtual DbSet<VClienteVendedorLocalEntrega> VClienteVendedorLocalEntregas { get; set; } = null!;
    public virtual DbSet<VCmdb> VCmdbs { get; set; } = null!;
    public virtual DbSet<VComisionDesarrollistaAjusteVendedor> VComisionDesarrollistaAjusteVendedors { get; set; } = null!;
    public virtual DbSet<VComisionDesarrollistaAjusteVendedorTipoVenta1> VComisionDesarrollistaAjusteVendedorTipoVenta1s { get; set; } = null!;
    public virtual DbSet<VComisionDesarrollistaTipoVenta1> VComisionDesarrollistaTipoVenta1s { get; set; } = null!;
    public virtual DbSet<VComisionDesarrollistum> VComisionDesarrollista { get; set; } = null!;
    public virtual DbSet<VComisionVendedore> VComisionVendedores { get; set; } = null!;
    public virtual DbSet<VComisionVendedoresTipoVenta1> VComisionVendedoresTipoVenta1s { get; set; } = null!;
    public virtual DbSet<VComparativoIvaOperativo> VComparativoIvaOperativos { get; set; } = null!;
    public virtual DbSet<VCompraComplemento> VCompraComplementos { get; set; } = null!;
    public virtual DbSet<VCompraExterior> VCompraExteriors { get; set; } = null!;
    public virtual DbSet<VCompraLocal> VCompraLocals { get; set; } = null!;
    public virtual DbSet<VContratoCompra> VContratoCompras { get; set; } = null!;
    public virtual DbSet<VContratoCompraCosto> VContratoCompraCostos { get; set; } = null!;
    public virtual DbSet<VContratoCompraLiq> VContratoCompraLiqs { get; set; } = null!;
    public virtual DbSet<VContratoCompraPrecio> VContratoCompraPrecios { get; set; } = null!;
    public virtual DbSet<VContratoCompraRollover> VContratoCompraRollovers { get; set; } = null!;
    public virtual DbSet<VContratoCompraVendedor> VContratoCompraVendedors { get; set; } = null!;
    public virtual DbSet<VContratoVentaCosto> VContratoVentaCostos { get; set; } = null!;
    public virtual DbSet<VContratoVentaLiq> VContratoVentaLiqs { get; set; } = null!;
    public virtual DbSet<VContratoVentaRollover> VContratoVentaRollovers { get; set; } = null!;
    public virtual DbSet<VContratosDep> VContratosDeps { get; set; } = null!;
    public virtual DbSet<VContratosVentaDep> VContratosVentaDeps { get; set; } = null!;
    public virtual DbSet<VCostosComprasExp> VCostosComprasExps { get; set; } = null!;
    public virtual DbSet<VCotum> VCota { get; set; } = null!;
    public virtual DbSet<VCrmCiudad> VCrmCiudads { get; set; } = null!;
    public virtual DbSet<VCrmCliente> VCrmClientes { get; set; } = null!;
    public virtual DbSet<VCrmClienteLocalEntrega> VCrmClienteLocalEntregas { get; set; } = null!;
    public virtual DbSet<VCrmCultivo> VCrmCultivos { get; set; } = null!;
    public virtual DbSet<VCrmDepartamento> VCrmDepartamentos { get; set; } = null!;
    public virtual DbSet<VCrmEmpresa> VCrmEmpresas { get; set; } = null!;
    public virtual DbSet<VCrmPai> VCrmPais { get; set; } = null!;
    public virtual DbSet<VCrmProducto> VCrmProductos { get; set; } = null!;
    public virtual DbSet<VCrmProductoClase> VCrmProductoClases { get; set; } = null!;
    public virtual DbSet<VCrmProductoGrupo> VCrmProductoGrupos { get; set; } = null!;
    public virtual DbSet<VCrmProveedor> VCrmProveedors { get; set; } = null!;
    public virtual DbSet<VCrmRegion> VCrmRegions { get; set; } = null!;
    public virtual DbSet<VCrmRegionLocal> VCrmRegionLocals { get; set; } = null!;
    public virtual DbSet<VCrmUnidadCliente> VCrmUnidadClientes { get; set; } = null!;
    public virtual DbSet<VCrmUnidadMedidum> VCrmUnidadMedida { get; set; } = null!;
    public virtual DbSet<VCrmUsuario> VCrmUsuarios { get; set; } = null!;
    public virtual DbSet<VCrmUsuarioRegion> VCrmUsuarioRegions { get; set; } = null!;
    public virtual DbSet<VCrosoftenCliente> VCrosoftenClientes { get; set; } = null!;
    public virtual DbSet<VCrosoftenCultivo> VCrosoftenCultivos { get; set; } = null!;
    public virtual DbSet<VCrosoftenDac> VCrosoftenDacs { get; set; } = null!;
    public virtual DbSet<VCrosoftenDacTm> VCrosoftenDacTms { get; set; } = null!;
    public virtual DbSet<VCrosoftenFichaStockPorLote> VCrosoftenFichaStockPorLotes { get; set; } = null!;
    public virtual DbSet<VCrosoftenProducto> VCrosoftenProductos { get; set; } = null!;
    public virtual DbSet<VCrosoftenProductoTm> VCrosoftenProductoTms { get; set; } = null!;
    public virtual DbSet<VCrosoftenVendedor> VCrosoftenVendedors { get; set; } = null!;
    public virtual DbSet<VCrosoftenZafra> VCrosoftenZafras { get; set; } = null!;
    public virtual DbSet<VCuboAnalisisFacturaVentum> VCuboAnalisisFacturaVenta { get; set; } = null!;
    public virtual DbSet<VCuboPedidoClienteTm> VCuboPedidoClienteTms { get; set; } = null!;
    public virtual DbSet<VCuboSaldoFisicoStock> VCuboSaldoFisicoStocks { get; set; } = null!;
    public virtual DbSet<VCuentaChe> VCuentaChes { get; set; } = null!;
    public virtual DbSet<VCuentaCorriente> VCuentaCorrientes { get; set; } = null!;
    public virtual DbSet<VCuentaPre> VCuentaPres { get; set; } = null!;
    public virtual DbSet<VDac> VDacs { get; set; } = null!;
    public virtual DbSet<VDeCiudad> VDeCiudads { get; set; } = null!;
    public virtual DbSet<VDeResultado> VDeResultados { get; set; } = null!;
    public virtual DbSet<VDeposito> VDepositos { get; set; } = null!;
    public virtual DbSet<VEmpresaUnidad> VEmpresaUnidads { get; set; } = null!;
    public virtual DbSet<VEncargadoSucursal> VEncargadoSucursals { get; set; } = null!;
    public virtual DbSet<VEnvase> VEnvases { get; set; } = null!;
    public virtual DbSet<VFabricaEquipoDet> VFabricaEquipoDets { get; set; } = null!;
    public virtual DbSet<VFabricanteExt> VFabricanteExts { get; set; } = null!;
    public virtual DbSet<VFacturaCrecon> VFacturaCrecons { get; set; } = null!;
    public virtual DbSet<VFacturaCreconEliminado> VFacturaCreconEliminados { get; set; } = null!;
    public virtual DbSet<VFacturaCreconImpresion> VFacturaCreconImpresions { get; set; } = null!;
    public virtual DbSet<VFacturaExportacion> VFacturaExportacions { get; set; } = null!;
    public virtual DbSet<VFacturaUnificadum> VFacturaUnificada { get; set; } = null!;
    public virtual DbSet<VFechaFactura> VFechaFacturas { get; set; } = null!;
    public virtual DbSet<VFichaCliente> VFichaClientes { get; set; } = null!;
    public virtual DbSet<VForwarder> VForwarders { get; set; } = null!;
    public virtual DbSet<VFuncionario> VFuncionarios { get; set; } = null!;
    public virtual DbSet<VFuncionarioBi> VFuncionarioBis { get; set; } = null!;
    public virtual DbSet<VFuncionarioGrupoSarabium> VFuncionarioGrupoSarabia { get; set; } = null!;
    public virtual DbSet<VFuncionarioWeb> VFuncionarioWebs { get; set; } = null!;
    public virtual DbSet<VGarante> VGarantes { get; set; } = null!;
    public virtual DbSet<VGasto> VGastos { get; set; } = null!;
    public virtual DbSet<VGastoDocumento> VGastoDocumentos { get; set; } = null!;
    public virtual DbSet<VGastoRetencionTm> VGastoRetencionTms { get; set; } = null!;
    public virtual DbSet<VGastosRodado> VGastosRodados { get; set; } = null!;
    public virtual DbSet<VGerenciaCrm> VGerenciaCrms { get; set; } = null!;
    public virtual DbSet<VGerenteUnidad> VGerenteUnidads { get; set; } = null!;
    public virtual DbSet<VImpresionDocumentoFacturaCrecon> VImpresionDocumentoFacturaCrecons { get; set; } = null!;
    public virtual DbSet<VImpresionDocumentoNotaEnvio> VImpresionDocumentoNotaEnvios { get; set; } = null!;
    public virtual DbSet<VImpresionDocumentoNotaRemision> VImpresionDocumentoNotaRemisions { get; set; } = null!;
    public virtual DbSet<VImprimeDocumentoNotaRemisionExp> VImprimeDocumentoNotaRemisionExps { get; set; } = null!;
    public virtual DbSet<VIncidenteUsuario> VIncidenteUsuarios { get; set; } = null!;
    public virtual DbSet<VIngrediente> VIngredientes { get; set; } = null!;
    public virtual DbSet<VIngredienteProducto> VIngredienteProductos { get; set; } = null!;
    public virtual DbSet<VIngreso> VIngresos { get; set; } = null!;
    public virtual DbSet<VLecomCargo> VLecomCargos { get; set; } = null!;
    public virtual DbSet<VLecomCliente> VLecomClientes { get; set; } = null!;
    public virtual DbSet<VLecomConsultaCheque> VLecomConsultaCheques { get; set; } = null!;
    public virtual DbSet<VLecomCotizacion> VLecomCotizacions { get; set; } = null!;
    public virtual DbSet<VLecomCuentaPre> VLecomCuentaPres { get; set; } = null!;
    public virtual DbSet<VLecomEmpresaUnidad> VLecomEmpresaUnidads { get; set; } = null!;
    public virtual DbSet<VLecomFuncionario> VLecomFuncionarios { get; set; } = null!;
    public virtual DbSet<VLecomGasto> VLecomGastos { get; set; } = null!;
    public virtual DbSet<VLecomPagarPago> VLecomPagarPagos { get; set; } = null!;
    public virtual DbSet<VLecomPedido> VLecomPedidos { get; set; } = null!;
    public virtual DbSet<VLecomPedidoDet> VLecomPedidoDets { get; set; } = null!;
    public virtual DbSet<VLecomPedidoFacturadoListaPrecio> VLecomPedidoFacturadoListaPrecios { get; set; } = null!;
    public virtual DbSet<VLecomPedidoListaPrecio> VLecomPedidoListaPrecios { get; set; } = null!;
    public virtual DbSet<VLecomPrecioAutoriza> VLecomPrecioAutorizas { get; set; } = null!;
    public virtual DbSet<VLecomPrecioAutorizaCte> VLecomPrecioAutorizaCtes { get; set; } = null!;
    public virtual DbSet<VLecomProveedor> VLecomProveedors { get; set; } = null!;
    public virtual DbSet<VLecomVehiculo> VLecomVehiculos { get; set; } = null!;
    public virtual DbSet<VLibroCompra> VLibroCompras { get; set; } = null!;
    public virtual DbSet<VLibroVentum> VLibroVenta { get; set; } = null!;
    public virtual DbSet<VListadoComercialPrevisionVsPedido> VListadoComercialPrevisionVsPedidos { get; set; } = null!;
    public virtual DbSet<VListadoEpi> VListadoEpis { get; set; } = null!;
    public virtual DbSet<VListadoFichaStockPorLote> VListadoFichaStockPorLotes { get; set; } = null!;
    public virtual DbSet<VListadoOrdenCompraBi> VListadoOrdenCompraBis { get; set; } = null!;
    public virtual DbSet<VLocalEntregaCrm> VLocalEntregaCrms { get; set; } = null!;
    public virtual DbSet<VLogMovCuentum> VLogMovCuenta { get; set; } = null!;
    public virtual DbSet<VLote> VLotes { get; set; } = null!;
    public virtual DbSet<VMail> VMails { get; set; } = null!;
    public virtual DbSet<VMaterialesEspeciale> VMaterialesEspeciales { get; set; } = null!;
    public virtual DbSet<VMovimientoBascula> VMovimientoBasculas { get; set; } = null!;
    public virtual DbSet<VNotaCredito> VNotaCreditos { get; set; } = null!;
    public virtual DbSet<VNotaDebito> VNotaDebitos { get; set; } = null!;
    public virtual DbSet<VNotaDevolucion> VNotaDevolucions { get; set; } = null!;
    public virtual DbSet<VNotaEnvio> VNotaEnvios { get; set; } = null!;
    public virtual DbSet<VNotaEnvioProvision> VNotaEnvioProvisions { get; set; } = null!;
    public virtual DbSet<VNotaRemision> VNotaRemisions { get; set; } = null!;
    public virtual DbSet<VNotaRemisionExp> VNotaRemisionExps { get; set; } = null!;
    public virtual DbSet<VNotaRemisionProvision> VNotaRemisionProvisions { get; set; } = null!;
    public virtual DbSet<VNotaRemisionVentum> VNotaRemisionVenta { get; set; } = null!;
    public virtual DbSet<VOrdenCompra> VOrdenCompras { get; set; } = null!;
    public virtual DbSet<VOrdenCompraDetalle> VOrdenCompraDetalles { get; set; } = null!;
    public virtual DbSet<VPagarPago> VPagarPagos { get; set; } = null!;
    public virtual DbSet<VPagarPagoFactura> VPagarPagoFacturas { get; set; } = null!;
    public virtual DbSet<VPagarPagoRentum> VPagarPagoRenta { get; set; } = null!;
    public virtual DbSet<VPagarRetencionTm> VPagarRetencionTms { get; set; } = null!;
    public virtual DbSet<VPedido> VPedidos { get; set; } = null!;
    public virtual DbSet<VPedidoCancelacion> VPedidoCancelacions { get; set; } = null!;
    public virtual DbSet<VPedidoCompra> VPedidoCompras { get; set; } = null!;
    public virtual DbSet<VPedidoCompraCan> VPedidoCompraCans { get; set; } = null!;
    public virtual DbSet<VPedidoDet> VPedidoDets { get; set; } = null!;
    public virtual DbSet<VPedidoDetHist> VPedidoDetHists { get; set; } = null!;
    public virtual DbSet<VPedidoTm> VPedidoTms { get; set; } = null!;
    public virtual DbSet<VPlanCuentaSet> VPlanCuentaSets { get; set; } = null!;
    public virtual DbSet<VPlanCuentum> VPlanCuenta { get; set; } = null!;
    public virtual DbSet<VPrestamoBancario> VPrestamoBancarios { get; set; } = null!;
    public virtual DbSet<VProduccionAbiertum> VProduccionAbierta { get; set; } = null!;
    public virtual DbSet<VProducto> VProductos { get; set; } = null!;
    public virtual DbSet<VProductoClase> VProductoClases { get; set; } = null!;
    public virtual DbSet<VProductoFormula> VProductoFormulas { get; set; } = null!;
    public virtual DbSet<VProductoFormula02> VProductoFormula02s { get; set; } = null!;
    public virtual DbSet<VProductoGral> VProductoGrals { get; set; } = null!;
    public virtual DbSet<VProductoIngrediente> VProductoIngredientes { get; set; } = null!;
    public virtual DbSet<VProveedorClase> VProveedorClases { get; set; } = null!;
    public virtual DbSet<VProvisionFlete> VProvisionFletes { get; set; } = null!;
    public virtual DbSet<VPuerto> VPuertos { get; set; } = null!;
    public virtual DbSet<VRecepEnvio> VRecepEnvios { get; set; } = null!;
    public virtual DbSet<VRecepcionSolicitudProducto> VRecepcionSolicitudProductos { get; set; } = null!;
    public virtual DbSet<VRecibirCobro> VRecibirCobros { get; set; } = null!;
    public virtual DbSet<VRegClaseClaseusoDet> VRegClaseClaseusoDets { get; set; } = null!;
    public virtual DbSet<VRegMarca> VRegMarcas { get; set; } = null!;
    public virtual DbSet<VRemisionCompra> VRemisionCompras { get; set; } = null!;
    public virtual DbSet<VRemisionUnificadum> VRemisionUnificada { get; set; } = null!;
    public virtual DbSet<VRendicion> VRendicions { get; set; } = null!;
    public virtual DbSet<VRendicionGasto> VRendicionGastos { get; set; } = null!;
    public virtual DbSet<VRequisicion> VRequisicions { get; set; } = null!;
    public virtual DbSet<VRetencionUnificadum> VRetencionUnificada { get; set; } = null!;
    public virtual DbSet<VRodado> VRodados { get; set; } = null!;
    public virtual DbSet<VRomaneosLiquidado> VRomaneosLiquidados { get; set; } = null!;
    public virtual DbSet<VRrhhFuncionario> VRrhhFuncionarios { get; set; } = null!;
    public virtual DbSet<VRrhhFuncionariosFamiliare> VRrhhFuncionariosFamiliares { get; set; } = null!;
    public virtual DbSet<VRrhhHojaPago> VRrhhHojaPagos { get; set; } = null!;
    public virtual DbSet<VSemillasCliente> VSemillasClientes { get; set; } = null!;
    public virtual DbSet<VSemillasDevolucion> VSemillasDevolucions { get; set; } = null!;
    public virtual DbSet<VSemillasExpedicion> VSemillasExpedicions { get; set; } = null!;
    public virtual DbSet<VSemillasLote> VSemillasLotes { get; set; } = null!;
    public virtual DbSet<VSemillasLoteDevolucion> VSemillasLoteDevolucions { get; set; } = null!;
    public virtual DbSet<VSemillasLoteExpedicion> VSemillasLoteExpedicions { get; set; } = null!;
    public virtual DbSet<VSemillasProduccionCierre> VSemillasProduccionCierres { get; set; } = null!;
    public virtual DbSet<VSemillasRomaneo> VSemillasRomaneos { get; set; } = null!;
    public virtual DbSet<VSemillasTransformacionProducto> VSemillasTransformacionProductos { get; set; } = null!;
    public virtual DbSet<VSolicitudProducto> VSolicitudProductos { get; set; } = null!;
    public virtual DbSet<VSolicitudTransf> VSolicitudTransfs { get; set; } = null!;
    public virtual DbSet<VStock> VStocks { get; set; } = null!;
    public virtual DbSet<VTimbrado> VTimbrados { get; set; } = null!;
    public virtual DbSet<VTimbradoDet> VTimbradoDets { get; set; } = null!;
    public virtual DbSet<VTransfCreditoProveedor> VTransfCreditoProveedors { get; set; } = null!;
    public virtual DbSet<VTransfCreditoProveedorDet> VTransfCreditoProveedorDets { get; set; } = null!;
    public virtual DbSet<VTransferenciaCuentum> VTransferenciaCuenta { get; set; } = null!;
    public virtual DbSet<VTransferenciaSolicitudDeposito> VTransferenciaSolicitudDepositos { get; set; } = null!;
    public virtual DbSet<VTransformacion> VTransformacions { get; set; } = null!;
    public virtual DbSet<VTransportadora> VTransportadoras { get; set; } = null!;
    public virtual DbSet<VTransporteComex> VTransporteComices { get; set; } = null!;
    public virtual DbSet<VUsuario> VUsuarios { get; set; } = null!;
    public virtual DbSet<VUsuarioAcceso> VUsuarioAccesos { get; set; } = null!;
    public virtual DbSet<VUsuarioGrupoSarabium> VUsuarioGrupoSarabia { get; set; } = null!;
    public virtual DbSet<VUtilesOficina> VUtilesOficinas { get; set; } = null!;
    public virtual DbSet<VVendedor> VVendedors { get; set; } = null!;
    public virtual DbSet<ValeSolicitud> ValeSolicituds { get; set; } = null!;
    public virtual DbSet<Vehiculo> Vehiculos { get; set; } = null!;
    public virtual DbSet<VehiculoFuncionario> VehiculoFuncionarios { get; set; } = null!;
    public virtual DbSet<VehiculoTarjetum> VehiculoTarjeta { get; set; } = null!;
    public virtual DbSet<Vendedor> Vendedors { get; set; } = null!;
    public virtual DbSet<VendedorGerente> VendedorGerentes { get; set; } = null!;
    public virtual DbSet<VersionSistema> VersionSistemas { get; set; } = null!;
    public virtual DbSet<VisualizadorSolicitudProducto> VisualizadorSolicitudProductos { get; set; } = null!;
    public virtual DbSet<WebTrabajo> WebTrabajos { get; set; } = null!;
    public virtual DbSet<WebTrabajoError> WebTrabajoErrors { get; set; } = null!;
    public virtual DbSet<Zafra> Zafras { get; set; } = null!;
    public virtual DbSet<ZafraCostoPrecio> ZafraCostoPrecios { get; set; } = null!;
    public virtual DbSet<ZafraDescuento> ZafraDescuentos { get; set; } = null!;
    public virtual DbSet<ZafraHumedad> ZafraHumedads { get; set; } = null!;
    public virtual DbSet<ZafraHumedadRango> ZafraHumedadRangos { get; set; } = null!;
    public virtual DbSet<ZafraPh> ZafraPhs { get; set; } = null!;
    public virtual DbSet<ZafraPrecioProv> ZafraPrecioProvs { get; set; } = null!;
    public virtual DbSet<ZafraPrecioTrueque> ZafraPrecioTrueques { get; set; } = null!;
    public virtual DbSet<Zarandum> Zaranda { get; set; } = null!;
    public virtual DbSet<ZonaDistribucion> ZonaDistribucions { get; set; } = null!;

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder
       .UseSqlServer(options => options.EnableRetryOnFailure(5));
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdelantoCliente>(entity =>
        {
            entity.HasKey(e => e.IdAdelantoCliente);

            entity.ToTable("ADELANTO_CLIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_ADELANTO_CLIENTE")
                .IsUnique();

            entity.Property(e => e.IdAdelantoCliente).HasColumnName("ID_ADELANTO_CLIENTE");

            entity.Property(e => e.ChequeBanco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_BANCO");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.ChequeTitular)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_TITULAR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_CLIENTE");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_CULTIVO");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_ADELANTO_CLIENTE_PEDIDO");

            entity.HasOne(d => d.IdReciboNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdRecibo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_RECIBO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AdelantoClientes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CLIENTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AdelantoContrato>(entity =>
        {
            entity.HasKey(e => e.IdAdelantoContrato);

            entity.ToTable("ADELANTO_CONTRATO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_ADELANTO_CONTRATO")
                .IsUnique();

            entity.Property(e => e.IdAdelantoContrato).HasColumnName("ID_ADELANTO_CONTRATO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdReciboAdelanto).HasColumnName("ID_RECIBO_ADELANTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_CARPETA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_ADELANTO_CONTRATO_CHEQUERA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_CLIENTE");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdReciboAdelantoNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdReciboAdelanto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_RECIBO_ADELANTO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AdelantoContratos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_CONTRATO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AdelantoFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdAdelantoFuncionario);

            entity.ToTable("ADELANTO_FUNCIONARIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_ADELANTO_FUNCIONARIO")
                .IsUnique();

            entity.Property(e => e.IdAdelantoFuncionario).HasColumnName("ID_ADELANTO_FUNCIONARIO");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.AutorizadorNavigation)
                .WithMany(p => p.AdelantoFuncionarioAutorizadorNavigations)
                .HasForeignKey(d => d.Autorizador)
                .HasConstraintName("FK_ADELANTO_FUNCIONARIO_AUTORIZADOR");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.AdelantoFuncionarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_FUNCIONARIO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.AdelantoFuncionarioIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_FUNCIONARIO_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AdelantoFuncionarios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_FUNCIONARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AdelantoProveedor>(entity =>
        {
            entity.HasKey(e => e.IdAdelantoProveedor);

            entity.ToTable("ADELANTO_PROVEEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_ADELANTO_PROVEEDOR")
                .IsUnique();

            entity.Property(e => e.IdAdelantoProveedor).HasColumnName("ID_ADELANTO_PROVEEDOR");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.DocumentoExenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOCUMENTO_EXENTA");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoGravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOCUMENTO_GRAVADA");

            entity.Property(e => e.DocumentoIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOCUMENTO_IVA");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.DocumentoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOCUMENTO_TOTAL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorCuenta).HasColumnName("ID_PROVEEDOR_CUENTA");

            entity.Property(e => e.IdReciboAdelanto).HasColumnName("ID_RECIBO_ADELANTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Ndocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NDOCUMENTO");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_DOLAR");

            entity.Property(e => e.RetencionGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_GUARANI");

            entity.Property(e => e.TipoGranos).HasColumnName("TIPO_GRANOS");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.AdelantoProveedors)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_ADELANTO_PROVEEDOR_CHEQUERA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.AdelantoProveedors)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_PROVEEDOR_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.AdelantoProveedors)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_PROVEEDOR_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorCuentaNavigation)
                .WithMany(p => p.AdelantoProveedors)
                .HasForeignKey(d => d.IdProveedorCuenta)
                .HasConstraintName("FK_ADELANTO_PROVEEDOR_PROVEEDOR_CUENTA");

            entity.HasOne(d => d.IdReciboAdelantoNavigation)
                .WithMany(p => p.AdelantoProveedors)
                .HasForeignKey(d => d.IdReciboAdelanto)
                .HasConstraintName("FK_ADELANTO_PROVEEDOR_RECIBO_ADELANTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AdelantoProveedors)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADELANTO_PROVEEDOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Aduana>(entity =>
        {
            entity.HasKey(e => e.IdAduana);

            entity.ToTable("ADUANA", "dbo");

            entity.Property(e => e.IdAduana).HasColumnName("ID_ADUANA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Aduanas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADUANA_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Aduanas)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_ADUANA_CIUDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Aduanas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ADUANA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Aficion>(entity =>
        {
            entity.HasKey(e => e.IdAficion);

            entity.ToTable("AFICION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_AFICION")
                .IsUnique();

            entity.Property(e => e.IdAficion).HasColumnName("ID_AFICION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Aficions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AFICION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Aficions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AFICION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Agendum>(entity =>
        {
            entity.HasKey(e => e.IdAgenda);

            entity.ToTable("AGENDA", "dbo");

            entity.Property(e => e.IdAgenda).HasColumnName("ID_AGENDA");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Ciudad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");

            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.Nombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.TelComercial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TEL_COMERCIAL");

            entity.Property(e => e.TelResidencial)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TEL_RESIDENCIAL");
        });

        modelBuilder.Entity<AgricolaCierre>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaCierre)
                .HasName("PK_AGRICOLA_CIERRE_1");

            entity.ToTable("AGRICOLA_CIERRE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AGRICOLA_CIERRE")
                .IsUnique();

            entity.Property(e => e.IdAgricolaCierre).HasColumnName("ID_AGRICOLA_CIERRE");

            entity.Property(e => e.BalanceDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BALANCE_DOLAR");

            entity.Property(e => e.BalanceGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BALANCE_GUARANI");

            entity.Property(e => e.CantidadProducida)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_PRODUCIDA");

            entity.Property(e => e.CostoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_DOLAR");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoStockDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_STOCK_DOLAR");

            entity.Property(e => e.CostoStockGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_STOCK_GUARANI");

            entity.Property(e => e.CostoUnitDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_UNIT_DOLAR");

            entity.Property(e => e.CostoUnitGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_UNIT_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCierre)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.StockDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STOCK_DOLAR");

            entity.Property(e => e.StockGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("STOCK_GUARANI");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.AgricolaCierres)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_CIERRE_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaCierres)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_CIERRE_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaCierres)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_CIERRE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaCierreProducto>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaCierreProducto)
                .HasName("PK_AGRICOLA_CIERRE_ITEM");

            entity.ToTable("AGRICOLA_CIERRE_PRODUCTO", "dbo");

            entity.Property(e => e.IdAgricolaCierreProducto).HasColumnName("ID_AGRICOLA_CIERRE_PRODUCTO");

            entity.Property(e => e.CostoDolar)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_DOLAR");

            entity.Property(e => e.CostoGuaranies)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_GUARANIES");

            entity.Property(e => e.IdAgricolaCierre).HasColumnName("ID_AGRICOLA_CIERRE");

            entity.Property(e => e.IdAgricolaDevolucionProducto).HasColumnName("ID_AGRICOLA_DEVOLUCION_PRODUCTO");

            entity.Property(e => e.IdAgricolaSolicitudProducto).HasColumnName("ID_AGRICOLA_SOLICITUD_PRODUCTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdAgricolaCierreNavigation)
                .WithMany(p => p.AgricolaCierreProductos)
                .HasForeignKey(d => d.IdAgricolaCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_CIERRE_PRODUCTO_AGRICOLA_CIERRE");

            entity.HasOne(d => d.IdAgricolaDevolucionProductoNavigation)
                .WithMany(p => p.AgricolaCierreProductos)
                .HasForeignKey(d => d.IdAgricolaDevolucionProducto)
                .HasConstraintName("FK_AGRICOLA_CIERRE_PRODUCTO_AGRICOLA_DEVOLUCION_PRODUCTO");

            entity.HasOne(d => d.IdAgricolaSolicitudProductoNavigation)
                .WithMany(p => p.AgricolaCierreProductos)
                .HasForeignKey(d => d.IdAgricolaSolicitudProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_CIERRE_PRODUCTO_AGRICOLA_SOLICITUD_PRODUCTO");
        });

        modelBuilder.Entity<AgricolaCosecha>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaCosecha);

            entity.ToTable("AGRICOLA_COSECHA", "dbo");

            entity.Property(e => e.IdAgricolaCosecha).HasColumnName("ID_AGRICOLA_COSECHA");

            entity.Property(e => e.AreaAcosechar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_ACOSECHAR");

            entity.Property(e => e.AreaCosecha)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_COSECHA");

            entity.Property(e => e.AreaCosechaAnte)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_COSECHA_ANTE");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdAgricolaSiembra).HasColumnName("ID_AGRICOLA_SIEMBRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PorcCosecha)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORC_COSECHA");

            entity.Property(e => e.Promedio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PROMEDIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdAgricolaSiembraNavigation)
                .WithMany(p => p.AgricolaCosechas)
                .HasForeignKey(d => d.IdAgricolaSiembra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_COSECHA_AGRICOLA_SIEMBRA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaCosechas)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_COSECHA_PRODUCTO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.AgricolaCosechaIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_COSECHA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaCosechaRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_AGRICOLA_COSECHA_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<AgricolaDevolucion>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaDevolucion);

            entity.ToTable("AGRICOLA_DEVOLUCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AGRICOLA_DEVOLUCION")
                .IsUnique();

            entity.Property(e => e.IdAgricolaDevolucion).HasColumnName("ID_AGRICOLA_DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdAgricolaFormacionNavigation)
                .WithMany(p => p.AgricolaDevolucions)
                .HasForeignKey(d => d.IdAgricolaFormacion)
                .HasConstraintName("FK_AGRICOLA_DEVOLUCION_AGRICOLA_FORMACION");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.AgricolaDevolucions)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_AGRICOLA_DEVOLUCION_DEPOSITO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaDevolucions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_AGRICOLA_DEVOLUCION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaDevolucionProducto>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaDevolucionProducto)
                .HasName("PK_AGRICOLA_DEVOL_PRODUTOS");

            entity.ToTable("AGRICOLA_DEVOLUCION_PRODUCTO", "dbo");

            entity.Property(e => e.IdAgricolaDevolucionProducto).HasColumnName("ID_AGRICOLA_DEVOLUCION_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoPromedioDolares)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_PROMEDIO_DOLARES");

            entity.Property(e => e.CostoPromedioGuaranies)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_PROMEDIO_GUARANIES");

            entity.Property(e => e.IdAgricolaDevolucion).HasColumnName("ID_AGRICOLA_DEVOLUCION");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Utilizado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UTILIZADO");

            entity.Property(e => e.Utilizar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UTILIZAR");

            entity.HasOne(d => d.IdAgricolaDevolucionNavigation)
                .WithMany(p => p.AgricolaDevolucionProductos)
                .HasForeignKey(d => d.IdAgricolaDevolucion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_DEVOLUCION_PRODUCTO_AGRICOLA_DEVOLUCION");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.AgricolaDevolucionProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_AGRICOLA_DEVOLUCION_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaDevolucionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_DEVOLUCION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<AgricolaEstancium>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaEstancia);

            entity.ToTable("AGRICOLA_ESTANCIA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_AGRICOLA_ESTANCIA")
                .IsUnique();

            entity.Property(e => e.IdAgricolaEstancia).HasColumnName("ID_AGRICOLA_ESTANCIA");

            entity.Property(e => e.Area)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AgricolaEstancia)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_ESTANCIA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaEstancia)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_ESTANCIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaFormacion>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaFormacion);

            entity.ToTable("AGRICOLA_FORMACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AGRICOLA_FORMACION")
                .IsUnique();

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.Area)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA");

            entity.Property(e => e.CantidadCerrada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_CERRADA");

            entity.Property(e => e.CantidadProducir)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_PRODUCIR");

            entity.Property(e => e.CostoDolar)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_DOLAR");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdAgricolaLote).HasColumnName("ID_AGRICOLA_LOTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AgricolaFormacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.AgricolaFormacions)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_CULTIVO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaFormacions)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.AgricolaFormacions)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaFormacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_AGRICOLA_FORMACION");
        });

        modelBuilder.Entity<AgricolaFormacionProducto>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaFormacionProducto)
                .HasName("PK_AGRICOLA_DETALLES");

            entity.ToTable("AGRICOLA_FORMACION_PRODUCTO", "dbo");

            entity.Property(e => e.IdAgricolaFormacionProducto).HasColumnName("ID_AGRICOLA_FORMACION_PRODUCTO");

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Utilizar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UTILIZAR");

            entity.HasOne(d => d.IdAgricolaFormacionNavigation)
                .WithMany(p => p.AgricolaFormacionProductos)
                .HasForeignKey(d => d.IdAgricolaFormacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_PRODUCTO_AGRICOLA_FORMACION");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.AgricolaFormacionProductos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaFormacionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_FORMACION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<AgricolaGleba>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaGleba);

            entity.ToTable("AGRICOLA_GLEBA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdAgricolaEstancia, e.Codigo }, "UK_AGRICOLA_GLEBA")
                .IsUnique();

            entity.Property(e => e.IdAgricolaGleba).HasColumnName("ID_AGRICOLA_GLEBA");

            entity.Property(e => e.Area)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdAgricolaEstancia).HasColumnName("ID_AGRICOLA_ESTANCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AgricolaGlebas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_GLEBA_EMPRESA");

            entity.HasOne(d => d.IdAgricolaEstanciaNavigation)
                .WithMany(p => p.AgricolaGlebas)
                .HasForeignKey(d => d.IdAgricolaEstancia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_GLEBA_AGRICOLA_ESTANCIA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaGlebas)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_AGRICOLA_GLEBA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaLote>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaLote);

            entity.ToTable("AGRICOLA_LOTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo, e.IdAgricolaGleba }, "UK_AGRICOLA_LOTE")
                .IsUnique();

            entity.Property(e => e.IdAgricolaLote).HasColumnName("ID_AGRICOLA_LOTE");

            entity.Property(e => e.Area)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdAgricolaGleba).HasColumnName("ID_AGRICOLA_GLEBA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AgricolaLotes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_LOTE_EMPRESA");

            entity.HasOne(d => d.IdAgricolaGlebaNavigation)
                .WithMany(p => p.AgricolaLotes)
                .HasForeignKey(d => d.IdAgricolaGleba)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_LOTE_AGRICOLA_GLEBA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaLotes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_LOTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaRomaneo>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaRomaneo)
                .HasName("PK_AGRICOLA_ROMANEOS");

            entity.ToTable("AGRICOLA_ROMANEO", "dbo");

            entity.Property(e => e.IdAgricolaRomaneo).HasColumnName("ID_AGRICOLA_ROMANEO");

            entity.Property(e => e.Descuentos)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DESCUENTOS");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoLiquido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_LIQUIDO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Romaneo).HasColumnName("ROMANEO");

            entity.HasOne(d => d.IdAgricolaFormacionNavigation)
                .WithMany(p => p.AgricolaRomaneos)
                .HasForeignKey(d => d.IdAgricolaFormacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_ROMANEO_AGRICOLA_FORMACION");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.AgricolaRomaneos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_ROMANEO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaRomaneos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_ROMANEO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaSiembra>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaSiembra);

            entity.ToTable("AGRICOLA_SIEMBRA", "dbo");

            entity.Property(e => e.IdAgricolaSiembra).HasColumnName("ID_AGRICOLA_SIEMBRA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdAgricolaFormacionNavigation)
                .WithMany(p => p.AgricolaSiembras)
                .HasForeignKey(d => d.IdAgricolaFormacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SIEMBRA_AGRICOLA_FORMACION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaSiembras)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_AGRICOLA_SIEMBRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaSiembraVariedad>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaSiembraVariedad);

            entity.ToTable("AGRICOLA_SIEMBRA_VARIEDAD", "dbo");

            entity.Property(e => e.IdAgricolaSiembraVariedad).HasColumnName("ID_AGRICOLA_SIEMBRA_VARIEDAD");

            entity.Property(e => e.AreaAsembrar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("AREA_ASEMBRAR");

            entity.Property(e => e.AreaSembrada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("AREA_SEMBRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdAgricolaSiembra).HasColumnName("ID_AGRICOLA_SIEMBRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Pms)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PMS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Replante).HasColumnName("REPLANTE");

            entity.Property(e => e.SemillaMetro)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SEMILLA_METRO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaSiembraVariedads)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SIEMBRA_VARIEDAD_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaSiembraVariedads)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_AGRICOLA_SIEMBRA_VARIEDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaSolicitud>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaSolicitud);

            entity.ToTable("AGRICOLA_SOLICITUD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AGRICOLA_SOLICITUD")
                .IsUnique();

            entity.Property(e => e.IdAgricolaSolicitud).HasColumnName("ID_AGRICOLA_SOLICITUD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AgricolaSolicituds)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_EMPRESA");

            entity.HasOne(d => d.IdAgricolaFormacionNavigation)
                .WithMany(p => p.AgricolaSolicituds)
                .HasForeignKey(d => d.IdAgricolaFormacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_AGRICOLA_FORMACION");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.AgricolaSolicituds)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_DEPOSITO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AgricolaSolicituds)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AgricolaSolicitudProducto>(entity =>
        {
            entity.HasKey(e => e.IdAgricolaSolicitudProducto)
                .HasName("PK_AGRICOLA_STOCK_PRODUTOS");

            entity.ToTable("AGRICOLA_SOLICITUD_PRODUCTO", "dbo");

            entity.Property(e => e.IdAgricolaSolicitudProducto).HasColumnName("ID_AGRICOLA_SOLICITUD_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoPromedioDolar)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_PROMEDIO_DOLAR");

            entity.Property(e => e.CostoPromedioGuaranies)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_PROMEDIO_GUARANIES");

            entity.Property(e => e.IdAgricolaSolicitud).HasColumnName("ID_AGRICOLA_SOLICITUD");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Kilometraje).HasColumnName("KILOMETRAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Stock)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOCK");

            entity.Property(e => e.Utilizado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UTILIZADO");

            entity.Property(e => e.Utilizar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UTILIZAR");

            entity.HasOne(d => d.IdAgricolaSolicitudNavigation)
                .WithMany(p => p.AgricolaSolicitudProductos)
                .HasForeignKey(d => d.IdAgricolaSolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_PRODUCTO_AGRICOLA_SOLICITUD");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.AgricolaSolicitudProductos)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_PRODUCTO_DEPARTAMENTO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.AgricolaSolicitudProductos)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_PRODUCTO_FUNCIONARIO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.AgricolaSolicitudProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.AgricolaSolicitudProductos)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_PRODUCTO_PLAN_CUENTA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AgricolaSolicitudProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AGRICOLA_SOLICITUD_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<AnalisisProyeccion>(entity =>
        {
            entity.HasKey(e => e.IdAnalisisProyeccion);

            entity.ToTable("ANALISIS_PROYECCION", "dbo");

            entity.Property(e => e.IdAnalisisProyeccion).HasColumnName("ID_ANALISIS_PROYECCION");

            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Modo).HasColumnName("MODO");

            entity.Property(e => e.PAbril)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_ABRIL");

            entity.Property(e => e.PAgosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_AGOSTO");

            entity.Property(e => e.PDiciembre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_DICIEMBRE");

            entity.Property(e => e.PEnero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_ENERO");

            entity.Property(e => e.PFebrero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_FEBRERO");

            entity.Property(e => e.PJulio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_JULIO");

            entity.Property(e => e.PJunio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_JUNIO");

            entity.Property(e => e.PMarzo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_MARZO");

            entity.Property(e => e.PMayo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_MAYO");

            entity.Property(e => e.PNoviembre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_NOVIEMBRE");

            entity.Property(e => e.POctubre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_OCTUBRE");

            entity.Property(e => e.PSeptiembre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_SEPTIEMBRE");

            entity.Property(e => e.PTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("P_TOTAL");

            entity.Property(e => e.RAbril)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_ABRIL");

            entity.Property(e => e.RAgosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_AGOSTO");

            entity.Property(e => e.RDiciembre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_DICIEMBRE");

            entity.Property(e => e.REnero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_ENERO");

            entity.Property(e => e.RFebrero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_FEBRERO");

            entity.Property(e => e.RJulio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_JULIO");

            entity.Property(e => e.RJunio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_JUNIO");

            entity.Property(e => e.RMarzo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_MARZO");

            entity.Property(e => e.RMayo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_MAYO");

            entity.Property(e => e.RNoviembre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_NOVIEMBRE");

            entity.Property(e => e.ROctubre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_OCTUBRE");

            entity.Property(e => e.RSeptiembre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_SEPTIEMBRE");

            entity.Property(e => e.RTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("R_TOTAL");

            entity.Property(e => e.Seleccion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SELECCION");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");
        });

        modelBuilder.Entity<ArregloLoteOp>(entity =>
        {
            entity.HasKey(e => e.IdArregloLoteOp);

            entity.ToTable("ARREGLO_LOTE_OP", "dbo");

            entity.Property(e => e.IdArregloLoteOp).HasColumnName("ID_ARREGLO_LOTE_OP");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Error)
                .HasColumnName("ERROR")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Serie).HasColumnName("SERIE");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.ArregloLoteOps)
                .HasForeignKey(d => d.IdProduccion)
                .HasConstraintName("FK_ARREGLO_LOTE_OP_PRODUCCION");
        });

        modelBuilder.Entity<AsociacionGasto>(entity =>
        {
            entity.HasKey(e => e.IdAsociacionGasto);

            entity.ToTable("ASOCIACION_GASTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdTabla, e.RefLanzamiento, e.Lanzamiento, e.RegStatus }, "IX_ASOCIACION_GASTO")
                .IsUnique();

            entity.Property(e => e.IdAsociacionGasto).HasColumnName("ID_ASOCIACION_GASTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTabla)
                .HasColumnName("ID_TABLA")
                .HasComment("ID tabla padre al cual estan asociados los GASTOS");

            entity.Property(e => e.Lanzamiento)
                .HasColumnName("LANZAMIENTO")
                .HasComment("Lanzamiento padre");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("ID padre de la operacion al cual estan asociados los GASTOS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AsociacionGastos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASOCIACION_GASTO_EMPRESA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.AsociacionGastos)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASOCIACION_GASTO_TABLA");
        });

        modelBuilder.Entity<AsociacionGastoDet>(entity =>
        {
            entity.HasKey(e => e.IdAsociacionGastoDet);

            entity.ToTable("ASOCIACION_GASTO_DET", "dbo");

            entity.Property(e => e.IdAsociacionGastoDet).HasColumnName("ID_ASOCIACION_GASTO_DET");

            entity.Property(e => e.Factura)
                .HasColumnName("FACTURA")
                .HasComment("ID Gasto Documento");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.IdAsociacionGasto).HasColumnName("ID_ASOCIACION_GASTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Lanzamiento)
                .HasColumnName("LANZAMIENTO")
                .HasComment("Lanzamiento del Gasto");

            entity.Property(e => e.Moneda)
                .HasColumnName("MONEDA")
                .HasComment("0= Dolar, 2= guaranies");

            entity.Property(e => e.Nota)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOTA")
                .HasComment("Numero de Factura");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("ID del Gasto");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR")
                .HasComment("VALOR TOTAL DE LA FACTURA USD");

            entity.Property(e => e.ValorAsignado)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_ASIGNADO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ValorAsignadoGs)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_ASIGNADO_GS")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ValorGs)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_GS")
                .HasComment("VALOR TOTAL DE LA FACTURA GS.");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdAsociacionGastoNavigation)
                .WithMany(p => p.AsociacionGastoDets)
                .HasForeignKey(d => d.IdAsociacionGasto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASOCIACION_GASTO_DET_ASOCIACION_GASTO1");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.AsociacionGastoDets)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_ASOCIACION_GASTO_DET_PROVEEDOR");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.AsociacionGastoDets)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ASOCIACION_GASTO_DET_TABLA");
        });

        modelBuilder.Entity<Autoimpresor>(entity =>
        {
            entity.HasKey(e => e.IdAutoimpresor);

            entity.ToTable("AUTOIMPRESOR", "dbo");

            entity.Property(e => e.IdAutoimpresor).HasColumnName("ID_AUTOIMPRESOR");

            entity.Property(e => e.Autofactura)
                .HasColumnName("AUTOFACTURA")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.Property(e => e.Factura)
                .HasColumnName("FACTURA")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.Property(e => e.FacturaExportacion).HasColumnName("FACTURA_EXPORTACION");

            entity.Property(e => e.IdEmpresa).HasColumnName("ID_EMPRESA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.NotaCredito)
                .HasColumnName("NOTA_CREDITO")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.Property(e => e.NotaDebito)
                .HasColumnName("NOTA_DEBITO")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.Property(e => e.NotaRemision)
                .HasColumnName("NOTA_REMISION")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.Property(e => e.Pagare).HasColumnName("PAGARE");

            entity.Property(e => e.Recibo).HasColumnName("RECIBO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Retencion)
                .HasColumnName("RETENCION")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.Property(e => e.Romaneo)
                .HasColumnName("ROMANEO")
                .HasComment("0 = autoimpresor  - 1 = pre_impreso - 2 = manual");

            entity.HasOne(d => d.IdEmpresaNavigation)
                .WithMany(p => p.Autoimpresors)
                .HasForeignKey(d => d.IdEmpresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTOIMPRESOR_EMPRESA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.AutoimpresorIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTOIMPRESOR_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AutoimpresorRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_AUTOIMPRESOR_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<AutorizadorCompra>(entity =>
        {
            entity.HasKey(e => e.IdAutorizadorCompra);

            entity.ToTable("AUTORIZADOR_COMPRA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AUTORIZADOR_COMPRA")
                .IsUnique();

            entity.Property(e => e.IdAutorizadorCompra).HasColumnName("ID_AUTORIZADOR_COMPRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("ACTIVO = 1, INACTIVO = 0");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nivel)
                .HasColumnName("NIVEL")
                .HasComment("Este campo describe los niveles de autorizacion de compra Nivel 1, Nivel 2, Nivel 3 ... Nivel n.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("COMPRA_LOCAL = 0, COMPRA_EXTERIOR = 1");

            entity.Property(e => e.UsuarioAutorizador).HasColumnName("USUARIO_AUTORIZADOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizadorCompras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_COMPRA_EMPRESA");

            entity.HasOne(d => d.UsuarioAutorizadorNavigation)
                .WithMany(p => p.AutorizadorCompras)
                .HasForeignKey(d => d.UsuarioAutorizador)
                .HasConstraintName("FK_AUTORIZADOR_COMPRA_AUTORIZADOR");
        });

        modelBuilder.Entity<AutorizadorCompraSuplente>(entity =>
        {
            entity.HasKey(e => e.IdAutorizadorCompraSuplente);

            entity.ToTable("AUTORIZADOR_COMPRA_SUPLENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AUTORIZADOR_COMPRA_SUPLENTE")
                .IsUnique();

            entity.Property(e => e.IdAutorizadorCompraSuplente).HasColumnName("ID_AUTORIZADOR_COMPRA_SUPLENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("ACTIVO = 1, INACTIVO = 0");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdUsuarioReal).HasColumnName("ID_USUARIO_REAL");

            entity.Property(e => e.IdUsuarioSuplente).HasColumnName("ID_USUARIO_SUPLENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizadorCompraSuplentes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_COMPRA_SUPLENTE_EMPRESA");

            entity.HasOne(d => d.IdUsuarioRealNavigation)
                .WithMany(p => p.AutorizadorCompraSuplenteIdUsuarioRealNavigations)
                .HasForeignKey(d => d.IdUsuarioReal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_COMPRA_SUPLENTE_USUARIO_REAL");

            entity.HasOne(d => d.IdUsuarioSuplenteNavigation)
                .WithMany(p => p.AutorizadorCompraSuplenteIdUsuarioSuplenteNavigations)
                .HasForeignKey(d => d.IdUsuarioSuplente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_COMPRA_SUPLENTE_USUARIO_SUPLENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AutorizadorCompraSuplentes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_COMPRA_SUPLENTE_UNIDAD");
        });

        modelBuilder.Entity<AutorizadorPago>(entity =>
        {
            entity.HasKey(e => e.IdAutorizadorPago);

            entity.ToTable("AUTORIZADOR_PAGO", "dbo");

            entity.Property(e => e.IdAutorizadorPago).HasColumnName("ID_AUTORIZADOR_PAGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.Nivel).HasColumnName("NIVEL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.UsuarioAutorizador).HasColumnName("USUARIO_AUTORIZADOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizadorPagos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_PAGO_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.AutorizadorPagos)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_PAGO_DEPARTAMENTO");

            entity.HasOne(d => d.UsuarioAutorizadorNavigation)
                .WithMany(p => p.AutorizadorPagos)
                .HasForeignKey(d => d.UsuarioAutorizador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_PAGO_USUARIO");
        });

        modelBuilder.Entity<AutorizadorProduccion>(entity =>
        {
            entity.HasKey(e => e.IdAutorizadorProduccion);

            entity.ToTable("AUTORIZADOR_PRODUCCION", "dbo");

            entity.Property(e => e.IdAutorizadorProduccion).HasColumnName("ID_AUTORIZADOR_PRODUCCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.UsuarioAutorizador).HasColumnName("USUARIO_AUTORIZADOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizadorProduccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_PRODUCCION_EMPRESA");

            entity.HasOne(d => d.UsuarioAutorizadorNavigation)
                .WithMany(p => p.AutorizadorProduccions)
                .HasForeignKey(d => d.UsuarioAutorizador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_PRODUCCION_USUARIO");
        });

        modelBuilder.Entity<AutorizadorSuplente>(entity =>
        {
            entity.HasKey(e => e.IdAutorizadorSuplente);

            entity.ToTable("AUTORIZADOR_SUPLENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_AUTORIZADOR_SUPLENTE")
                .IsUnique();

            entity.Property(e => e.IdAutorizadorSuplente).HasColumnName("ID_AUTORIZADOR_SUPLENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("1 = ACTIVO\r\n\r\n 0 = INACTIVO");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdUsuarioReal).HasColumnName("ID_USUARIO_REAL");

            entity.Property(e => e.IdUsuarioSuplente).HasColumnName("ID_USUARIO_SUPLENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizadorSuplentes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_SUPLENTE_EMPRESA");

            entity.HasOne(d => d.IdUsuarioRealNavigation)
                .WithMany(p => p.AutorizadorSuplenteIdUsuarioRealNavigations)
                .HasForeignKey(d => d.IdUsuarioReal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_SUPLENTE_USUARIOREAL");

            entity.HasOne(d => d.IdUsuarioSuplenteNavigation)
                .WithMany(p => p.AutorizadorSuplenteIdUsuarioSuplenteNavigations)
                .HasForeignKey(d => d.IdUsuarioSuplente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_SUPLENTE_USUARIOSUPLENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AutorizadorSuplentes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZADOR_SUPLENTE_REGUNIDAD");
        });

        modelBuilder.Entity<AutorizarCompra>(entity =>
        {
            entity.HasKey(e => e.IdAutorizarCompra);

            entity.ToTable("AUTORIZAR_COMPRA", "dbo");

            entity.Property(e => e.IdAutorizarCompra).HasColumnName("ID_AUTORIZAR_COMPRA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("Falta autorizar = 0, Autorizado = 1,  Rechazado = 2");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.FechaNecesidad)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NECESIDAD");

            entity.Property(e => e.FechaPlanificacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PLANIFICACION");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUsuarioAutorizador).HasColumnName("ID_USUARIO_AUTORIZADOR");

            entity.Property(e => e.IdUsuarioAutorizadorReal).HasColumnName("ID_USUARIO_AUTORIZADOR_REAL");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nivel)
                .HasColumnName("NIVEL")
                .HasComment("Este campo describe los niveles de autorizacion compra Nivel 1, Nivel 2, Nivel 3 ... Nivel n.");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("Compra Local = 0, Compra Exterior = 1");

            entity.Property(e => e.TipoAutorizador)
                .HasColumnName("TIPO_AUTORIZADOR")
                .HasComment("ECHAURI = 0 POR EL MOMENTO HASTA QUE EXISTA OTRO TIPO DE AUTORIZADOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizarCompras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EMPRESA_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.AutorizarCompras)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_CULTIVO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AutorizarCompras)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.AutorizarCompras)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_TABLA");

            entity.HasOne(d => d.IdUsuarioAutorizadorNavigation)
                .WithMany(p => p.AutorizarCompraIdUsuarioAutorizadorNavigations)
                .HasForeignKey(d => d.IdUsuarioAutorizador)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_USUARIO");

            entity.HasOne(d => d.IdUsuarioAutorizadorRealNavigation)
                .WithMany(p => p.AutorizarCompraIdUsuarioAutorizadorRealNavigations)
                .HasForeignKey(d => d.IdUsuarioAutorizadorReal)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_USUARIO_REAL");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.AutorizarCompras)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AutorizarCompras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_COMPRA_UNIDAD");
        });

        modelBuilder.Entity<AutorizarPago>(entity =>
        {
            entity.HasKey(e => e.IdAutorizarPago);

            entity.ToTable("AUTORIZAR_PAGO", "dbo");

            entity.Property(e => e.IdAutorizarPago)
                .HasColumnName("ID_AUTORIZAR_PAGO")
                .HasComment("viene de log_usuario, puede ser el administrador o el mismo id_usuario_autorizador");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Factura)
                .HasColumnName("FACTURA")
                .HasComment("ID_GASTO_DOCUMENTO EN EL CASO DE GASTO Y ID_COMPRA_LOCAL EN CASO DE COMPRA LOCAL");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUsuarioAutReal)
                .HasColumnName("ID_USUARIO_AUT_REAL")
                .HasComment("viene de log_usuario, pueder ser el administrador o el mismo id_usuario_autorizador");

            entity.Property(e => e.IdUsuarioAutorizador).HasColumnName("ID_USUARIO_AUTORIZADOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nivel).HasColumnName("NIVEL");

            entity.Property(e => e.Nota)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoAutorizador)
                .HasColumnName("TIPO_AUTORIZADOR")
                .HasComment("0 - Jefe 1- Gerente");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorGs)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_GS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizarPagos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PAGO_EMPRESA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.AutorizarPagos)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_AUTORIZAR_PAGO_PROVEEDOR");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.AutorizarPagos)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PAGO_TABLA");

            entity.HasOne(d => d.IdUsuarioAutRealNavigation)
                .WithMany(p => p.AutorizarPagoIdUsuarioAutRealNavigations)
                .HasForeignKey(d => d.IdUsuarioAutReal)
                .HasConstraintName("FK_AUTORIZAR_PAGO_USUARIO_REAL");

            entity.HasOne(d => d.IdUsuarioAutorizadorNavigation)
                .WithMany(p => p.AutorizarPagoIdUsuarioAutorizadorNavigations)
                .HasForeignKey(d => d.IdUsuarioAutorizador)
                .HasConstraintName("FK_AUTORIZAR_PAGO_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AutorizarPagos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PAGO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AutorizarProduccion>(entity =>
        {
            entity.HasKey(e => e.IdAutorizarProduccion);

            entity.ToTable("AUTORIZAR_PRODUCCION", "dbo");

            entity.Property(e => e.IdAutorizarProduccion).HasColumnName("ID_AUTORIZAR_PRODUCCION");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0: FA, 1:APROBADO");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.FechaOp)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_OP");

            entity.Property(e => e.FechaProgramacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROGRAMACION");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUsuarioAutorizador).HasColumnName("ID_USUARIO_AUTORIZADOR");

            entity.Property(e => e.Obs)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie).HasColumnName("SERIE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.AutorizarProduccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.AutorizarProduccions)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_DEPOSITO");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.AutorizarProduccions)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_FABRICA_LINEA");

            entity.HasOne(d => d.IdProduccionEtapaNavigation)
                .WithMany(p => p.AutorizarProduccionIdProduccionEtapaNavigations)
                .HasForeignKey(d => d.IdProduccionEtapa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_TABLA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AutorizarProduccions)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.AutorizarProduccionIdTablaNavigations)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_AUTORIZAR_PRODUCCION1");

            entity.HasOne(d => d.IdUsuarioAutorizadorNavigation)
                .WithMany(p => p.AutorizarProduccions)
                .HasForeignKey(d => d.IdUsuarioAutorizador)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.AutorizarProduccions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AUTORIZAR_PRODUCCION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<AuxCargaRack>(entity =>
        {
            entity.HasKey(e => e.IdAuxCargaRack);

            entity.ToTable("AUX_CARGA_RACK", "dbo");

            entity.Property(e => e.IdAuxCargaRack).HasColumnName("ID_AUX_CARGA_RACK");

            entity.Property(e => e.Accion)
                .HasColumnName("ACCION")
                .HasComment("0 = Error, no estaba vacio el lugar o no existe. -1 = No se encontro el lote, -2 = No se encontor el producto, -3 = Actualizo, pero no habia stock en tabla Stock. -4 = Encuentra mas de un lote. 1 = Ok. ");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("COD_PRODUCTO");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Orden)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ORDEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.AuxCargaRacks)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_AUX_CARGA_RACK_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.AuxCargaRacks)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_AUX_CARGA_RACK_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.AuxCargaRacks)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_AUX_CARGA_RACK_PRODUCTO");
        });

        modelBuilder.Entity<BalanceMercado>(entity =>
        {
            entity.HasKey(e => e.IdBalanceMercado)
                .HasName("PK_BALANCE_GENERAL");

            entity.ToTable("BALANCE_MERCADO", "dbo");

            entity.Property(e => e.IdBalanceMercado).HasColumnName("ID_BALANCE_MERCADO");

            entity.Property(e => e.Abonosag)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("ABONOSAG");

            entity.Property(e => e.Abonosbo)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("ABONOSBO");

            entity.Property(e => e.Abonosbr)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("ABONOSBR");

            entity.Property(e => e.Abonospy)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("ABONOSPY");

            entity.Property(e => e.Agroquimicosag)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("AGROQUIMICOSAG");

            entity.Property(e => e.Agroquimicosbo)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("AGROQUIMICOSBO");

            entity.Property(e => e.Agroquimicosbr)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("AGROQUIMICOSBR");

            entity.Property(e => e.Agroquimicospy)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("AGROQUIMICOSPY");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fertilizantesag)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("FERTILIZANTESAG");

            entity.Property(e => e.Fertilizantesbo)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("FERTILIZANTESBO");

            entity.Property(e => e.Fertilizantesbr)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("FERTILIZANTESBR");

            entity.Property(e => e.Fertilizantespy)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("FERTILIZANTESPY");

            entity.Property(e => e.Granosag)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("GRANOSAG");

            entity.Property(e => e.Granosbo)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("GRANOSBO");

            entity.Property(e => e.Granosbr)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("GRANOSBR");

            entity.Property(e => e.Granospy)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("GRANOSPY");

            entity.Property(e => e.Observacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoCuenta)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.Total)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BalanceVersion>(entity =>
        {
            entity.HasKey(e => e.IdBalanceVersion);

            entity.ToTable("BALANCE_VERSION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.CodigoVersion }, "UK_BALANCE_VERSION")
                .IsUnique();

            entity.Property(e => e.IdBalanceVersion).HasColumnName("ID_BALANCE_VERSION");

            entity.Property(e => e.CodigoVersion).HasColumnName("CODIGO_VERSION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdUsuario)
                .HasColumnName("ID_USUARIO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.BalanceVersions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BALANCE_VERSION_EMPRESA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.BalanceVersions)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_BALANCE_VERSION_ID_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.BalanceVersions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_BALANCE_VERSION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<BiAnho>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_ANHO", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");
        });

        modelBuilder.Entity<BiCarpeta>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_CARPETAS", "dbo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");
        });

        modelBuilder.Entity<BiCiudade>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_CIUDADES", "dbo");

            entity.Property(e => e.CodCiudad).HasColumnName("COD_CIUDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");
        });

        modelBuilder.Entity<BiCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_CLIENTES", "dbo");

            entity.Property(e => e.AreaArrendada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_ARRENDADA");

            entity.Property(e => e.AreaPropia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_PROPIA");

            entity.Property(e => e.CodCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_CLIENTE");

            entity.Property(e => e.DescCliente)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");

            entity.Property(e => e.IdClientes).HasColumnName("ID_CLIENTES");

            entity.Property(e => e.IdMarcaProducto).HasColumnName("ID_MARCA_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
        });

        modelBuilder.Entity<BiClienteLocalEntrega>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_CLIENTE_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.CodCiudad).HasColumnName("COD_CIUDAD");

            entity.Property(e => e.CodCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_CLIENTE");

            entity.Property(e => e.CodVendedor).HasColumnName("COD_VENDEDOR");

            entity.Property(e => e.DescCiudad)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_CIUDAD");

            entity.Property(e => e.DescCliente)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");

            entity.Property(e => e.DescVendedor)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_VENDEDOR");

            entity.Property(e => e.Direccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
        });

        modelBuilder.Entity<BiCultivo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_CULTIVOS", "dbo");

            entity.Property(e => e.CodCultivo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_CULTIVO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");
        });

        modelBuilder.Entity<BiDeposito>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_DEPOSITOS", "dbo");

            entity.Property(e => e.CodDeposito)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_DEPOSITO");

            entity.Property(e => e.DescDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_DEPOSITO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");
        });

        modelBuilder.Entity<BiEnvase>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_ENVASES", "dbo");

            entity.Property(e => e.DescEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESC_ENVASE");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");
        });

        modelBuilder.Entity<BiFuncionario>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_FUNCIONARIOS", "dbo");

            entity.Property(e => e.CodFuncionario).HasColumnName("COD_FUNCIONARIO");

            entity.Property(e => e.DescFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESC_FUNCIONARIO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");
        });

        modelBuilder.Entity<BiHecho>(entity =>
        {
            entity.HasKey(e => e.IdHechos)
                .HasName("PK__BI_HECHO__3A0FD81737488E29");

            entity.ToTable("BI_HECHOS", "dbo");

            entity.Property(e => e.IdHechos).HasColumnName("ID_HECHOS");

            entity.Property(e => e.CantidadCredito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_CREDITO");

            entity.Property(e => e.CantidadVenta)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_VENTA");

            entity.Property(e => e.CostoMedio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdFacturaExp).HasColumnName("ID_FACTURA_EXP");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.TotalCredito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL_CREDITO");

            entity.Property(e => e.TotalCreditoIvaInc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL_CREDITO_IVA_INC");

            entity.Property(e => e.TotalVenta)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL_VENTA");

            entity.Property(e => e.TotalVentaIvaInc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL_VENTA_IVA_INC");

            entity.Property(e => e.Unitario)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<BiHechosCuentaRecibir>(entity =>
        {
            entity.HasKey(e => e.IdBiHechosCuentaRecibir);

            entity.ToTable("BI_HECHOS_CUENTA_RECIBIR", "dbo");

            entity.Property(e => e.IdBiHechosCuentaRecibir).HasColumnName("ID_BI_HECHOS_CUENTA_RECIBIR");

            entity.Property(e => e.AnhoVenc).HasColumnName("ANHO_VENC");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Saldo)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("SALDO");

            entity.Property(e => e.TipoDeuda)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TIPO_DEUDA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<BiHechosFacturacion>(entity =>
        {
            entity.HasKey(e => e.IdBiHechosFacturacion);

            entity.ToTable("BI_HECHOS_FACTURACION", "dbo");

            entity.Property(e => e.IdBiHechosFacturacion).HasColumnName("ID_BI_HECHOS_FACTURACION");

            entity.Property(e => e.AnhoFactura).HasColumnName("ANHO_FACTURA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadNeta)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_NETA");

            entity.Property(e => e.Carpeta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CARPETA");

            entity.Property(e => e.CiudadFactura)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_FACTURA");

            entity.Property(e => e.CiudadLocalEntrega)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_LOCAL_ENTREGA");

            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DevolucionCantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DEVOLUCION_CANTIDAD");

            entity.Property(e => e.DevolucionTotal)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DEVOLUCION_TOTAL");

            entity.Property(e => e.DireccionFactura)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_FACTURA");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.FechaPedido)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PEDIDO");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NotaFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA_FACTURA");

            entity.Property(e => e.NotaRemision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA_REMISION");

            entity.Property(e => e.Total)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalNeto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_NETO");

            entity.Property(e => e.TotalNetoSiva)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_NETO_SIVA");

            entity.Property(e => e.Unitario)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<BiHechosGrano>(entity =>
        {
            entity.HasKey(e => e.IdHechosGranos);

            entity.ToTable("BI_HECHOS_GRANOS", "dbo");

            entity.Property(e => e.IdHechosGranos).HasColumnName("ID_HECHOS_GRANOS");

            entity.Property(e => e.AnhoZafra).HasColumnName("ANHO_ZAFRA");

            entity.Property(e => e.CantidadContratada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_CONTRATADA");

            entity.Property(e => e.CantidadEntregada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_ENTREGADA");

            entity.Property(e => e.CantidadEntregar)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_ENTREGAR");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FijacionCosto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("FIJACION_COSTO");

            entity.Property(e => e.FijacionLiquidada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("FIJACION_LIQUIDADA");

            entity.Property(e => e.FijacionLiquidar)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("FIJACION_LIQUIDAR");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.PromPrecio)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PROM_PRECIO");

            entity.Property(e => e.TotalLiquidado)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_LIQUIDADO");
        });

        modelBuilder.Entity<BiHechosGranosAux>(entity =>
        {
            entity.HasKey(e => e.IdHechosGranosAux);

            entity.ToTable("BI_HECHOS_GRANOS_AUX", "dbo");

            entity.Property(e => e.IdHechosGranosAux).HasColumnName("ID_HECHOS_GRANOS_AUX");

            entity.Property(e => e.AnhoZafra).HasColumnName("ANHO_ZAFRA");

            entity.Property(e => e.CantidadContratada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_CONTRATADA");

            entity.Property(e => e.CantidadEntregada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_ENTREGADA");

            entity.Property(e => e.CantidadEntregar)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_ENTREGAR");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FijacionCosto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("FIJACION_COSTO");

            entity.Property(e => e.FijacionLiquidada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("FIJACION_LIQUIDADA");

            entity.Property(e => e.FijacionLiquidar)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("FIJACION_LIQUIDAR");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.PromPrecio)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PROM_PRECIO");

            entity.Property(e => e.TotalLiquidado)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_LIQUIDADO");
        });

        modelBuilder.Entity<BiHechosLineaCredito>(entity =>
        {
            entity.HasKey(e => e.IdHechosLineaCredito);

            entity.ToTable("BI_HECHOS_LINEA_CREDITO", "dbo");

            entity.Property(e => e.IdHechosLineaCredito).HasColumnName("ID_HECHOS_LINEA_CREDITO");

            entity.Property(e => e.Adicionales)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("ADICIONALES");

            entity.Property(e => e.AnhoVenc).HasColumnName("ANHO_VENC");

            entity.Property(e => e.DeudaActual)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DEUDA_ACTUAL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Monto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("MONTO");

            entity.Property(e => e.PedidoPendiente)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PEDIDO_PENDIENTE");

            entity.Property(e => e.SaldoDisponible)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("SALDO_DISPONIBLE");

            entity.Property(e => e.TotalDisponible)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_DISPONIBLE");
        });

        modelBuilder.Entity<BiHechosPagaresPendiente>(entity =>
        {
            entity.HasKey(e => e.IdBiHechosPagaresPendientes)
                .HasName("PK_BI_HECHOS_PAGARES");

            entity.ToTable("BI_HECHOS_PAGARES_PENDIENTES", "dbo");

            entity.Property(e => e.IdBiHechosPagaresPendientes).HasColumnName("ID_BI_HECHOS_PAGARES_PENDIENTES");

            entity.Property(e => e.AnhoPagare).HasColumnName("ANHO_PAGARE");

            entity.Property(e => e.Dias).HasColumnName("DIAS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Pagare).HasColumnName("PAGARE");

            entity.Property(e => e.Portador)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PORTADOR");

            entity.Property(e => e.Valor)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<BiHechosPedido>(entity =>
        {
            entity.HasKey(e => e.IdHechos)
                .HasName("PK__BI_HECHO_PEDIDO__3A0FD81737488E29");

            entity.ToTable("BI_HECHOS_PEDIDO", "dbo");

            entity.Property(e => e.IdHechos).HasColumnName("ID_HECHOS");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadPedido)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CANTIDAD_PEDIDO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoProducto).HasColumnName("ID_PEDIDO_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.PendienteEntrega)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PENDIENTE_ENTREGA");

            entity.Property(e => e.Total)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL");
        });

        modelBuilder.Entity<BiHechosPedidoTm>(entity =>
        {
            entity.HasKey(e => e.IdHechosPedidosTm);

            entity.ToTable("BI_HECHOS_PEDIDO_TM", "dbo");

            entity.Property(e => e.IdHechosPedidosTm).HasColumnName("ID_HECHOS_PEDIDOS_TM");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Barrio)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Direccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entregado)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("ENTREGADO");

            entity.Property(e => e.Entregar)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("ENTREGAR");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.FechaPedido)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PEDIDO");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.Total)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalEntregado)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_ENTREGADO");

            entity.Property(e => e.TotalEntregar)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_ENTREGAR");

            entity.Property(e => e.Unitario)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<BiHechosPrevisionPedido>(entity =>
        {
            entity.HasKey(e => e.IdHechosPrevisionPedido);

            entity.ToTable("BI_HECHOS_PREVISION_PEDIDO", "dbo");

            entity.Property(e => e.IdHechosPrevisionPedido).HasColumnName("ID_HECHOS_PREVISION_PEDIDO");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.CantEntregado)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANT_ENTREGADO");

            entity.Property(e => e.CantPedido)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANT_PEDIDO");

            entity.Property(e => e.CantPendiente)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANT_PENDIENTE");

            entity.Property(e => e.CantPrevision)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANT_PREVISION");

            entity.Property(e => e.Costo)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DifPrevPedido)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DIF_PREV_PEDIDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.MargenBruto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("MARGEN_BRUTO");

            entity.Property(e => e.MargenNeto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("MARGEN_NETO");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.PrecioLista)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PRECIO_LISTA");

            entity.Property(e => e.TotalCosto)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_COSTO");

            entity.Property(e => e.TotalEntregado)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_ENTREGADO");

            entity.Property(e => e.TotalPedido)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_PEDIDO");

            entity.Property(e => e.TotalPendiente)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_PENDIENTE");

            entity.Property(e => e.TotalPrevision)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TOTAL_PREVISION");
        });

        modelBuilder.Entity<BiHechosStock>(entity =>
        {
            entity.HasKey(e => e.BiIdHechosStock);

            entity.ToTable("BI_HECHOS_STOCK", "dbo");

            entity.Property(e => e.BiIdHechosStock).HasColumnName("BI_ID_HECHOS_STOCK");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Saldo)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("SALDO");
        });

        modelBuilder.Entity<BiLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_LOTES", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Serie).HasColumnName("SERIE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .HasColumnName("TIPO")
                .IsFixedLength();

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<BiMarcasProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_MARCAS_PRODUCTOS", "dbo");

            entity.Property(e => e.CodMarcaProducto).HasColumnName("COD_MARCA_PRODUCTO");

            entity.Property(e => e.DescMarcaProducto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_MARCA_PRODUCTO");

            entity.Property(e => e.IdMarcaProducto).HasColumnName("ID_MARCA_PRODUCTO");
        });

        modelBuilder.Entity<BiPrincipiosActivo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_PRINCIPIOS_ACTIVOS", "dbo");

            entity.Property(e => e.DescPrincipioActivo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_PRINCIPIO_ACTIVO");

            entity.Property(e => e.IdPrincipioActivo).HasColumnName("ID_PRINCIPIO_ACTIVO");
        });

        modelBuilder.Entity<BiProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_PRODUCTOS", "dbo");

            entity.Property(e => e.CodProducto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_PRODUCTO");

            entity.Property(e => e.DescProducto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.IdMarcaProducto).HasColumnName("ID_MARCA_PRODUCTO");

            entity.Property(e => e.IdPrincipioActivo).HasColumnName("ID_PRINCIPIO_ACTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NacionalidadProveedor)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD_PROVEEDOR");

            entity.Property(e => e.Proveedor)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PROVEEDOR");

            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<BiRegione>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_REGIONES", "dbo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");
        });

        modelBuilder.Entity<BiUnidade>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_UNIDADES", "dbo");

            entity.Property(e => e.CodUnidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_UNIDAD");

            entity.Property(e => e.DescUnidad)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_UNIDAD");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<BiVendedore>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_VENDEDORES", "dbo");

            entity.Property(e => e.CodVendedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_VENDEDOR");

            entity.Property(e => e.DescGerente)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_GERENTE");

            entity.Property(e => e.DescVendedor)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_VENDEDOR");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
        });

        modelBuilder.Entity<BiZafra>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("BI_ZAFRAS", "dbo");

            entity.Property(e => e.CodZafra)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COD_ZAFRA");

            entity.Property(e => e.DescZafra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_ZAFRA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");
        });

        modelBuilder.Entity<BolsaValore>(entity =>
        {
            entity.HasKey(e => e.IdBolsaValores)
                .HasName("PK_BOLSAS");

            entity.ToTable("BOLSA_VALORES", "dbo");

            entity.Property(e => e.IdBolsaValores).HasColumnName("ID_BOLSA_VALORES");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.BolsaValores)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BOLSA_VALORES_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<BolsaValoresSimbolo>(entity =>
        {
            entity.HasKey(e => e.IdBolsaValoresSimbolo);

            entity.ToTable("BOLSA_VALORES_SIMBOLO", "dbo");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdBolsaValores).HasColumnName("ID_BOLSA_VALORES");

            entity.Property(e => e.MesBase).HasColumnName("MES_BASE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO")
                .HasDefaultValueSql("('')");

            entity.HasOne(d => d.IdBolsaValoresNavigation)
                .WithMany(p => p.BolsaValoresSimbolos)
                .HasForeignKey(d => d.IdBolsaValores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BOLSA_VALORES_SIMBOLO_BOLSA_VALORES");
        });

        modelBuilder.Entity<Camion>(entity =>
        {
            entity.HasKey(e => e.IdCamion)
                .HasName("PK_CAMION_SISTERNA");

            entity.ToTable("CAMION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CAMION")
                .IsUnique();

            entity.Property(e => e.IdCamion).HasColumnName("ID_CAMION");

            entity.Property(e => e.Capacidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CAPACIDAD")
                .HasComment("Capacidad del camion.");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTipoCamion).HasColumnName("ID_TIPO_CAMION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Camions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMION_EMPRESA");

            entity.HasOne(d => d.IdTipoCamionNavigation)
                .WithMany(p => p.Camions)
                .HasForeignKey(d => d.IdTipoCamion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMION_SISTERNA_TIPO_CAMION");
        });

        modelBuilder.Entity<CamionCargaImp>(entity =>
        {
            entity.HasKey(e => e.IdCamionCargaImp);

            entity.ToTable("CAMION_CARGA_IMP", "dbo");

            entity.Property(e => e.IdCamionCargaImp).HasColumnName("ID_CAMION_CARGA_IMP");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.FechaIngreso)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INGRESO");

            entity.Property(e => e.FechaSalida)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA");

            entity.Property(e => e.IdCamion).HasColumnName("ID_CAMION");

            entity.Property(e => e.IdComprobanteCargaImp).HasColumnName("ID_COMPROBANTE_CARGA_IMP");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TiempoLibre).HasColumnName("TIEMPO_LIBRE");

            entity.HasOne(d => d.IdCamionNavigation)
                .WithMany(p => p.CamionCargaImps)
                .HasForeignKey(d => d.IdCamion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMION_CARGA_IMP_CAMION");

            entity.HasOne(d => d.IdComprobanteCargaImpNavigation)
                .WithMany(p => p.CamionCargaImps)
                .HasForeignKey(d => d.IdComprobanteCargaImp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMION_CARGA_IMP_COMPROBANTE_CARGA_IMP");
        });

        modelBuilder.Entity<CampanhaPremio>(entity =>
        {
            entity.HasKey(e => e.IdCampanhaPremio)
                .HasName("PK__CAMPANHA__B6E1550BD597B05B");

            entity.ToTable("CAMPANHA_PREMIO", "dbo");

            entity.Property(e => e.IdCampanhaPremio).HasColumnName("ID_CAMPANHA_PREMIO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCierre)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE");

            entity.Property(e => e.FechaCierreCliente)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CIERRE_CLIENTE");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PorcentajeCliente)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE_CLIENTE");

            entity.Property(e => e.PorcentajeDistribuidor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE_DISTRIBUIDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CampanhaPremios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMPANHA_PREMIO_EMPRESA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.CampanhaPremios)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_CAMPANHA_PREMIO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CampanhaPremios)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CAMPANHA_PREMIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CampanhaPremioCultivo>(entity =>
        {
            entity.HasKey(e => e.IdCampanhaPremioCultivo)
                .HasName("PK__CAMPANHA__BE3937DD7FD6A6B4");

            entity.ToTable("CAMPANHA_PREMIO_CULTIVO", "dbo");

            entity.Property(e => e.IdCampanhaPremioCultivo).HasColumnName("ID_CAMPANHA_PREMIO_CULTIVO");

            entity.Property(e => e.IdCampanhaPremio).HasColumnName("ID_CAMPANHA_PREMIO");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCampanhaPremioNavigation)
                .WithMany(p => p.CampanhaPremioCultivos)
                .HasForeignKey(d => d.IdCampanhaPremio)
                .HasConstraintName("FK_CAMPANHA_PREMIO_CULTIVO_CAMPANHA_PREMIO");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.CampanhaPremioCultivos)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_CAMPANHA_PREMIO_CULTIVO_CULTIVO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.CampanhaPremioCultivos)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_CAMPANHA_PREMIO_CULTIVO_ZAFRA");
        });

        modelBuilder.Entity<CampanhaPremioProducto>(entity =>
        {
            entity.HasKey(e => e.IdCampanhaPremioProducto)
                .HasName("PK__CAMPANHA__DFDF4F6EECFEF186");

            entity.ToTable("CAMPANHA_PREMIO_PRODUCTO", "dbo");

            entity.Property(e => e.IdCampanhaPremioProducto).HasColumnName("ID_CAMPANHA_PREMIO_PRODUCTO");

            entity.Property(e => e.Aplicaciones)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("APLICACIONES");

            entity.Property(e => e.Clasificacion).HasColumnName("CLASIFICACION");

            entity.Property(e => e.Dosis)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DOSIS");

            entity.Property(e => e.IdCampanhaPremio).HasColumnName("ID_CAMPANHA_PREMIO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Listar).HasColumnName("LISTAR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCampanhaPremioNavigation)
                .WithMany(p => p.CampanhaPremioProductos)
                .HasForeignKey(d => d.IdCampanhaPremio)
                .HasConstraintName("FK_CAMPANHA_PREMIO_PRODUCTO_CAMPANHA_PREMIO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CampanhaPremioProductos)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_CAMPANHA_PREMIO_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<CampoSemilla>(entity =>
        {
            entity.HasKey(e => e.IdCampoSemilla)
                .HasName("PK__CAMPO_SE__86EE5E64C23C1485");

            entity.ToTable("CAMPO_SEMILLA", "dbo");

            entity.Property(e => e.IdCampoSemilla).HasColumnName("ID_CAMPO_SEMILLA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CampoSemillas)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CAMPO_SEMILLA_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.CampoSemillas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CAMPO_SEMILLA_CLIENTE");
        });

        modelBuilder.Entity<CampoSemillaDet>(entity =>
        {
            entity.HasKey(e => e.IdCampoSemillaDet)
                .HasName("PK__CAMPO_SE__74FFC2C725032DD0");

            entity.ToTable("CAMPO_SEMILLA_DET", "dbo");

            entity.Property(e => e.IdCampoSemillaDet).HasColumnName("ID_CAMPO_SEMILLA_DET");

            entity.Property(e => e.CodigoIntegracion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTEGRACION");

            entity.Property(e => e.IdCampoSemilla).HasColumnName("ID_CAMPO_SEMILLA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCampoSemillaNavigation)
                .WithMany(p => p.CampoSemillaDets)
                .HasForeignKey(d => d.IdCampoSemilla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMPO_SEMILLA_DET_CAMPO_SEMILLA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CampoSemillaDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAMPO_SEMILLA_DET_PRODUCTO");
        });

        modelBuilder.Entity<Carga>(entity =>
        {
            entity.HasKey(e => e.IdCarga);

            entity.ToTable("CARGA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CARGA")
                .IsUnique();

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Controlador).HasColumnName("CONTROLADOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVehiculoPk)
                .HasColumnName("ID_VEHICULO_PK")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.KmActualizado)
                .HasColumnName("KM_ACTUALIZADO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.KmEstimado)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("KM_ESTIMADO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.KmFinal)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("KM_FINAL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.LanzVascula)
                .HasColumnName("LANZ_VASCULA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Llegada)
                .HasColumnType("datetime")
                .HasColumnName("LLEGADA");

            entity.Property(e => e.Notas)
                .IsUnicode(false)
                .HasColumnName("NOTAS");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoNetoVascula)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PESO_NETO_VASCULA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("datetime")
                .HasColumnName("SALIDA");

            entity.Property(e => e.TipoCarga)
                .HasColumnName("TIPO_CARGA")
                .HasComment("0= local; 1 = Exterior;");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.HasOne(d => d.AutorizadorNavigation)
                .WithMany(p => p.CargaAutorizadorNavigations)
                .HasForeignKey(d => d.Autorizador)
                .HasConstraintName("FK_CARGA_FUNCIONARIO");

            entity.HasOne(d => d.ControladorNavigation)
                .WithMany(p => p.CargaControladorNavigations)
                .HasForeignKey(d => d.Controlador)
                .HasConstraintName("FK_CARGA_FUNCIONARIO1");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Cargas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.Cargas)
                .HasForeignKey(d => d.IdChofer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_CHOFER");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.Cargas)
                .HasForeignKey(d => d.IdTransportadora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_TRANSPORTADORA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.CargaIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CargaRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CargaExportacion>(entity =>
        {
            entity.HasKey(e => e.IdCargaExportacion);

            entity.ToTable("CARGA_EXPORTACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CARGA_EXPORTACION")
                .IsUnique();

            entity.Property(e => e.IdCargaExportacion).HasColumnName("ID_CARGA_EXPORTACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NroCamion).HasColumnName("NRO_CAMION");

            entity.Property(e => e.NroCarga).HasColumnName("NRO_CARGA");

            entity.Property(e => e.PedidoExterior)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PEDIDO_EXTERIOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_FLETE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CargaExportacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.CargaExportacions)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_CLIENTE");

            entity.HasOne(d => d.IdTipoTransporteNavigation)
                .WithMany(p => p.CargaExportacions)
                .HasForeignKey(d => d.IdTipoTransporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_TIPO_TRANSPORTE");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.CargaExportacions)
                .HasForeignKey(d => d.IdTransportadora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_TRANSPORTADORA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CargaExportacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CargaExportacionProducto>(entity =>
        {
            entity.HasKey(e => e.IdCargaExportacionProducto);

            entity.ToTable("CARGA_EXPORTACION_PRODUCTO", "dbo");

            entity.Property(e => e.IdCargaExportacionProducto).HasColumnName("ID_CARGA_EXPORTACION_PRODUCTO");

            entity.Property(e => e.CantFabricacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_FABRICACION");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadPallet)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD_PALLET");

            entity.Property(e => e.CapacidadEstiba)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CAPACIDAD_ESTIBA");

            entity.Property(e => e.Densidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("DENSIDAD");

            entity.Property(e => e.DescLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESC_LOTE");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.IdCargaExportacion).HasColumnName("ID_CARGA_EXPORTACION");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.PesoEnvase)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_ENVASE");

            entity.Property(e => e.PesoMaterialEspecial)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_MATERIAL_ESPECIAL");

            entity.Property(e => e.PesoPorPallet)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_POR_PALLET");

            entity.Property(e => e.PesoTotalPallet)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_TOTAL_PALLET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.TipoPresentacion).HasColumnName("TIPO_PRESENTACION");

            entity.HasOne(d => d.IdCargaExportacionNavigation)
                .WithMany(p => p.CargaExportacionProductos)
                .HasForeignKey(d => d.IdCargaExportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_PRODUCTO_CARGA_EXPORTACION");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.CargaExportacionProductos)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_PRODUCTO_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.CargaExportacionProductos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.CargaExportacionProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CargaExportacionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_EXPORTACION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<CargaMaterialEspecial>(entity =>
        {
            entity.HasKey(e => e.IdCargaMaterialEspecial);

            entity.ToTable("CARGA_MATERIAL_ESPECIAL", "dbo");

            entity.Property(e => e.IdCargaMaterialEspecial).HasColumnName("ID_CARGA_MATERIAL_ESPECIAL");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Peso)
                .HasColumnName("PESO")
                .HasComment("El peso de fabril_material_especial");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCargaNavigation)
                .WithMany(p => p.CargaMaterialEspecials)
                .HasForeignKey(d => d.IdCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_MATERIAL_ESPECIAL_CARGA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CargaMaterialEspecials)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_MATERIAL_ESPECIAL_PRODUCTO");
        });

        modelBuilder.Entity<CargaNotaRemision>(entity =>
        {
            entity.HasKey(e => e.IdCargaNotaRemision);

            entity.ToTable("CARGA_NOTA_REMISION", "dbo");

            entity.HasIndex(e => new { e.IdCarga, e.IdNota }, "UK_CARGA_NOTA_REMISION");

            entity.Property(e => e.IdCargaNotaRemision).HasColumnName("ID_CARGA_NOTA_REMISION");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");

            entity.Property(e => e.IdNota).HasColumnName("ID_NOTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoNota)
                .HasColumnName("TIPO_NOTA")
                .HasComment("0 - Nota Remision  1 - Nota Remision Exportacion  2 - Nota de Envio");

            entity.HasOne(d => d.IdCargaNavigation)
                .WithMany(p => p.CargaNotaRemisions)
                .HasForeignKey(d => d.IdCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_NOTA_REMISION_CARGA");
        });

        modelBuilder.Entity<CargaProducto>(entity =>
        {
            entity.HasKey(e => e.IdCargaProducto);

            entity.ToTable("CARGA_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdCarga, e.IdProducto, e.IdLote, e.RegStatus }, "UK_CARGA_PRODUCTO");

            entity.Property(e => e.IdCargaProducto).HasColumnName("ID_CARGA_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCargaNavigation)
                .WithMany(p => p.CargaProductos)
                .HasForeignKey(d => d.IdCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_PRODUCTO_CARGA");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.CargaProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CargaProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARGA_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<Cargo>(entity =>
        {
            entity.HasKey(e => e.IdCargoPk);

            entity.ToTable("CARGO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdCargo }, "UK_CARGO")
                .IsUnique();

            entity.Property(e => e.IdCargoPk).HasColumnName("ID_CARGO_PK");

            entity.Property(e => e.DatosArea)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DATOS_AREA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Funcion)
                .IsUnicode(false)
                .HasColumnName("FUNCION");

            entity.Property(e => e.Habilidad)
                .IsUnicode(false)
                .HasColumnName("HABILIDAD");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Resultado)
                .IsUnicode(false)
                .HasColumnName("RESULTADO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Cargos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CARGO_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.Cargos)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_CARGO_DEPARTAMENTO");
        });

        modelBuilder.Entity<Carpetum>(entity =>
        {
            entity.HasKey(e => e.IdCarpeta);

            entity.ToTable("CARPETA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_CARPETA")
                .IsUnique();

            entity.Property(e => e.IdCarpeta)
                .ValueGeneratedNever()
                .HasColumnName("ID_CARPETA");

            entity.Property(e => e.Activo)
                .HasColumnName("ACTIVO")
                .HasComment("Pedido hecho por Sandro para el listado de cuentas a recibir para saber las carpetas activas");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCarpetaPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CARPETA_PK");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Carpeta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARPETA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Carpeta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARPETA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Cartera>(entity =>
        {
            entity.HasKey(e => e.IdCartera);

            entity.ToTable("CARTERA", "dbo");

            entity.Property(e => e.IdCartera).HasColumnName("ID_CARTERA");

            entity.Property(e => e.Activo)
                .HasColumnName("ACTIVO")
                .HasDefaultValueSql("((0))")
                .HasComment("0:NO, 1:SI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("date")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("date")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Carteras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARTERA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Carteras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARTERA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CarteraLocalEntrega>(entity =>
        {
            entity.HasKey(e => e.IdCarteraLocalEntrega);

            entity.ToTable("CARTERA_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.IdCarteraLocalEntrega).HasColumnName("ID_CARTERA_LOCAL_ENTREGA");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("date")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("date")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdCartera).HasColumnName("ID_CARTERA");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCarteraNavigation)
                .WithMany(p => p.CarteraLocalEntregas)
                .HasForeignKey(d => d.IdCartera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARTERA_LOCAL_ENTREGA_CARTERA");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.CarteraLocalEntregas)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARTERA_LOCAL_ENTREGA_CLIENTE_LOCAL_ENTREGA");
        });

        modelBuilder.Entity<CarteraVendedor>(entity =>
        {
            entity.HasKey(e => e.IdCarteraVendedor);

            entity.ToTable("CARTERA_VENDEDOR", "dbo");

            entity.Property(e => e.IdCarteraVendedor).HasColumnName("ID_CARTERA_VENDEDOR");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("date")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("date")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdCartera).HasColumnName("ID_CARTERA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCarteraNavigation)
                .WithMany(p => p.CarteraVendedors)
                .HasForeignKey(d => d.IdCartera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARTERA_VENDEDOR_CARTERA");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.CarteraVendedors)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CARTERA_VENDEDOR_VENDEDOR");
        });

        modelBuilder.Entity<CategoriaCargaFabril>(entity =>
        {
            entity.HasKey(e => e.IdCategoriaCargaFabril);

            entity.ToTable("CATEGORIA_CARGA_FABRIL", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CATEGORIA_CARGA_FABRIL")
                .IsUnique();

            entity.Property(e => e.IdCategoriaCargaFabril).HasColumnName("ID_CATEGORIA_CARGA_FABRIL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 - Inactivo 1 - Activo");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())")
                .HasComment("");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CategoriaCargaFabrils)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CATEGORIA_CARGA_FABRIL_EMPRESA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.CategoriaCargaFabrils)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CATEGORIA_CARGA_FABRIL_ZAFRA");
        });

        modelBuilder.Entity<CategoriaCargaFabrilDet>(entity =>
        {
            entity.HasKey(e => e.IdCatCargaFabrilDet);

            entity.ToTable("CATEGORIA_CARGA_FABRIL_DET", "dbo");

            entity.Property(e => e.IdCatCargaFabrilDet).HasColumnName("ID_CAT_CARGA_FABRIL_DET");

            entity.Property(e => e.Codigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCategoriaCargaFabril).HasColumnName("ID_CATEGORIA_CARGA_FABRIL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCategoriaCargaFabrilNavigation)
                .WithMany(p => p.CategoriaCargaFabrilDets)
                .HasForeignKey(d => d.IdCategoriaCargaFabril)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CATEGORIA_CARGA_FABRIL_DET_CATEGORIA_CARGA_FABRIL");
        });

        modelBuilder.Entity<CategoriaSemilla>(entity =>
        {
            entity.HasKey(e => e.IdCategoriaSemilla);

            entity.ToTable("CATEGORIA_SEMILLA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CATEGORIA_SEMILLA")
                .IsUnique();

            entity.Property(e => e.IdCategoriaSemilla).HasColumnName("ID_CATEGORIA_SEMILLA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CategoriaSemillas)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CATEGORIA_SEMILLA_EMPRESA");
        });

        modelBuilder.Entity<CategoriaVentum>(entity =>
        {
            entity.HasKey(e => e.IdCategoriaVenta);

            entity.ToTable("CATEGORIA_VENTA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CATEGORIA_VENTA")
                .IsUnique();

            entity.Property(e => e.IdCategoriaVenta)
                .ValueGeneratedNever()
                .HasColumnName("ID_CATEGORIA_VENTA");

            entity.Property(e => e.Codigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.ComisionAtc).HasColumnName("COMISION_ATC");

            entity.Property(e => e.ComisionGerencial).HasColumnName("COMISION_GERENCIAL");

            entity.Property(e => e.ComisionVenta).HasColumnName("COMISION_VENTA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CategoriaVenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CATEGORIA_VENTA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CategoriaVenta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CATEGORIA_VENTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Categorium>(entity =>
        {
            entity.HasKey(e => e.IdCategoria);

            entity.ToTable("CATEGORIA", "dbo");

            entity.HasIndex(e => e.Descripcion, "UK_CATEGORIA")
                .IsUnique();

            entity.Property(e => e.IdCategoria).HasColumnName("ID_CATEGORIA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Categoria)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CATEGORIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CcaAnalisi>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CCA_ANALISIS", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EsNumero).HasColumnName("ES_NUMERO");

            entity.Property(e => e.EsPack).HasColumnName("ES_PACK");

            entity.Property(e => e.EsString).HasColumnName("ES_STRING");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.IdCcaAnalisis)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CCA_ANALISIS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");
        });

        modelBuilder.Entity<CcaAnalisisDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CCA_ANALISIS_DET", "dbo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCcaAnalisis).HasColumnName("ID_CCA_ANALISIS");

            entity.Property(e => e.IdCcaAnalisisDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CCA_ANALISIS_DET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<CcaMuestraEtapa>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CCA_MUESTRA_ETAPA", "dbo");

            entity.Property(e => e.Abreviatura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ABREVIATURA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCcaMuestraEtapa)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CCA_MUESTRA_ETAPA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<CcaMuestraPp>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CCA_MUESTRA_PP", "dbo");

            entity.Property(e => e.Cierre).HasColumnName("CIERRE");

            entity.Property(e => e.Cm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CM");

            entity.Property(e => e.Conforme).HasColumnName("CONFORME");

            entity.Property(e => e.DescRevision)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REVISION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaEntrada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTRADA");

            entity.Property(e => e.FechaSalidaControlFq)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA_CONTROL_FQ");

            entity.Property(e => e.FechaSalidaCrom)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA_CROM");

            entity.Property(e => e.FuncAnalistaControlFq).HasColumnName("FUNC_ANALISTA_CONTROL_FQ");

            entity.Property(e => e.FuncAnalistaCrom).HasColumnName("FUNC_ANALISTA_CROM");

            entity.Property(e => e.IdCcaMuestraEtapa).HasColumnName("ID_CCA_MUESTRA_ETAPA");

            entity.Property(e => e.IdCcaMuestraPp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CCA_MUESTRA_PP");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.IncSacRecNro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INC_SAC_REC_NRO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroRevision).HasColumnName("NRO_REVISION");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoTanque)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PESO_TANQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SubLote).HasColumnName("SUB_LOTE");

            entity.Property(e => e.Volumen)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VOLUMEN");
        });

        modelBuilder.Entity<CcaMuestraPpAnalisi>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CCA_MUESTRA_PP_ANALISIS", "dbo");

            entity.Property(e => e.Aprobado).HasColumnName("APROBADO");

            entity.Property(e => e.IdCcaAnalisis).HasColumnName("ID_CCA_ANALISIS");

            entity.Property(e => e.IdCcaMuestraPp).HasColumnName("ID_CCA_MUESTRA_PP");

            entity.Property(e => e.IdCcaMuestraPpAnalisis)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CCA_MUESTRA_PP_ANALISIS");

            entity.Property(e => e.Inc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("INC");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoDato).HasColumnName("TIPO_DATO");

            entity.Property(e => e.ValorNumero)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_NUMERO");

            entity.Property(e => e.ValorString)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("VALOR_STRING");
        });

        modelBuilder.Entity<CcaMuestraPpAnalisisDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("CCA_MUESTRA_PP_ANALISIS_DET", "dbo");

            entity.Property(e => e.IdCcaAnalisisDet).HasColumnName("ID_CCA_ANALISIS_DET");

            entity.Property(e => e.IdCcaMuestraPpAnalisDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CCA_MUESTRA_PP_ANALIS_DET");

            entity.Property(e => e.IdCcaMuestraPpAnalisis).HasColumnName("ID_CCA_MUESTRA_PP_ANALISIS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<Chequera>(entity =>
        {
            entity.HasKey(e => e.IdChequera);

            entity.ToTable("CHEQUERA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CHEQUERA")
                .IsUnique();

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.Codigo)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.PrimerCheque).HasColumnName("PRIMER_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.UltimoCheque).HasColumnName("ULTIMO_CHEQUE");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Chequeras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHEQUERA_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.Chequeras)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_CHEQUERA_CUENTA_CORRIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Chequeras)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CHEQUERA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ChequeraDetalle>(entity =>
        {
            entity.HasKey(e => e.IdChequeraDetalle);

            entity.ToTable("CHEQUERA_DETALLE", "dbo");

            entity.Property(e => e.IdChequeraDetalle).HasColumnName("ID_CHEQUERA_DETALLE");

            entity.Property(e => e.Cheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHEQUE");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Status)
                .HasColumnName("STATUS")
                .HasComment("0: Anulado, 1: Extraviado, 2: Robado, 3: No Cobrado");

            entity.Property(e => e.StatusFecha)
                .HasColumnType("datetime")
                .HasColumnName("STATUS_FECHA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.ChequeraDetalles)
                .HasForeignKey(d => d.IdChequera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHEQUERA_DETALLE_CHEQUERA");
        });

        modelBuilder.Entity<Chofer>(entity =>
        {
            entity.HasKey(e => e.IdChofer)
                .HasName("PK_CONDUTORES");

            entity.ToTable("CHOFER", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CHOFER")
                .IsUnique();

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BloqueoFin)
                .HasColumnType("datetime")
                .HasColumnName("BLOQUEO_FIN");

            entity.Property(e => e.BloqueoIni)
                .HasColumnType("datetime")
                .HasColumnName("BLOQUEO_INI");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Dinatran)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DINATRAN");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Registro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REGISTRO");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.VencimientoDinatran)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_DINATRAN");

            entity.Property(e => e.VencimientoRegistro)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_REGISTRO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Chofers)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHOFER_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Chofers)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_CHOFER_CIUDAD");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.Chofers)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_CHOFER_FUNCIONARIO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.Chofers)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_CHOFER_TRANSPORTADORA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Chofers)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CHOFER_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Ciudad>(entity =>
        {
            entity.HasKey(e => e.IdCiudad);

            entity.ToTable("CIUDAD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CIUDAD")
                .IsUnique();

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.CodMonsanto).HasColumnName("COD_MONSANTO");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Ciudads)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CIUDAD_EMPRESA");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.Ciudads)
                .HasForeignKey(d => d.IdMunicipio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CIUDAD_MUNICIPIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Ciudads)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CIUDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Clase>(entity =>
        {
            entity.HasKey(e => e.IdClase);

            entity.ToTable("CLASE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CLASE")
                .IsUnique();

            entity.Property(e => e.IdClase).HasColumnName("ID_CLASE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Clases)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLASE_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Clases)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLASE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente);

            entity.ToTable("CLIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CLIENTE")
                .IsUnique();

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.AaComercial)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AA_COMERCIAL");

            entity.Property(e => e.AaCultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_CULTIVADA");

            entity.Property(e => e.AaNocultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_NOCULTIVADA");

            entity.Property(e => e.AaPastura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_PASTURA");

            entity.Property(e => e.AaTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_TOTAL");

            entity.Property(e => e.Actividad)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ACTIVIDAD");

            entity.Property(e => e.AnalisisComercial).HasColumnName("ANALISIS_COMERCIAL");

            entity.Property(e => e.ApComercial)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AP_COMERCIAL");

            entity.Property(e => e.ApCultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_CULTIVADA");

            entity.Property(e => e.ApNocultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_NOCULTIVADA");

            entity.Property(e => e.ApPastura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_PASTURA");

            entity.Property(e => e.ApTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_TOTAL");

            entity.Property(e => e.Asistencia)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ASISTENCIA");

            entity.Property(e => e.Asociacion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ASOCIACION");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.BloqueoAmbiental).HasColumnName("BLOQUEO_AMBIENTAL");

            entity.Property(e => e.BloqueoAmbientalMotivo)
                .IsUnicode(false)
                .HasColumnName("BLOQUEO_AMBIENTAL_MOTIVO");

            entity.Property(e => e.BloqueoContrato).HasColumnName("BLOQUEO_CONTRATO");

            entity.Property(e => e.BloqueoInmueble).HasColumnName("BLOQUEO_INMUEBLE");

            entity.Property(e => e.BloqueoMotivo)
                .IsUnicode(false)
                .HasColumnName("BLOQUEO_MOTIVO");

            entity.Property(e => e.Calificacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.CapSiloComercial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAP_SILO_COMERCIAL");

            entity.Property(e => e.Capital)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPITAL");

            entity.Property(e => e.CarnetInmigrante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CARNET_INMIGRANTE");

            entity.Property(e => e.Categoria)
                .HasColumnName("CATEGORIA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.CedulaExtranjera)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CEDULA_EXTRANJERA");

            entity.Property(e => e.Celular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.ChkAmbiental).HasColumnName("CHK_AMBIENTAL");

            entity.Property(e => e.ChkArrendamiento).HasColumnName("CHK_ARRENDAMIENTO");

            entity.Property(e => e.ChkAta).HasColumnName("CHK_ATA");

            entity.Property(e => e.ChkBalance).HasColumnName("CHK_BALANCE");

            entity.Property(e => e.ChkCartaPoder).HasColumnName("CHK_CARTA_PODER");

            entity.Property(e => e.ChkDisolucion).HasColumnName("CHK_DISOLUCION");

            entity.Property(e => e.ChkEstatuto).HasColumnName("CHK_ESTATUTO");

            entity.Property(e => e.ChkEstatutoSrl).HasColumnName("CHK_ESTATUTO_SRL");

            entity.Property(e => e.ChkFirma).HasColumnName("CHK_FIRMA");

            entity.Property(e => e.ChkForm101).HasColumnName("CHK_FORM_101");

            entity.Property(e => e.ChkForm110).HasColumnName("CHK_FORM_110");

            entity.Property(e => e.ChkForm153).HasColumnName("CHK_FORM_153");

            entity.Property(e => e.ChkIdentidad).HasColumnName("CHK_IDENTIDAD");

            entity.Property(e => e.ChkIdentidadConyuge).HasColumnName("CHK_IDENTIDAD_CONYUGE");

            entity.Property(e => e.ChkInformconf).HasColumnName("CHK_INFORMCONF");

            entity.Property(e => e.ChkManifestEmp).HasColumnName("CHK_MANIFEST_EMP");

            entity.Property(e => e.ChkManifestacion).HasColumnName("CHK_MANIFESTACION");

            entity.Property(e => e.ChkMaquinaria).HasColumnName("CHK_MAQUINARIA");

            entity.Property(e => e.ChkPoder).HasColumnName("CHK_PODER");

            entity.Property(e => e.ChkRuc).HasColumnName("CHK_RUC");

            entity.Property(e => e.ChkTitulo).HasColumnName("CHK_TITULO");

            entity.Property(e => e.Ci)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CiVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("CI_VENCIMIENTO");

            entity.Property(e => e.Clase).HasColumnName("CLASE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");

            entity.Property(e => e.ComercializaProduccion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COMERCIALIZA_PRODUCCION");

            entity.Property(e => e.Completo).HasColumnName("COMPLETO");

            entity.Property(e => e.Conyuge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONYUGE");

            entity.Property(e => e.ConyugeCi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_CI");

            entity.Property(e => e.ConyugeDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_DIRECCION");

            entity.Property(e => e.ConyugeNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("CONYUGE_NACIMIENTO");

            entity.Property(e => e.ConyugeNacionalidad)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_NACIONALIDAD");

            entity.Property(e => e.Cooperativa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COOPERATIVA");

            entity.Property(e => e.Desbloqueo).HasColumnName("DESBLOQUEO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Diplomatico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIPLOMATICO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Distribuidor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DISTRIBUIDOR");

            entity.Property(e => e.EMail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("E_MAIL");

            entity.Property(e => e.EMail2)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("E_MAIL_2");

            entity.Property(e => e.EmailContador)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL_CONTADOR");

            entity.Property(e => e.EmailFirmaDigital)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL_FIRMA_DIGITAL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil)
                .HasColumnName("ESTADO_CIVIL")
                .HasComment("Soltero = 0, Casado o Separado = 1, Divorciado = 3, Viudo = 4. Por defecto es 0.");

            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ACTUALIZACION");

            entity.Property(e => e.FechaCalificacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CALIFICACION");

            entity.Property(e => e.FechaLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LLEGADA");

            entity.Property(e => e.FechaNacComercial)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NAC_COMERCIAL");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FechaRating)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RATING");

            entity.Property(e => e.FirmaDigital).HasColumnName("FIRMA_DIGITAL");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdClienteTm)
                .HasColumnName("ID_CLIENTE_TM")
                .HasDefaultValueSql("((0))")
                .HasComment("Se guardara el id del cliente correspondiente a Tecnomyl para asi alimentar el listado de cuentas a recibir consolidado");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdentificacionTributaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDENTIFICACION_TRIBUTARIA");

            entity.Property(e => e.Imagro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IMAGRO")
                .HasComment("Si es NULL = 'N', sino 'S'");

            entity.Property(e => e.Intercompany).HasColumnName("INTERCOMPANY");

            entity.Property(e => e.InviernoAvena)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INVIERNO_AVENA");

            entity.Property(e => e.InviernoGirasol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INVIERNO_GIRASOL");

            entity.Property(e => e.InviernoMaizSafrinha)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INVIERNO_MAIZ_SAFRINHA");

            entity.Property(e => e.InviernoOtras)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INVIERNO_OTRAS");

            entity.Property(e => e.InviernoTrigo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INVIERNO_TRIGO");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.NivelAdministrativo).HasColumnName("NIVEL_ADMINISTRATIVO");

            entity.Property(e => e.NivelVida).HasColumnName("NIVEL_VIDA");

            entity.Property(e => e.NucleoFamiliar).HasColumnName("NUCLEO_FAMILIAR");

            entity.Property(e => e.ObsComercial)
                .IsUnicode(false)
                .HasColumnName("OBS_COMERCIAL");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pasaporte)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PASAPORTE");

            entity.Property(e => e.Porte)
                .HasColumnName("PORTE")
                .HasComment("Pequeño = 1, Mediano = 2, Grande = 3, Otros = 0. Por defecto es 0.");

            entity.Property(e => e.Procesamiento).HasColumnName("PROCESAMIENTO");

            entity.Property(e => e.Rating)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RATING");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RegimenCasamiento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGIMEN_CASAMIENTO");

            entity.Property(e => e.ResponsableCredito).HasColumnName("RESPONSABLE_CREDITO");

            entity.Property(e => e.Riesgo)
                .HasColumnName("RIESGO")
                .HasComment("P. S. R.= 1, M. S. R. o M.S.R.= 2, G. S. R.= 3, P. R. M.= 4, M. R. M.= 5, G. R. M.= 6, P. G. R.= 7, M. G. R.= 8, G. G. R.= 9, Otros =0. Por defecto es 0.");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA");

            entity.Property(e => e.Sexo)
                .HasColumnName("SEXO")
                .HasDefaultValueSql("((0))")
                .HasComment("0: Hombre 1: Mujer 2: Indefinido");

            entity.Property(e => e.SexoConyuge)
                .HasColumnName("SEXO_CONYUGE")
                .HasDefaultValueSql("((0))")
                .HasComment("0: Hombre 1: Mujer 2: Indefinido");

            entity.Property(e => e.SituacionCredComercial).HasColumnName("SITUACION_CRED_COMERCIAL");

            entity.Property(e => e.TelComercial)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TEL_COMERCIAL");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TipoComercial).HasColumnName("TIPO_COMERCIAL");

            entity.Property(e => e.TipoEmpresaJuridica).HasColumnName("TIPO_EMPRESA_JURIDICA");

            entity.Property(e => e.TipoNacionalidad).HasColumnName("TIPO_NACIONALIDAD");

            entity.Property(e => e.TipoPersona)
                .HasColumnName("TIPO_PERSONA")
                .HasComment("Fisico = 0, Juridico = 1. Por defecto es 0.");

            entity.Property(e => e.TipoPrevision).HasColumnName("TIPO_PREVISION");

            entity.Property(e => e.TotalActivo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_ACTIVO");

            entity.Property(e => e.TotalPasivo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_PASIVO");

            entity.Property(e => e.TotalPatrimonio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_PATRIMONIO");

            entity.Property(e => e.VeranoAlgodon)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERANO_ALGODON");

            entity.Property(e => e.VeranoMaiz)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERANO_MAIZ");

            entity.Property(e => e.VeranoOtras)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERANO_OTRAS");

            entity.Property(e => e.VeranoSoja)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERANO_SOJA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Clientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CIUDAD");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_CLIENTE_PLAN_CUENTA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CLIENTE_USUARIO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_VENDEDOR");
        });

        modelBuilder.Entity<ClienteAccionistaCargo>(entity =>
        {
            entity.HasKey(e => e.IdClienteAccionistaCargo);

            entity.ToTable("CLIENTE_ACCIONISTA_CARGO", "dbo");

            entity.Property(e => e.IdClienteAccionistaCargo).HasColumnName("ID_CLIENTE_ACCIONISTA_CARGO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<ClienteAccionistum>(entity =>
        {
            entity.HasKey(e => e.IdClienteAccionista);

            entity.ToTable("CLIENTE_ACCIONISTA", "dbo");

            entity.HasIndex(e => new { e.IdCliente, e.Descripcion, e.RegStatus }, "UK_CLIENTE_ACCIONISTA")
                .IsUnique();

            entity.Property(e => e.IdClienteAccionista).HasColumnName("ID_CLIENTE_ACCIONISTA");

            entity.Property(e => e.ActaFecha)
                .HasColumnType("date")
                .HasColumnName("ACTA_FECHA");

            entity.Property(e => e.ActaNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ACTA_NUMERO");

            entity.Property(e => e.ArticuloNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ARTICULO_NUMERO");

            entity.Property(e => e.Cargo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CARGO")
                .HasComment("Desde el 29/08/16 se acepta el valor null a pedido de Sandro Mattos");

            entity.Property(e => e.CargoRepresentante)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CARGO_REPRESENTANTE");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CiRepresentante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_REPRESENTANTE");

            entity.Property(e => e.CiVencimientoAcc)
                .HasColumnType("date")
                .HasColumnName("CI_VENCIMIENTO_ACC");

            entity.Property(e => e.CiVencimientoRep)
                .HasColumnType("date")
                .HasColumnName("CI_VENCIMIENTO_REP");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Duracion)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("DURACION");

            entity.Property(e => e.FirmaConjunta)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FIRMA_CONJUNTA");

            entity.Property(e => e.FirmaIndistinta)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FIRMA_INDISTINTA");

            entity.Property(e => e.FirmaIndividual)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FIRMA_INDIVIDUAL");

            entity.Property(e => e.Firmante)
                .HasColumnName("FIRMANTE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteAccionistaCargo)
                .HasColumnName("ID_CLIENTE_ACCIONISTA_CARGO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Participacion)
                .HasColumnName("PARTICIPACION")
                .HasComment("Desde el 29/08/16 se acepta el valor null a pedido de Sandro Mattos");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RepresentanteDesc)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DESC");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteAccionista)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_ACCIONISTA_CLIENTE");

            entity.HasOne(d => d.IdClienteAccionistaCargoNavigation)
                .WithMany(p => p.ClienteAccionista)
                .HasForeignKey(d => d.IdClienteAccionistaCargo)
                .HasConstraintName("FK_CLIENTE_ACCIONISTA_CLIENTE_ACCIONISTA_CARGO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteAccionista)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_ACCIONISTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteAreaPotencial>(entity =>
        {
            entity.HasKey(e => e.IdClienteAreaPotencial)
                .HasName("PK_CLIENTES_HA");

            entity.ToTable("CLIENTE_AREA_POTENCIAL", "dbo");

            entity.Property(e => e.IdClienteAreaPotencial).HasColumnName("ID_CLIENTE_AREA_POTENCIAL");

            entity.Property(e => e.Ha)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("HA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteAreaPotencials)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_AREA_POTENCIAL_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ClienteAreaPotencials)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_AREA_POTENCIAL_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ClienteAreaPotencials)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_AREA_POTENCIAL_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ClienteAreaPotencials)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_AREA_POTENCIAL_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteAreaPotencials)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_AREA_POTENCIAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteBalance>(entity =>
        {
            entity.HasKey(e => e.IdClienteBalance);

            entity.ToTable("CLIENTE_BALANCE", "dbo");

            entity.HasIndex(e => new { e.IdCliente, e.Anho, e.Moneda, e.Contador }, "UK_CLIENTE_BALANCE")
                .IsUnique();

            entity.Property(e => e.IdClienteBalance).HasColumnName("ID_CLIENTE_BALANCE");

            entity.Property(e => e.AcAn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_AN");

            entity.Property(e => e.AcAnPro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_AN_PRO");

            entity.Property(e => e.AcCr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_CR");

            entity.Property(e => e.AcCrDeu)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_CR_DEU");

            entity.Property(e => e.AcCrPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_CR_PRE");

            entity.Property(e => e.AcDi)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_DI");

            entity.Property(e => e.AcDiBan)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_DI_BAN");

            entity.Property(e => e.AcDiRec)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_DI_REC");

            entity.Property(e => e.AcDiVal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_DI_VAL");

            entity.Property(e => e.AcIn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_IN");

            entity.Property(e => e.AcInVal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_IN_VAL");

            entity.Property(e => e.AcInv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_INV");

            entity.Property(e => e.AcOtr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_OTR");

            entity.Property(e => e.AcPrestamo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AC_PRESTAMO")
                .HasComment("Activo Corriente - Créditos por Prestamos TM");

            entity.Property(e => e.AnAc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_AC");

            entity.Property(e => e.AnCr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_CR");

            entity.Property(e => e.AnCrPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_CR_PRE");

            entity.Property(e => e.AnInv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_INV")
                .HasComment("Activo No Corriente - Inversiones Temporales TM");

            entity.Property(e => e.AnPr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_PR");

            entity.Property(e => e.AnPrBie)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_PR_BIE");

            entity.Property(e => e.AnPrDep)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_PR_DEP");

            entity.Property(e => e.AnStock)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AN_STOCK")
                .HasComment("Activo No Corriente - Inventario TM");

            entity.Property(e => e.AncPrestamo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANC_PRESTAMO")
                .HasComment("Activo No Corriente - Créditos por Prestamos TM");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.BalAcCred)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AC_CRED");

            entity.Property(e => e.BalAcDisp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AC_DISP");

            entity.Property(e => e.BalAcOtros)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AC_OTROS");

            entity.Property(e => e.BalAcStock)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AC_STOCK");

            entity.Property(e => e.BalAdDif)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AD_DIF");

            entity.Property(e => e.BalApBienes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AP_BIENES");

            entity.Property(e => e.BalArCred)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AR_CRED");

            entity.Property(e => e.BalArInver)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_AR_INVER");

            entity.Property(e => e.BalPcFin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PC_FIN");

            entity.Property(e => e.BalPcNofin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PC_NOFIN");

            entity.Property(e => e.BalPeFin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PE_FIN");

            entity.Property(e => e.BalPeNofin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PE_NOFIN");

            entity.Property(e => e.BalPnCapital)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PN_CAPITAL");

            entity.Property(e => e.BalPnExced)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PN_EXCED");

            entity.Property(e => e.BalPnInver)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PN_INVER");

            entity.Property(e => e.BalPnReserva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PN_RESERVA");

            entity.Property(e => e.BalPnRevaluo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BAL_PN_REVALUO");

            entity.Property(e => e.CoMer)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CO_MER");

            entity.Property(e => e.Contador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONTADOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DepTo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEP_TO");

            entity.Property(e => e.DescBonif)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESC_BONIF")
                .HasComment("Descuentos y Bonificaciones");

            entity.Property(e => e.Fin)
                .HasColumnType("datetime")
                .HasColumnName("FIN");

            entity.Property(e => e.GaAd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GA_AD");

            entity.Property(e => e.GaBa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GA_BA");

            entity.Property(e => e.GaVa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GA_VA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.ImpRe)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMP_RE");

            entity.Property(e => e.InAcb)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_ACB");

            entity.Property(e => e.InNopDicambio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_NOP_DICAMBIO")
                .HasComment("Ingresos No Operativos - Diferencia de Cambio TM");

            entity.Property(e => e.InNopIncob)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_NOP_INCOB")
                .HasComment("Ingresos No Operativos - Intereses Cobrados TM");

            entity.Property(e => e.InNopOgan)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_NOP_OGAN")
                .HasComment("Ingresos No Operativos - Otras Ganancias TM");

            entity.Property(e => e.InVen)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_VEN");

            entity.Property(e => e.InVenAbono)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_VEN_ABONO")
                .HasComment("Ingresos Operativos - Venta de abono TM");

            entity.Property(e => e.InVenAgricola)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_VEN_AGRICOLA")
                .HasComment("Ingresos Operativos - Venta de Productos Agricolas TM");

            entity.Property(e => e.InVenMercaderia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_VEN_MERCADERIA")
                .HasComment("Ingresos Operativos -  Venta de Mercadería TM");

            entity.Property(e => e.InVenOtr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_VEN_OTR")
                .HasComment("Ingresos Operativos - Otras Ventas TM");

            entity.Property(e => e.InVenSemilla)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IN_VEN_SEMILLA")
                .HasComment("Ingresos Operativos - Venta de Semilla TM");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.OtIn)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OT_IN");

            entity.Property(e => e.PcCp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_CP");

            entity.Property(e => e.PcCpAcr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_CP_ACR");

            entity.Property(e => e.PcCpInt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_CP_INT");

            entity.Property(e => e.PcCpPro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_CP_PRO");

            entity.Property(e => e.PcOt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_OT");

            entity.Property(e => e.PcOtAnt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_OT_ANT");

            entity.Property(e => e.PcOtDiv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_OT_DIV");

            entity.Property(e => e.PcOtPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_OT_PRE");

            entity.Property(e => e.PcPr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PR");

            entity.Property(e => e.PcPrDoc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PR_DOC");

            entity.Property(e => e.PcPrInt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PR_INT");

            entity.Property(e => e.PcPro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PRO");

            entity.Property(e => e.PcProApo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PRO_APO");

            entity.Property(e => e.PcProGas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PRO_GAS");

            entity.Property(e => e.PcProImp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PRO_IMP");

            entity.Property(e => e.PcProIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PRO_IVA");

            entity.Property(e => e.PcProRet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PC_PRO_RET");

            entity.Property(e => e.PnCa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_CA");

            entity.Property(e => e.PnCaInt)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_CA_INT");

            entity.Property(e => e.PnCaRea)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_CA_REA");

            entity.Property(e => e.PnRe)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_RE");

            entity.Property(e => e.PnReEje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_RE_EJE");

            entity.Property(e => e.PnRes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_RES");

            entity.Property(e => e.PnResAcum)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_RES_ACUM")
                .HasComment("Patrimonio Neto - Resultado Acumulado TM");

            entity.Property(e => e.PnResEjercicio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PN_RES_EJERCICIO")
                .HasComment("Patrimonio Neto - Resultado del Ejercicio TM");

            entity.Property(e => e.PncCp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PNC_CP");

            entity.Property(e => e.PncPr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PNC_PR");

            entity.Property(e => e.PncPrOtr)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PNC_PR_OTR");

            entity.Property(e => e.PncPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PNC_PRE");

            entity.Property(e => e.PreTo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRE_TO");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RATING");

            entity.Property(e => e.ReOp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RE_OP");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteBalances)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BALANCE_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteBalances)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BALANCE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteBalanceTm>(entity =>
        {
            entity.HasKey(e => e.IdClienteBalanceTm);

            entity.ToTable("CLIENTE_BALANCE_TM", "dbo");

            entity.Property(e => e.IdClienteBalanceTm).HasColumnName("ID_CLIENTE_BALANCE_TM");

            entity.Property(e => e.Ano).HasColumnName("ANO");

            entity.Property(e => e.BgAc).HasColumnName("BG_AC");

            entity.Property(e => e.BgAcCrv).HasColumnName("BG_AC_CRV");

            entity.Property(e => e.BgAcDisp).HasColumnName("BG_AC_DISP");

            entity.Property(e => e.BgAcOcr).HasColumnName("BG_AC_OCR");

            entity.Property(e => e.BgAcStock).HasColumnName("BG_AC_STOCK");

            entity.Property(e => e.BgActivo).HasColumnName("BG_ACTIVO");

            entity.Property(e => e.BgAnc).HasColumnName("BG_ANC");

            entity.Property(e => e.BgAncAf).HasColumnName("BG_ANC_AF");

            entity.Property(e => e.BgAncCrv).HasColumnName("BG_ANC_CRV");

            entity.Property(e => e.BgAncInv).HasColumnName("BG_ANC_INV");

            entity.Property(e => e.BgAncOanc).HasColumnName("BG_ANC_OANC");

            entity.Property(e => e.BgAncStock).HasColumnName("BG_ANC_STOCK");

            entity.Property(e => e.BgDiferencia).HasColumnName("BG_DIFERENCIA");

            entity.Property(e => e.BgPasivo).HasColumnName("BG_PASIVO");

            entity.Property(e => e.BgPc).HasColumnName("BG_PC");

            entity.Property(e => e.BgPcDb).HasColumnName("BG_PC_DB");

            entity.Property(e => e.BgPcDc).HasColumnName("BG_PC_DC");

            entity.Property(e => e.BgPcDd).HasColumnName("BG_PC_DD");

            entity.Property(e => e.BgPn).HasColumnName("BG_PN");

            entity.Property(e => e.BgPnAfc).HasColumnName("BG_PN_AFC");

            entity.Property(e => e.BgPnCap).HasColumnName("BG_PN_CAP");

            entity.Property(e => e.BgPnRea).HasColumnName("BG_PN_REA");

            entity.Property(e => e.BgPnRl).HasColumnName("BG_PN_RL");

            entity.Property(e => e.BgPnRr).HasColumnName("BG_PN_RR");

            entity.Property(e => e.BgPnc).HasColumnName("BG_PNC");

            entity.Property(e => e.BgPncDb).HasColumnName("BG_PNC_DB");

            entity.Property(e => e.BgPncDc).HasColumnName("BG_PNC_DC");

            entity.Property(e => e.BgPncDd).HasColumnName("BG_PNC_DD");

            entity.Property(e => e.BgRe).HasColumnName("BG_RE");

            entity.Property(e => e.BgTactivo).HasColumnName("BG_TACTIVO");

            entity.Property(e => e.BgTpasivopn).HasColumnName("BG_TPASIVOPN");

            entity.Property(e => e.Cambio).HasColumnName("CAMBIO");

            entity.Property(e => e.Contador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONTADOR");

            entity.Property(e => e.ErCbsv).HasColumnName("ER_CBSV");

            entity.Property(e => e.ErDb).HasColumnName("ER_DB");

            entity.Property(e => e.ErEbitda).HasColumnName("ER_EBITDA");

            entity.Property(e => e.ErEno).HasColumnName("ER_ENO");

            entity.Property(e => e.ErEnoAd).HasColumnName("ER_ENO_AD");

            entity.Property(e => e.ErEnoCf).HasColumnName("ER_ENO_CF");

            entity.Property(e => e.ErEnoOeex).HasColumnName("ER_ENO_OEEX");

            entity.Property(e => e.ErEnoPdc).HasColumnName("ER_ENO_PDC");

            entity.Property(e => e.ErGav).HasColumnName("ER_GAV");

            entity.Property(e => e.ErIno).HasColumnName("ER_INO");

            entity.Property(e => e.ErInoIc).HasColumnName("ER_INO_IC");

            entity.Property(e => e.ErInoOg).HasColumnName("ER_INO_OG");

            entity.Property(e => e.ErInoOiex).HasColumnName("ER_INO_OIEX");

            entity.Property(e => e.ErInoUdc).HasColumnName("ER_INO_UDC");

            entity.Property(e => e.ErIo).HasColumnName("ER_IO");

            entity.Property(e => e.ErIoOv).HasColumnName("ER_IO_OV");

            entity.Property(e => e.ErIoVgral).HasColumnName("ER_IO_VGRAL");

            entity.Property(e => e.ErIoVgranos).HasColumnName("ER_IO_VGRANOS");

            entity.Property(e => e.ErIoVi).HasColumnName("ER_IO_VI");

            entity.Property(e => e.ErIoVm).HasColumnName("ER_IO_VM");

            entity.Property(e => e.ErIon).HasColumnName("ER_ION");

            entity.Property(e => e.ErIr).HasColumnName("ER_IR");

            entity.Property(e => e.ErRair).HasColumnName("ER_RAIR");

            entity.Property(e => e.ErRb).HasColumnName("ER_RB");

            entity.Property(e => e.ErRn).HasColumnName("ER_RN");

            entity.Property(e => e.Fin)
                .HasColumnType("datetime")
                .HasColumnName("FIN");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegPadre).HasColumnName("REG_PADRE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteBalanceTms)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BALANCE_TM_CLIENTE");
        });

        modelBuilder.Entity<ClienteBloqueo>(entity =>
        {
            entity.HasKey(e => e.IdClienteBloqueo)
                .HasName("PK_CLIENTES_BLQ");

            entity.ToTable("CLIENTE_BLOQUEO", "dbo");

            entity.HasIndex(e => new { e.IdCliente, e.IdPedido }, "IDX_CLIENTE_BLOQUEO");

            entity.Property(e => e.IdClienteBloqueo).HasColumnName("ID_CLIENTE_BLOQUEO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteBloqueos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_CLIENTE");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.ClienteBloqueos)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_PEDIDO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteBloqueos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteBloqueoContrato>(entity =>
        {
            entity.HasKey(e => e.IdClienteBloqueoContrato);

            entity.ToTable("CLIENTE_BLOQUEO_CONTRATO", "dbo");

            entity.Property(e => e.IdClienteBloqueoContrato).HasColumnName("ID_CLIENTE_BLOQUEO_CONTRATO");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.FechaBloqueo)
                .HasColumnType("date")
                .HasColumnName("FECHA_BLOQUEO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteBloqueoContratos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_CONTRATO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteBloqueoContratos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_CONTRATO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteBloqueoInmueble>(entity =>
        {
            entity.HasKey(e => e.IdClienteBloqueoInmueble);

            entity.ToTable("CLIENTE_BLOQUEO_INMUEBLE", "dbo");

            entity.Property(e => e.IdClienteBloqueoInmueble).HasColumnName("ID_CLIENTE_BLOQUEO_INMUEBLE");

            entity.Property(e => e.FechaBloqueo)
                .HasColumnType("date")
                .HasColumnName("FECHA_BLOQUEO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteBloqueoInmuebles)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_INMUEBLE_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteBloqueoInmuebles)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_BLOQUEO_INMUEBLE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteComentario>(entity =>
        {
            entity.HasKey(e => e.IdClienteComentario);

            entity.ToTable("CLIENTE_COMENTARIOS", "dbo");

            entity.Property(e => e.IdClienteComentario).HasColumnName("ID_CLIENTE_COMENTARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoResponsable)
                .HasColumnName("TIPO_RESPONSABLE")
                .HasComment("0: ASESOR DE VENTAS; 1: COORDINADOR DE CREDITO; 2: GERENTE DE CREDITO; 3: COMITE DE CREDITO; 4: JEFE DE CREDITOS ");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteComentarios)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_COMENTARIOS_CLIENTE");

            entity.HasOne(d => d.IdResponsableNavigation)
                .WithMany(p => p.ClienteComentarios)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_COMENTARIOS_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ClienteComentarios)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_COMENTARIOS_USUARIO");
        });

        modelBuilder.Entity<ClienteComercial>(entity =>
        {
            entity.HasKey(e => e.IdClienteComercial);

            entity.ToTable("CLIENTE_COMERCIAL", "dbo");

            entity.Property(e => e.IdClienteComercial).HasColumnName("ID_CLIENTE_COMERCIAL");

            entity.Property(e => e.Comportamiento).HasColumnName("COMPORTAMIENTO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteRelacion).HasColumnName("ID_CLIENTE_RELACION");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Perfil).HasColumnName("PERFIL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteComercials)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_COMERCIAL_CLIENTE");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ClienteComercials)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_CLIENTE_COMERCIAL_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteComercials)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_COMERCIAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteContacto>(entity =>
        {
            entity.HasKey(e => e.IdClienteContacto);

            entity.ToTable("CLIENTE_CONTACTO", "dbo");

            entity.Property(e => e.IdClienteContacto).HasColumnName("ID_CLIENTE_CONTACTO");

            entity.Property(e => e.AreaArrendada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_ARRENDADA");

            entity.Property(e => e.AreaPotencial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_POTENCIAL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.AreaPropia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_PROPIA");

            entity.Property(e => e.Cargo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.EMail)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("E_MAIL");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.IdAficion).HasColumnName("ID_AFICION");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Influencer).HasColumnName("INFLUENCER");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Rol).HasColumnName("ROL");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.HasOne(d => d.IdAficionNavigation)
                .WithMany(p => p.ClienteContactos)
                .HasForeignKey(d => d.IdAficion)
                .HasConstraintName("FK_CLIENTE_CONTACTO_AFICION");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteContactos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTACTO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteContactos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTACTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteContratoAr>(entity =>
        {
            entity.HasKey(e => e.IdClienteContratoAr)
                .HasName("PK_CLIENTES_CA");

            entity.ToTable("CLIENTE_CONTRATO_AR", "dbo");

            entity.Property(e => e.IdClienteContratoAr).HasColumnName("ID_CLIENTE_CONTRATO_AR");

            entity.Property(e => e.Anho1).HasColumnName("ANHO1");

            entity.Property(e => e.Anho2).HasColumnName("ANHO2");

            entity.Property(e => e.Anho3).HasColumnName("ANHO3");

            entity.Property(e => e.Anho4).HasColumnName("ANHO4");

            entity.Property(e => e.Anho5).HasColumnName("ANHO5");

            entity.Property(e => e.Cota).HasColumnName("COTA");

            entity.Property(e => e.Cultivo1).HasColumnName("CULTIVO1");

            entity.Property(e => e.Cultivo2).HasColumnName("CULTIVO2");

            entity.Property(e => e.Cultivo3).HasColumnName("CULTIVO3");

            entity.Property(e => e.Cultivo4).HasColumnName("CULTIVO4");

            entity.Property(e => e.Cultivo5).HasColumnName("CULTIVO5");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Finca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.Padron)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PADRON");

            entity.Property(e => e.Propietario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Superficie)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SUPERFICIE");

            entity.Property(e => e.Ton1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TON1");

            entity.Property(e => e.Ton2)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TON2");

            entity.Property(e => e.Ton3)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TON3");

            entity.Property(e => e.Ton4)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TON4");

            entity.Property(e => e.Ton5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TON5");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Valor1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR1");

            entity.Property(e => e.Valor2)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR2");

            entity.Property(e => e.Valor3)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR3");

            entity.Property(e => e.Valor4)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR4");

            entity.Property(e => e.Valor5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR5");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.Property(e => e.VigenciaFinal)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA_FINAL");

            entity.Property(e => e.VigenciaInicio)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA_INICIO");

            entity.Property(e => e.Zafra1).HasColumnName("ZAFRA1");

            entity.Property(e => e.Zafra2).HasColumnName("ZAFRA2");

            entity.Property(e => e.Zafra3).HasColumnName("ZAFRA3");

            entity.Property(e => e.Zafra4).HasColumnName("ZAFRA4");

            entity.Property(e => e.Zafra5).HasColumnName("ZAFRA5");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteContratoArs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTRATO_AR_CLIENTE");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.ClienteContratoArs)
                .HasForeignKey(d => d.IdMunicipio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTRATO_AR_MUNICIPIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteContratoArs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTRATO_AR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteContratoCv>(entity =>
        {
            entity.HasKey(e => e.IdClienteContratoCv)
                .HasName("PK_CLIENTES_CV");

            entity.ToTable("CLIENTE_CONTRATO_CV", "dbo");

            entity.Property(e => e.IdClienteContratoCv).HasColumnName("ID_CLIENTE_CONTRATO_CV");

            entity.Property(e => e.Condicion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Finca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.Hectarea)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.Padron)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PADRON");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteContratoCvs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTRATO_CV_CLIENTE");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.ClienteContratoCvs)
                .HasForeignKey(d => d.IdMunicipio)
                .HasConstraintName("FK_CLIENTE_CONTRATO_CV_MUNICIPIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteContratoCvs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTRATO_CV_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteContratoPr>(entity =>
        {
            entity.HasKey(e => e.IdClienteContratoPr);

            entity.ToTable("CLIENTE_CONTRATO_PR", "dbo");

            entity.Property(e => e.IdClienteContratoPr).HasColumnName("ID_CLIENTE_CONTRATO_PR");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACREEDOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Deudor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DEUDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCancelacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CANCELACION");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Producto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRO_FECHA");

            entity.Property(e => e.RegistroInscripcion).HasColumnName("REGISTRO_INSCRIPCION");

            entity.Property(e => e.RegistroLibro).HasColumnName("REGISTRO_LIBRO");

            entity.Property(e => e.RegistroNumero).HasColumnName("REGISTRO_NUMERO");

            entity.Property(e => e.RegistroSeccion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("REGISTRO_SECCION");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteContratoPrs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CONTRATO_PR_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteContratoPrs)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_CONTRATO_PR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteGanado>(entity =>
        {
            entity.HasKey(e => e.IdClienteGanado);

            entity.ToTable("CLIENTE_GANADO", "dbo");

            entity.Property(e => e.IdClienteGanado).HasColumnName("ID_CLIENTE_GANADO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteGanados)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_GANADO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteGanados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_GANADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteGarante>(entity =>
        {
            entity.HasKey(e => e.IdClienteGarante)
                .HasName("PK_CLIENTES_GARANTE");

            entity.ToTable("CLIENTE_GARANTE", "dbo");

            entity.Property(e => e.IdClienteGarante).HasColumnName("ID_CLIENTE_GARANTE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdGarante).HasColumnName("ID_GARANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteGaranteIdClienteNavigations)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CLIENTE_GARANTE_CLIENTE");

            entity.HasOne(d => d.IdGaranteNavigation)
                .WithMany(p => p.ClienteGaranteIdGaranteNavigations)
                .HasForeignKey(d => d.IdGarante)
                .HasConstraintName("FK_CLIENTE_GARANTE_CLIENTE1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteGarantes)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_GARANTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteGarantium>(entity =>
        {
            entity.HasKey(e => e.IdClienteGarantia)
                .HasName("PK_CLIENTES_GO");

            entity.ToTable("CLIENTE_GARANTIA", "dbo");

            entity.Property(e => e.IdClienteGarantia).HasColumnName("ID_CLIENTE_GARANTIA");

            entity.Property(e => e.Caracteristica)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CARACTERISTICA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Numero).HasColumnName("NUMERO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.RpHoja).HasColumnName("RP_HOJA");

            entity.Property(e => e.RpLocal)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_LOCAL");

            entity.Property(e => e.RpSeccion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RP_SECCION");

            entity.Property(e => e.RpSerie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RP_SERIE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteGarantia)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_GARANTIA_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteGarantia)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_GARANTIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteImplemento>(entity =>
        {
            entity.HasKey(e => e.IdClienteImplemento)
                .HasName("PK_CLIENTES_IM");

            entity.ToTable("CLIENTE_IMPLEMENTO", "dbo");

            entity.Property(e => e.IdClienteImplemento).HasColumnName("ID_CLIENTE_IMPLEMENTO");

            entity.Property(e => e.Anho)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ANHO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Marca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.Prendado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PRENDADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteImplementos)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CLIENTE_IMPLEMENTO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteImplementos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_IMPLEMENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteImpuestoRa>(entity =>
        {
            entity.HasKey(e => e.IdClienteImpuestoRa);

            entity.ToTable("CLIENTE_IMPUESTO_RA", "dbo");

            entity.Property(e => e.IdClienteImpuestoRa).HasColumnName("ID_CLIENTE_IMPUESTO_RA");

            entity.Property(e => e.AdquisicionActivo)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ADQUISICION_ACTIVO");

            entity.Property(e => e.AdquisicionActivoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADQUISICION_ACTIVO_US");

            entity.Property(e => e.AdquisicionBien)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ADQUISICION_BIEN");

            entity.Property(e => e.AdquisicionBienUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADQUISICION_BIEN_US");

            entity.Property(e => e.AnticipoIragro)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ANTICIPO_IRAGRO");

            entity.Property(e => e.ApoyoFinca)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("APOYO_FINCA");

            entity.Property(e => e.ApoyoFincaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("APOYO_FINCA_US");

            entity.Property(e => e.CantPersonalOcupado).HasColumnName("CANT_PERSONAL_OCUPADO");

            entity.Property(e => e.CodigoActividadEco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CODIGO_ACTIVIDAD_ECO");

            entity.Property(e => e.CombustibleLubricante)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COMBUSTIBLE_LUBRICANTE");

            entity.Property(e => e.CombustibleLubricanteUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMBUSTIBLE_LUBRICANTE_US");

            entity.Property(e => e.CompraDesmamante).HasColumnName("COMPRA_DESMAMANTE");

            entity.Property(e => e.CompraEquino).HasColumnName("COMPRA_EQUINO");

            entity.Property(e => e.CompraNovillo).HasColumnName("COMPRA_NOVILLO");

            entity.Property(e => e.CompraOtros).HasColumnName("COMPRA_OTROS");

            entity.Property(e => e.CompraTerneros).HasColumnName("COMPRA_TERNEROS");

            entity.Property(e => e.CompraToro).HasColumnName("COMPRA_TORO");

            entity.Property(e => e.CompraVaca).HasColumnName("COMPRA_VACA");

            entity.Property(e => e.CompraVaquilla).HasColumnName("COMPRA_VAQUILLA");

            entity.Property(e => e.ConstruccionRural)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CONSTRUCCION_RURAL");

            entity.Property(e => e.ConstruccionRuralUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONSTRUCCION_RURAL_US");

            entity.Property(e => e.ConsumoDesmamante).HasColumnName("CONSUMO_DESMAMANTE");

            entity.Property(e => e.ConsumoEquino).HasColumnName("CONSUMO_EQUINO");

            entity.Property(e => e.ConsumoNovillo).HasColumnName("CONSUMO_NOVILLO");

            entity.Property(e => e.ConsumoOtros).HasColumnName("CONSUMO_OTROS");

            entity.Property(e => e.ConsumoTernero).HasColumnName("CONSUMO_TERNERO");

            entity.Property(e => e.ConsumoToro).HasColumnName("CONSUMO_TORO");

            entity.Property(e => e.ConsumoVaca).HasColumnName("CONSUMO_VACA");

            entity.Property(e => e.ConsumoVaquilla).HasColumnName("CONSUMO_VAQUILLA");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.DeclaracionJuradaCla).HasColumnName("DECLARACION_JURADA_CLA");

            entity.Property(e => e.DeclaracionJuradaOri).HasColumnName("DECLARACION_JURADA_ORI");

            entity.Property(e => e.DeclaracionJuradaRec).HasColumnName("DECLARACION_JURADA_REC");

            entity.Property(e => e.EjercicioFiscal)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("EJERCICIO_FISCAL");

            entity.Property(e => e.ExistenciaAnteDesmamante).HasColumnName("EXISTENCIA_ANTE_DESMAMANTE");

            entity.Property(e => e.ExistenciaAnteEquino).HasColumnName("EXISTENCIA_ANTE_EQUINO");

            entity.Property(e => e.ExistenciaAnteNovillo).HasColumnName("EXISTENCIA_ANTE_NOVILLO");

            entity.Property(e => e.ExistenciaAnteOtros).HasColumnName("EXISTENCIA_ANTE_OTROS");

            entity.Property(e => e.ExistenciaAnteTernero).HasColumnName("EXISTENCIA_ANTE_TERNERO");

            entity.Property(e => e.ExistenciaAnteToro).HasColumnName("EXISTENCIA_ANTE_TORO");

            entity.Property(e => e.ExistenciaAnteVaca).HasColumnName("EXISTENCIA_ANTE_VACA");

            entity.Property(e => e.ExistenciaAnteVaquilla).HasColumnName("EXISTENCIA_ANTE_VAQUILLA");

            entity.Property(e => e.FleteGasto)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("FLETE_GASTO");

            entity.Property(e => e.FleteGastoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FLETE_GASTO_US");

            entity.Property(e => e.FondoCooperativa)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("FONDO_COOPERATIVA");

            entity.Property(e => e.FondoCooperativaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FONDO_COOPERATIVA_US");

            entity.Property(e => e.HonorarioProfesional)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("HONORARIO_PROFESIONAL");

            entity.Property(e => e.HonorarioProfesionalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HONORARIO_PROFESIONAL_US");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.ImpMedContribuyente)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMP_MED_CONTRIBUYENTE");

            entity.Property(e => e.ImpPeqContribuyente)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("IMP_PEQ_CONTRIBUYENTE");

            entity.Property(e => e.IngresoArrendamiento)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("INGRESO_ARRENDAMIENTO");

            entity.Property(e => e.IngresoArrendamientoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INGRESO_ARRENDAMIENTO_US");

            entity.Property(e => e.IngresoEnajenacion)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("INGRESO_ENAJENACION");

            entity.Property(e => e.IngresoEnajenacionUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INGRESO_ENAJENACION_US");

            entity.Property(e => e.IngresoIragro)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("INGRESO_IRAGRO");

            entity.Property(e => e.IngresoIragroUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INGRESO_IRAGRO_US");

            entity.Property(e => e.InsumoServicioAgricola)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("INSUMO_SERVICIO_AGRICOLA");

            entity.Property(e => e.InsumoServicioAgricolaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMO_SERVICIO_AGRICOLA_US");

            entity.Property(e => e.InsumoServicioPecuaria)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("INSUMO_SERVICIO_PECUARIA");

            entity.Property(e => e.InsumoServicioPecuariaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMO_SERVICIO_PECUARIA_US");

            entity.Property(e => e.InsumoServicioPublPrivUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMO_SERVICIO_PUBL_PRIV_US");

            entity.Property(e => e.KgMaizDepoPropio)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_MAIZ_DEPO_PROPIO");

            entity.Property(e => e.KgMaizDepoTercero)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_MAIZ_DEPO_TERCERO");

            entity.Property(e => e.KgOtroDepoPropio)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_OTRO_DEPO_PROPIO");

            entity.Property(e => e.KgOtroDepoTercero)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_OTRO_DEPO_TERCERO");

            entity.Property(e => e.KgSojaDepoPropio)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_SOJA_DEPO_PROPIO");

            entity.Property(e => e.KgSojaDepoTercero)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_SOJA_DEPO_TERCERO");

            entity.Property(e => e.KgTrigoDepoPropio)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_TRIGO_DEPO_PROPIO");

            entity.Property(e => e.KgTrigoDepoTercero)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("KG_TRIGO_DEPO_TERCERO");

            entity.Property(e => e.LocacionEstablecimiento)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LOCACION_ESTABLECIMIENTO");

            entity.Property(e => e.LocacionEstablecimientoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("LOCACION_ESTABLECIMIENTO_US");

            entity.Property(e => e.MedContribuyenteRural).HasColumnName("MED_CONTRIBUYENTE_RURAL");

            entity.Property(e => e.MortandadDesmamante).HasColumnName("MORTANDAD_DESMAMANTE");

            entity.Property(e => e.MortandadEquino).HasColumnName("MORTANDAD_EQUINO");

            entity.Property(e => e.MortandadNovillo).HasColumnName("MORTANDAD_NOVILLO");

            entity.Property(e => e.MortandadOtros).HasColumnName("MORTANDAD_OTROS");

            entity.Property(e => e.MortandadTerneros).HasColumnName("MORTANDAD_TERNEROS");

            entity.Property(e => e.MortandadToro).HasColumnName("MORTANDAD_TORO");

            entity.Property(e => e.MortandadVacas).HasColumnName("MORTANDAD_VACAS");

            entity.Property(e => e.MortandadVaquillas).HasColumnName("MORTANDAD_VAQUILLAS");

            entity.Property(e => e.MultasDeclaracionJurada)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("MULTAS_DECLARACION_JURADA");

            entity.Property(e => e.NacimientoDesmamante).HasColumnName("NACIMIENTO_DESMAMANTE");

            entity.Property(e => e.NacimientoEquino).HasColumnName("NACIMIENTO_EQUINO");

            entity.Property(e => e.NacimientoNovillo).HasColumnName("NACIMIENTO_NOVILLO");

            entity.Property(e => e.NacimientoOtros).HasColumnName("NACIMIENTO_OTROS");

            entity.Property(e => e.NacimientoTernero).HasColumnName("NACIMIENTO_TERNERO");

            entity.Property(e => e.NacimientoToro).HasColumnName("NACIMIENTO_TORO");

            entity.Property(e => e.NacimientoVaca).HasColumnName("NACIMIENTO_VACA");

            entity.Property(e => e.NacimientoVaquilla).HasColumnName("NACIMIENTO_VAQUILLA");

            entity.Property(e => e.NroDeclaracionJuradaRec)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NRO_DECLARACION_JURADA_REC");

            entity.Property(e => e.OtroEgresoDesmamante).HasColumnName("OTRO_EGRESO_DESMAMANTE");

            entity.Property(e => e.OtroEgresoEquino).HasColumnName("OTRO_EGRESO_EQUINO");

            entity.Property(e => e.OtroEgresoNovillo).HasColumnName("OTRO_EGRESO_NOVILLO");

            entity.Property(e => e.OtroEgresoOtros).HasColumnName("OTRO_EGRESO_OTROS");

            entity.Property(e => e.OtroEgresoTernero).HasColumnName("OTRO_EGRESO_TERNERO");

            entity.Property(e => e.OtroEgresoToro).HasColumnName("OTRO_EGRESO_TORO");

            entity.Property(e => e.OtroEgresoVaca).HasColumnName("OTRO_EGRESO_VACA");

            entity.Property(e => e.OtroEgresoVaquilla).HasColumnName("OTRO_EGRESO_VAQUILLA");

            entity.Property(e => e.OtroIngresoDesmamante).HasColumnName("OTRO_INGRESO_DESMAMANTE");

            entity.Property(e => e.OtroIngresoEquino).HasColumnName("OTRO_INGRESO_EQUINO");

            entity.Property(e => e.OtroIngresoNovillo).HasColumnName("OTRO_INGRESO_NOVILLO");

            entity.Property(e => e.OtroIngresoOtros).HasColumnName("OTRO_INGRESO_OTROS");

            entity.Property(e => e.OtroIngresoTernero).HasColumnName("OTRO_INGRESO_TERNERO");

            entity.Property(e => e.OtroIngresoToro).HasColumnName("OTRO_INGRESO_TORO");

            entity.Property(e => e.OtroIngresoVaca).HasColumnName("OTRO_INGRESO_VACA");

            entity.Property(e => e.OtroIngresoVaquilla).HasColumnName("OTRO_INGRESO_VAQUILLA");

            entity.Property(e => e.OtrosEgresos)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("OTROS_EGRESOS");

            entity.Property(e => e.OtrosEgresosUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OTROS_EGRESOS_US");

            entity.Property(e => e.PagoServicioPublPriv)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("PAGO_SERVICIO_PUBL_PRIV");

            entity.Property(e => e.PagoServicioPublPrivUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PAGO_SERVICIO_PUBL_PRIV_US");

            entity.Property(e => e.PeqContribuyenteRural).HasColumnName("PEQ_CONTRIBUYENTE_RURAL");

            entity.Property(e => e.ReclasificaEntDesmamante).HasColumnName("RECLASIFICA_ENT_DESMAMANTE");

            entity.Property(e => e.ReclasificaEntEquino).HasColumnName("RECLASIFICA_ENT_EQUINO");

            entity.Property(e => e.ReclasificaEntNovillo).HasColumnName("RECLASIFICA_ENT_NOVILLO");

            entity.Property(e => e.ReclasificaEntOtros).HasColumnName("RECLASIFICA_ENT_OTROS");

            entity.Property(e => e.ReclasificaEntTernero).HasColumnName("RECLASIFICA_ENT_TERNERO");

            entity.Property(e => e.ReclasificaEntToro).HasColumnName("RECLASIFICA_ENT_TORO");

            entity.Property(e => e.ReclasificaEntVaca).HasColumnName("RECLASIFICA_ENT_VACA");

            entity.Property(e => e.ReclasificaEntVaquilla).HasColumnName("RECLASIFICA_ENT_VAQUILLA");

            entity.Property(e => e.ReclasificaSalDesmamante).HasColumnName("RECLASIFICA_SAL_DESMAMANTE");

            entity.Property(e => e.ReclasificaSalEquino).HasColumnName("RECLASIFICA_SAL_EQUINO");

            entity.Property(e => e.ReclasificaSalNovillo).HasColumnName("RECLASIFICA_SAL_NOVILLO");

            entity.Property(e => e.ReclasificaSalOtros).HasColumnName("RECLASIFICA_SAL_OTROS");

            entity.Property(e => e.ReclasificaSalTernero).HasColumnName("RECLASIFICA_SAL_TERNERO");

            entity.Property(e => e.ReclasificaSalToro).HasColumnName("RECLASIFICA_SAL_TORO");

            entity.Property(e => e.ReclasificaSalVaca).HasColumnName("RECLASIFICA_SAL_VACA");

            entity.Property(e => e.ReclasificaSalVaquilla).HasColumnName("RECLASIFICA_SAL_VAQUILLA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RentaNetaPorcUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_NETA_PORC_US");

            entity.Property(e => e.RetencionOperacionGrav)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("RETENCION_OPERACION_GRAV");

            entity.Property(e => e.RucCiContador)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RUC_CI_CONTADOR");

            entity.Property(e => e.SaldoEjercicioAnterior)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("SALDO_EJERCICIO_ANTERIOR");

            entity.Property(e => e.SueldosJornales)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("SUELDOS_JORNALES");

            entity.Property(e => e.SueldosJornalesUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SUELDOS_JORNALES_US");

            entity.Property(e => e.ValorDesmamante)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_DESMAMANTE");

            entity.Property(e => e.ValorEquino)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_EQUINO");

            entity.Property(e => e.ValorMaizDepoPropio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_MAIZ_DEPO_PROPIO");

            entity.Property(e => e.ValorMaizDepoTercero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_MAIZ_DEPO_TERCERO");

            entity.Property(e => e.ValorNovillo)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_NOVILLO");

            entity.Property(e => e.ValorOtroDepoPropio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_OTRO_DEPO_PROPIO");

            entity.Property(e => e.ValorOtroDepoTercer)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_OTRO_DEPO_TERCER");

            entity.Property(e => e.ValorOtros)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_OTROS");

            entity.Property(e => e.ValorSojaDepoPropio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_SOJA_DEPO_PROPIO");

            entity.Property(e => e.ValorSojaDepoTercero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_SOJA_DEPO_TERCERO");

            entity.Property(e => e.ValorTernero)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_TERNERO");

            entity.Property(e => e.ValorToro)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_TORO");

            entity.Property(e => e.ValorTrigoDepoPropio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRIGO_DEPO_PROPIO");

            entity.Property(e => e.ValorTrigoDepoTercero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRIGO_DEPO_TERCERO");

            entity.Property(e => e.ValorVaca)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_VACA");

            entity.Property(e => e.ValorVaquilla)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VALOR_VAQUILLA");

            entity.Property(e => e.VentaDesmamante).HasColumnName("VENTA_DESMAMANTE");

            entity.Property(e => e.VentaEquino).HasColumnName("VENTA_EQUINO");

            entity.Property(e => e.VentaGanado)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VENTA_GANADO");

            entity.Property(e => e.VentaGanadoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_GANADO_US");

            entity.Property(e => e.VentaLechaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_LECHA_US");

            entity.Property(e => e.VentaLeche)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VENTA_LECHE");

            entity.Property(e => e.VentaNovillo).HasColumnName("VENTA_NOVILLO");

            entity.Property(e => e.VentaOtraCultura)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VENTA_OTRA_CULTURA");

            entity.Property(e => e.VentaOtraCulturaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_OTRA_CULTURA_US");

            entity.Property(e => e.VentaOtros).HasColumnName("VENTA_OTROS");

            entity.Property(e => e.VentaProdAgricola)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VENTA_PROD_AGRICOLA");

            entity.Property(e => e.VentaProdAgricolaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_PROD_AGRICOLA_US");

            entity.Property(e => e.VentaProdGanado)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("VENTA_PROD_GANADO");

            entity.Property(e => e.VentaProdGanadoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_PROD_GANADO_US");

            entity.Property(e => e.VentaTernero).HasColumnName("VENTA_TERNERO");

            entity.Property(e => e.VentaToro).HasColumnName("VENTA_TORO");

            entity.Property(e => e.VentaVaca).HasColumnName("VENTA_VACA");

            entity.Property(e => e.VentaVaquilla).HasColumnName("VENTA_VAQUILLA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteImpuestoRas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CLIENTE_IMPUESTO_RA_CLIENTE");
        });

        modelBuilder.Entity<ClienteIndicadorCualitativo>(entity =>
        {
            entity.HasKey(e => e.IdClienteCualitativo)
                .HasName("PK_CLIENTE_CUALITATIVO");

            entity.ToTable("CLIENTE_INDICADOR_CUALITATIVO", "dbo");

            entity.Property(e => e.IdClienteCualitativo).HasColumnName("ID_CLIENTE_CUALITATIVO");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Indicador)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("INDICADOR");

            entity.Property(e => e.Nota)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Orden)
                .HasColumnName("ORDEN")
                .HasComment("NRO DE ORDEN DE LOS CAMPOS");

            entity.Property(e => e.Rango)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RANGO");

            entity.Property(e => e.Rangoint)
                .HasColumnName("RANGOINT")
                .HasComment("se guarda el numero del radiobutton del rango");

            entity.Property(e => e.Rangostr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RANGOSTR")
                .HasComment("se guarda el detalle del rango");

            entity.Property(e => e.Referencia)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("REFERENCIA")
                .HasComment("VALORES DE REFERENCIA PARA PUNTUACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Resultado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RESULTADO");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0: FINANCIEROS; 1: CUALITATIVOS");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteIndicadorCualitativos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_CUALITATIVO_CLIENTE");
        });

        modelBuilder.Entity<ClienteLocalEntrega>(entity =>
        {
            entity.HasKey(e => e.IdClienteLocalEntrega)
                .HasName("PK_CLIENTES_LE");

            entity.ToTable("CLIENTE_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.CapacidadSilo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPACIDAD_SILO");

            entity.Property(e => e.Cargo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Comportamiento).HasColumnName("COMPORTAMIENTO");

            entity.Property(e => e.ContactoComercial)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("CONTACTO_COMERCIAL");

            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Facebook)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FACEBOOK");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("date")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.HectareasArrendadas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_ARRENDADAS");

            entity.Property(e => e.HectareasPotenciales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_POTENCIALES");

            entity.Property(e => e.HectareasPropias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_PROPIAS");

            entity.Property(e => e.IdAficion).HasColumnName("ID_AFICION");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCliente1).HasColumnName("ID_CLIENTE_1");

            entity.Property(e => e.IdCliente2).HasColumnName("ID_CLIENTE_2");

            entity.Property(e => e.IdCliente3).HasColumnName("ID_CLIENTE_3");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Influencer).HasColumnName("INFLUENCER");

            entity.Property(e => e.Instagram)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INSTAGRAM");

            entity.Property(e => e.Nacionalidad)
                .HasColumnName("NACIONALIDAD")
                .HasComment("NACIONALIDAD");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Perfil).HasColumnName("PERFIL");

            entity.Property(e => e.RefLocalEntrega).HasColumnName("REF_LOCAL_ENTREGA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");

            entity.Property(e => e.Rol).HasColumnName("ROL");

            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TelefonoContacto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CONTACTO");

            entity.Property(e => e.TipoVenta)
                .HasColumnName("TIPO_VENTA")
                .HasComment("0: DIRECTA 1:INDIRECTA 2:AMBAS");

            entity.HasOne(d => d.IdAficionNavigation)
                .WithMany(p => p.ClienteLocalEntregas)
                .HasForeignKey(d => d.IdAficion)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_AFICION");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.ClienteLocalEntregas)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteLocalEntregaIdClienteNavigations)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_CLIENTE");

            entity.HasOne(d => d.IdCliente1Navigation)
                .WithMany(p => p.ClienteLocalEntregaIdCliente1Navigations)
                .HasForeignKey(d => d.IdCliente1)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_CLIENTE1");

            entity.HasOne(d => d.IdCliente2Navigation)
                .WithMany(p => p.ClienteLocalEntregaIdCliente2Navigations)
                .HasForeignKey(d => d.IdCliente2)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_CLIENTE2");

            entity.HasOne(d => d.IdCliente3Navigation)
                .WithMany(p => p.ClienteLocalEntregaIdCliente3Navigations)
                .HasForeignKey(d => d.IdCliente3)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_CLIENTE3");

            entity.HasOne(d => d.IdRegionNavigation)
                .WithMany(p => p.ClienteLocalEntregas)
                .HasForeignKey(d => d.IdRegion)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_REGION");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ClienteLocalEntregas)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteLocalEntregas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteLocalEntregaHa>(entity =>
        {
            entity.HasKey(e => e.IdClienteLocalEntregaHa);

            entity.ToTable("CLIENTE_LOCAL_ENTREGA_HA", "dbo");

            entity.Property(e => e.IdClienteLocalEntregaHa).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA_HA");

            entity.Property(e => e.HectareasArrendadas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_ARRENDADAS");

            entity.Property(e => e.HectareasPotenciales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_POTENCIALES");

            entity.Property(e => e.HectareasPropias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_PROPIAS");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.NivelTecnologico).HasColumnName("NIVEL_TECNOLOGICO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.ClienteLocalEntregaHas)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_HA_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ClienteLocalEntregaHas)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_HA_CULTIVO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ClienteLocalEntregaHas)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_HA_ZAFRA");
        });

        modelBuilder.Entity<ClienteLocalEntregaVe>(entity =>
        {
            entity.HasKey(e => e.IdClienteLocalEntregaVe);

            entity.ToTable("CLIENTE_LOCAL_ENTREGA_VE", "dbo");

            entity.Property(e => e.IdClienteLocalEntregaVe).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA_VE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.ClienteLocalEntregaVes)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_VE_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ClienteLocalEntregaVes)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_CLIENTE_LOCAL_ENTREGA_VE_VENDEDOR");
        });

        modelBuilder.Entity<ClienteOtroActivo>(entity =>
        {
            entity.HasKey(e => e.IdClienteOtroActivo)
                .HasName("PK_CLIENTES_OA");

            entity.ToTable("CLIENTE_OTRO_ACTIVO", "dbo");

            entity.Property(e => e.IdClienteOtroActivo).HasColumnName("ID_CLIENTE_OTRO_ACTIVO");

            entity.Property(e => e.Capital)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPITAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Participacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PARTICIPACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteOtroActivos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_OTRO_ACTIVO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteOtroActivos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_OTRO_ACTIVO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClientePasivo>(entity =>
        {
            entity.HasKey(e => e.IdClientePasivo);

            entity.ToTable("CLIENTE_PASIVO", "dbo");

            entity.Property(e => e.IdClientePasivo).HasColumnName("ID_CLIENTE_PASIVO");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ACREEDOR");

            entity.Property(e => e.Cota).HasColumnName("COTA");

            entity.Property(e => e.Finca)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.Garantia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("GARANTIA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClientePasivos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_PASIVO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClientePasivos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_PASIVO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteRecibir>(entity =>
        {
            entity.HasKey(e => e.IdClienteRecibir)
                .HasName("PK_CLIENTES_CR");

            entity.ToTable("CLIENTE_RECIBIR", "dbo");

            entity.Property(e => e.IdClienteRecibir).HasColumnName("ID_CLIENTE_RECIBIR");

            entity.Property(e => e.Cota).HasColumnName("COTA");

            entity.Property(e => e.Deudor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEUDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Operacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPERACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteRecibirs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RECIBIR_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteRecibirs)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_RECIBIR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteReclamo>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamo);

            entity.ToTable("CLIENTE_RECLAMO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CLIENTE_RECLAMO")
                .IsUnique();

            entity.Property(e => e.IdClienteReclamo).HasColumnName("ID_CLIENTE_RECLAMO");

            entity.Property(e => e.AdjuvanteAceite)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ADJUVANTE_ACEITE");

            entity.Property(e => e.AdjuvanteAceiteDosis).HasColumnName("ADJUVANTE_ACEITE_DOSIS");

            entity.Property(e => e.AguaConductividad).HasColumnName("AGUA_CONDUCTIVIDAD");

            entity.Property(e => e.AguaDureza).HasColumnName("AGUA_DUREZA");

            entity.Property(e => e.AguaPh).HasColumnName("AGUA_PH");

            entity.Property(e => e.AguaTemperatura).HasColumnName("AGUA_TEMPERATURA");

            entity.Property(e => e.Ambiente).HasColumnName("AMBIENTE");

            entity.Property(e => e.AreaAfectada).HasColumnName("AREA_AFECTADA");

            entity.Property(e => e.AutorizaComercial).HasColumnName("AUTORIZA_COMERCIAL");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.BoquillaPico)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BOQUILLA_PICO");

            entity.Property(e => e.CaldaVolumen).HasColumnName("CALDA_VOLUMEN");

            entity.Property(e => e.CantGerminado).HasColumnName("CANT_GERMINADO");

            entity.Property(e => e.CantVigor).HasColumnName("CANT_VIGOR");

            entity.Property(e => e.CantidadAdquirida).HasColumnName("CANTIDAD_ADQUIRIDA");

            entity.Property(e => e.CantidadAplicada).HasColumnName("CANTIDAD_APLICADA");

            entity.Property(e => e.CantidadReclamo).HasColumnName("CANTIDAD_RECLAMO");

            entity.Property(e => e.CantidadUtilizada).HasColumnName("CANTIDAD_UTILIZADA");

            entity.Property(e => e.CausaReclamo)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RECLAMO");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.ClaveAutorizador)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE_AUTORIZADOR");

            entity.Property(e => e.ClaveComercial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE_COMERCIAL");

            entity.Property(e => e.ClienteAfectado)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_AFECTADO");

            entity.Property(e => e.ConsideracionComercial)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONSIDERACION_COMERCIAL");

            entity.Property(e => e.ConsideracionLogistica)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONSIDERACION_LOGISTICA");

            entity.Property(e => e.ConsideracionTecnica)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CONSIDERACION_TECNICA");

            entity.Property(e => e.ConsideracionTecnicaGerente)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONSIDERACION_TECNICA_GERENTE");

            entity.Property(e => e.ConsideracionTecnicaGerenteGral)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONSIDERACION_TECNICA_GERENTE_GRAL");

            entity.Property(e => e.DiscoAbono)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DISCO_ABONO")
                .IsFixedLength();

            entity.Property(e => e.DiscoSemilla)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DISCO_SEMILLA")
                .IsFixedLength();

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Enraizador)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ENRAIZADOR");

            entity.Property(e => e.EnraizadorDosis).HasColumnName("ENRAIZADOR_DOSIS");

            entity.Property(e => e.EquipoModelo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("EQUIPO_MODELO");

            entity.Property(e => e.EspacioHileras).HasColumnName("ESPACIO_HILERAS");

            entity.Property(e => e.Estado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ESTADO");

            entity.Property(e => e.EstadoFenologico)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ESTADO_FENOLOGICO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAntes)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ANTES");

            entity.Property(e => e.FechaAplicaHerbi)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APLICA_HERBI");

            entity.Property(e => e.FechaAutoriza)
                .HasColumnType("date")
                .HasColumnName("FECHA_AUTORIZA");

            entity.Property(e => e.FechaDespues)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DESPUES");

            entity.Property(e => e.FechaSiembra)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FECHA_SIEMBRA");

            entity.Property(e => e.FechaTrataSemilla)
                .HasColumnType("date")
                .HasColumnName("FECHA_TRATA_SEMILLA");

            entity.Property(e => e.FiltroMalla)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FILTRO_MALLA");

            entity.Property(e => e.Fungicida)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FUNGICIDA");

            entity.Property(e => e.FungicidaDosis).HasColumnName("FUNGICIDA_DOSIS");

            entity.Property(e => e.HerbDesecacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HERB_DESECACION");

            entity.Property(e => e.HerbDesecacionDosis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HERB_DESECACION_DOSIS");

            entity.Property(e => e.HerbDesecacionFecha)
                .HasColumnType("date")
                .HasColumnName("HERB_DESECACION_FECHA");

            entity.Property(e => e.HerbPostEmerDosis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HERB_POST_EMER_DOSIS");

            entity.Property(e => e.HerbPostEmerFecha)
                .HasColumnType("date")
                .HasColumnName("HERB_POST_EMER_FECHA");

            entity.Property(e => e.HerbPostEmergente)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HERB_POST_EMERGENTE");

            entity.Property(e => e.HerbPreEmerDosis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HERB_PRE_EMER_DOSIS");

            entity.Property(e => e.HerbPreEmerFecha)
                .HasColumnType("date")
                .HasColumnName("HERB_PRE_EMER_FECHA");

            entity.Property(e => e.HerbPreEmergente)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HERB_PRE_EMERGENTE");

            entity.Property(e => e.HerbSecuencial)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HERB_SECUENCIAL");

            entity.Property(e => e.HerbSecuencialDosis)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HERB_SECUENCIAL_DOSIS");

            entity.Property(e => e.HerbSecuencialFecha)
                .HasColumnType("date")
                .HasColumnName("HERB_SECUENCIAL_FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdProductoHibrido).HasColumnName("ID_PRODUCTO_HIBRIDO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Improcedente).HasColumnName("IMPROCEDENTE");

            entity.Property(e => e.Inoculacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("INOCULACION");

            entity.Property(e => e.InoculacionDosis).HasColumnName("INOCULACION_DOSIS");

            entity.Property(e => e.Insecticida)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("INSECTICIDA");

            entity.Property(e => e.InsecticidaDosis).HasColumnName("INSECTICIDA_DOSIS");

            entity.Property(e => e.KgAbono).HasColumnName("KG_ABONO");

            entity.Property(e => e.KgSemilla).HasColumnName("KG_SEMILLA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LluviaAntesMm).HasColumnName("LLUVIA_ANTES_MM");

            entity.Property(e => e.LluviaDespuesMm).HasColumnName("LLUVIA_DESPUES_MM");

            entity.Property(e => e.Lote)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LOTE");

            entity.Property(e => e.Microsnutrientes1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MICROSNUTRIENTES1");

            entity.Property(e => e.Microsnutrientes1Dosis).HasColumnName("MICROSNUTRIENTES1_DOSIS");

            entity.Property(e => e.Microsnutrientes2)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MICROSNUTRIENTES2");

            entity.Property(e => e.Microsnutrientes2Dosis).HasColumnName("MICROSNUTRIENTES2_DOSIS");

            entity.Property(e => e.ModeloDisco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO_DISCO");

            entity.Property(e => e.MotivoReclamo).HasColumnName("MOTIVO_RECLAMO");

            entity.Property(e => e.OrigenAgua).HasColumnName("ORIGEN_AGUA");

            entity.Property(e => e.PlantaMt).HasColumnName("PLANTA_MT");

            entity.Property(e => e.PorcGerminado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PORC_GERMINADO")
                .IsFixedLength();

            entity.Property(e => e.PorcVigor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PORC_VIGOR")
                .IsFixedLength();

            entity.Property(e => e.Presion).HasColumnName("PRESION");

            entity.Property(e => e.ProductoAbono)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_ABONO");

            entity.Property(e => e.ProfundidadAbono).HasColumnName("PROFUNDIDAD_ABONO");

            entity.Property(e => e.ProfundidadSemilla).HasColumnName("PROFUNDIDAD_SEMILLA");

            entity.Property(e => e.PulverizaAvion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PULVERIZA_AVION")
                .IsFixedLength();

            entity.Property(e => e.PulverizaTierra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PULVERIZA_TIERRA")
                .IsFixedLength();

            entity.Property(e => e.Recomendacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RECOMENDACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad)
                .HasMaxLength(10)
                .HasColumnName("REG_UNIDAD")
                .IsFixedLength();

            entity.Property(e => e.Resultado)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RESULTADO");

            entity.Property(e => e.Rocio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ROCIO")
                .IsFixedLength();

            entity.Property(e => e.Sembradora)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SEMBRADORA");

            entity.Property(e => e.SemillaMt).HasColumnName("SEMILLA_MT");

            entity.Property(e => e.StressHibrido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STRESS_HIBRIDO")
                .IsFixedLength();

            entity.Property(e => e.SueloHumedad)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SUELO_HUMEDAD")
                .IsFixedLength();

            entity.Property(e => e.SurcadorAbono)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SURCADOR_ABONO")
                .IsFixedLength();

            entity.Property(e => e.SurcadorSemilla)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SURCADOR_SEMILLA")
                .IsFixedLength();

            entity.Property(e => e.Temperatura).HasColumnName("TEMPERATURA");

            entity.Property(e => e.TipoSuelo).HasColumnName("TIPO_SUELO");

            entity.Property(e => e.VenceHibrido)
                .HasColumnType("datetime")
                .HasColumnName("VENCE_HIBRIDO");

            entity.Property(e => e.Viento).HasColumnName("VIENTO");

            entity.Property(e => e.ZarandaHibrido)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ZARANDA_HIBRIDO");

            entity.HasOne(d => d.IdClienteLeNavigation)
                .WithMany(p => p.ClienteReclamos)
                .HasForeignKey(d => d.IdClienteLe)
                .HasConstraintName("FK_CLIENTE_RECLAMO_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdDesarrollistaNavigation)
                .WithMany(p => p.ClienteReclamos)
                .HasForeignKey(d => d.IdDesarrollista)
                .HasConstraintName("FK_CLIENTE_RECLAMO_DESARROLLISTA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ClienteReclamos)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CLIENTE_RECLAMO_USUARIO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ClienteReclamos)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_CLIENTE_RECLAMO_VENDEDOR");
        });

        modelBuilder.Entity<ClienteReclamoDocumento>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamoDocumento)
                .HasName("PK_CLIENTE_RECLAMO_FACTURA");

            entity.ToTable("CLIENTE_RECLAMO_DOCUMENTO", "dbo");

            entity.Property(e => e.IdClienteReclamoDocumento).HasColumnName("ID_CLIENTE_RECLAMO_DOCUMENTO");

            entity.Property(e => e.CantidadFactura)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_FACTURA");

            entity.Property(e => e.CantidadNotaCredito)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_NOTA_CREDITO");

            entity.Property(e => e.CantidadPedido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_PEDIDO");

            entity.Property(e => e.IdClienteReclamo).HasColumnName("ID_CLIENTE_RECLAMO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoNotaCredito).HasColumnName("TIPO_NOTA_CREDITO");

            entity.Property(e => e.TipoPedido).HasColumnName("TIPO_PEDIDO");

            entity.Property(e => e.UnitarioFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO_FACTURA");

            entity.Property(e => e.ValorNotaCredito)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_NOTA_CREDITO");

            entity.HasOne(d => d.IdClienteReclamoNavigation)
                .WithMany(p => p.ClienteReclamoDocumentos)
                .HasForeignKey(d => d.IdClienteReclamo)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_CLIENTE_RECLAMO_FACTURA");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.ClienteReclamoDocumentos)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .HasConstraintName("FK_CLIENTE_RECLAMO_DOCUMENTO_FACTURA_CRECON");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.ClienteReclamoDocumentos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_CLIENTE_RECLAMO_DOCUMENTO_LOTE");

            entity.HasOne(d => d.IdNotaCreditoNavigation)
                .WithMany(p => p.ClienteReclamoDocumentos)
                .HasForeignKey(d => d.IdNotaCredito)
                .HasConstraintName("FK_CLIENTE_RECLAMO_DOCUMENTO_NOTA_CREDITO");

            entity.HasOne(d => d.IdNotaRemisionNavigation)
                .WithMany(p => p.ClienteReclamoDocumentos)
                .HasForeignKey(d => d.IdNotaRemision)
                .HasConstraintName("FK_CLIENTE_RECLAMO_DOCUMENTO_NOTA_REMISION");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.ClienteReclamoDocumentos)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_CLIENTE_RECLAMO_DOCUMENTO_PEDIDO");
        });

        modelBuilder.Entity<ClienteReclamoEmail>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamoEmail);

            entity.ToTable("CLIENTE_RECLAMO_EMAIL", "dbo");

            entity.Property(e => e.IdClienteReclamoEmail).HasColumnName("ID_CLIENTE_RECLAMO_EMAIL");

            entity.Property(e => e.Consideracion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("CONSIDERACION");

            entity.Property(e => e.IdClienteReclamo).HasColumnName("ID_CLIENTE_RECLAMO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Incompleto).HasColumnName("INCOMPLETO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoAutoriza)
                .HasColumnName("TIPO_AUTORIZA")
                .HasComment("0=Gerente\r\n1=Comercial\r\n2=Gral.\r\n3=Vendedor\r\n4=Desarrollista\r\n5=Facturista\r\n");

            entity.HasOne(d => d.IdClienteReclamoNavigation)
                .WithMany(p => p.ClienteReclamoEmails)
                .HasForeignKey(d => d.IdClienteReclamo)
                .HasConstraintName("FK_CLIENTE_RECLAMO_EMAIL_CLIENTE_RECLAMO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ClienteReclamoEmails)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CLIENTE_RECLAMO_EMAIL_USUARIO");
        });

        modelBuilder.Entity<ClienteReclamoFactura>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamoFactura)
                .HasName("PK_CLIENTE_RECLAMO_FACTURA_1");

            entity.ToTable("CLIENTE_RECLAMO_FACTURA", "dbo");

            entity.Property(e => e.IdClienteReclamoFactura).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA");

            entity.Property(e => e.CantidadFactura)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_FACTURA");

            entity.Property(e => e.EstadoFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ESTADO_FACTURA");

            entity.Property(e => e.IdClienteReclamo).HasColumnName("ID_CLIENTE_RECLAMO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.UnitarioFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO_FACTURA");

            entity.HasOne(d => d.IdClienteReclamoNavigation)
                .WithMany(p => p.ClienteReclamoFacturas)
                .HasForeignKey(d => d.IdClienteReclamo)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_CLIENTE_RECLAMO");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.ClienteReclamoFacturas)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_FACTURA_CRECON");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.ClienteReclamoFacturas)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_LOTE");

            entity.HasOne(d => d.IdNotaRemisionNavigation)
                .WithMany(p => p.ClienteReclamoFacturas)
                .HasForeignKey(d => d.IdNotaRemision)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_NOTA_REMISION");
        });

        modelBuilder.Entity<ClienteReclamoFacturaDet>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamoFacturaDet);

            entity.ToTable("CLIENTE_RECLAMO_FACTURA_DET", "dbo");

            entity.Property(e => e.IdClienteReclamoFacturaDet).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.FechaSolicitaDoc)
                .HasColumnType("date")
                .HasColumnName("FECHA_SOLICITA_DOC");

            entity.Property(e => e.IdClienteReclamoFactura).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoDocumento)
                .HasColumnName("TIPO_DOCUMENTO")
                .HasComment("0 = DEVOLUCION - 1 = DESCUENTO - 2 = DONACION - 3 = BONIFICACION - 4 = RETENCION");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteReclamoFacturaNavigation)
                .WithMany(p => p.ClienteReclamoFacturaDets)
                .HasForeignKey(d => d.IdClienteReclamoFactura)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_DET_CLIENTE_RECLAMO_FACTURA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.ClienteReclamoFacturaDets)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_DET_TABLA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ClienteReclamoFacturaDets)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_DET_USUARIO");
        });

        modelBuilder.Entity<ClienteReclamoFacturaPro>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamoFacturaPro);

            entity.ToTable("CLIENTE_RECLAMO_FACTURA_PRO", "dbo");

            entity.Property(e => e.IdClienteReclamoFacturaPro).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA_PRO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdClienteReclamoFacturaDet).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA_DET");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteReclamoFacturaDetNavigation)
                .WithMany(p => p.ClienteReclamoFacturaPros)
                .HasForeignKey(d => d.IdClienteReclamoFacturaDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_PRO_CLIENTE_RECLAMO_FACTURA_DET");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ClienteReclamoFacturaPros)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RECLAMO_FACTURA_PRO_PRODUCTO");
        });

        modelBuilder.Entity<ClienteReclamoProducto>(entity =>
        {
            entity.HasKey(e => e.IdClienteReclamoProducto);

            entity.ToTable("CLIENTE_RECLAMO_PRODUCTO", "dbo");

            entity.Property(e => e.IdClienteReclamoProducto).HasColumnName("ID_CLIENTE_RECLAMO_PRODUCTO");

            entity.Property(e => e.Dosis).HasColumnName("DOSIS");

            entity.Property(e => e.IdClienteReclamo).HasColumnName("ID_CLIENTE_RECLAMO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Porcentaje).HasColumnName("PORCENTAJE");

            entity.Property(e => e.ProductoTercero)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_TERCERO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.HasOne(d => d.IdClienteReclamoNavigation)
                .WithMany(p => p.ClienteReclamoProductos)
                .HasForeignKey(d => d.IdClienteReclamo)
                .HasConstraintName("FK_CLIENTE_RECLAMO_PRODUCTO_CLIENTE_RECLAMO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteReclamoProductos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_RECLAMO_PRODUCTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteReferenciaBancarium>(entity =>
        {
            entity.HasKey(e => e.IdClienteReferenciaBancaria);

            entity.ToTable("CLIENTE_REFERENCIA_BANCARIA", "dbo");

            entity.Property(e => e.IdClienteReferenciaBancaria).HasColumnName("ID_CLIENTE_REFERENCIA_BANCARIA");

            entity.Property(e => e.Banco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.ClienteReferenciaBancaria)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_CLIENTE_REFERENCIA_BANCARIA_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteReferenciaBancaria)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_REFERENCIA_BANCARIA_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteReferenciaBancaria)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CLIENTE_REFERENCIA_BANCARIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteReferenciaComercial>(entity =>
        {
            entity.HasKey(e => e.IdClienteReferenciaComercial);

            entity.ToTable("CLIENTE_REFERENCIA_COMERCIAL", "dbo");

            entity.Property(e => e.IdClienteReferenciaComercial).HasColumnName("ID_CLIENTE_REFERENCIA_COMERCIAL");

            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.ClienteReferenciaComercials)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_CLIENTE_REFERENCIA_COMERCIAL_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteReferenciaComercials)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_REFERENCIA_COMERCIAL_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteReferenciaComercials)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_REFERENCIA_COMERCIAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteResumenValoracion>(entity =>
        {
            entity.HasKey(e => e.IdClienteResumenValoracion)
                .HasName("PK_CLIENTES_RV");

            entity.ToTable("CLIENTE_RESUMEN_VALORACION", "dbo");

            entity.Property(e => e.IdClienteResumenValoracion).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.CantEmbargo).HasColumnName("CANT_EMBARGO");

            entity.Property(e => e.CantHipoteca).HasColumnName("CANT_HIPOTECA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.EmbargoValor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("EMBARGO_VALOR");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Finca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.Hipoteca)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("HIPOTECA");

            entity.Property(e => e.HipotecaValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_VALOR");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Padron)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PADRON");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRO_FECHA");

            entity.Property(e => e.RegistroPublico)
                .HasColumnName("REGISTRO_PUBLICO")
                .HasComment("0: NO 1:SI");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.RpFolio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_FOLIO");

            entity.Property(e => e.RpNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_NUMERO");

            entity.Property(e => e.RpSerie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_SERIE");

            entity.Property(e => e.Superficie)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SUPERFICIE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.Property(e => e.TituloFecha)
                .HasColumnType("datetime")
                .HasColumnName("TITULO_FECHA");

            entity.Property(e => e.TituloPropiedad)
                .HasColumnName("TITULO_PROPIEDAD")
                .HasComment("0: NO 1: SI");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteResumenValoracions)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_CLIENTE");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.ClienteResumenValoracions)
                .HasForeignKey(d => d.IdMunicipio)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_MUNICIPIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteResumenValoracions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteResumenValoracionEmb>(entity =>
        {
            entity.HasKey(e => e.IdClienteResumenValoracionEmb)
                .HasName("PK_CLIENTES_CRVE");

            entity.ToTable("CLIENTE_RESUMEN_VALORACION_EMB", "dbo");

            entity.Property(e => e.IdClienteResumenValoracionEmb).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_EMB");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACREEDOR");

            entity.Property(e => e.CaratulaJuicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CARATULA_JUICIO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdClienteResumenValoracion).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION");

            entity.Property(e => e.Juzgado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("JUZGADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secretaria)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECRETARIA");

            entity.Property(e => e.TipoMedida).HasColumnName("TIPO_MEDIDA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteResumenValoracionNavigation)
                .WithMany(p => p.ClienteResumenValoracionEmbs)
                .HasForeignKey(d => d.IdClienteResumenValoracion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_EMB_CLIENTE_RESUMEN_VALORACION");
        });

        modelBuilder.Entity<ClienteResumenValoracionHip>(entity =>
        {
            entity.HasKey(e => e.IdClienteResumenValoracionHip)
                .HasName("PK_CLIENTES_CRVH");

            entity.ToTable("CLIENTE_RESUMEN_VALORACION_HIP", "dbo");

            entity.Property(e => e.IdClienteResumenValoracionHip).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_HIP");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FechaInscripcion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INSCRIPCION");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.IdClienteResumenValoracion).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteResumenValoracionNavigation)
                .WithMany(p => p.ClienteResumenValoracionHips)
                .HasForeignKey(d => d.IdClienteResumenValoracion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_HIP_CLIENTE_RESUMEN_VALORACION");
        });

        modelBuilder.Entity<ClienteResumenValoracionTer>(entity =>
        {
            entity.HasKey(e => e.IdClienteResumenValoracionTer)
                .HasName("PK_CLIENTES_RVT");

            entity.ToTable("CLIENTE_RESUMEN_VALORACION_TER", "dbo");

            entity.Property(e => e.IdClienteResumenValoracionTer).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_TER");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.CantEmbargo).HasColumnName("CANT_EMBARGO");

            entity.Property(e => e.CantHipoteca).HasColumnName("CANT_HIPOTECA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.EmbargoValor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("EMBARGO_VALOR");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Finca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.Hipoteca)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("HIPOTECA");

            entity.Property(e => e.HipotecaValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_VALOR");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClientePropietario).HasColumnName("ID_CLIENTE_PROPIETARIO");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Padron)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PADRON");

            entity.Property(e => e.Propietario)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRO_FECHA");

            entity.Property(e => e.RegistroPublico).HasColumnName("REGISTRO_PUBLICO");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.RpFolio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_FOLIO");

            entity.Property(e => e.RpNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_NUMERO");

            entity.Property(e => e.RpSerie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_SERIE");

            entity.Property(e => e.Superficie)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SUPERFICIE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.Property(e => e.TituloFecha)
                .HasColumnType("datetime")
                .HasColumnName("TITULO_FECHA");

            entity.Property(e => e.TituloPropiedad).HasColumnName("TITULO_PROPIEDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteResumenValoracionTerIdClienteNavigations)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_TER_CLIENTE");

            entity.HasOne(d => d.IdClientePropietarioNavigation)
                .WithMany(p => p.ClienteResumenValoracionTerIdClientePropietarioNavigations)
                .HasForeignKey(d => d.IdClientePropietario)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_TER_CLIENTE1");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.ClienteResumenValoracionTers)
                .HasForeignKey(d => d.IdMunicipio)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_TER_MUNICIPIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteResumenValoracionTers)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RESUMEN_VALORACION_TER_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteResumenValoracionTerEmb>(entity =>
        {
            entity.HasKey(e => e.IdClienteResumenValoracionTerEmb)
                .HasName("PK_CLIENTES_CRVE_TER");

            entity.ToTable("CLIENTE_RESUMEN_VALORACION_TER_EMB", "dbo");

            entity.Property(e => e.IdClienteResumenValoracionTerEmb).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_TER_EMB");

            entity.Property(e => e.Acreedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACREEDOR");

            entity.Property(e => e.CaratulaJuicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CARATULA_JUICIO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdClienteResumenValoracionTer).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_TER");

            entity.Property(e => e.Juzgado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("JUZGADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secretaria)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SECRETARIA");

            entity.Property(e => e.TipoMedida).HasColumnName("TIPO_MEDIDA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<ClienteResumenValoracionTerHip>(entity =>
        {
            entity.HasKey(e => e.IdClienteResumenValoracionTerHip)
                .HasName("PK_CLIENTES_CRVH_TER");

            entity.ToTable("CLIENTE_RESUMEN_VALORACION_TER_HIP", "dbo");

            entity.Property(e => e.IdClienteResumenValoracionTerHip).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_TER_HIP");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FechaInscripcion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INSCRIPCION");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.IdClienteResumenValoracionTer).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_TER");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<ClienteRodado>(entity =>
        {
            entity.HasKey(e => e.IdClienteRodado)
                .HasName("PK_CLIENTES_RM");

            entity.ToTable("CLIENTE_RODADO", "dbo");

            entity.Property(e => e.IdClienteRodado).HasColumnName("ID_CLIENTE_RODADO");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Chassis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CHASSIS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Marca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.Motor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MOTOR");

            entity.Property(e => e.Prendado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PRENDADO");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.RpFolio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_FOLIO");

            entity.Property(e => e.RpNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_NUMERO");

            entity.Property(e => e.RpSerie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_SERIE");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteRodados)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RODADO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteRodados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RODADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ClienteRodadoTer>(entity =>
        {
            entity.HasKey(e => e.IdClienteRodadoTer)
                .HasName("PK_CLIENTES_RMT");

            entity.ToTable("CLIENTE_RODADO_TER", "dbo");

            entity.Property(e => e.IdClienteRodadoTer).HasColumnName("ID_CLIENTE_RODADO_TER");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Chassis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CHASSIS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Marca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.Motor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MOTOR");

            entity.Property(e => e.Prendado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("PRENDADO");

            entity.Property(e => e.Propietario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.RpFolio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_FOLIO");

            entity.Property(e => e.RpNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_NUMERO");

            entity.Property(e => e.RpSerie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_SERIE");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ClienteRodadoTers)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RODADO_TER_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ClienteRodadoTers)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CLIENTE_RODADO_TER_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CmdbCatalogo>(entity =>
        {
            entity.HasKey(e => e.IdCmdbCatalogo);

            entity.ToTable("CMDB_CATALOGO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_CMDB_CATALOGO")
                .IsUnique();

            entity.Property(e => e.IdCmdbCatalogo).HasColumnName("ID_CMDB_CATALOGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCmdbGrupo).HasColumnName("ID_CMDB_GRUPO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbCatalogos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_CATALOGO_EMPRESA");

            entity.HasOne(d => d.IdCmdbGrupoNavigation)
                .WithMany(p => p.CmdbCatalogos)
                .HasForeignKey(d => d.IdCmdbGrupo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_CATALOGO_CMDB_GRUPO");
        });

        modelBuilder.Entity<CmdbCatalogoIc>(entity =>
        {
            entity.HasKey(e => e.IdCmdbCatalogoIc)
                .HasName("PK_CMDB_CATALOGO_IC_1");

            entity.ToTable("CMDB_CATALOGO_IC", "dbo");

            entity.Property(e => e.IdCmdbCatalogoIc).HasColumnName("ID_CMDB_CATALOGO_IC");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCmdbCatalogo).HasColumnName("ID_CMDB_CATALOGO");

            entity.Property(e => e.IdCmdbTipoIc).HasColumnName("ID_CMDB_TIPO_IC");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbCatalogoIcs)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_CATALOGO_IC_EMPRESA");

            entity.HasOne(d => d.IdCmdbTipoIcNavigation)
                .WithMany(p => p.CmdbCatalogoIcs)
                .HasForeignKey(d => d.IdCmdbTipoIc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_CATALOGO_IC_CMDB_TIPO_IC");
        });

        modelBuilder.Entity<CmdbCatalogoSla>(entity =>
        {
            entity.HasKey(e => e.IdCmdbCatalogoSla);

            entity.ToTable("CMDB_CATALOGO_SLA", "dbo");

            entity.Property(e => e.IdCmdbCatalogoSla).HasColumnName("ID_CMDB_CATALOGO_SLA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCmdbCatalogo).HasColumnName("ID_CMDB_CATALOGO");

            entity.Property(e => e.IdCmdbSla).HasColumnName("ID_CMDB_SLA");

            entity.Property(e => e.Impacto).HasColumnName("IMPACTO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Urgencia).HasColumnName("URGENCIA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbCatalogoSlas)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_CATALOGO_SLA_EMPRESA");

            entity.HasOne(d => d.IdCmdbSlaNavigation)
                .WithMany(p => p.CmdbCatalogoSlas)
                .HasForeignKey(d => d.IdCmdbSla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_CATALOGO_SLA_CMDB_SLA");
        });

        modelBuilder.Entity<CmdbGrupo>(entity =>
        {
            entity.HasKey(e => e.IdCmdbGrupo);

            entity.ToTable("CMDB_GRUPO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_CMDB_GRUPO")
                .IsUnique();

            entity.Property(e => e.IdCmdbGrupo).HasColumnName("ID_CMDB_GRUPO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<CmdbIc>(entity =>
        {
            entity.HasKey(e => e.IdCmdbIc);

            entity.ToTable("CMDB_IC", "dbo");

            entity.Property(e => e.IdCmdbIc).HasColumnName("ID_CMDB_IC");

            entity.Property(e => e.Cpu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CPU");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Detalles)
                .IsUnicode(false)
                .HasColumnName("DETALLES");

            entity.Property(e => e.Disco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DISCO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COMPRA");

            entity.Property(e => e.FechaGarantia)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_GARANTIA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCmdbLocal).HasColumnName("ID_CMDB_LOCAL");

            entity.Property(e => e.IdCmdbRevelado).HasColumnName("ID_CMDB_REVELADO");

            entity.Property(e => e.IdCmdbSla).HasColumnName("ID_CMDB_SLA");

            entity.Property(e => e.IdCmdbTipoIc).HasColumnName("ID_CMDB_TIPO_IC");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Mac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAC");

            entity.Property(e => e.Mac2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAC2");

            entity.Property(e => e.Memoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MEMORIA");

            entity.Property(e => e.NombreRed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_RED");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SnPn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SN_PN");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbIcs)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_IC_EMPRESA");

            entity.HasOne(d => d.IdCmdbLocalNavigation)
                .WithMany(p => p.CmdbIcs)
                .HasForeignKey(d => d.IdCmdbLocal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_IC_CMDB_LOCAL");

            entity.HasOne(d => d.IdCmdbReveladoNavigation)
                .WithMany(p => p.CmdbIcs)
                .HasForeignKey(d => d.IdCmdbRevelado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_IC_CMDB_REVELADO");

            entity.HasOne(d => d.IdCmdbSlaNavigation)
                .WithMany(p => p.CmdbIcs)
                .HasForeignKey(d => d.IdCmdbSla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_IC_CMDB_SLA");

            entity.HasOne(d => d.IdCmdbTipoIcNavigation)
                .WithMany(p => p.CmdbIcs)
                .HasForeignKey(d => d.IdCmdbTipoIc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_IC_CMDB_TIPO_IC");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.CmdbIcs)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_CMDB_IC_FUNCIONARIO");
        });

        modelBuilder.Entity<CmdbIcFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdCmdbIcFuncionario);

            entity.ToTable("CMDB_IC_FUNCIONARIO", "dbo");

            entity.Property(e => e.IdCmdbIcFuncionario).HasColumnName("ID_CMDB_IC_FUNCIONARIO");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.IdCmdbIc).HasColumnName("ID_CMDB_IC");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCmdbIcNavigation)
                .WithMany(p => p.CmdbIcFuncionarios)
                .HasForeignKey(d => d.IdCmdbIc)
                .HasConstraintName("FK_CMDB_IC_FUNCIONARIO_CMDB_IC");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.CmdbIcFuncionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_CMDB_IC_FUNCIONARIO_FUNCIONARIO");
        });

        modelBuilder.Entity<CmdbIcRelacionamiento>(entity =>
        {
            entity.HasKey(e => e.IdCmdbIcRelacionamiento);

            entity.ToTable("CMDB_IC_RELACIONAMIENTO", "dbo");

            entity.Property(e => e.IdCmdbIcRelacionamiento).HasColumnName("ID_CMDB_IC_RELACIONAMIENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCmdbIc).HasColumnName("ID_CMDB_IC");

            entity.Property(e => e.IdCmdbIc2).HasColumnName("ID_CMDB_IC2");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbIcRelacionamientos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_IC_RELACIONAMIENTO_EMPRESA");

            entity.HasOne(d => d.IdCmdbIcNavigation)
                .WithMany(p => p.CmdbIcRelacionamientoIdCmdbIcNavigations)
                .HasForeignKey(d => d.IdCmdbIc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_IC_RELACIONAMIENTO_CMDB_IC");

            entity.HasOne(d => d.IdCmdbIc2Navigation)
                .WithMany(p => p.CmdbIcRelacionamientoIdCmdbIc2Navigations)
                .HasForeignKey(d => d.IdCmdbIc2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_IC_RELACIONAMIENTO_CMDB_IC1");
        });

        modelBuilder.Entity<CmdbIncidente>(entity =>
        {
            entity.HasKey(e => e.IdCmdbIncidente);

            entity.ToTable("CMDB_INCIDENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CMDB_INCIDENTE")
                .IsUnique();

            entity.Property(e => e.IdCmdbIncidente).HasColumnName("ID_CMDB_INCIDENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Evaluacion)
                .HasColumnName("EVALUACION")
                .HasComment("1: Excelente 2:Bueno 3:Regular 4:Malo");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCmdbCatalogo).HasColumnName("ID_CMDB_CATALOGO");

            entity.Property(e => e.IdCmdbIc).HasColumnName("ID_CMDB_IC");

            entity.Property(e => e.IdCmdbTecnico).HasColumnName("ID_CMDB_TECNICO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Impacto).HasColumnName("IMPACTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Prioridad).HasColumnName("PRIORIDAD");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.TipoProblema)
                .HasColumnName("TIPO_PROBLEMA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Titulo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TITULO");

            entity.Property(e => e.Urgencia).HasColumnName("URGENCIA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbIncidentes)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_INCIDENTE_EMPRESA");

            entity.HasOne(d => d.IdCmdbCatalogoNavigation)
                .WithMany(p => p.CmdbIncidentes)
                .HasForeignKey(d => d.IdCmdbCatalogo)
                .HasConstraintName("FK_CMDB_INCIDENTE_CMDB_CATALOGO");

            entity.HasOne(d => d.IdCmdbIcNavigation)
                .WithMany(p => p.CmdbIncidentes)
                .HasForeignKey(d => d.IdCmdbIc)
                .HasConstraintName("FK_CMDB_INCIDENTE_CMDB_IC");

            entity.HasOne(d => d.IdCmdbTecnicoNavigation)
                .WithMany(p => p.CmdbIncidentes)
                .HasForeignKey(d => d.IdCmdbTecnico)
                .HasConstraintName("FK_CMDB_INCIDENTE_CMDB_TECNICO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.CmdbIncidentes)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CMDB_INCIDENTE_USUARIO");
        });

        modelBuilder.Entity<CmdbIncidenteAccion>(entity =>
        {
            entity.HasKey(e => e.IdCmdbIncidenteAccion);

            entity.ToTable("CMDB_INCIDENTE_ACCION", "dbo");

            entity.Property(e => e.IdCmdbIncidenteAccion).HasColumnName("ID_CMDB_INCIDENTE_ACCION");

            entity.Property(e => e.Accion).HasColumnName("ACCION");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCmdbIncidente).HasColumnName("ID_CMDB_INCIDENTE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCmdbIncidenteNavigation)
                .WithMany(p => p.CmdbIncidenteAccions)
                .HasForeignKey(d => d.IdCmdbIncidente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_INCIDENTE_ACCION_CMDB_INCIDENTE");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.CmdbIncidenteAccions)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_INCIDENTE_ACCION_USUARIO");
        });

        modelBuilder.Entity<CmdbLocal>(entity =>
        {
            entity.HasKey(e => e.IdCmdbLocal);

            entity.ToTable("CMDB_LOCAL", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_CMDB_LOCAL")
                .IsUnique();

            entity.Property(e => e.IdCmdbLocal).HasColumnName("ID_CMDB_LOCAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbLocals)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_LOCAL_EMPRESA");
        });

        modelBuilder.Entity<CmdbRdm>(entity =>
        {
            entity.HasKey(e => e.IdCmdbRdm);

            entity.ToTable("CMDB_RDM", "dbo");

            entity.HasIndex(e => new { e.IdCmdbIncidente, e.IdUsuario }, "UK_CMDB_RDM")
                .IsUnique();

            entity.Property(e => e.IdCmdbRdm).HasColumnName("ID_CMDB_RDM");

            entity.Property(e => e.Aprovacion).HasColumnName("APROVACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaApr)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APR");

            entity.Property(e => e.FechaSol)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SOL");

            entity.Property(e => e.IdCmdbIncidente).HasColumnName("ID_CMDB_INCIDENTE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbRdms)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_RDM_EMPRESA");

            entity.HasOne(d => d.IdCmdbIncidenteNavigation)
                .WithMany(p => p.CmdbRdms)
                .HasForeignKey(d => d.IdCmdbIncidente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_RDM_CMDB_INCIDENTE");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.CmdbRdms)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_RDM_USUARIO");
        });

        modelBuilder.Entity<CmdbRevelado>(entity =>
        {
            entity.HasKey(e => e.IdCmdbRevelado);

            entity.ToTable("CMDB_REVELADO", "dbo");

            entity.HasIndex(e => e.IdCmdbRevelado, "IX_CMDB_REVELADO");

            entity.Property(e => e.IdCmdbRevelado).HasColumnName("ID_CMDB_REVELADO");

            entity.Property(e => e.Cpu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CPU");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Disco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DISCO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Mac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAC");

            entity.Property(e => e.Memoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MEMORIA");

            entity.Property(e => e.NombreEquipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_EQUIPO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbRevelados)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_REVELADO_EMPRESA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.CmdbRevelados)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CMDB_REVELADO_USUARIO");
        });

        modelBuilder.Entity<CmdbSla>(entity =>
        {
            entity.HasKey(e => e.IdCmdbSla);

            entity.ToTable("CMDB_SLA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_CMDB_SLA")
                .IsUnique();

            entity.Property(e => e.IdCmdbSla).HasColumnName("ID_CMDB_SLA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbSlas)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_SLA_EMPRESA");
        });

        modelBuilder.Entity<CmdbTecnico>(entity =>
        {
            entity.HasKey(e => e.IdCmdbTecnico);

            entity.ToTable("CMDB_TECNICO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdUsuario }, "UK_CMDB_TECNICO")
                .IsUnique();

            entity.Property(e => e.IdCmdbTecnico).HasColumnName("ID_CMDB_TECNICO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Nivel).HasColumnName("NIVEL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbTecnicos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_TECNICO_EMPRESA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.CmdbTecnicos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CMDB_TECNICO_USUARIO");
        });

        modelBuilder.Entity<CmdbTipoIc>(entity =>
        {
            entity.HasKey(e => e.IdCmdbTipoIc);

            entity.ToTable("CMDB_TIPO_IC", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_CMDB_TIPO_IC")
                .IsUnique();

            entity.Property(e => e.IdCmdbTipoIc).HasColumnName("ID_CMDB_TIPO_IC");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CmdbTipoIcs)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CMDB_TIPO_IC_EMPRESA");
        });

        modelBuilder.Entity<CodigoBcp>(entity =>
        {
            entity.HasKey(e => e.IdCodigoBcp);

            entity.ToTable("CODIGO_BCP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo, e.Descripcion, e.RegStatus }, "UK_CODIGO_BCP")
                .IsUnique();

            entity.Property(e => e.IdCodigoBcp).HasColumnName("ID_CODIGO_BCP");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CodigoBcps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CODIGO_BCP_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CodigoBcps)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CODIGO_BCP_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ComercialClasifProducto>(entity =>
        {
            entity.HasKey(e => e.IdComercialClasifProducto);

            entity.ToTable("COMERCIAL_CLASIF_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_COMERCIAL_CLASIF_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdComercialClasifProducto).HasColumnName("ID_COMERCIAL_CLASIF_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdComercialGrupoProducto).HasColumnName("ID_COMERCIAL_GRUPO_PRODUCTO");

            entity.Property(e => e.IdComercialMercadoMgProd).HasColumnName("ID_COMERCIAL_MERCADO_MG_PROD");

            entity.Property(e => e.IdComercialMercadoProd).HasColumnName("ID_COMERCIAL_MERCADO_PROD");

            entity.Property(e => e.IdComercialTipoProducto).HasColumnName("ID_COMERCIAL_TIPO_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Vigencia)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ComercialClasifProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMERCIAL_CLASIF_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<ComercialGrupoProducto>(entity =>
        {
            entity.HasKey(e => e.IdComercialGrupoProducto);

            entity.ToTable("COMERCIAL_GRUPO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_COMERCIAL_GRUPO_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdComercialGrupoProducto).HasColumnName("ID_COMERCIAL_GRUPO_PRODUCTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Valido)
                .HasColumnName("VALIDO")
                .HasDefaultValueSql("((1))")
                .HasComment("0 = No valido. 1 = Valido.");
        });

        modelBuilder.Entity<ComercialMercadoMgProd>(entity =>
        {
            entity.HasKey(e => e.IdComercialMercadoMgProd);

            entity.ToTable("COMERCIAL_MERCADO_MG_PROD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_COMERCIAL_MERCADO_MG_PROD")
                .IsUnique();

            entity.Property(e => e.IdComercialMercadoMgProd).HasColumnName("ID_COMERCIAL_MERCADO_MG_PROD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<ComercialMercadoProd>(entity =>
        {
            entity.HasKey(e => e.IdComercialMercadoProd);

            entity.ToTable("COMERCIAL_MERCADO_PROD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_COMERCIAL_MERCADO_PROD")
                .IsUnique();

            entity.Property(e => e.IdComercialMercadoProd).HasColumnName("ID_COMERCIAL_MERCADO_PROD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<ComercialTipoProducto>(entity =>
        {
            entity.HasKey(e => e.IdComercialTipoProducto);

            entity.ToTable("COMERCIAL_TIPO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_COMERCIAL_TIPO_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdComercialTipoProducto).HasColumnName("ID_COMERCIAL_TIPO_PRODUCTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Valido)
                .HasColumnName("VALIDO")
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<Comision>(entity =>
        {
            entity.HasKey(e => e.IdComision);

            entity.ToTable("COMISION", "dbo");

            entity.Property(e => e.IdComision).HasColumnName("ID_COMISION");

            entity.Property(e => e.Clase)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLASE");

            entity.Property(e => e.Comision1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMISION");

            entity.Property(e => e.ComisionReal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMISION_REAL");

            entity.Property(e => e.DesClase)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DES_CLASE");

            entity.Property(e => e.DesGrupo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DES_GRUPO");

            entity.Property(e => e.DesProducto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DES_PRODUCTO");

            entity.Property(e => e.DesVendedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DES_VENDEDOR");

            entity.Property(e => e.Envase)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ENVASE");

            entity.Property(e => e.ForCli).HasColumnName("FOR_CLI");

            entity.Property(e => e.ForCliDes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOR_CLI_DES");

            entity.Property(e => e.Grupo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("GRUPO");

            entity.Property(e => e.Margen)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MARGEN");

            entity.Property(e => e.MargenReal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MARGEN_REAL");

            entity.Property(e => e.Producto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");

            entity.Property(e => e.Recibimiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RECIBIMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RentabilReal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTABIL_REAL");

            entity.Property(e => e.Rentabilidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTABILIDAD");

            entity.Property(e => e.Vendedor).HasColumnName("VENDEDOR");
        });

        modelBuilder.Entity<CompraAjuste>(entity =>
        {
            entity.HasKey(e => e.IdCompraAjuste);

            entity.ToTable("COMPRA_AJUSTE", "dbo");

            entity.Property(e => e.IdCompraAjuste)
                .ValueGeneratedNever()
                .HasColumnName("ID_COMPRA_AJUSTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CompraAjustes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_AJUSTE_EMPRESA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.CompraAjustes)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_AJUSTE_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CompraAjustes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_AJUSTE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.CompraAjustes)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_AJUSTE_FUNCIONARIO");
        });

        modelBuilder.Entity<CompraAjusteProducto>(entity =>
        {
            entity.HasKey(e => e.IdCompraAjusteProducto);

            entity.ToTable("COMPRA_AJUSTE_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdCompraAjuste, e.IdProducto, e.RegStatus }, "IX_COMPRA_AJUSTE_PRODUCTO");

            entity.Property(e => e.IdCompraAjusteProducto)
                .ValueGeneratedNever()
                .HasColumnName("ID_COMPRA_AJUSTE_PRODUCTO");

            entity.Property(e => e.CostoAjuste).HasColumnName("COSTO_AJUSTE");

            entity.Property(e => e.IdCompraAjuste).HasColumnName("ID_COMPRA_AJUSTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCompraAjusteNavigation)
                .WithMany(p => p.CompraAjusteProductos)
                .HasForeignKey(d => d.IdCompraAjuste)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_AJUSTE_PRODUCTO_COMPRA_AJUSTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CompraAjusteProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_AJUSTE_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<CompraComplemento>(entity =>
        {
            entity.HasKey(e => e.IdCompraComplemento);

            entity.ToTable("COMPRA_COMPLEMENTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_COMPRA_COMPLEMENTO")
                .IsUnique();

            entity.Property(e => e.IdCompraComplemento).HasColumnName("ID_COMPRA_COMPLEMENTO");

            entity.Property(e => e.Aprobado).HasColumnName("APROBADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdUsuarioAprobador).HasColumnName("ID_USUARIO_APROBADOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.ObsRechazo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBS_RECHAZO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Rechazado).HasColumnName("RECHAZADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CompraComplementos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_EMPRESA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.CompraComplementos)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.CompraComplementos)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CompraComplementos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<CompraComplementoFactura>(entity =>
        {
            entity.HasKey(e => e.IdCompraComplementoFactura);

            entity.ToTable("COMPRA_COMPLEMENTO_FACTURA", "dbo");

            entity.HasIndex(e => new { e.IdCompraComplemento, e.Factura }, "COMPRAS_COMPLEMENTO_FACTURA_IDX1");

            entity.Property(e => e.IdCompraComplementoFactura).HasColumnName("ID_COMPRA_COMPLEMENTO_FACTURA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ConcentracionNominalLote).HasColumnName("CONCENTRACION_NOMINAL_LOTE");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.IdCompraComplemento).HasColumnName("ID_COMPRA_COMPLEMENTO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.NroDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_DOCUMENTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.OperacionOrigen).HasColumnName("OPERACION_ORIGEN");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remision)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.ValorBase)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_BASE");

            entity.Property(e => e.ValorIva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("VALOR_IVA");

            entity.Property(e => e.ValorTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TOTAL");

            entity.Property(e => e.VencimientoFactura)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_FACTURA");

            entity.Property(e => e.VencimientoLote)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_LOTE");

            entity.HasOne(d => d.IdCompraComplementoNavigation)
                .WithMany(p => p.CompraComplementoFacturas)
                .HasForeignKey(d => d.IdCompraComplemento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_FACTURA_COMPRA_COMPLEMENTO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CompraComplementoFacturas)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_FACTURA_PRODUCTO");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.CompraComplementoFacturas)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_COMPRA_COMPLEMENTO_FACTURA_PROVEEDOR_TIMBRADO");
        });

        modelBuilder.Entity<CompraExtProductoSolicitud>(entity =>
        {
            entity.HasKey(e => e.IdCompraExtProdSolicitud);

            entity.ToTable("COMPRA_EXT_PRODUCTO_SOLICITUD", "dbo");

            entity.Property(e => e.IdCompraExtProdSolicitud).HasColumnName("ID_COMPRA_EXT_PROD_SOLICITUD");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdCompraExteriorProducto).HasColumnName("ID_COMPRA_EXTERIOR_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCompraExteriorProductoNavigation)
                .WithMany(p => p.CompraExtProductoSolicituds)
                .HasForeignKey(d => d.IdCompraExteriorProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXT_PRODUCTO_SOLICITUD_COMPRA_EXTERIOR_PRODUCTO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CompraExtProductoSolicituds)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXT_PRODUCTO_SOLICITUD_PRODUCTO");
        });

        modelBuilder.Entity<CompraExterior>(entity =>
        {
            entity.HasKey(e => e.IdCompraExterior);

            entity.ToTable("COMPRA_EXTERIOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_COMPRA_EXTERIOR")
                .IsUnique();

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.BloqueoPago).HasColumnName("BLOQUEO_PAGO");

            entity.Property(e => e.CantDiasFinanc).HasColumnName("CANT_DIAS_FINANC");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Despachante)
                .HasColumnName("DESPACHANTE")
                .HasComment("ID_PROVEEDOR");

            entity.Property(e => e.DespachoCierre)
                .HasColumnType("datetime")
                .HasColumnName("DESPACHO_CIERRE");

            entity.Property(e => e.DespachoCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_COTIZACION");

            entity.Property(e => e.DespachoCrt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_CRT");

            entity.Property(e => e.DespachoHojaCosto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_HOJA_COSTO");

            entity.Property(e => e.DespachoImponible)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_IMPONIBLE");

            entity.Property(e => e.DespachoIncoterm).HasColumnName("DESPACHO_INCOTERM");

            entity.Property(e => e.DespachoIvaDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_IVA_DOLAR");

            entity.Property(e => e.DespachoIvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_IVA_GUARANI");

            entity.Property(e => e.DespachoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_NUMERO");

            entity.Property(e => e.DespachoValorAduanero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_VALOR_ADUANERO");

            entity.Property(e => e.Embarque).HasColumnName("EMBARQUE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada).HasColumnName("ENTRADA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0:Fab.China, 1:En Transito, 2:Aduanas, 3:Deposito");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBl)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BL");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdIncoterm).HasColumnName("ID_INCOTERM");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA")
                .HasComment("Antes se llamaba FATURA_COMPRA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion)
                .HasColumnName("OPERACION")
                .HasComment("0 = Mercaderia; 1 = Bien");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION")
                .HasComment("Antes se llamaba FATURA_REMESSA");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.HasOne(d => d.EmbarqueNavigation)
                .WithMany(p => p.CompraExteriorEmbarqueNavigations)
                .HasForeignKey(d => d.Embarque)
                .HasConstraintName("FK_COMPRA_EXTERIOR_CIUDAD");

            entity.HasOne(d => d.EntradaNavigation)
                .WithMany(p => p.CompraExteriorEntradaNavigations)
                .HasForeignKey(d => d.Entrada)
                .HasConstraintName("FK_COMPRA_EXTERIOR_CIUDAD1");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.CompraExteriors)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_COMPRA_EXTERIOR_CARPETA");

            entity.HasOne(d => d.IdEmpresaCentroCostoNavigation)
                .WithMany(p => p.CompraExteriors)
                .HasForeignKey(d => d.IdEmpresaCentroCosto)
                .HasConstraintName("FK_COMPRA_EXTERIOR_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdPedidoCompraNavigation)
                .WithMany(p => p.CompraExteriors)
                .HasForeignKey(d => d.IdPedidoCompra)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PEDIDO_COMPRA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.CompraExteriors)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PROVEEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CompraExteriors)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_COMPRA_EXTERIOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CompraExteriorFactura>(entity =>
        {
            entity.HasKey(e => e.IdCompraExteriorFactura)
                .HasName("PK_COMPRAS_FATURAS");

            entity.ToTable("COMPRA_EXTERIOR_FACTURA", "dbo");

            entity.HasIndex(e => new { e.IdCompraExterior, e.Orden, e.IdProveedor, e.IdDocumento, e.DocumentoNumero, e.Total }, "UK_COMPRA_EXTERIOR_FACTURA")
                .IsUnique();

            entity.Property(e => e.IdCompraExteriorFactura).HasColumnName("ID_COMPRA_EXTERIOR_FACTURA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.DocumentoVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_VENCIMIENTO");

            entity.Property(e => e.Exentas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTAS");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.Gravadas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADAS");

            entity.Property(e => e.IdClase).HasColumnName("ID_CLASE");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.Imponible)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPONIBLE");

            entity.Property(e => e.Irp).HasColumnName("IRP");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.Iva10)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA_10");

            entity.Property(e => e.Iva5)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA_5");

            entity.Property(e => e.IvaDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_DOLAR");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.TipoGasto)
                .HasColumnName("TIPO_GASTO")
                .HasComment("0-Mercaderia 1-Flete 2-Despacho 3-Seguro 4-Seguro Mensual 5-Otros");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.CompraExteriorFacturas)
                .HasForeignKey(d => d.IdCompraExterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.CompraExteriorFacturas)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.CompraExteriorFacturas)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_PROVEEDOR_TIMBRADO");
        });

        modelBuilder.Entity<CompraExteriorFacturaDet>(entity =>
        {
            entity.HasKey(e => e.IdCompraExteriorFacturaDet);

            entity.ToTable("COMPRA_EXTERIOR_FACTURA_DET", "dbo");

            entity.Property(e => e.IdCompraExteriorFacturaDet).HasColumnName("ID_COMPRA_EXTERIOR_FACTURA_DET");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCompraExteriorFactura).HasColumnName("ID_COMPRA_EXTERIOR_FACTURA");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdEmpresaUnidad).HasColumnName("ID_EMPRESA_UNIDAD");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdCompraExteriorFacturaNavigation)
                .WithMany(p => p.CompraExteriorFacturaDets)
                .HasForeignKey(d => d.IdCompraExteriorFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_DET_COMPRA_EXTERIOR_FACTURA");

            entity.HasOne(d => d.IdEmpresaCentroCostoNavigation)
                .WithMany(p => p.CompraExteriorFacturaDets)
                .HasForeignKey(d => d.IdEmpresaCentroCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_DET_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdEmpresaUnidadNavigation)
                .WithMany(p => p.CompraExteriorFacturaDets)
                .HasForeignKey(d => d.IdEmpresaUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_DET_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.CompraExteriorFacturaDets)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_FACTURA_DET_PLAN_CUENTA");
        });

        modelBuilder.Entity<CompraExteriorPagar>(entity =>
        {
            entity.HasKey(e => e.IdCompraExteriorPagar)
                .HasName("PK_COMPRAS_PAGAR");

            entity.ToTable("COMPRA_EXTERIOR_PAGAR", "dbo");

            entity.HasIndex(e => new { e.IdCompraExterior, e.IdProveedor, e.Factura, e.ValorDolar }, "UK_COMPRA_EXTERIOR_PAGAR")
                .IsUnique();

            entity.Property(e => e.IdCompraExteriorPagar).HasColumnName("ID_COMPRA_EXTERIOR_PAGAR");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdClase).HasColumnName("ID_CLASE");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdClaseNavigation)
                .WithMany(p => p.CompraExteriorPagars)
                .HasForeignKey(d => d.IdClase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PAGAR_CLASE");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.CompraExteriorPagars)
                .HasForeignKey(d => d.IdCompraExterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PAGAR_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.CompraExteriorPagars)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PAGAR_PROVEEDOR");
        });

        modelBuilder.Entity<CompraExteriorProducto>(entity =>
        {
            entity.HasKey(e => e.IdCompraExteriorProducto)
                .HasName("PK_COMPRAS_PRODUTOS");

            entity.ToTable("COMPRA_EXTERIOR_PRODUCTO", "dbo");

            entity.Property(e => e.IdCompraExteriorProducto).HasColumnName("ID_COMPRA_EXTERIOR_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoAjuste)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_AJUSTE");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoDeposito)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_DEPOSITO");

            entity.Property(e => e.CostoDespacho)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_DESPACHO");

            entity.Property(e => e.CostoFinanciero)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_FINANCIERO");

            entity.Property(e => e.CostoFlete)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_FLETE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani).HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoIva)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_IVA");

            entity.Property(e => e.CostoOperacional)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_OPERACIONAL");

            entity.Property(e => e.CostoOtros)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_OTROS");

            entity.Property(e => e.CostoTci)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_TCI");

            entity.Property(e => e.CostoUnitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_UNITARIO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.FleteInterno)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FLETE_INTERNO");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.PorcAjuste)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_AJUSTE");

            entity.Property(e => e.PorcDeposito)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_DEPOSITO");

            entity.Property(e => e.PorcDespacho)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_DESPACHO");

            entity.Property(e => e.PorcFinanciero)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_FINANCIERO");

            entity.Property(e => e.PorcFlete)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_FLETE");

            entity.Property(e => e.PorcIva)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_IVA");

            entity.Property(e => e.PorcOperacional)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_OPERACIONAL");

            entity.Property(e => e.PorcOtros)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_OTROS");

            entity.Property(e => e.PorcTci)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PORC_TCI");

            entity.Property(e => e.PrecioContado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PRECIO_CONTADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Solicitud)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOLICITUD");

            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("SOLICITUD_FECHA");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("UNITARIO");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.CompraExteriorProductos)
                .HasForeignKey(d => d.IdCompraExterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PRODUCTO_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CompraExteriorProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<CompraExteriorProductoLote>(entity =>
        {
            entity.HasKey(e => e.IdCompraExtProductoLote);

            entity.ToTable("COMPRA_EXTERIOR_PRODUCTO_LOTE", "dbo");

            entity.Property(e => e.IdCompraExtProductoLote).HasColumnName("ID_COMPRA_EXT_PRODUCTO_LOTE");

            entity.Property(e => e.IdCompraExteriorProducto).HasColumnName("ID_COMPRA_EXTERIOR_PRODUCTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCompraExteriorProductoNavigation)
                .WithMany(p => p.CompraExteriorProductoLotes)
                .HasForeignKey(d => d.IdCompraExteriorProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_EXTERIOR_PRODUCTO_LOTE_COMPRA_EXTERIOR_PRODUCTO");
        });

        modelBuilder.Entity<CompraLocal>(entity =>
        {
            entity.HasKey(e => e.IdCompraLocal);

            entity.ToTable("COMPRA_LOCAL", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_COMPRA_LOCAL")
                .IsUnique();

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.BloqueoPago).HasColumnName("BLOQUEO_PAGO");

            entity.Property(e => e.Calculo).HasColumnName("CALCULO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.Iva10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_10");

            entity.Property(e => e.Iva5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nro)
                .HasColumnName("NRO")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion)
                .HasColumnName("OPERACION")
                .HasComment("0 = Mercaderia; 1 = Bien");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_CARPETA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_COMPRA_LOCAL_DEPARTAMENTO");

            entity.HasOne(d => d.IdEmpresaCentroCostoNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdEmpresaCentroCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdPedidoCompraNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdPedidoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_PEDIDO_COMPRA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_COMPRA_LOCAL_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_COMPRA_LOCAL_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.CompraLocals)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CompraLocalDet>(entity =>
        {
            entity.HasKey(e => e.IdCompraLocalDet);

            entity.ToTable("COMPRA_LOCAL_DET", "dbo");

            entity.Property(e => e.IdCompraLocalDet).HasColumnName("ID_COMPRA_LOCAL_DET");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdCompraLocalNavigation)
                .WithMany(p => p.CompraLocalDets)
                .HasForeignKey(d => d.IdCompraLocal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_DET_COMPRA_LOCAL");
        });

        modelBuilder.Entity<CompraLocalProducto>(entity =>
        {
            entity.HasKey(e => e.IdCompraLocalProducto);

            entity.ToTable("COMPRA_LOCAL_PRODUCTO", "dbo");

            entity.Property(e => e.IdCompraLocalProducto).HasColumnName("ID_COMPRA_LOCAL_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoAjuste).HasColumnName("COSTO_AJUSTE");

            entity.Property(e => e.CostoCompra).HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoFinanciero).HasColumnName("COSTO_FINANCIERO");

            entity.Property(e => e.CostoGerencial).HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani).HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoIva).HasColumnName("COSTO_IVA");

            entity.Property(e => e.CostoOperacional).HasColumnName("COSTO_OPERACIONAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.PorcAjuste).HasColumnName("PORC_AJUSTE");

            entity.Property(e => e.PorcFinanciero).HasColumnName("PORC_FINANCIERO");

            entity.Property(e => e.PorcIva).HasColumnName("PORC_IVA");

            entity.Property(e => e.PorcOperacional).HasColumnName("PORC_OPERACIONAL");

            entity.Property(e => e.PrecioContado)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("PRECIO_CONTADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("UNITARIO");

            entity.HasOne(d => d.IdCompraLocalNavigation)
                .WithMany(p => p.CompraLocalProductos)
                .HasForeignKey(d => d.IdCompraLocal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_PRODUCTO_COMPRA_LOCAL");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.CompraLocalProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPRA_LOCAL_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<ComprobanteAuditorium>(entity =>
        {
            entity.HasKey(e => e.IdComprobanteAuditoria);

            entity.ToTable("COMPROBANTE_AUDITORIA", "dbo");

            entity.Property(e => e.IdComprobanteAuditoria).HasColumnName("ID_COMPROBANTE_AUDITORIA");

            entity.Property(e => e.Encontrado).HasColumnName("ENCONTRADO");

            entity.Property(e => e.Factura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.FechaPlanilla)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PLANILLA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.IdIdentificadorTabla).HasColumnName("ID_IDENTIFICADOR_TABLA");

            entity.Property(e => e.IdProveedorInformado).HasColumnName("ID_PROVEEDOR_INFORMADO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.MontoPlanillaIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_PLANILLA_IVA");

            entity.Property(e => e.MontoPlanillaRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_PLANILLA_RENTA");

            entity.Property(e => e.MontoRegistroIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_REGISTRO_IVA");

            entity.Property(e => e.MontoRegistroRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_REGISTRO_RENTA");

            entity.Property(e => e.NroComprobAntiguo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_COMPROB_ANTIGUO");

            entity.Property(e => e.NroComprobNuevo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_COMPROB_NUEVO");

            entity.Property(e => e.NroLote).HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucProveedorInformado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR_INFORMADO");

            entity.Property(e => e.RucProveedorRegistro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR_REGISTRO");

            entity.Property(e => e.RucProveedorRegistroHechauka)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR_REGISTRO_HECHAUKA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.ComprobanteAuditoria)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_COMPROBANTE_AUDITORIA_TABLA");
        });

        modelBuilder.Entity<ComprobanteCargaImp>(entity =>
        {
            entity.HasKey(e => e.IdComprobanteCargaImp);

            entity.ToTable("COMPROBANTE_CARGA_IMP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_COMPROBANTE_CARGA_IMP")
                .IsUnique();

            entity.Property(e => e.IdComprobanteCargaImp).HasColumnName("ID_COMPROBANTE_CARGA_IMP");

            entity.Property(e => e.CostoFlete)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("COSTO_FLETE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaArribo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ARRIBO");

            entity.Property(e => e.FechaLlegadaAsu)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LLEGADA_ASU");

            entity.Property(e => e.FechaLlegadaPla)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LLEGADA_PLA");

            entity.Property(e => e.IdFormaPagoFleteImp).HasColumnName("ID_FORMA_PAGO_FLETE_IMP");

            entity.Property(e => e.IdForwarder).HasColumnName("ID_FORWARDER");

            entity.Property(e => e.IdProveedor)
                .HasColumnName("ID_PROVEEDOR")
                .HasComment("Id. del exportador.");

            entity.Property(e => e.IdTipoComprobanteImp).HasColumnName("ID_TIPO_COMPROBANTE_IMP");

            entity.Property(e => e.IdTransporteComex).HasColumnName("ID_TRANSPORTE_COMEX");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LineaMaritima)
                .HasColumnName("LINEA_MARITIMA")
                .HasComment("Id de la linea maritima");

            entity.Property(e => e.NombreTransporte)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_TRANSPORTE");

            entity.Property(e => e.NroComprobante)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NRO_COMPROBANTE");

            entity.Property(e => e.PaganteFlete).HasColumnName("PAGANTE_FLETE");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoM3)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_M3");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PuertoDestino)
                .HasColumnName("PUERTO_DESTINO")
                .HasComment("Id Puerto Destino");

            entity.Property(e => e.PuertoOrigen)
                .HasColumnName("PUERTO_ORIGEN")
                .HasComment("Id Puerto Origen");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ComprobanteCargaImps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_EMPRESA");

            entity.HasOne(d => d.IdFormaPagoFleteImpNavigation)
                .WithMany(p => p.ComprobanteCargaImps)
                .HasForeignKey(d => d.IdFormaPagoFleteImp)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_FORMA_PAGO_FLETE_IMP");

            entity.HasOne(d => d.IdForwarderNavigation)
                .WithMany(p => p.ComprobanteCargaImps)
                .HasForeignKey(d => d.IdForwarder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_FORWARDER");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ComprobanteCargaImpIdProveedorNavigations)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_PROVEEDOR");

            entity.HasOne(d => d.IdTipoComprobanteImpNavigation)
                .WithMany(p => p.ComprobanteCargaImps)
                .HasForeignKey(d => d.IdTipoComprobanteImp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_TIPO_COMPROBANTE_IMP1");

            entity.HasOne(d => d.IdTransporteComexNavigation)
                .WithMany(p => p.ComprobanteCargaImps)
                .HasForeignKey(d => d.IdTransporteComex)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_TRANSPORTE_COMEX");

            entity.HasOne(d => d.LineaMaritimaNavigation)
                .WithMany(p => p.ComprobanteCargaImpLineaMaritimaNavigations)
                .HasForeignKey(d => d.LineaMaritima)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_PROVEEDOR1");

            entity.HasOne(d => d.PaganteFleteNavigation)
                .WithMany(p => p.ComprobanteCargaImpPaganteFleteNavigations)
                .HasForeignKey(d => d.PaganteFlete)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_PROVEEDOR2");

            entity.HasOne(d => d.PuertoDestinoNavigation)
                .WithMany(p => p.ComprobanteCargaImpPuertoDestinoNavigations)
                .HasForeignKey(d => d.PuertoDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_PUERTO_DEST");

            entity.HasOne(d => d.PuertoOrigenNavigation)
                .WithMany(p => p.ComprobanteCargaImpPuertoOrigenNavigations)
                .HasForeignKey(d => d.PuertoOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_PUERTO");
        });

        modelBuilder.Entity<ComprobanteCargaImpDet>(entity =>
        {
            entity.HasKey(e => e.IdComprobanteCargaImpDet);

            entity.ToTable("COMPROBANTE_CARGA_IMP_DET", "dbo");

            entity.Property(e => e.IdComprobanteCargaImpDet).HasColumnName("ID_COMPROBANTE_CARGA_IMP_DET");

            entity.Property(e => e.Cas)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CAS");

            entity.Property(e => e.IdComprobanteCargaImp).HasColumnName("ID_COMPROBANTE_CARGA_IMP");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProformaImportacionDet).HasColumnName("ID_PROFORMA_IMPORTACION_DET");

            entity.Property(e => e.IdTipoEmbalajeComex).HasColumnName("ID_TIPO_EMBALAJE_COMEX");

            entity.Property(e => e.ImcoClass)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("IMCO_CLASS");

            entity.Property(e => e.PackingGroup)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("PACKING_GROUP");

            entity.Property(e => e.Paletizado)
                .HasColumnName("PALETIZADO")
                .HasComment("0= No. 1=Si");

            entity.Property(e => e.PosicionAranc)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("POSICION_ARANC");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Un).HasColumnName("UN");

            entity.HasOne(d => d.IdComprobanteCargaImpNavigation)
                .WithMany(p => p.ComprobanteCargaImpDets)
                .HasForeignKey(d => d.IdComprobanteCargaImp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_DET_COMPROBANTE_CARGA_IMP");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ComprobanteCargaImpDets)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_DET_PRODUCTO");

            entity.HasOne(d => d.IdProformaImportacionDetNavigation)
                .WithMany(p => p.ComprobanteCargaImpDets)
                .HasForeignKey(d => d.IdProformaImportacionDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_DET_PROFORMA_IMPORTACION_DET");

            entity.HasOne(d => d.IdTipoEmbalajeComexNavigation)
                .WithMany(p => p.ComprobanteCargaImpDets)
                .HasForeignKey(d => d.IdTipoEmbalajeComex)
                .HasConstraintName("FK_COMPROBANTE_CARGA_IMP_DET_TIPO_EMBALAJE_COMEX");
        });

        modelBuilder.Entity<ComprobanteCargaTrasbDet>(entity =>
        {
            entity.HasKey(e => e.IdComprobanteCargaTrasbDet)
                .HasName("PK_COMPROBANTE_CARGA_TRASBORDO_DET");

            entity.ToTable("COMPROBANTE_CARGA_TRASB_DET", "dbo");

            entity.Property(e => e.IdComprobanteCargaTrasbDet).HasColumnName("ID_COMPROBANTE_CARGA_TRASB_DET");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdComprobanteCargaImpDet).HasColumnName("ID_COMPROBANTE_CARGA_IMP_DET");

            entity.Property(e => e.IdComprobanteCargaTrasbordo).HasColumnName("ID_COMPROBANTE_CARGA_TRASBORDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdComprobanteCargaImpDetNavigation)
                .WithMany(p => p.ComprobanteCargaTrasbDets)
                .HasForeignKey(d => d.IdComprobanteCargaImpDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_TRASBORDO_DET_COMPROBANTE_CARGA_IMP_DET");

            entity.HasOne(d => d.IdComprobanteCargaTrasbordoNavigation)
                .WithMany(p => p.ComprobanteCargaTrasbDets)
                .HasForeignKey(d => d.IdComprobanteCargaTrasbordo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_TRASBORDO_DET_COMPROBANTE_CARGA_TRASBORDO");
        });

        modelBuilder.Entity<ComprobanteCargaTrasbordo>(entity =>
        {
            entity.HasKey(e => e.IdComprobanteCargaTrasbordo);

            entity.ToTable("COMPROBANTE_CARGA_TRASBORDO", "dbo");

            entity.HasIndex(e => new { e.IdComprobanteCargaImp, e.RegStatus }, "UK_COMPROBANTE_CARGA_TRASBORDO")
                .IsUnique();

            entity.Property(e => e.IdComprobanteCargaTrasbordo).HasColumnName("ID_COMPROBANTE_CARGA_TRASBORDO");

            entity.Property(e => e.FechaEta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ETA");

            entity.Property(e => e.FechaLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LLEGADA");

            entity.Property(e => e.FechaSalida)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA");

            entity.Property(e => e.FechaSalidaEst)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA_EST");

            entity.Property(e => e.IdComprobanteCargaImp).HasColumnName("ID_COMPROBANTE_CARGA_IMP");

            entity.Property(e => e.IdPuerto).HasColumnName("ID_PUERTO");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.IdTransporteComex).HasColumnName("ID_TRANSPORTE_COMEX");

            entity.Property(e => e.NroComprobMultimodal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NRO_COMPROB_MULTIMODAL");

            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdComprobanteCargaImpNavigation)
                .WithMany(p => p.ComprobanteCargaTrasbordos)
                .HasForeignKey(d => d.IdComprobanteCargaImp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_TRASBORDO_COMPROBANTE_CARGA_IMP");

            entity.HasOne(d => d.IdPuertoNavigation)
                .WithMany(p => p.ComprobanteCargaTrasbordos)
                .HasForeignKey(d => d.IdPuerto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COMPROBANTE_CARGA_TRASBORDO_PUERTO");

            entity.HasOne(d => d.IdTipoTransporteNavigation)
                .WithMany(p => p.ComprobanteCargaTrasbordos)
                .HasForeignKey(d => d.IdTipoTransporte)
                .HasConstraintName("FK_COMPROBANTE_CARGA_TRASBORDO_TIPO_TRANSPORTE");

            entity.HasOne(d => d.IdTransporteComexNavigation)
                .WithMany(p => p.ComprobanteCargaTrasbordos)
                .HasForeignKey(d => d.IdTransporteComex)
                .HasConstraintName("FK_COMPROBANTE_CARGA_TRASBORDO_TRANSPORTE_COMEX");
        });

        modelBuilder.Entity<ConceptoIva>(entity =>
        {
            entity.HasKey(e => e.IdConceptoIva)
                .HasName("PK_CONCEPO_IVA");

            entity.ToTable("CONCEPTO_IVA", "dbo");

            entity.Property(e => e.IdConceptoIva).HasColumnName("ID_CONCEPTO_IVA");

            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ConceptoIvas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONCEPTO_IVA_EMPRESA");
        });

        modelBuilder.Entity<ConceptoRentum>(entity =>
        {
            entity.HasKey(e => e.IdConceptoRenta)
                .HasName("PK_CONCEPO_RENTA");

            entity.ToTable("CONCEPTO_RENTA", "dbo");

            entity.Property(e => e.IdConceptoRenta).HasColumnName("ID_CONCEPTO_RENTA");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ConceptoRenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONCEPTO_RENTA_EMPRESA");
        });

        modelBuilder.Entity<Conciliacion>(entity =>
        {
            entity.HasKey(e => e.IdConciliacion)
                .HasName("PK__CONCILIA__B365596FB0B881AB");

            entity.ToTable("CONCILIACION", "dbo");

            entity.Property(e => e.IdConciliacion).HasColumnName("ID_CONCILIACION");

            entity.Property(e => e.ConciliacionCerrada).HasColumnName("CONCILIACION_CERRADA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaConciliacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CONCILIACION");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SaldoBanco)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO_BANCO");

            entity.Property(e => e.SaldoSistema)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO_SISTEMA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Conciliacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONCILIACION_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.Conciliacions)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONCILIACION_CUENTA_CORRIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Conciliacions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONCILIACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ConciliacionDet>(entity =>
        {
            entity.HasKey(e => e.IdConciliacionDet)
                .HasName("PK__CONCILIA__1407F9D032226A83");

            entity.ToTable("CONCILIACION_DET", "dbo");

            entity.Property(e => e.IdConciliacionDet).HasColumnName("ID_CONCILIACION_DET");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdConciliacion).HasColumnName("ID_CONCILIACION");

            entity.Property(e => e.IdCuentaMov).HasColumnName("ID_CUENTA_MOV");

            entity.Property(e => e.IdImpDatoBancarioDet).HasColumnName("ID_IMP_DATO_BANCARIO_DET");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Observaciones)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoConciliacion).HasColumnName("TIPO_CONCILIACION");

            entity.HasOne(d => d.IdConciliacionNavigation)
                .WithMany(p => p.ConciliacionDets)
                .HasForeignKey(d => d.IdConciliacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONCILIACION_DET_CONCILIACION");

            entity.HasOne(d => d.IdCuentaMovNavigation)
                .WithMany(p => p.ConciliacionDets)
                .HasForeignKey(d => d.IdCuentaMov)
                .HasConstraintName("FK_CONCILIACION_DET_CUENTA_MOV");

            entity.HasOne(d => d.IdImpDatoBancarioDetNavigation)
                .WithMany(p => p.ConciliacionDets)
                .HasForeignKey(d => d.IdImpDatoBancarioDet)
                .HasConstraintName("FK_CONCILIACION_DET_IMP_DATO_BANCARIO_DET");
        });

        modelBuilder.Entity<ConfiguracionContable>(entity =>
        {
            entity.HasKey(e => e.IdConfiguracionContable);

            entity.ToTable("CONFIGURACION_CONTABLE", "dbo");

            entity.Property(e => e.IdConfiguracionContable).HasColumnName("ID_CONFIGURACION_CONTABLE");

            entity.Property(e => e.Codigo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.DeberHaber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DEBER_HABER")
                .IsFixedLength();

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Nro).HasColumnName("NRO");

            entity.Property(e => e.Origen)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ORIGEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<Contenedor>(entity =>
        {
            entity.HasKey(e => e.IdContenedor);

            entity.ToTable("CONTENEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CONTENEDOR")
                .IsUnique();

            entity.Property(e => e.IdContenedor).HasColumnName("ID_CONTENEDOR");

            entity.Property(e => e.Capacidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CAPACIDAD")
                .HasComment("Capacidad del contenedor.");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Contenedors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTENEDOR_EMPRESA");
        });

        modelBuilder.Entity<ContenedorCargaImp>(entity =>
        {
            entity.HasKey(e => e.IdContenedorCargaImp);

            entity.ToTable("CONTENEDOR_CARGA_IMP", "dbo");

            entity.Property(e => e.IdContenedorCargaImp).HasColumnName("ID_CONTENEDOR_CARGA_IMP");

            entity.Property(e => e.FechaDevolucion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DEVOLUCION");

            entity.Property(e => e.FechaIngreso)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INGRESO");

            entity.Property(e => e.IdComprobanteCargaImp).HasColumnName("ID_COMPROBANTE_CARGA_IMP");

            entity.Property(e => e.IdContenedor).HasColumnName("ID_CONTENEDOR");

            entity.Property(e => e.NroContenedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTENEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TiempoLibre).HasColumnName("TIEMPO_LIBRE");

            entity.Property(e => e.TipoCarga).HasColumnName("TIPO_CARGA");

            entity.HasOne(d => d.IdComprobanteCargaImpNavigation)
                .WithMany(p => p.ContenedorCargaImps)
                .HasForeignKey(d => d.IdComprobanteCargaImp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTENEDOR_CARGA_IMP_COMPROBANTE_CARGA_IMP");

            entity.HasOne(d => d.IdContenedorNavigation)
                .WithMany(p => p.ContenedorCargaImps)
                .HasForeignKey(d => d.IdContenedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTENEDOR_CARGA_IMP_CONTENEDOR");
        });

        modelBuilder.Entity<ContratoCompra>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompra)
                .HasName("PK_CONTRATOS");

            entity.ToTable("CONTRATO_COMPRA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdZafra, e.Fecha, e.RegStatus }, "IDX_ANALISIS_FIJACION_DEPOSITO");

            entity.HasIndex(e => new { e.Contrato, e.Productor, e.IdDeposito, e.IdProducto, e.Empresa }, "IDX_Contrato_Compra_Fijacion_Deposito");

            entity.HasIndex(e => new { e.Empresa, e.IdZafra, e.IdProducto, e.Tipo, e.RegStatus }, "IDX_PES_ROM_COST_MED_GRAN");

            entity.HasIndex(e => new { e.Empresa, e.Contrato }, "UK_CONTRATO_COMPRA")
                .IsUnique();

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.Anulado).HasColumnName("ANULADO");

            entity.Property(e => e.BarrioProductor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BARRIO_PRODUCTOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadEstimada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_ESTIMADA");

            entity.Property(e => e.ClienteReferencia).HasColumnName("CLIENTE_REFERENCIA");

            entity.Property(e => e.Comprador).HasColumnName("COMPRADOR");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.ContratoRef)
                .HasColumnName("CONTRATO_REF")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DireccionProductor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntregaObs)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_OBS");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Fecha100)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_100");

            entity.Property(e => e.Fecha25)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_25");

            entity.Property(e => e.Fecha50)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_50");

            entity.Property(e => e.FechaPrecio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PRECIO");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.FirmadoMonsanto).HasColumnName("FIRMADO_MONSANTO");

            entity.Property(e => e.Flete)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FLETE");

            entity.Property(e => e.GarantiaPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_PRECIO");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpresionPrecio)
                .IsUnicode(false)
                .HasColumnName("IMPRESION_PRECIO");

            entity.Property(e => e.Motivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.NroLicencia)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("NRO_LICENCIA");

            entity.Property(e => e.PagoObs)
                .IsUnicode(false)
                .HasColumnName("PAGO_OBS");

            entity.Property(e => e.Peso)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PESO");

            entity.Property(e => e.PlusPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLUS_PRECIO");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.PrecioObs)
                .IsUnicode(false)
                .HasColumnName("PRECIO_OBS");

            entity.Property(e => e.PrevisionEntrega)
                .HasColumnType("datetime")
                .HasColumnName("PREVISION_ENTREGA");

            entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

            entity.Property(e => e.ProcesadoCliente).HasColumnName("PROCESADO_CLIENTE");

            entity.Property(e => e.Productor)
                .HasColumnName("PRODUCTOR")
                .HasComment("Equivalente a ID_CLIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SemAnticipo)
                .IsUnicode(false)
                .HasColumnName("SEM_ANTICIPO");

            entity.Property(e => e.SemChicago)
                .IsUnicode(false)
                .HasColumnName("SEM_CHICAGO");

            entity.Property(e => e.SemDescHumedad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("SEM_DESC_HUMEDAD");

            entity.Property(e => e.SemPago)
                .IsUnicode(false)
                .HasColumnName("SEM_PAGO");

            entity.Property(e => e.Situacion).HasColumnName("SITUACION");

            entity.Property(e => e.Tasa)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("TASA");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0:Precio a Fijar 1:Precio Fijo 2:Servicio 3:Expontaneas 5:Trocas 9:Procesamiento 8:Espejo");

            entity.Property(e => e.TipoTroca)
                .HasColumnName("TIPO_TROCA")
                .HasComment("1:Gane más Químicos 20 USD. Cosecha 19/20\r\n2:Gane más Químicos  Zafriña 19 USD. Cosecha 19/20\r\n3:Rinde más Abono 19 USD. Cosecha 19/20\r\n4:Rinde más Abono    18 USD. Cosecha 19/20\r\n5:Gane más Químicos  18,50 USD. Cosecha 19/20\r\n6:Precio Plus Químicos  19 USD. Cosecha 20/21\r\n7:Gane más Abono 19 USD. Cosecha 19/20\r\n8:Rinde más Abono 19 USD. Cosecha 20/21\r\n9:Rinde más Abono 18 USD. Cosecha 20/21\r\n");

            entity.Property(e => e.Trueque).HasColumnName("TRUEQUE");

            entity.HasOne(d => d.IdClienteLeNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdClienteLe)
                .HasConstraintName("FK_CONTRATO_COMPRA_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_CONTRATO_COMPRA_CULTIVO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_CONTRATO_COMPRA_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_PRODUCTO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CONTRATO_COMPRA_USUARIO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_CONTRATO_COMPRA_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ZAFRA");

            entity.HasOne(d => d.ProductorNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.Productor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompras)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_COMPRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraAplicacion>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraAplicacion);

            entity.ToTable("CONTRATO_COMPRA_APLICACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_COMPRA_APLICACION")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraAplicacion).HasColumnName("ID_CONTRATO_COMPRA_APLICACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoCompraAplicacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_APLICACION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraAplicacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_APLICACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraClasificacion>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraClasificacion);

            entity.ToTable("CONTRATO_COMPRA_CLASIFICACION", "dbo");

            entity.Property(e => e.IdContratoCompraClasificacion).HasColumnName("ID_CONTRATO_COMPRA_CLASIFICACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Descuento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.Recibido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RECIBIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tolerancia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("TOLERANCIA");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraClasificacions)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_CLASIFICACION_CONTRATO_COMPRA");
        });

        modelBuilder.Entity<ContratoCompraCosto>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraCosto);

            entity.ToTable("CONTRATO_COMPRA_COSTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdContratoCompra }, "UK_CONTRATO_COMPRA_COSTO")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraCosto).HasColumnName("ID_CONTRATO_COMPRA_COSTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.Destino).HasColumnName("DESTINO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.Flete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FLETE");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraCostoOrigen).HasColumnName("ID_CONTRATO_COMPRA_COSTO_ORIGEN");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LocalEntrega).HasColumnName("LOCAL_ENTREGA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Procesamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PROCESAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoCompra).HasColumnName("TIPO_COMPRA");

            entity.HasOne(d => d.DestinoNavigation)
                .WithMany(p => p.ContratoCompraCostoDestinoNavigations)
                .HasForeignKey(d => d.Destino)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_DEPOSITO1");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoCompraCostos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_EMPRESA");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoCompraCostos)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraCostos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ContratoCompraCostos)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_USUARIO");

            entity.HasOne(d => d.LocalEntregaNavigation)
                .WithMany(p => p.ContratoCompraCostoLocalEntregaNavigations)
                .HasForeignKey(d => d.LocalEntrega)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_DEPOSITO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraCostos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_COSTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraCt>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraCt)
                .HasName("PK_CONTRATO_COMPRA_CAMPANHA_TROCA");

            entity.ToTable("CONTRATO_COMPRA_CT", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CONTRATO_COMPRA_CAMPANHA_TROCA")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraCt).HasColumnName("ID_CONTRATO_COMPRA_CT");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa)
                .HasColumnName("EMPRESA")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImprimeAnexo).HasColumnName("IMPRIME_ANEXO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoCompraCts)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CONTRATO_COMPRA_CT_EMPRESA");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoCompraCts)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .HasConstraintName("FK_CONTRATO_COMPRA_CT_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ContratoCompraCts)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_CONTRATO_COMPRA_CT_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ContratoCompraCts)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_CONTRATO_COMPRA_CT_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraCts)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_COMPRA_CT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraCtProcesado>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraCtp)
                .HasName("PK__CONTRATO__BAEDCC288F7A8D41");

            entity.ToTable("CONTRATO_COMPRA_CT_PROCESADO", "dbo");

            entity.Property(e => e.IdContratoCompraCtp).HasColumnName("ID_CONTRATO_COMPRA_CTP");

            entity.Property(e => e.GarantiaPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_PRECIO");

            entity.Property(e => e.IdContratoCompraCt).HasColumnName("ID_CONTRATO_COMPRA_CT");

            entity.Property(e => e.PlusPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLUS_PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoProcesado).HasColumnName("TIPO_PROCESADO");

            entity.HasOne(d => d.IdContratoCompraCtNavigation)
                .WithMany(p => p.ContratoCompraCtProcesados)
                .HasForeignKey(d => d.IdContratoCompraCt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_CT_PROCESADO_CONTRATO_COMPRA_CT");
        });

        modelBuilder.Entity<ContratoCompraDeposito>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraDeposito);

            entity.ToTable("CONTRATO_COMPRA_DEPOSITO", "dbo");

            entity.Property(e => e.IdContratoCompraDeposito).HasColumnName("ID_CONTRATO_COMPRA_DEPOSITO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ValorAdendo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ADENDO");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraDepositos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_DEPOSITO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ContratoCompraDepositos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_DEPOSITO_DEPOSITO");
        });

        modelBuilder.Entity<ContratoCompraInfo>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraInfo);

            entity.ToTable("CONTRATO_COMPRA_INFO", "dbo");

            entity.Property(e => e.IdContratoCompraInfo).HasColumnName("ID_CONTRATO_COMPRA_INFO");

            entity.Property(e => e.Area)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("AREA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Estimativa)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("ESTIMATIVA");

            entity.Property(e => e.IdCategoria).HasColumnName("ID_CATEGORIA");

            entity.Property(e => e.IdCategoriaProducir).HasColumnName("ID_CATEGORIA_PRODUCIR");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraInfos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_INFO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ContratoCompraInfos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_INFO_PRODUCTO");
        });

        modelBuilder.Entity<ContratoCompraInmueble>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraInmueble);

            entity.ToTable("CONTRATO_COMPRA_INMUEBLE", "dbo");

            entity.Property(e => e.IdContratoCompraInmueble).HasColumnName("ID_CONTRATO_COMPRA_INMUEBLE");

            entity.Property(e => e.Finca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.Georeferencia)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("GEOREFERENCIA");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.Localidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LOCALIDAD");

            entity.Property(e => e.Padron)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PADRON");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Superficie)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SUPERFICIE");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraInmuebles)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_INMUEBLE_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.ContratoCompraInmuebles)
                .HasForeignKey(d => d.IdMunicipio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_INMUEBLE_MUNICIPIO");
        });

        modelBuilder.Entity<ContratoCompraLiq>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraLiq);

            entity.ToTable("CONTRATO_COMPRA_LIQ", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdContratoCompra, e.RegStatus, e.TipoLiquidacion }, "IDX_ANALISIS_FIJACION_DEPOSITO");

            entity.HasIndex(e => new { e.DocumentoNumero, e.IdProveedor, e.Lanzamiento, e.Empresa }, "IX_Contrato_Compra_Liq");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdContratoCompra, e.Fecha }, "UK_CONTRATO_COMPRA_LIQ")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.Anticipo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANTICIPO");

            entity.Property(e => e.AnticipoRet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANTICIPO_RET");

            entity.Property(e => e.Banco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadEntregada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_ENTREGADA");

            entity.Property(e => e.CantidadLiquidada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_LIQUIDADA");

            entity.Property(e => e.CantidadLiquidar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_LIQUIDAR");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.ExpedidorFactura)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR_FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaComplemento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COMPLEMENTO");

            entity.Property(e => e.Firma).HasColumnName("FIRMA");

            entity.Property(e => e.FormaPago).HasColumnName("FORMA_PAGO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraLiqProv)
                .HasColumnName("ID_CONTRATO_COMPRA_LIQ_PROV")
                .HasComment("SE CARGA EL ID_CONTRATO_COMPRA_LIQ DE LA LIQUIDACION PROVISORIA");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdDocumentoComp).HasColumnName("ID_DOCUMENTO_COMP");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdProveedorTimbradoCom).HasColumnName("ID_PROVEEDOR_TIMBRADO_COM");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTimbradoFactura).HasColumnName("ID_TIMBRADO_FACTURA");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.Insumos)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMOS");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.NroConstancia).HasColumnName("NRO_CONSTANCIA");

            entity.Property(e => e.NroControl)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTROL");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.NumeroComplemento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_COMPLEMENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Prestamo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRESTAMO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Representante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE");

            entity.Property(e => e.RepresentanteDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DIRECCION");

            entity.Property(e => e.RepresentanteDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DOCUMENTO");

            entity.Property(e => e.Retencion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION");

            entity.Property(e => e.RetencionIvaProveedor)
                .HasColumnName("RETENCION_IVA_PROVEEDOR")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Royalties)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROYALTIES");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.TipoImpresionFactura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_IMPRESION_FACTURA")
                .IsFixedLength();

            entity.Property(e => e.TipoLiquidacion).HasColumnName("TIPO_LIQUIDACION");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.Property(e => e.Usuario)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("USUARIO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorBase)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_BASE");

            entity.Property(e => e.ValorIva)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_IVA");

            entity.Property(e => e.ValorTotal)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_TOTAL");

            entity.Property(e => e.VencimientoComplemento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_COMPLEMENTO");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraLiqs)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdEmpresaCentroCostoNavigation)
                .WithMany(p => p.ContratoCompraLiqs)
                .HasForeignKey(d => d.IdEmpresaCentroCosto)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ContratoCompraLiqs)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.ContratoCompraLiqs)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.ContratoCompraLiqIdTimbradoNavigations)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_TIMBRADO");

            entity.HasOne(d => d.IdTimbradoFacturaNavigation)
                .WithMany(p => p.ContratoCompraLiqIdTimbradoFacturaNavigations)
                .HasForeignKey(d => d.IdTimbradoFactura)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_TIMBRADO1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraLiqs)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraLiqFactura>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraLiqFactura);

            entity.ToTable("CONTRATO_COMPRA_LIQ_FACTURA", "dbo");

            entity.Property(e => e.IdContratoCompraLiqFactura).HasColumnName("ID_CONTRATO_COMPRA_LIQ_FACTURA");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CobroGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COBRO_GUARANI");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RetencionAdelGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_ADEL_GS");

            entity.Property(e => e.RetencionAdelUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_ADEL_US");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SaldoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO_GUARANI");

            entity.Property(e => e.SerieFactura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE_FACTURA");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.ContratoCompraLiqFacturas)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_FACTURA_CARPETA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ContratoCompraLiqFacturas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_FACTURA_CLIENTE");

            entity.HasOne(d => d.IdContratoCompraLiqNavigation)
                .WithMany(p => p.ContratoCompraLiqFacturas)
                .HasForeignKey(d => d.IdContratoCompraLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_FACTURA_CONTRATO_COMPRA_LIQ");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.ContratoCompraLiqFacturas)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_FACTURA_TIMBRADO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ContratoCompraLiqFacturas)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_FACTURA_VENDEDOR");
        });

        modelBuilder.Entity<ContratoCompraLiqPrecio>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraLiqPrecio)
                .HasName("PK_CONTRATOS_LIQ_ORD");

            entity.ToTable("CONTRATO_COMPRA_LIQ_PRECIO", "dbo");

            entity.Property(e => e.IdContratoCompraLiqPrecio).HasColumnName("ID_CONTRATO_COMPRA_LIQ_PRECIO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.DescuentoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_VALOR");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdContratoCompraPrecio).HasColumnName("ID_CONTRATO_COMPRA_PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SaldoLiquidar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALDO_LIQUIDAR");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorLiquido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LIQUIDO");

            entity.HasOne(d => d.IdContratoCompraLiqNavigation)
                .WithMany(p => p.ContratoCompraLiqPrecios)
                .HasForeignKey(d => d.IdContratoCompraLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_PRECIO_CONTRATO_COMPRA_LIQ");

            entity.HasOne(d => d.IdContratoCompraPrecioNavigation)
                .WithMany(p => p.ContratoCompraLiqPrecios)
                .HasForeignKey(d => d.IdContratoCompraPrecio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_PRECIO_CONTRATO_COMPRA_PRECIO");
        });

        modelBuilder.Entity<ContratoCompraLiqRomaneo>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraLiqRomaneo)
                .HasName("PK_CONTRATOS_LIQ_ROM");

            entity.ToTable("CONTRATO_COMPRA_LIQ_ROMANEO", "dbo");

            entity.HasIndex(e => e.RegStatus, "IDX_LIST_ROMAN_DESCUE");

            entity.Property(e => e.IdContratoCompraLiqRomaneo).HasColumnName("ID_CONTRATO_COMPRA_LIQ_ROMANEO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdContratoCompraRomaneo).HasColumnName("ID_CONTRATO_COMPRA_ROMANEO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RomAplicado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ROM_APLICADO");

            entity.Property(e => e.RomLiquidado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ROM_LIQUIDADO");

            entity.Property(e => e.Royalties)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ROYALTIES");

            entity.Property(e => e.ValorAgregado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR_AGREGADO");

            entity.HasOne(d => d.IdContratoCompraLiqNavigation)
                .WithMany(p => p.ContratoCompraLiqRomaneos)
                .HasForeignKey(d => d.IdContratoCompraLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_ROMANEO_CONTRATO_COMPRA_LIQ");

            entity.HasOne(d => d.IdContratoCompraRomaneoNavigation)
                .WithMany(p => p.ContratoCompraLiqRomaneos)
                .HasForeignKey(d => d.IdContratoCompraRomaneo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_ROMANEO_CONTRATO_COMPRA_ROMANEO");
        });

        modelBuilder.Entity<ContratoCompraLiqTipoPago>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraLiqTp);

            entity.ToTable("CONTRATO_COMPRA_LIQ_TIPO_PAGO", "dbo");

            entity.Property(e => e.IdContratoCompraLiqTp).HasColumnName("ID_CONTRATO_COMPRA_LIQ_TP");

            entity.Property(e => e.Banco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.FechaPago)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PAGO");

            entity.Property(e => e.FormaPago).HasColumnName("FORMA_PAGO");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.Monto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Representante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE");

            entity.Property(e => e.RepresentanteDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DIRECCION");

            entity.Property(e => e.RepresentanteDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DOCUMENTO");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.Tercero).HasColumnName("TERCERO");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.HasOne(d => d.IdContratoCompraLiqNavigation)
                .WithMany(p => p.ContratoCompraLiqTipoPagos)
                .HasForeignKey(d => d.IdContratoCompraLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_TIPO_PAGO_CONTRATO_COMPRA_LIQ");
        });

        modelBuilder.Entity<ContratoCompraLiqVerifica>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraLiqVerifica);

            entity.ToTable("CONTRATO_COMPRA_LIQ_VERIFICA", "dbo");

            entity.Property(e => e.IdContratoCompraLiqVerifica).HasColumnName("ID_CONTRATO_COMPRA_LIQ_VERIFICA");

            entity.Property(e => e.ContabilidadObs)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTABILIDAD_OBS");

            entity.Property(e => e.ContabilidadVerifica).HasColumnName("CONTABILIDAD_VERIFICA");

            entity.Property(e => e.CreditoObs)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CREDITO_OBS");

            entity.Property(e => e.CreditoVerifica).HasColumnName("CREDITO_VERIFICA");

            entity.Property(e => e.FechaUltAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ULT_APROBACION");

            entity.Property(e => e.GranosObs)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("GRANOS_OBS");

            entity.Property(e => e.GranosVerifica).HasColumnName("GRANOS_VERIFICA");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraLiqNavigation)
                .WithMany(p => p.ContratoCompraLiqVerificas)
                .HasForeignKey(d => d.IdContratoCompraLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_LIQ_VERIFICA_CONTRATO_COMPRA_LIQ");
        });

        modelBuilder.Entity<ContratoCompraPedido>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraPedido);

            entity.ToTable("CONTRATO_COMPRA_PEDIDO", "dbo");

            entity.Property(e => e.IdContratoCompraPedido).HasColumnName("ID_CONTRATO_COMPRA_PEDIDO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoProducto).HasColumnName("ID_PEDIDO_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraPedidos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_PEDIDO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.ContratoCompraPedidos)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_PEDIDO_PEDIDO");

            entity.HasOne(d => d.IdPedidoProductoNavigation)
                .WithMany(p => p.ContratoCompraPedidos)
                .HasForeignKey(d => d.IdPedidoProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_PEDIDO_PEDIDO_PRODUCTO");
        });

        modelBuilder.Entity<ContratoCompraPrecio>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraPrecio)
                .HasName("PK_CONTRATO_COMPRA_ORDEN");

            entity.ToTable("CONTRATO_COMPRA_PRECIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdContratoCompra, e.ContratoCosto, e.ContratoSaldo }, "UK_CONTRATO_COMPRA_ORDEN")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraPrecio).HasColumnName("ID_CONTRATO_COMPRA_PRECIO");

            entity.Property(e => e.Autofactura).HasColumnName("AUTOFACTURA");

            entity.Property(e => e.Bushel)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("BUSHEL");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ContratoCosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONTRATO_COSTO");

            entity.Property(e => e.ContratoSaldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CONTRATO_SALDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.Fijacion).HasColumnName("FIJACION");

            entity.Property(e => e.FijacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("FIJACION_FECHA");

            entity.Property(e => e.FijacionHora)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FIJACION_HORA");

            entity.Property(e => e.FijacionPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FIJACION_PRECIO");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.Hora)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraPrecioOrigen).HasColumnName("ID_CONTRATO_COMPRA_PRECIO_ORIGEN");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PrecioPromocion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_PROMOCION");

            entity.Property(e => e.Recibido).HasColumnName("RECIBIDO");

            entity.Property(e => e.Referencia)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Situacion).HasColumnName("SITUACION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoCompraPrecios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_PRECIO_EMPRESA");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoCompraPrecios)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .HasConstraintName("FK_CONTRATO_COMPRA_ORDEN_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraPrecios)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ORDEN_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ContratoCompraPrecios)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_CONTRATO_COMPRA_PRECIO_DEPOSITO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ContratoCompraPrecios)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CONTRATO_COMPRA_ORDEN_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraPrecios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ORDEN_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraRollover>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraRollover);

            entity.ToTable("CONTRATO_COMPRA_ROLLOVER", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_COMPRA_ROLLOVER")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraRollover).HasColumnName("ID_CONTRATO_COMPRA_ROLLOVER");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoCompraRollovers)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ContratoCompraRollovers)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraRollovers)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoCompraRolloverCosto>(entity =>
        {
            entity.HasKey(e => e.IdContratoComRolCos);

            entity.ToTable("CONTRATO_COMPRA_ROLLOVER_COSTO", "dbo");

            entity.Property(e => e.IdContratoComRolCos).HasColumnName("ID_CONTRATO_COM_ROL_COS");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.FechaBaseCosto)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE_COSTO")
                .HasComment("fecha_base que estira de contrato_compra_costo");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdBolsaValoresSimboloCosto)
                .HasColumnName("ID_BOLSA_VALORES_SIMBOLO_COSTO")
                .HasComment("id_bolsa_valores_simbolo que estira de contrato_compra_costo");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraRollover).HasColumnName("ID_CONTRATO_COMPRA_ROLLOVER");

            entity.Property(e => e.IdDepositoCosto).HasColumnName("ID_DEPOSITO_COSTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALDO");

            entity.Property(e => e.ValorCosto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR_COSTO")
                .HasComment("costo que estira de contrato_compra_costo");

            entity.Property(e => e.ValorRollover)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR_ROLLOVER");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoCompraRolloverCostoIdBolsaValoresSimboloNavigations)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_COSTO_BOLSA_VALORES_SIMBOLO1");

            entity.HasOne(d => d.IdBolsaValoresSimboloCostoNavigation)
                .WithMany(p => p.ContratoCompraRolloverCostoIdBolsaValoresSimboloCostoNavigations)
                .HasForeignKey(d => d.IdBolsaValoresSimboloCosto)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_COSTO_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraRolloverCostos)
                .HasForeignKey(d => d.IdContratoCompra)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_COSTO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdContratoCompraRolloverNavigation)
                .WithMany(p => p.ContratoCompraRolloverCostos)
                .HasForeignKey(d => d.IdContratoCompraRollover)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROLLOVER_COSTO_CONTRATO_COMPRA_ROLLOVER");
        });

        modelBuilder.Entity<ContratoCompraRomaneo>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraRomaneo);

            entity.ToTable("CONTRATO_COMPRA_ROMANEO", "dbo");

            entity.HasIndex(e => new { e.IdContratoCompra, e.IdPesajeRomaneo, e.Liquido }, "IX_Analisis_Contrato_Fijacion");

            entity.HasIndex(e => new { e.IdPesajeRomaneo, e.IdContratoCompra, e.Liquido }, "IX_Contrato_Compra_Romaneo");

            entity.Property(e => e.IdContratoCompraRomaneo).HasColumnName("ID_CONTRATO_COMPRA_ROMANEO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraAplicacion).HasColumnName("ID_CONTRATO_COMPRA_APLICACION");

            entity.Property(e => e.IdPesajeRomaneo).HasColumnName("ID_PESAJE_ROMANEO");

            entity.Property(e => e.Liquido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("LIQUIDO");

            entity.Property(e => e.Manual)
                .HasColumnName("MANUAL")
                .HasComment("0: GENERADO EN FORMA AUTOMATICA DESDE PESAJE 1:GENERADO MANUALMENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraRomaneos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROMANEO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdContratoCompraAplicacionNavigation)
                .WithMany(p => p.ContratoCompraRomaneos)
                .HasForeignKey(d => d.IdContratoCompraAplicacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROMANEO_CONTRATO_COMPRA_APLICACION");

            entity.HasOne(d => d.IdPesajeRomaneoNavigation)
                .WithMany(p => p.ContratoCompraRomaneos)
                .HasForeignKey(d => d.IdPesajeRomaneo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_ROMANEO_PESAJE_ROMANEO");
        });

        modelBuilder.Entity<ContratoCompraTrocaRef>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraTrocaRef);

            entity.ToTable("CONTRATO_COMPRA_TROCA_REF", "dbo");

            entity.Property(e => e.IdContratoCompraTrocaRef).HasColumnName("ID_CONTRATO_COMPRA_TROCA_REF");

            entity.Property(e => e.CantidadRef)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_REF");

            entity.Property(e => e.ContratoCompraRef)
                .HasColumnName("CONTRATO_COMPRA_REF")
                .HasComment("Id del Contrato de Compra al que esta referenciado el negocio de troca ");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraTrocaRefs)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_TROCA_REF_CONTRATO_COMPRA");
        });

        modelBuilder.Entity<ContratoCompraWashout>(entity =>
        {
            entity.HasKey(e => e.IdContratoCompraWashout);

            entity.ToTable("CONTRATO_COMPRA_WASHOUT", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_COMPRA_WASHOUT")
                .IsUnique();

            entity.Property(e => e.IdContratoCompraWashout).HasColumnName("ID_CONTRATO_COMPRA_WASHOUT");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadSaldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_SALDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoCosto).HasColumnName("TIPO_COSTO");

            entity.Property(e => e.TipoPrecio).HasColumnName("TIPO_PRECIO");

            entity.Property(e => e.TipoVolumen).HasColumnName("TIPO_VOLUMEN");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoCompraWashouts)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_WASHOUT_EMPRESA");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoCompraWashouts)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_WASHOUT_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ContratoCompraWashouts)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_CONTRATO_COMPRA_WASHOUT_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoCompraWashouts)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_COMPRA_WASHOUT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoTercero>(entity =>
        {
            entity.HasKey(e => e.IdContratoTercero);

            entity.ToTable("CONTRATO_TERCERO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_TERCERO")
                .IsUnique();

            entity.Property(e => e.IdContratoTercero).HasColumnName("ID_CONTRATO_TERCERO");

            entity.Property(e => e.Banco)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.BancoPres)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("BANCO_PRES");

            entity.Property(e => e.Caracter)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CARACTER");

            entity.Property(e => e.Cheque).HasColumnName("CHEQUE");

            entity.Property(e => e.Confirmacion).HasColumnName("CONFIRMACION");

            entity.Property(e => e.ContratoAnt).HasColumnName("CONTRATO_ANT");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Dias).HasColumnName("DIAS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.Prestataria).HasColumnName("PRESTATARIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Representate)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("REPRESENTATE");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoTerceros)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CONTRATO_TERCERO_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.ContratoTerceros)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_CONTRATO_TERCERO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ContratoTerceros)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_CONTRATO_TERCERO_PROVEEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoTerceros)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_TERCERO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoTransportadora>(entity =>
        {
            entity.HasKey(e => e.IdContratoTransportadora);

            entity.ToTable("CONTRATO_TRANSPORTADORA", "dbo");

            entity.Property(e => e.IdContratoTransportadora).HasColumnName("ID_CONTRATO_TRANSPORTADORA");

            entity.Property(e => e.CantidadCentro).HasColumnName("CANTIDAD_CENTRO");

            entity.Property(e => e.CantidadNorte).HasColumnName("CANTIDAD_NORTE");

            entity.Property(e => e.CantidadSur).HasColumnName("CANTIDAD_SUR");

            entity.Property(e => e.CiRepresentante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CI_REPRESENTANTE");

            entity.Property(e => e.CiRepresentante1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CI_REPRESENTANTE1");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Representante)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE");

            entity.Property(e => e.Representante1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE1");

            entity.Property(e => e.Vigencia)
                .HasColumnType("date")
                .HasColumnName("VIGENCIA");

            entity.Property(e => e.VigenciaFin)
                .HasColumnType("date")
                .HasColumnName("VIGENCIA_FIN");

            entity.Property(e => e.ZonaCentro).HasColumnName("ZONA_CENTRO");

            entity.Property(e => e.ZonaNorte).HasColumnName("ZONA_NORTE");

            entity.Property(e => e.ZonaSur).HasColumnName("ZONA_SUR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoTransportadoras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_TRANSPORTADORA_EMPRESA");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.ContratoTransportadoras)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_CONTRATO_TRANSPORTADORA_TRANSPORTADORA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ContratoTransportadoras)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_CONTRATO_TRANSPORTADORA_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoTransportadoras)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_TRANSPORTADORA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoVentaCosto>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaCosto);

            entity.ToTable("CONTRATO_VENTA_COSTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_VENTA_COSTO")
                .IsUnique();

            entity.Property(e => e.IdContratoVentaCosto).HasColumnName("ID_CONTRATO_VENTA_COSTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LocalEntrega).HasColumnName("LOCAL_ENTREGA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVentaCostos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_COSTO_EMPRESA");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoVentaCostos)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .HasConstraintName("FK_CONTRATO_VENTA_COSTO_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaCostos)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_COSTO_CONTRATO_VENTA");

            entity.HasOne(d => d.LocalEntregaNavigation)
                .WithMany(p => p.ContratoVentaCostos)
                .HasForeignKey(d => d.LocalEntrega)
                .HasConstraintName("FK_CONTRATO_VENTA_COSTO_DEPOSITO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoVentaCostos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CONTRATO_VENTA_COSTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoVentaDeposito>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaDeposito);

            entity.ToTable("CONTRATO_VENTA_DEPOSITO", "dbo");

            entity.Property(e => e.IdContratoVentaDeposito).HasColumnName("ID_CONTRATO_VENTA_DEPOSITO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaDepositos)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_DEPOSITO_CONTRATO_VENTA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ContratoVentaDepositos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_DEPOSITO_DEPOSITO");
        });

        modelBuilder.Entity<ContratoVentaLiq>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaLiq);

            entity.ToTable("CONTRATO_VENTA_LIQ", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_VENTA_LIQ")
                .IsUnique();

            entity.Property(e => e.IdContratoVentaLiq).HasColumnName("ID_CONTRATO_VENTA_LIQ");

            entity.Property(e => e.Anticipo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANTICIPO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdContratoVenta)
                .HasColumnName("ID_CONTRATO_VENTA")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.Insumo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMO");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVentaLiqs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_EMPRESA");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaLiqs)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_CONTRATO_VENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoVentaLiqs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoVentaLiqPrecio>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaLiqPrecio)
                .HasName("PK_CONTRATOS_LIQ_ORD_VENTAS");

            entity.ToTable("CONTRATO_VENTA_LIQ_PRECIO", "dbo");

            entity.Property(e => e.IdContratoVentaLiqPrecio).HasColumnName("ID_CONTRATO_VENTA_LIQ_PRECIO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.DescuentoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_VALOR");

            entity.Property(e => e.IdContratoVentaLiq).HasColumnName("ID_CONTRATO_VENTA_LIQ");

            entity.Property(e => e.IdContratoVentaPrecio).HasColumnName("ID_CONTRATO_VENTA_PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SaldoLiquidar)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALDO_LIQUIDAR");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorLiquido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LIQUIDO");

            entity.HasOne(d => d.IdContratoVentaLiqNavigation)
                .WithMany(p => p.ContratoVentaLiqPrecios)
                .HasForeignKey(d => d.IdContratoVentaLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_PRECIO_CONTRATO_VENTA_LIQ");

            entity.HasOne(d => d.IdContratoVentaPrecioNavigation)
                .WithMany(p => p.ContratoVentaLiqPrecios)
                .HasForeignKey(d => d.IdContratoVentaPrecio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_PRECIO_CONTRATO_VENTA_PRECIO");
        });

        modelBuilder.Entity<ContratoVentaLiqRef>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaLiqRef);

            entity.ToTable("CONTRATO_VENTA_LIQ_REF", "dbo");

            entity.Property(e => e.IdContratoVentaLiqRef).HasColumnName("ID_CONTRATO_VENTA_LIQ_REF");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoVentaLiq).HasColumnName("ID_CONTRATO_VENTA_LIQ");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoVentaLiq)
                .HasColumnName("TIPO_VENTA_LIQ")
                .HasComment("Tipo de ventas, 0=Venta mixta (la cantidad liquidada es de una compra y tambien de produccion propia; 1=cierre (la cantidad total de la liq. es referente a una compra) ");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoVentaLiqRefs)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_REF_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdContratoVentaLiqNavigation)
                .WithMany(p => p.ContratoVentaLiqRefs)
                .HasForeignKey(d => d.IdContratoVentaLiq)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_LIQ_REF_CONTRATO_VENTA_LIQ");
        });

        modelBuilder.Entity<ContratoVentaPrecio>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaPrecio);

            entity.ToTable("CONTRATO_VENTA_PRECIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdContratoVenta }, "UK_CONTRATO_VENTA_PRECIO")
                .IsUnique();

            entity.Property(e => e.IdContratoVentaPrecio).HasColumnName("ID_CONTRATO_VENTA_PRECIO");

            entity.Property(e => e.Bushel)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("BUSHEL");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ContratoCosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONTRATO_COSTO");

            entity.Property(e => e.ContratoSaldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CONTRATO_SALDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.Fijacion).HasColumnName("FIJACION");

            entity.Property(e => e.FijacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("FIJACION_FECHA");

            entity.Property(e => e.FijacionHora)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FIJACION_HORA");

            entity.Property(e => e.FijacionPrecio)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FIJACION_PRECIO");

            entity.Property(e => e.Hora)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HORA");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdContratoVenta)
                .HasColumnName("ID_CONTRATO_VENTA")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Referencia)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Situacion).HasColumnName("SITUACION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVentaPrecios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_PRECIO_EMPRESA");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoVentaPrecios)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_PRECIO_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaPrecios)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_PRECIO_CONTRATO_VENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoVentaPrecios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_PRECIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoVentaRefCompra>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaRefCompra);

            entity.ToTable("CONTRATO_VENTA_REF_COMPRA", "dbo");

            entity.Property(e => e.IdContratoVentaRefCompra).HasColumnName("ID_CONTRATO_VENTA_REF_COMPRA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoVentaRef)
                .HasColumnName("TIPO_VENTA_REF")
                .HasComment("0 = Mixta ( es cuando la venta es de una produccion propia y tambien de una compra); 1= Cierre (cuando la venta es referente a solo compras)");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ContratoVentaRefCompras)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_REF_COMPRA_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaRefCompras)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_REF_COMPRA_CONTRATO_VENTA");
        });

        modelBuilder.Entity<ContratoVentaRollover>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaRollover);

            entity.ToTable("CONTRATO_VENTA_ROLLOVER", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_VENTA_ROLLOVER")
                .IsUnique();

            entity.Property(e => e.IdContratoVentaRollover).HasColumnName("ID_CONTRATO_VENTA_ROLLOVER");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVentaRollovers)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ContratoVentaRollovers)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoVentaRollovers)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoVentaRolloverCosto>(entity =>
        {
            entity.HasKey(e => e.IdContratoVenRolCos);

            entity.ToTable("CONTRATO_VENTA_ROLLOVER_COSTO", "dbo");

            entity.Property(e => e.IdContratoVenRolCos).HasColumnName("ID_CONTRATO_VEN_ROL_COS");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.FechaBaseCosto)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE_COSTO");

            entity.Property(e => e.IdBolsaValoresSimbolo).HasColumnName("ID_BOLSA_VALORES_SIMBOLO");

            entity.Property(e => e.IdBolsaValoresSimboloCosto).HasColumnName("ID_BOLSA_VALORES_SIMBOLO_COSTO");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdContratoVentaRollover).HasColumnName("ID_CONTRATO_VENTA_ROLLOVER");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALDO");

            entity.Property(e => e.ValorCosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COSTO");

            entity.HasOne(d => d.IdBolsaValoresSimboloNavigation)
                .WithMany(p => p.ContratoVentaRolloverCostoIdBolsaValoresSimboloNavigations)
                .HasForeignKey(d => d.IdBolsaValoresSimbolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_COSTO_BOLSA_VALORES_SIMBOLO1");

            entity.HasOne(d => d.IdBolsaValoresSimboloCostoNavigation)
                .WithMany(p => p.ContratoVentaRolloverCostoIdBolsaValoresSimboloCostoNavigations)
                .HasForeignKey(d => d.IdBolsaValoresSimboloCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_COSTO_BOLSA_VALORES_SIMBOLO");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaRolloverCostos)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_COSTO_CONTRATO_VENTA");

            entity.HasOne(d => d.IdContratoVentaRolloverNavigation)
                .WithMany(p => p.ContratoVentaRolloverCostos)
                .HasForeignKey(d => d.IdContratoVentaRollover)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ROLLOVER_COSTO_CONTRATO_VENTA_ROLLOVER");
        });

        modelBuilder.Entity<ContratoVentaSet>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaSet);

            entity.ToTable("CONTRATO_VENTA_SET", "dbo");

            entity.Property(e => e.IdContratoVentaSet).HasColumnName("ID_CONTRATO_VENTA_SET");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVentaSets)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CONTRATO_VENTA_SET_EMPRESA");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaSets)
                .HasForeignKey(d => d.IdContratoVenta)
                .HasConstraintName("FK_CONTRATO_VENTA_SET_CONTRATO_VENTA");
        });

        modelBuilder.Entity<ContratoVentaSetDet>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaSetDet);

            entity.ToTable("CONTRATO_VENTA_SET_DET", "dbo");

            entity.Property(e => e.IdContratoVentaSetDet).HasColumnName("ID_CONTRATO_VENTA_SET_DET");

            entity.Property(e => e.CodigoSet).HasColumnName("CODIGO_SET");

            entity.Property(e => e.FechaCodigoSet)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CODIGO_SET");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdContratoVentaPrecio).HasColumnName("ID_CONTRATO_VENTA_PRECIO");

            entity.Property(e => e.IdContratoVentaSet).HasColumnName("ID_CONTRATO_VENTA_SET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0: contrato informado, 1: precio informado");

            entity.HasOne(d => d.IdContratoVentaPrecioNavigation)
                .WithMany(p => p.ContratoVentaSetDets)
                .HasForeignKey(d => d.IdContratoVentaPrecio)
                .HasConstraintName("FK_CONTRATO_VENTA_SET_DET_CONTRATO_VENTA_PRECIO");

            entity.HasOne(d => d.IdContratoVentaSetNavigation)
                .WithMany(p => p.ContratoVentaSetDets)
                .HasForeignKey(d => d.IdContratoVentaSet)
                .HasConstraintName("FK_CONTRATO_VENTA_SET_DET_CONTRATO_VENTA_SET");
        });

        modelBuilder.Entity<ContratoVentaWashout>(entity =>
        {
            entity.HasKey(e => e.IdContratoVentaWashout);

            entity.ToTable("CONTRATO_VENTA_WASHOUT", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CONTRATO_VENTA_WASHOUT")
                .IsUnique();

            entity.Property(e => e.IdContratoVentaWashout).HasColumnName("ID_CONTRATO_VENTA_WASHOUT");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadSaldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_SALDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoCosto).HasColumnName("TIPO_COSTO");

            entity.Property(e => e.TipoPrecio).HasColumnName("TIPO_PRECIO");

            entity.Property(e => e.TipoVolumen).HasColumnName("TIPO_VOLUMEN");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVentaWashouts)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_WASHOUT_EMPRESA");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.ContratoVentaWashouts)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_WASHOUT_CONTRATO_VENTA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ContratoVentaWashouts)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_CONTRATO_VENTA_WASHOUT_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoVentaWashouts)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_WASHOUT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ContratoVentum>(entity =>
        {
            entity.HasKey(e => e.IdContratoVenta);

            entity.ToTable("CONTRATO_VENTA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Contrato }, "UK_CONTRATO_VENTA")
                .IsUnique();

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.Anulado).HasColumnName("ANULADO");

            entity.Property(e => e.Asignado).HasColumnName("ASIGNADO");

            entity.Property(e => e.Banco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Contrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTRATO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Intermediario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("INTERMEDIARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.Prevision)
                .HasColumnType("datetime")
                .HasColumnName("PREVISION");

            entity.Property(e => e.PrevisionFinal)
                .HasColumnType("datetime")
                .HasColumnName("PREVISION_FINAL");

            entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Situacion)
                .HasColumnName("SITUACION")
                .HasComment("0=PRE_CONTRATO \r\n1=CONTRATO");

            entity.Property(e => e.TipoExportacion).HasColumnName("TIPO_EXPORTACION");

            entity.Property(e => e.TipoModalidad).HasColumnName("TIPO_MODALIDAD");

            entity.Property(e => e.TipoNegociacion).HasColumnName("TIPO_NEGOCIACION");

            entity.Property(e => e.TipoVenta)
                .HasColumnName("TIPO_VENTA")
                .HasComment("6=Ventas Internas, 7=Ventas Exportacion, anteriormente el campo era STATUS");

            entity.Property(e => e.Troca).HasColumnName("TROCA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ContratoVenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_CLIENTE");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.ContratoVenta)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .HasConstraintName("FK_CONTRATO_VENTA_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ContratoVenta)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ContratoVenta)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ContratoVenta)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ContratoVenta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CONTRATO_VENTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ControlAsientoTm>(entity =>
        {
            entity.HasKey(e => e.IdControlAsiento);

            entity.ToTable("CONTROL_ASIENTO_TM", "dbo");

            entity.Property(e => e.IdControlAsiento).HasColumnName("ID_CONTROL_ASIENTO");

            entity.Property(e => e.Arreglo)
                .HasColumnName("ARREGLO")
                .HasDefaultValueSql("((0))")
                .HasComment("0 = No se generó de nuevo, o tiene problemas. 1 = Generado nuevo, a verificar");

            entity.Property(e => e.AsientoNuevoGs).HasColumnName("ASIENTO_NUEVO_GS");

            entity.Property(e => e.AsientoNuevoUsd).HasColumnName("ASIENTO_NUEVO_USD");

            entity.Property(e => e.AsientoViejoGs).HasColumnName("ASIENTO_VIEJO_GS");

            entity.Property(e => e.AsientoViejoUsd).HasColumnName("ASIENTO_VIEJO_USD");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");
        });

        modelBuilder.Entity<CoordinadorVentaDet>(entity =>
        {
            entity.HasKey(e => e.IdCoordinadorVentaDet)
                .HasName("PK_COORDINADOR_VENTA_DET_1");

            entity.ToTable("COORDINADOR_VENTA_DET", "dbo");

            entity.HasIndex(e => new { e.IdCoordinadorVenta, e.IdVendedor }, "UK_COORDINADOR_VENTA_DET")
                .IsUnique();

            entity.Property(e => e.IdCoordinadorVentaDet).HasColumnName("ID_COORDINADOR_VENTA_DET");

            entity.Property(e => e.Fin)
                .HasColumnType("datetime")
                .HasColumnName("FIN");

            entity.Property(e => e.IdCoordinadorVenta).HasColumnName("ID_COORDINADOR_VENTA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCoordinadorVentaNavigation)
                .WithMany(p => p.CoordinadorVentaDets)
                .HasForeignKey(d => d.IdCoordinadorVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COORDINADOR_VENTA_DET_COORDINADOR_VENTA");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.CoordinadorVentaDets)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COORDINADOR_VENTA_DET_VENDEDOR");
        });

        modelBuilder.Entity<CoordinadorVentum>(entity =>
        {
            entity.HasKey(e => e.IdCoordinadorVenta);

            entity.ToTable("COORDINADOR_VENTA", "dbo");

            entity.HasIndex(e => e.Codigo, "UK_COORDINADOR_VENTA")
                .IsUnique();

            entity.Property(e => e.IdCoordinadorVenta)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_COORDINADOR_VENTA");

            entity.Property(e => e.Activo)
                .HasColumnName("ACTIVO")
                .HasDefaultValueSql("((1))")
                .HasComment("0 = Inactivo, 1 = Activo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CoordinadorVenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COORDINADOR_VENTA_EMPRESA");

            entity.HasOne(d => d.IdCoordinadorVentaNavigation)
                .WithOne(p => p.CoordinadorVentumIdCoordinadorVentaNavigation)
                .HasForeignKey<CoordinadorVentum>(d => d.IdCoordinadorVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COORDINADOR_VENTA_FUNCIONARIO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.CoordinadorVentumIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COORDINADOR_VENTA_FUNCIONARIO1");
        });

        modelBuilder.Entity<Cotizacion>(entity =>
        {
            entity.HasKey(e => e.IdCotizacion);

            entity.ToTable("COTIZACION", "dbo");

            entity.HasIndex(e => new { e.Fecha, e.RegStatus }, "IDX_COTIZACION_P_S_RECAL_STOCK_3");

            entity.HasIndex(e => new { e.Empresa, e.Fecha }, "UK_COTIZACION")
                .IsUnique();

            entity.Property(e => e.IdCotizacion).HasColumnName("ID_COTIZACION");

            entity.Property(e => e.BaseRetencion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BASE_RETENCION");

            entity.Property(e => e.CambioOficial)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAMBIO_OFICIAL");

            entity.Property(e => e.CambioOficialVenta)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAMBIO_OFICIAL_VENTA");

            entity.Property(e => e.CompraDolarGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPRA_DOLAR_GUARANI");

            entity.Property(e => e.CompraDolarReal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPRA_DOLAR_REAL");

            entity.Property(e => e.CompraRealGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPRA_REAL_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA")
                .HasDefaultValueSql("('18991231')");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SalarioMinimo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_MINIMO");

            entity.Property(e => e.VentaDolarGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VENTA_DOLAR_GUARANI");

            entity.Property(e => e.VentaDolarReal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VENTA_DOLAR_REAL");

            entity.Property(e => e.VentaRealGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VENTA_REAL_GUARANI");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Cotizacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COTIZACION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Cotizacions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_COTIZACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Cotum>(entity =>
        {
            entity.HasKey(e => e.IdCota)
                .HasName("PK_COTAS_DETALLES");

            entity.ToTable("COTA", "dbo");

            entity.Property(e => e.IdCota).HasColumnName("ID_COTA");

            entity.Property(e => e.Cota)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.Cota)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COTA_CULTIVO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.Cota)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COTA_PRODUCTO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Cota)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COTA_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Cota)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COTA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Cota)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_COTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CuentaChe>(entity =>
        {
            entity.HasKey(e => e.IdCuentaChe)
                .HasName("PK_CONTAS_CHE");

            entity.ToTable("CUENTA_CHE", "dbo");

            entity.Property(e => e.IdCuentaChe).HasColumnName("ID_CUENTA_CHE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.ProveedorCliente).HasColumnName("PROVEEDOR_CLIENTE");

            entity.Property(e => e.RefFormaPagoCobro).HasColumnName("REF_FORMA_PAGO_COBRO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CuentaChes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CHE_EMPRESA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.CuentaChes)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_CUENTA_CHE_CHEQUERA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.CuentaChes)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CHE_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.CuentaChes)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CHE_TABLA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.CuentaCheIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_CUENTA_CHE_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.RefFormaPagoCobroNavigation)
                .WithMany(p => p.CuentaChes)
                .HasForeignKey(d => d.RefFormaPagoCobro)
                .HasConstraintName("FK_CUENTA_CHE_PAGAR_PAGO_FORMA_PAGO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CuentaCheRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CUENTA_CHE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<CuentaCorriente>(entity =>
        {
            entity.HasKey(e => e.IdCuentaCorriente);

            entity.ToTable("CUENTA_CORRIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CUENTA_CORRIENTE")
                .IsUnique();

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.CaracterPulgada).HasColumnName("CARACTER_PULGADA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoBanco).HasColumnName("CODIGO_BANCO");

            entity.Property(e => e.CodigoEmpresa).HasColumnName("CODIGO_EMPRESA");

            entity.Property(e => e.CuentaBanco).HasColumnName("CUENTA_BANCO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.HabilitadoPagoSalario).HasColumnName("HABILITADO_PAGO_SALARIO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCodigoBcp)
                .HasColumnName("ID_CODIGO_BCP")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.LineaPulgada).HasColumnName("LINEA_PULGADA");

            entity.Property(e => e.Modelo)
                .IsUnicode(false)
                .HasColumnName("MODELO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_1");

            entity.Property(e => e.Observacion2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_2");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Situacion).HasColumnName("SITUACION");

            entity.Property(e => e.TipoCuenta).HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CuentaCorrientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CORRIENTE_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.CuentaCorrientes)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_CUENTA_CORRIENTE_CIUDAD");

            entity.HasOne(d => d.IdCodigoBcpNavigation)
                .WithMany(p => p.CuentaCorrientes)
                .HasForeignKey(d => d.IdCodigoBcp)
                .HasConstraintName("FK_CUENTA_CORRIENTE_CODIGO_BCP");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.CuentaCorrientes)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_CUENTA_CORRIENTE_PLAN_CUENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CuentaCorrienteRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CORRIENTE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.CuentaCorrienteUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .HasConstraintName("FK_CUENTA_CORRIENTE_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<CuentaCorrientePermiso>(entity =>
        {
            entity.HasKey(e => e.IdCuentaCorrientePermiso);

            entity.ToTable("CUENTA_CORRIENTE_PERMISO", "dbo");

            entity.Property(e => e.IdCuentaCorrientePermiso).HasColumnName("ID_CUENTA_CORRIENTE_PERMISO");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.CuentaCorrientePermisos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CORRIENTE_PERMISO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.CuentaCorrientePermisos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_CORRIENTE_PERMISO_USUARIO");
        });

        modelBuilder.Entity<CuentaFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdCuentaFuncionario);

            entity.ToTable("CUENTA_FUNCIONARIO", "dbo");

            entity.Property(e => e.IdCuentaFuncionario).HasColumnName("ID_CUENTA_FUNCIONARIO");

            entity.Property(e => e.Concepto)
                .HasColumnName("CONCEPTO")
                .HasComment("0 Pago de salario 1 Pago de comision");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 Inactivo 1 Activo");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.NumeroCuenta).HasColumnName("NUMERO_CUENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoCuenta)
                .HasColumnName("TIPO_CUENTA")
                .HasComment("0 Cta. Cte. 1 Caja de ahorro");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.CuentaFuncionarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_FUNCIONARIO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.CuentaFuncionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_FUNCIONARIO_FUNCIONARIO");
        });

        modelBuilder.Entity<CuentaMov>(entity =>
        {
            entity.HasKey(e => e.IdCuentaMov)
                .HasName("PK_CONTAS_MOV");

            entity.ToTable("CUENTA_MOV", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdCuentaCorriente }, "CONTAS_MOV_IDX3");

            entity.HasIndex(e => e.RegStatus, "IDX_F_LISTADO_EXT_CUENTA");

            entity.Property(e => e.IdCuentaMov).HasColumnName("ID_CUENTA_MOV");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Credito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.CreditoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_DOLAR");

            entity.Property(e => e.CreditoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_GUARANI");

            entity.Property(e => e.Debito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.DebitoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEBITO_DOLAR");

            entity.Property(e => e.DebitoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEBITO_GUARANI");

            entity.Property(e => e.Documento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Especie)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ESPECIE");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.OrigenProveedorCliente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ORIGEN_PROVEEDOR_CLIENTE")
                .IsFixedLength();

            entity.Property(e => e.ProveedorCliente).HasColumnName("PROVEEDOR_CLIENTE");

            entity.Property(e => e.RefFormaPagoCobro).HasColumnName("REF_FORMA_PAGO_COBRO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CuentaMovs)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CUENTA_MOV_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.CuentaMovs)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_CUENTA_MOV_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.CuentaMovs)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_CUENTA_MOV_PLAN_CUENTA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.CuentaMovs)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_CUENTA_MOV_TABLA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.CuentaMovs)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_CUENTA_MOV_TIMBRADO");

            entity.HasOne(d => d.RefFormaPagoCobroNavigation)
                .WithMany(p => p.CuentaMovs)
                .HasForeignKey(d => d.RefFormaPagoCobro)
                .HasConstraintName("FK_CUENTA_MOV_PAGAR_PAGO_FORMA_PAGO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CuentaMovRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CUENTA_MOV_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.CuentaMovUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .HasConstraintName("FK_CUENTA_MOV_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<CuentaPre>(entity =>
        {
            entity.HasKey(e => e.IdCuentaPre)
                .HasName("PK_CONTAS_PRE");

            entity.ToTable("CUENTA_PRE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdTabla }, "IDX_CONTAS_PRE");

            entity.Property(e => e.IdCuentaPre).HasColumnName("ID_CUENTA_PRE");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descontado).HasColumnName("DESCONTADO");

            entity.Property(e => e.Destino)
                .HasColumnName("DESTINO")
                .HasComment("ID_CUENTA_CORRIENTE de destino");

            entity.Property(e => e.DestinoAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESTINO_AJUSTADO");

            entity.Property(e => e.DestinoConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESTINO_CONVERTIDO");

            entity.Property(e => e.DestinoCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESTINO_COTIZACION");

            entity.Property(e => e.DestinoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DESTINO_FECHA");

            entity.Property(e => e.DestinoMoneda).HasColumnName("DESTINO_MONEDA");

            entity.Property(e => e.Documento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.OrigenProveedorCliente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ORIGEN_PROVEEDOR_CLIENTE")
                .IsFixedLength()
                .HasComment("Los valores pueden ser 'P' Proveedor, 'C' Cliente, 'F' Funcionario");

            entity.Property(e => e.ProveedorCliente).HasColumnName("PROVEEDOR_CLIENTE");

            entity.Property(e => e.RefFormaPagoCobro).HasColumnName("REF_FORMA_PAGO_COBRO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CuentaPres)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_CUENTA_PRE_EMPRESA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.CuentaPres)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_CUENTA_PRE_CHEQUERA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.CuentaPres)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_CUENTA_PRE_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.CuentaPres)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_CUENTA_PRE_TABLA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.CuentaPres)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_CUENTA_PRE_TIMBRADO");

            entity.HasOne(d => d.RefFormaPagoCobroNavigation)
                .WithMany(p => p.CuentaPres)
                .HasForeignKey(d => d.RefFormaPagoCobro)
                .HasConstraintName("FK_CUENTA_PRE_PAGAR_PAGO_FORMA_PAGO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CuentaPreRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_CUENTA_PRE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.CuentaPreUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .HasConstraintName("FK_CUENTA_PRE_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<CuentaProveedor>(entity =>
        {
            entity.HasKey(e => e.IdCuentaProveedor);

            entity.ToTable("CUENTA_PROVEEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_CUENTA_PROVEEDOR")
                .IsUnique();

            entity.Property(e => e.IdCuentaProveedor).HasColumnName("ID_CUENTA_PROVEEDOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.Property(e => e.ValorPagar)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_PAGAR");

            entity.Property(e => e.ValorPagarGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGAR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.CuentaProveedors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_PROVEEDOR_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.CuentaProveedors)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_PROVEEDOR_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.CuentaProveedors)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_PROVEEDOR_PROVEEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.CuentaProveedors)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUENTA_PROVEEDOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Cultivo>(entity =>
        {
            entity.HasKey(e => e.IdCultivo);

            entity.ToTable("CULTIVO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CULTIVO")
                .IsUnique();

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.Area).HasColumnName("AREA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CostoArrendamientoHaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_ARRENDAMIENTO_HA_US");

            entity.Property(e => e.CostoProduccionHa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_PRODUCCION_HA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.PrecioProyectado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_PROYECTADO");

            entity.Property(e => e.ProduccionIndice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRODUCCION_INDICE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Cultivos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CULTIVO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Cultivos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CULTIVO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Dac>(entity =>
        {
            entity.HasKey(e => e.IdDac)
                .HasName("PK_DAC_1");

            entity.ToTable("DAC", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdCliente, e.IdZafra }, "UK_DAC")
                .IsUnique();

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.AnalisisAreaArrendada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ANALISIS_AREA_ARRENDADA");

            entity.Property(e => e.AnalisisAreaPropia)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ANALISIS_AREA_PROPIA");

            entity.Property(e => e.AnalisisAreaTotal)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ANALISIS_AREA_TOTAL");

            entity.Property(e => e.AnalisisComite)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_COMITE");

            entity.Property(e => e.AnalisisComiteDirectores)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_COMITE_DIRECTORES");

            entity.Property(e => e.AnalisisComiteFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_COMITE_FECHA");

            entity.Property(e => e.AnalisisCredito)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_CREDITO");

            entity.Property(e => e.AnalisisCreditoFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_CREDITO_FECHA");

            entity.Property(e => e.AnalisisCreditoUsuario).HasColumnName("ANALISIS_CREDITO_USUARIO");

            entity.Property(e => e.AnalisisGerencia)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_GERENCIA");

            entity.Property(e => e.AnalisisGerenciaFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_GERENCIA_FECHA");

            entity.Property(e => e.AnalisisGerenciaUsuario).HasColumnName("ANALISIS_GERENCIA_USUARIO");

            entity.Property(e => e.AnalisisVendedor)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_VENDEDOR");

            entity.Property(e => e.AnalisisVendedorFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_VENDEDOR_FECHA");

            entity.Property(e => e.AnalisisVendedorUsuario).HasColumnName("ANALISIS_VENDEDOR_USUARIO");

            entity.Property(e => e.Analista).HasColumnName("ANALISTA");

            entity.Property(e => e.Calificacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.CalificacionSugerida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION_SUGERIDA");

            entity.Property(e => e.Cancelacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANCELACION");

            entity.Property(e => e.ChkAnalisis).HasColumnName("CHK_ANALISIS");

            entity.Property(e => e.ChkIdentidad).HasColumnName("CHK_IDENTIDAD");

            entity.Property(e => e.ChkInformconf).HasColumnName("CHK_INFORMCONF");

            entity.Property(e => e.ChkManifest).HasColumnName("CHK_MANIFEST");

            entity.Property(e => e.ChkTitulo).HasColumnName("CHK_TITULO");

            entity.Property(e => e.CostoArrendamientoHaKgs)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_ARRENDAMIENTO_HA_KGS");

            entity.Property(e => e.CostoArrendamientoHaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_ARRENDAMIENTO_HA_US");

            entity.Property(e => e.CostoArrendamientoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_ARRENDAMIENTO_TOTAL");

            entity.Property(e => e.CostoOtros)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_OTROS");

            entity.Property(e => e.CostoOtrosDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("COSTO_OTROS_DESCRIPCION");

            entity.Property(e => e.CostoProduccionHa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_PRODUCCION_HA");

            entity.Property(e => e.CostoProduccionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_PRODUCCION_TOTAL");

            entity.Property(e => e.CreditoAprobador).HasColumnName("CREDITO_APROBADOR");

            entity.Property(e => e.CreditoFecha)
                .HasColumnType("datetime")
                .HasColumnName("CREDITO_FECHA");

            entity.Property(e => e.CreditoInsumo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_INSUMO");

            entity.Property(e => e.DetalleCalificacion).HasColumnName("DETALLE_CALIFICACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCancelacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CANCELACION");

            entity.Property(e => e.GarantiaAnegociar).HasColumnName("GARANTIA_ANEGOCIAR");

            entity.Property(e => e.GarantiaAnegociarTon)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GARANTIA_ANEGOCIAR_TON");

            entity.Property(e => e.GarantiaCheque).HasColumnName("GARANTIA_CHEQUE");

            entity.Property(e => e.GarantiaContrato).HasColumnName("GARANTIA_CONTRATO");

            entity.Property(e => e.GarantiaFacturaCredito).HasColumnName("GARANTIA_FACTURA_CREDITO");

            entity.Property(e => e.GarantiaHipoteca).HasColumnName("GARANTIA_HIPOTECA");

            entity.Property(e => e.GarantiaPagTer).HasColumnName("GARANTIA_PAG_TER");

            entity.Property(e => e.GarantiaPagTerValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_PAG_TER_VALOR");

            entity.Property(e => e.GarantiaPagare).HasColumnName("GARANTIA_PAGARE");

            entity.Property(e => e.GarantiaPagareAval).HasColumnName("GARANTIA_PAGARE_AVAL");

            entity.Property(e => e.GarantiaPrenda).HasColumnName("GARANTIA_PRENDA");

            entity.Property(e => e.Gerente).HasColumnName("GERENTE");

            entity.Property(e => e.HipotecaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_MONTO");

            entity.Property(e => e.HistoricoAtraso)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_ATRASO");

            entity.Property(e => e.HistoricoGrano)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_GRANO");

            entity.Property(e => e.HistoricoInsumo)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_INSUMO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Pendencia)
                .IsUnicode(false)
                .HasColumnName("PENDENCIA");

            entity.Property(e => e.PendenciaFecha)
                .HasColumnType("datetime")
                .HasColumnName("PENDENCIA_FECHA");

            entity.Property(e => e.PendenciaUsuario).HasColumnName("PENDENCIA_USUARIO");

            entity.Property(e => e.PrecioProyectado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_PROYECTADO");

            entity.Property(e => e.PrendaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRENDA_MONTO");

            entity.Property(e => e.ProduccionIndice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRODUCCION_INDICE");

            entity.Property(e => e.ProduccionTonelada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PRODUCCION_TONELADA");

            entity.Property(e => e.RatCoef)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_COEF");

            entity.Property(e => e.RatEnd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_END");

            entity.Property(e => e.RatLiq)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_LIQ");

            entity.Property(e => e.RatLiqInm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_LIQ_INM");

            entity.Property(e => e.RatSolv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_SOLV");

            entity.Property(e => e.Rating)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RATING");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RentaBruta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_BRUTA");

            entity.Property(e => e.RentaLiquida)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_LIQUIDA");

            entity.Property(e => e.RentaOtras)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_OTRAS");

            entity.Property(e => e.RentaOtrasDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RENTA_OTRAS_DESCRIPCION");

            entity.Property(e => e.Restriccion)
                .IsUnicode(false)
                .HasColumnName("RESTRICCION");

            entity.Property(e => e.SituacionCuenta)
                .IsUnicode(false)
                .HasColumnName("SITUACION_CUENTA");

            entity.Property(e => e.TotalGasto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GASTO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.AnalisisCreditoUsuarioNavigation)
                .WithMany(p => p.DacAnalisisCreditoUsuarioNavigations)
                .HasForeignKey(d => d.AnalisisCreditoUsuario)
                .HasConstraintName("FK_DAC_USUARIO1");

            entity.HasOne(d => d.AnalisisGerenciaUsuarioNavigation)
                .WithMany(p => p.DacAnalisisGerenciaUsuarioNavigations)
                .HasForeignKey(d => d.AnalisisGerenciaUsuario)
                .HasConstraintName("FK_DAC_USUARIO2");

            entity.HasOne(d => d.AnalisisVendedorUsuarioNavigation)
                .WithMany(p => p.DacAnalisisVendedorUsuarioNavigations)
                .HasForeignKey(d => d.AnalisisVendedorUsuario)
                .HasConstraintName("FK_DAC_USUARIO3");

            entity.HasOne(d => d.CreditoAprobadorNavigation)
                .WithMany(p => p.DacCreditoAprobadorNavigations)
                .HasForeignKey(d => d.CreditoAprobador)
                .HasConstraintName("FK_DAC_USUARIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Dacs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Dacs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.Dacs)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Dacs)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_DAC_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Dacs)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_ZAFRA");

            entity.HasOne(d => d.PendenciaUsuarioNavigation)
                .WithMany(p => p.DacPendenciaUsuarioNavigations)
                .HasForeignKey(d => d.PendenciaUsuario)
                .HasConstraintName("FK_DAC_USUARIO4");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Dacs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DacContrato>(entity =>
        {
            entity.HasKey(e => e.IdDacContrato)
                .HasName("PK_DAC_CONTRATO_1");

            entity.ToTable("DAC_CONTRATO", "dbo");

            entity.Property(e => e.IdDacContrato).HasColumnName("ID_DAC_CONTRATO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.DacContratos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_CONTRATO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdDacNavigation)
                .WithMany(p => p.DacContratos)
                .HasForeignKey(d => d.IdDac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_CONTRATO_DAC");
        });

        modelBuilder.Entity<DacHipoteca>(entity =>
        {
            entity.HasKey(e => e.IdDacHipoteca);

            entity.ToTable("DAC_HIPOTECA", "dbo");

            entity.Property(e => e.IdDacHipoteca).HasColumnName("ID_DAC_HIPOTECA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdClienteResumen).HasColumnName("ID_CLIENTE_RESUMEN");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Referencia)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidade).HasColumnName("REG_UNIDADE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO")
                .IsFixedLength();

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.DacHipotecas)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_DAC_HIPOTECA_CIUDAD");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.DacHipotecas)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_DAC_HIPOTECA_CULTIVO");

            entity.HasOne(d => d.IdDacNavigation)
                .WithMany(p => p.DacHipotecas)
                .HasForeignKey(d => d.IdDac)
                .HasConstraintName("FK_DAC_HIPOTECA_DAC");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.DacHipotecas)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_DAC_HIPOTECA_ZAFRA");
        });

        modelBuilder.Entity<DacPagare>(entity =>
        {
            entity.HasKey(e => e.IdDacPagare);

            entity.ToTable("DAC_PAGARE", "dbo");

            entity.Property(e => e.IdDacPagare).HasColumnName("ID_DAC_PAGARE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.IdPagare).HasColumnName("ID_PAGARE");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.DacPagares)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_DAC_PAGARE_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.DacPagares)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_DAC_PAGARE_CULTIVO");

            entity.HasOne(d => d.IdDacNavigation)
                .WithMany(p => p.DacPagares)
                .HasForeignKey(d => d.IdDac)
                .HasConstraintName("FK_DAC_PAGARE_DAC");

            entity.HasOne(d => d.IdPagareNavigation)
                .WithMany(p => p.DacPagares)
                .HasForeignKey(d => d.IdPagare)
                .HasConstraintName("FK_DAC_PAGARE_PAGARE");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.DacPagares)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_DAC_PAGARE_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DacPagares)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_DAC_PAGARE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DacPedido>(entity =>
        {
            entity.HasKey(e => e.IdDacPedido)
                .HasName("PK_DAC_PEDIDOS");

            entity.ToTable("DAC_PEDIDO", "dbo");

            entity.Property(e => e.IdDacPedido).HasColumnName("ID_DAC_PEDIDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TotalCancelado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_CANCELADO");

            entity.Property(e => e.TotalPedido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_PEDIDO");

            entity.Property(e => e.ValorAprobacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_APROBACION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.DacPedidos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_DAC_PEDIDO_EMPRESA");

            entity.HasOne(d => d.IdDacNavigation)
                .WithMany(p => p.DacPedidos)
                .HasForeignKey(d => d.IdDac)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_PEDIDO_DAC");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.DacPedidos)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_PEDIDO_PEDIDO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DacPedidos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DAC_PEDIDO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DacPrendum>(entity =>
        {
            entity.HasKey(e => e.IdDacPrenda)
                .HasName("PK_DAC_PRENDA_1");

            entity.ToTable("DAC_PRENDA", "dbo");

            entity.Property(e => e.IdDacPrenda).HasColumnName("ID_DAC_PRENDA");

            entity.Property(e => e.IdClienteRodado).HasColumnName("ID_CLIENTE_RODADO");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteRodadoNavigation)
                .WithMany(p => p.DacPrenda)
                .HasForeignKey(d => d.IdClienteRodado)
                .HasConstraintName("FK_DAC_PRENDA_CLIENTE_RODADO");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.DacPrenda)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_DAC_PRENDA_CULTIVO");

            entity.HasOne(d => d.IdDacNavigation)
                .WithMany(p => p.DacPrenda)
                .HasForeignKey(d => d.IdDac)
                .HasConstraintName("FK_DAC_PRENDA_DAC");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.DacPrenda)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_DAC_PRENDA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DacPrenda)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_DAC_PRENDA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<De>(entity =>
        {
            entity.HasKey(e => e.IdDe);

            entity.ToTable("DE", "dbo");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.CCiuEmi)
                .HasColumnName("cCiuEmi")
                .HasComment("Integer (1- 99999)");

            entity.Property(e => e.CCiuProv)
                .HasColumnName("cCiuProv")
                .HasComment("Integer (5)");

            entity.Property(e => e.CCiuRec)
                .HasColumnName("cCiuRec")
                .HasComment("Integer (5 total digito)");

            entity.Property(e => e.CCiuSal)
                .HasColumnName("cCiuSal")
                .HasComment("Integer (1-5)");

            entity.Property(e => e.CCiuVen)
                .HasColumnName("cCiuVen")
                .HasComment("Integer (5)");

            entity.Property(e => e.CCondNeg)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cCondNeg")
                .HasComment("String (3) (\"CFR\", \"CIF\",\"CIP\", \"CPT\", \"DAP\",\"DAT\",\"DDP\", \"EXW\", \"FAS\", \"FCA\", \"FOB\" )");

            entity.Property(e => e.CDepEmi)
                .HasColumnName("cDepEmi")
                .HasComment("Integer (1-2) (1=Capital, 2=Concenpción, 3=San Pedro, 4=San Pedro, 4=Cordillera, 5=Guaira, 6=Caaguazu, 7=Caazapa, 8=Itapua , 9=Misiones, 10=Paraguari, 11=Alto Parana, 12=Central, 13=Neembucu, 14=Amambay, 15=Pte Hayes, 16=Boqueron, 17=Alto Paraguay, 18=Canindeyu, 19=Chaco, 20=Nueva Asunción.");

            entity.Property(e => e.CDepProv)
                .HasColumnName("cDepProv")
                .HasComment("Integer (1-2)(1=Capital, 2=Concenpción, 3=San Pedro, 4=San Pedro, 4=Cordillera, 5=Guaira, 6=Caaguazu, 7=Caazapa, 8=Itapua , 9=Misiones, 10=Paraguari, 11=Alto Parana, 12=Central, 13=Neembucu, 14=Amambay, 15=Pte Hayes, 16=Boqueron, 17=Alto Paraguay, 18=Canindeyu, 19=Chaco, 20=Nueva Asunción.");

            entity.Property(e => e.CDepRec)
                .HasColumnName("cDepRec")
                .HasComment("Integer (1-2) (1=Capital, 2=Concenpción, 3=San Pedro, 4=San Pedro, 4=Cordillera, 5=Guaira, 6=Caaguazu, 7=Caazapa, 8=Itapua , 9=Misiones, 10=Paraguari, 11=Alto Parana, 12=Central, 13=Neembucu, 14=Amambay, 15=Pte Hayes, 16=Boqueron, 17=Alto Paraguay, 18=Canindeyu, 19=Chaco, 20=Nueva Asunción.");

            entity.Property(e => e.CDepSal)
                .HasColumnName("cDepSal")
                .HasComment("Integer (1-2) (1=Capital, 2=Concenpción, 3=San Pedro, 4=San Pedro, 4=Cordillera, 5=Guaira, 6=Caaguazu, 7=Caazapa, 8=Itapua , 9=Misiones, 10=Paraguari, 11=Alto Parana, 12=Central, 13=Neembucu, 14=Amambay, 15=Pte Hayes, 16=Boqueron, 17=Alto Paraguay, 18=Canindeyu, 19=Chaco, 20=Nueva Asunción.");

            entity.Property(e => e.CDepVen)
                .HasColumnName("cDepVen")
                .HasComment("Integer (1=Capital, 2=Concenpción, 3=San Pedro, 4=San Pedro, 4=Cordillera, 5=Guaira, 6=Caaguazu, 7=Caazapa, 8=Itapua , 9=Misiones, 10=Paraguari, 11=Alto Parana, 12=Central, 13=Neembucu, 14=Amambay, 15=Pte Hayes, 16=Boqueron, 17=Alto Paraguay, 18=Canindeyu, 19=Chaco, 20=Nueva Asunción.");

            entity.Property(e => e.CDisEmi)
                .HasColumnName("cDisEmi")
                .HasComment("Integer (1-4)");

            entity.Property(e => e.CDisProv)
                .HasColumnName("cDisProv")
                .HasComment("Integer (4)");

            entity.Property(e => e.CDisRec)
                .HasColumnName("cDisRec")
                .HasComment("Integer (1-4)");

            entity.Property(e => e.CDisSal)
                .HasColumnName("cDisSal")
                .HasComment("Integer (1-4)");

            entity.Property(e => e.CDisVen)
                .HasColumnName("cDisVen")
                .HasComment("Integer (1-4)");

            entity.Property(e => e.CFleExp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cFleExp");

            entity.Property(e => e.CMoneOpe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cMoneOpe")
                .HasComment("(“AED” – Dirham, “AFN” – Afghani, “ALL” – Lek, “AMD” – Dram, “ANG” - Netherlands Antillian Guilder, “AOA” – Kwanza, “ARS” - Argentine Peso, “AUD” - Australian Dollar, “AWG” - Aruban Guilder, “AZM” - Azerbaijanian Manat, “BAM” - Convertible Mark, “BBD” - Barbados Dollar, “BYN” - Belarusian Ruble, “BDT” – Taka, “BGN” - Bulgarian Lev, “BHD” - Bahraini Dinar, “BIF” - Burundi Franc, “BMD” - Bermudian Dollar (customarily: Bermuda Dollar), “BND” - Brunei Dollar, “BOB” – Boliviano, “BOV” – Mvdol, “BRL” – Brazilian Real, “BSD” - Bahamian Dollar, “BTN” – Ngultrum, “BWP” – Pula, “BYR” - Belarussian Ruble, “BZD” - Belize Dollar, “CAD” - Canadian Dollar, “CDF” - Franc Congolais, “CHF” - Swiss Franc, “CHE” - WIR Euro, “CHW” - WIR Franc, “CLP” - Chilean Peso, “CLF” - Unidad de Fomento, “CNY” - Yuan Renminbi, “COP” - Colombian Peso, “COU” – Unidad de Valor Real, “CRC” – Costa Rica Colon, “CUP” – Cuban Peso, “CUC” – Peso Convertible, “CVE” – Cape Verde Escudo, “CYP” - Cyprus Pound, “CZK” - Czech Koruna, “DJF” - Djibouti Franc, “DKK” - Danish Krone, “DOP” – Dominican Peso, “DZD” - Algerian Dinar, “EEK” – Kroon, “EGP” - Egyptian Pound, “ERN” – Nakfa, “ETB” - Ethopian Birr, “EUR” – Euro, “FJD” - Fiji Dollar, “FKP” - Falkland Islands Pound, “GBP” - Pound Sterling, “GEL” – Lari, “GHS” - Ghana Cedi, “GHC” – Cedi, “GIP” - Gibraltar Pound, “GMD” – Dalasi, “GNF” – Guinea Franc, “GTQ” – Quetzal, “GYD” - Guyana Dollar, “HKD” - Honk Kong Dollar, “HNL” – Lempira, “HKR” – Kuna, “HTG” – Gourde, “HUF” – Forint, “IDR” – Rupiah, “ILS” – New Israeli Shequel, “INR” - Indian Rupee, “IQD” - Iraqi Dinar, “IRR” - Iranian Rial, “ISK” - Iceland Krona, “JMD” - Jamaican Dollar, “JOD” – Jordianian Dinar, “JPY” – Yen, “KES” - Kenyan Shilling, “KGS” – Som, “KHR” – Riel, “KMF” - Comoro Franc, “KPW” - North Korean Won, “KRW” – Won, “KWD” - Kuwaiti Dinar, “KYD” - Cayman Islands Dollar, KZT” – Tenge, “LAK” – Kip, “LBP” - Lebanese Pound, “LKR” - Sri Lanka Rupee, “LRD” - Liberian Dollar, “LSL” – Loti, “LTL” - Lithuanian Litas, “LVL” - Latvian Lats, “LYD” - Libyan Dinar, “MAD” - Morrocan Dirham, “MZN” - Mozambique Metical, “MDL” – Moldovan Leu, “MGF” - Malagasy Franc, “MKD” – Denar, “MGA” - Malagasy Ariary, “MMK” – Kyat, “MNT” – Tugrik, “MOP” – Pataca, “MRO” – Ouguiya, “MTL” - Maltese Lira, “MUR” - Mauritius Rupee, “XUA” - ADB Unit of Account, “MVR” – Rufiyaa, “MRU” – Ouguiya, “MWK” – Kwacha, “MXN” - Mexican Peso, “MXV” - Mexican Unidad de Inversión,“MYR” - Malaysian Ringgit, “MZM” – Metical, “NAD” - Namibia Dollar, “NGN” – Naira, “NIO” - Cordoba Oro, “NOK” -  Norwegian Krone, “NPR” - Nepalese Rupee,  “NZD” - New Zealand Dollar, “OMR” - Rial Omani, “PAB” -  Balboa, “PEN” - Nuevo Sol, “PGK” – Kina, “PHP” - Philippine Peso, “PKR” - Pakistan Rupee, “PLN” – Zloty, \"PYG\" – Guarani, “QAR” - Qatari Rial, “RON” - Romanian Leu, “ROL” – Leu, “RUB” - Russian Ruble, “RWF” - Rwanda Franc, “SAR” - Saudi Riyal, “RSD” - Serbian Dinar, “SBD” - Solomon Islands Dollar, “SCR” - Seychelles Rupee, “SDD” - Sudanese Dinar, “SDG” - Sudanese Pound, “SRD” - Surinam Dollar, “SEK” - Swedish Krona, “SGD” - Singapore Dollar, “SHP” - St. Helena Pound, “SIT” – Tolar, “SKK”- Slovak Koruna, “SLL” – Leone, “SOS” - Somali Shilling, \"SRG\" - Suriname Guilder, \"SSP\" - South Sudanese Pound, \"STD\"- Dobra, \"SVC\" - El Salvador Colon,  \"SYP\" - Syrian Pound, \"SZL\" – Lilangeni, \"THB\" – Baht, \"TJS\" – Somoni, \"TMM\" – Manat, \"TND\" - Tunisian Dinar, \"TRY\" - Turkish Lira, \"TMT\" - Turkmenistan New Manat, \"TOP\" - Pa&apos;anga, \"TRL\" - Turkish Lira, \"TTD\" - Trinidad and Tobago Dollar, \"TWD\" - New Taiwan Dollar, \"TZS\" - Tanzanian Shilling, \"UAH\" – Hryvnia, \"UGX\" - Uganda Shilling, \"USD\" - US Dollar, \"USN\" - US Dollar(Next day),\"UYU\" - Peso Uruguayo,");

            entity.Property(e => e.CNacTrans)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cNacTrans");

            entity.Property(e => e.CPaisDest)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cPaisDest")
                .HasComment("String (3) (\"DZA\", \"EGY\",\"LBY\",\"MAR\", \"SDN\", \"TUN\",\"ESH\",\"IOT\", \"BDI\",\"COM\", \"DJI\", \"ERI\", \"ETH\", \"ATF\",\"KEN\", \"MDG\",\"MWI\", \"MUS\", \"MYT\", \"MOZ\", \"REU\", \"RWA\", \"SYC\",\"SOM\",  \"SSD\", \"UGA\", \"TZA\",\"ZMB\", \"ZWE\",\"AGO\", \"CMR\",  \"CAF\", \"TCD\",   \"COG\", \"COD\", \"GNQ\", \"GAB\", \"STP\",  \"BWA\", \"LSO\", \"NAM\", \"ZAF\", \"SWZ\", \"BEN\", \"BFA\",  \"CPV\",\"CIV\", \"GMB\", \"GHA\", \"GIN\", \"GNB\", LBR\", \"MLI\", \"MRT\", \"NER\", “NGA”, “SHN”, “SEN”, “SLE”, “TGO”, “AIA”, “ATG”, “ABW”, “BHS”, “BRB”, “BES”, “VGB”, “CYM”, “CUB”, “CUW”, “DMA”, “DOM”, “GRD”, “GLP”, “HTI”, ”JAM”, “MTQ”, “MSR”, “PRI”, “BLM”, “KNA”, “LCA”, “MAF”, “VCT”, “SXM”, “TTO”, “TCA”, “VIR”, “BLZ”, “CRI”, “SLV”, “GTM”, “HND”, “MEX”, “NIC”, “PAN”, “ARG”, “BOL”, “BRA”, “CHL”, “COL”, “ECU”, “FLK”, “GUF”, “PRY”,”PER”, “SGS”, “SUR”, “URY”, “VEN”, “BMU”,”CAN”, “GRL”, “SPM”, “USA”, “ATA”, “KAZ”, “”KGZ”, “TJK”, “TKM”, “UZB”, “CHN”, “HKG”, “MAC”, “PRK”, “JPN”, “MNG”, “KOR”,”BRN”,”KHM”, “IDN”, “LAO”, “MYS”, “MMR”, “PHL”, “SGP”, “THA”, “TLS”,”VNM”, “AFG”, “BGD”, “BTN”, “IND”, “IRN”, “MDV”, “NPL”, “PAK”, “LKA”, “ARM”, ”AZE”, ”BHR”, ”CYP,”,”GEO”, “IRQ”, “ISR”, “JOR”, “KWT”, “LBN”, “OMN”, “QAT”, “SAU”,”PSE”,”SYR”, “TUR”, “ARE”, “YEM”, “BLR”, “BGR”, “CZE”,”HUN”,”POL”, “MDA”, “ROU”, “RUS”,”SVK”, “UKR”, “ALA”, “GGY”, “JEY”, “DNK”, “EST”, “FRO”, “FIN”, “ISL”, “IRL”,”IMN”, “LVA”, “LTU”, “NOR”, “SJM”, “SWE”, “GBR”,”ALB”, “AND”, ”BIH”, “HRV”, “GIB”, “GRC”, “VAT”, “ITA”, “MLT”, “MNE”, “PRT”, “SMR”, “SRB”, “SVN”, “ESP”, “MKD”, “AUT”, “BEL”, “FRAN”, “DEU”, “LIE”,”LUX”, “MCO”, “NLD”, “CHE”, “AUS”, “CXR”, “CCK”, “HMD”, “NZL”, “NFK”,”FJI”, “NCL”, “PNG”, “SLB”, “VUT”, “GUM”, “KIR”, “MHL”, “FSM”, “NRU”, “MNP”, “PLW”, “UMI”, “ASM”, “COK”, “PYF”, “NIU”, “PCN”, “WSM”, “TKL”, “TON”, “TUV”, “WLF”, “NN”)");

            entity.Property(e => e.CPaisProd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cPaisProd")
                .HasComment("String (3) (\"DZA\", \"EGY\",\"LBY\",\"MAR\", \"SDN\", \"TUN\",\"ESH\",\"IOT\", \"BDI\",\"COM\", \"DJI\", \"ERI\", \"ETH\", \"ATF\",\"KEN\", \"MDG\",\"MWI\", \"MUS\", \"MYT\", \"MOZ\", \"REU\", \"RWA\", \"SYC\",\"SOM\",  \"SSD\", \"UGA\", \"TZA\",\"ZMB\", \"ZWE\",\"AGO\", \"CMR\",  \"CAF\", \"TCD\",   \"COG\", \"COD\", \"GNQ\", \"GAB\", \"STP\",  \"BWA\", \"LSO\", \"NAM\", \"ZAF\", \"SWZ\", \"BEN\", \"BFA\",  \"CPV\",\"CIV\", \"GMB\", \"GHA\", \"GIN\", \"GNB\", LBR\", \"MLI\", \"MRT\", \"NER\", “NGA”, “SHN”, “SEN”, “SLE”, “TGO”, “AIA”, “ATG”, “ABW”, “BHS”, “BRB”, “BES”, “VGB”, “CYM”, “CUB”, “CUW”, “DMA”, “DOM”, “GRD”, “GLP”, “HTI”, ”JAM”, “MTQ”, “MSR”, “PRI”, “BLM”, “KNA”, “LCA”, “MAF”, “VCT”, “SXM”, “TTO”, “TCA”, “VIR”, “BLZ”, “CRI”, “SLV”, “GTM”, “HND”, “MEX”, “NIC”, “PAN”, “ARG”, “BOL”, “BRA”, “CHL”, “COL”, “ECU”, “FLK”, “GUF”, “PRY”,”PER”, “SGS”, “SUR”, “URY”, “VEN”, “BMU”,”CAN”, “GRL”, “SPM”, “USA”, “ATA”, “KAZ”, “”KGZ”, “TJK”, “TKM”, “UZB”, “CHN”, “HKG”, “MAC”, “PRK”, “JPN”, “MNG”, “KOR”,”BRN”,”KHM”, “IDN”, “LAO”, “MYS”, “MMR”, “PHL”, “SGP”, “THA”, “TLS”,”VNM”, “AFG”, “BGD”, “BTN”, “IND”, “IRN”, “MDV”, “NPL”, “PAK”, “LKA”, “ARM”, ”AZE”, ”BHR”, ”CYP,”,”GEO”, “IRQ”, “ISR”, “JOR”, “KWT”, “LBN”, “OMN”, “QAT”, “SAU”,”PSE”,”SYR”, “TUR”, “ARE”, “YEM”, “BLR”, “BGR”, “CZE”,”HUN”,”POL”, “MDA”, “ROU”, “RUS”,”SVK”, “UKR”, “ALA”, “GGY”, “JEY”, “DNK”, “EST”, “FRO”, “FIN”, “ISL”, “IRL”,”IMN”, “LVA”, “LTU”, “NOR”, “SJM”, “SWE”, “GBR”,”ALB”, “AND”, ”BIH”, “HRV”, “GIB”, “GRC”, “VAT”, “ITA”, “MLT”, “MNE”, “PRT”, “SMR”, “SRB”, “SVN”, “ESP”, “MKD”, “AUT”, “BEL”, “FRAN”, “DEU”, “LIE”,”LUX”, “MCO”, “NLD”, “CHE”, “AUS”, “CXR”, “CCK”, “HMD”, “NZL”, “NFK”,”FJI”, “NCL”, “PNG”, “SLB”, “VUT”, “GUM”, “KIR”, “MHL”, “FSM”, “NRU”, “MNP”, “PLW”, “UMI”, “ASM”, “COK”, “PYF”, “NIU”, “PCN”, “WSM”, “TKL”, “TON”, “TUV”, “WLF”, “NN”)");

            entity.Property(e => e.CPaisRec)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cPaisRec")
                .HasComment("String (3) (\"DZA\", \"EGY\",\"LBY\",\"MAR\", \"SDN\", \"TUN\",\"ESH\",\"IOT\", \"BDI\",\"COM\", \"DJI\", \"ERI\", \"ETH\", \"ATF\",\"KEN\", \"MDG\",\"MWI\", \"MUS\", \"MYT\", \"MOZ\", \"REU\", \"RWA\", \"SYC\",\"SOM\",  \"SSD\", \"UGA\", \"TZA\",\"ZMB\", \"ZWE\",\"AGO\", \"CMR\",  \"CAF\", \"TCD\",   \"COG\", \"COD\", \"GNQ\", \"GAB\", \"STP\",  \"BWA\", \"LSO\", \"NAM\", \"ZAF\", \"SWZ\", \"BEN\", \"BFA\",  \"CPV\",\"CIV\", \"GMB\", \"GHA\", \"GIN\", \"GNB\", LBR\", \"MLI\", \"MRT\", \"NER\", “NGA”, “SHN”, “SEN”, “SLE”, “TGO”, “AIA”, “ATG”, “ABW”, “BHS”, “BRB”, “BES”, “VGB”, “CYM”, “CUB”, “CUW”, “DMA”, “DOM”, “GRD”, “GLP”, “HTI”, ”JAM”, “MTQ”, “MSR”, “PRI”, “BLM”, “KNA”, “LCA”, “MAF”, “VCT”, “SXM”, “TTO”, “TCA”, “VIR”, “BLZ”, “CRI”, “SLV”, “GTM”, “HND”, “MEX”, “NIC”, “PAN”, “ARG”, “BOL”, “BRA”, “CHL”, “COL”, “ECU”, “FLK”, “GUF”, “PRY”,”PER”, “SGS”, “SUR”, “URY”, “VEN”, “BMU”,”CAN”, “GRL”, “SPM”, “USA”, “ATA”, “KAZ”, “”KGZ”, “TJK”, “TKM”, “UZB”, “CHN”, “HKG”, “MAC”, “PRK”, “JPN”, “MNG”, “KOR”,”BRN”,”KHM”, “IDN”, “LAO”, “MYS”, “MMR”, “PHL”, “SGP”, “THA”, “TLS”,”VNM”, “AFG”, “BGD”, “BTN”, “IND”, “IRN”, “MDV”, “NPL”, “PAK”, “LKA”, “ARM”, ”AZE”, ”BHR”, ”CYP,”,”GEO”, “IRQ”, “ISR”, “JOR”, “KWT”, “LBN”, “OMN”, “QAT”, “SAU”,”PSE”,”SYR”, “TUR”, “ARE”, “YEM”, “BLR”, “BGR”, “CZE”,”HUN”,”POL”, “MDA”, “ROU”, “RUS”,”SVK”, “UKR”, “ALA”, “GGY”, “JEY”, “DNK”, “EST”, “FRO”, “FIN”, “ISL”, “IRL”,”IMN”, “LVA”, “LTU”, “NOR”, “SJM”, “SWE”, “GBR”,”ALB”, “AND”, ”BIH”, “HRV”, “GIB”, “GRC”, “VAT”, “ITA”, “MLT”, “MNE”, “PRT”, “SMR”, “SRB”, “SVN”, “ESP”, “MKD”, “AUT”, “BEL”, “FRAN”, “DEU”, “LIE”,”LUX”, “MCO”, “NLD”, “CHE”, “AUS”, “CXR”, “CCK”, “HMD”, “NZL”, “NFK”,”FJI”, “NCL”, “PNG”, “SLB”, “VUT”, “GUM”, “KIR”, “MHL”, “FSM”, “NRU”, “MNP”, “PLW”, “UMI”, “ASM”, “COK”, “PYF”, “NIU”, “PCN”, “WSM”, “TKL”, “TON”, “TUV”, “WLF”, “NN”)");

            entity.Property(e => e.CTipReg)
                .HasColumnName("cTipReg")
                .HasComment("Integer (1-8)");

            entity.Property(e => e.CTipRegImp)
                .HasColumnName("cTipRegImp")
                .HasComment("Integer (0-9) {4}");

            entity.Property(e => e.CUniMedTotPes)
                .HasColumnName("cUniMedTotPes")
                .HasComment("Integer (1-5)");

            entity.Property(e => e.CUniMedTotVol)
                .HasColumnName("cUniMedTotVol")
                .HasComment("Integer (1-5)");

            entity.Property(e => e.DAnoCont)
                .HasColumnName("dAnoCont")
                .HasComment("Integer (2)");

            entity.Property(e => e.DAnticipo)
                .HasColumnType("decimal(11, 8)")
                .HasColumnName("dAnticipo");

            entity.Property(e => e.DAsiento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dAsiento")
                .HasComment("String (1-10)");

            entity.Property(e => e.DBaseGrav10)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dBaseGrav10");

            entity.Property(e => e.DBaseGrav5)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dBaseGrav5");

            entity.Property(e => e.DCarQr)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("dCarQR")
                .HasComment("String (100-600)");

            entity.Property(e => e.DCarRespDe)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("dCarRespDE")
                .HasComment("String (4-100) Cargo del responsable de la generación del DE");

            entity.Property(e => e.DCelRec)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dCelRec")
                .HasComment("String (\\d{10,20})");

            entity.Property(e => e.DCiclo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dCiclo")
                .HasComment("String (1-15)");

            entity.Property(e => e.DCodCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dCodCliente")
                .HasComment("String (3-15)");

            entity.Property(e => e.DCodRes)
                .HasColumnName("dCodRes")
                .HasComment("Integer(4)");

            entity.Property(e => e.DCodSeg).HasColumnName("dCodSeg");

            entity.Property(e => e.DComi)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dComi");

            entity.Property(e => e.DComp1Sal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dComp1Sal");

            entity.Property(e => e.DComp2Sal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dComp2Sal");

            entity.Property(e => e.DCompDir1)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dCompDir1");

            entity.Property(e => e.DCompDir2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dCompDir2");

            entity.Property(e => e.DCondTiCam)
                .HasColumnName("dCondTiCam")
                .HasComment("Short (1 total digito)");

            entity.Property(e => e.DContrato)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dContrato")
                .HasComment("String (1-30)");

            entity.Property(e => e.DCuotas)
                .HasColumnName("dCuotas")
                .HasComment("Integer (3)");

            entity.Property(e => e.DDcondCred)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("dDCondCred")
                .HasComment("String (5-6) (\"Plazo\" \"Cuota\")");

            entity.Property(e => e.DDcondOpe)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("dDCondOpe")
                .HasComment("String (7) (\"Contado\",\"Crédito\" )");

            entity.Property(e => e.DDenSuc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDenSuc")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDerAdu)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("dDerAdu");

            entity.Property(e => e.DDesCarCarga)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dDesCarCarga")
                .HasComment("String (1-50)");

            entity.Property(e => e.DDesCiuEmi)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesCiuEmi")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDesCiuProv)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesCiuProv");

            entity.Property(e => e.DDesCiuRec)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesCiuRec");

            entity.Property(e => e.DDesCiuSal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesCiuSal");

            entity.Property(e => e.DDesCiuVen)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesCiuVen");

            entity.Property(e => e.DDesCondAnt)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("dDesCondAnt")
                .HasComment("String (15-17) (\"Anticipo Global\" \"Anticipo por Ítem\" )");

            entity.Property(e => e.DDesDepEmi)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesDepEmi")
                .HasComment("String (6-16) (\"CAPITAL\" \"CONCEPCION\" \"SAN PEDRO\" \"CORDILLERA\" \"GUAIRA\" \"CAAGUAZU\" \"CAAZAPA\" \"ITAPUA\" \"MISIONES\" \"PARAGUARI\" \"ALTO PARANA\" \"CENTRAL\" \"NEEMBUCU\" \"AMAMBAY\" \"PTE. HAYES\" \"BOQUERON\" \"ALTO PARAGUAY\" \"CANINDEYU\" \"CHACO\" \"NUEVA ASUNCION\" )");

            entity.Property(e => e.DDesDepProv)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesDepProv")
                .HasComment("String (6-16) (\"CAPITAL\" \"CONCEPCION\" \"SAN PEDRO\" \"CORDILLERA\" \"GUAIRA\" \"CAAGUAZU\" \"CAAZAPA\" \"ITAPUA\" \"MISIONES\" \"PARAGUARI\" \"ALTO PARANA\" \"CENTRAL\" \"NEEMBUCU\" \"AMAMBAY\" \"PTE. HAYES\" \"BOQUERON\" \"ALTO PARAGUAY\" \"CANINDEYU\" \"CHACO\" \"NUEVA ASUNCION\" )");

            entity.Property(e => e.DDesDepRec)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesDepRec")
                .HasComment("String (6-16) (\"CAPITAL\" \"CONCEPCION\" \"SAN PEDRO\" \"CORDILLERA\" \"GUAIRA\" \"CAAGUAZU\" \"CAAZAPA\" \"ITAPUA\" \"MISIONES\" \"PARAGUARI\" \"ALTO PARANA\" \"CENTRAL\" \"NEEMBUCU\" \"AMAMBAY\" \"PTE. HAYES\" \"BOQUERON\" \"ALTO PARAGUAY\" \"CANINDEYU\" \"CHACO\" \"NUEVA ASUNCION\" )");

            entity.Property(e => e.DDesDepSal)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesDepSal")
                .HasComment("String (6-16) (\"CAPITAL\" \"CONCEPCION\" \"SAN PEDRO\" \"CORDILLERA\" \"GUAIRA\" \"CAAGUAZU\" \"CAAZAPA\" \"ITAPUA\" \"MISIONES\" \"PARAGUARI\" \"ALTO PARANA\" \"CENTRAL\" \"NEEMBUCU\" \"AMAMBAY\" \"PTE. HAYES\" \"BOQUERON\" \"ALTO PARAGUAY\" \"CANINDEYU\" \"CHACO\" \"NUEVA ASUNCION\" )");

            entity.Property(e => e.DDesDepVen)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesDepVen")
                .HasComment("String (6-16) (\"CAPITAL\" \"CONCEPCION\" \"SAN PEDRO\" \"CORDILLERA\" \"GUAIRA\" \"CAAGUAZU\" \"CAAZAPA\" \"ITAPUA\" \"MISIONES\" \"PARAGUARI\" \"ALTO PARANA\" \"CENTRAL\" \"NEEMBUCU\" \"AMAMBAY\" \"PTE. HAYES\" \"BOQUERON\" \"ALTO PARAGUAY\" \"CANINDEYU\" \"CHACO\" \"NUEVA ASUNCION\" )");

            entity.Property(e => e.DDesDisEmi)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesDisEmi")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDesDisProv)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesDisProv")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDesDisRec)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesDisRec")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDesDisSal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesDisSal")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDesDisVen)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesDisVen")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDesFleExp)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesFleExp")
                .HasComment("String (4-30)");

            entity.Property(e => e.DDesIndPres)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesIndPres")
                .HasComment("String (10-30)");

            entity.Property(e => e.DDesModTrans)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dDesModTrans")
                .HasComment("String (5-10)");

            entity.Property(e => e.DDesMoneOpe)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDesMoneOpe")
                .HasComment("String (3-20)");

            entity.Property(e => e.DDesMotEmi)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesMotEmi")
                .HasComment("String (6-30) (\"Devolución y Ajuste de precios\" \"Devolución\" \"Descuento\" \"Bonificación\" \"Crédito incobrable\" \"Recupero de costo\" \"Recupero de gasto\" \"Ajuste de precio\" )");

            entity.Property(e => e.DDesMotEmiNr)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dDesMotEmiNR")
                .HasComment("String (5-60) (\"Traslado por ventas\" \"Traslado por consignación\" \"Exportación\" \"Traslado por compra\" \"Traslado por devolución\" \"Traslado entre locales de la empresa\" \"Traslado de bienes por transformación\" \"Traslado de bienes para reparación\" \"Traslado por emisor móvil\" \"Exhibición o Demostración\" \"Participación en ferias\" \"Traslado de encomienda\" \"Decomiso\"");

            entity.Property(e => e.DDesNacTrans)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesNacTrans")
                .HasComment("String (4-30)");

            entity.Property(e => e.DDesNatVen)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesNatVen")
                .HasComment("String (10-16) (\"No contribuyente\", \"Extranjero\")");

            entity.Property(e => e.DDesPaisDest)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesPaisDest")
                .HasComment("String (4-30)");

            entity.Property(e => e.DDesPaisProd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesPaisProd")
                .HasComment("String (4-30)");

            entity.Property(e => e.DDesPaisRe)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesPaisRe")
                .HasComment("String (4-30)");

            entity.Property(e => e.DDesRespEmiNr)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("dDesRespEmiNR")
                .HasComment("String (20-36) (\"Emisor de la factura\" \"Poseedor de la factura y bienes\" \"Empresa transportista\" \"Despachante de Aduanas\" \"Agente de transporte o intermediario\")");

            entity.Property(e => e.DDesTiDe)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("dDesTiDE")
                .HasComment("String (15-40)");

            entity.Property(e => e.DDesTimp)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("dDesTImp")
                .HasDefaultValueSql("('String (3-7) (\"IVA\", \"ISC\", \"Renta\",\"Ninguno\" )')")
                .HasComment("String (3-7)");

            entity.Property(e => e.DDesTipEmi)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("dDesTipEmi")
                .HasComment("String (6-12)");

            entity.Property(e => e.DDesTipTra)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("dDesTipTra")
                .HasComment("String (5-36) (\"Venta de mercadería\" \"Prestación de servicios\" \"Venta de activo fijo\" \"Venta de divisas\" \"Compra de divisas\" \"Promoción o entrega de muestras\" \"Donación\" \"Anticipo\" \"Compra de productos\" \"Compra de servicios\" \"Venta de crédito fiscal\" \"Muestras médicas (Art. 3 RG 24/2014)\" )");

            entity.Property(e => e.DDesTipTrans)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("dDesTipTrans")
                .HasComment("String (6-7) (“Propio”, “Tercero”)");

            entity.Property(e => e.DDesUniMedTotPes)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dDesUniMedTotPes")
                .HasComment("String (1-10)");

            entity.Property(e => e.DDesUniMedTotVol)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dDesUniMedTotVol")
                .HasComment("String (1-10)");

            entity.Property(e => e.DDescTotal)
                .HasColumnType("decimal(11, 8)")
                .HasColumnName("dDescTotal");

            entity.Property(e => e.DDirAge)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirAge");

            entity.Property(e => e.DDirChof)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirChof");

            entity.Property(e => e.DDirEmi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirEmi");

            entity.Property(e => e.DDirLocSal)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirLocSal");

            entity.Property(e => e.DDirProv)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirProv");

            entity.Property(e => e.DDirRec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirRec");

            entity.Property(e => e.DDirVen)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirVen")
                .HasComment("String (1-255)");

            entity.Property(e => e.DDomFisc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("dDomFisc")
                .HasComment("String (1-150)");

            entity.Property(e => e.DDtipIdrec)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDTipIDRec")
                .HasComment("String (9-20) (\"Cédula paraguaya\",\"Pasaporte\", \"Cédula extranjera\"\"Carnet de residencia\", \"Innominado\",“Tarjeta Diplomática de exoneración fiscal” )");

            entity.Property(e => e.DDtipIdrespDe)
                .HasMaxLength(41)
                .IsUnicode(false)
                .HasColumnName("dDTipIDRespDE")
                .HasComment("String (9-41) (\"Cédula paraguaya\",\"Pasaporte\", \"Cédula extranjera\"\"Carnet de residencia\", Si D141 =9 informar el tipo de documento de identidad del responsable de la generación del DE )");

            entity.Property(e => e.DDtipIdtrans)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDTipIDTrans")
                .HasComment("String (9-20) (\"Cédula paraguaya\" \"Pasaporte\" \"Cédula extranjera\" \"Carnet de residencia\")");

            entity.Property(e => e.DDtipIdven)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDTipIDVen")
                .HasComment("String (9-20)");

            entity.Property(e => e.DDvag)
                .HasColumnName("dDVAg")
                .HasComment("Integer (0-9)");

            entity.Property(e => e.DDvdesp)
                .HasColumnName("dDVDesp")
                .HasComment("Integer (0-9)");

            entity.Property(e => e.DDvemi)
                .HasColumnName("dDVEmi")
                .HasComment("Integer (1)");

            entity.Property(e => e.DDvid)
                .HasColumnName("dDVid")
                .HasComment("Integer (1)");

            entity.Property(e => e.DDvrec)
                .HasColumnName("dDVRec")
                .HasComment("Integer (0-9)");

            entity.Property(e => e.DDvtrans)
                .HasColumnName("dDVTrans")
                .HasComment("Integer (1)");

            entity.Property(e => e.DEmailE)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("dEmailE")
                .HasComment("String (3-80)");

            entity.Property(e => e.DEmailRec)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("dEmailRec")
                .HasComment("String (3-80)");

            entity.Property(e => e.DEntCont)
                .HasColumnName("dEntCont")
                .HasComment("Integer ([0-9]{5})");

            entity.Property(e => e.DEst)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dEst")
                .HasComment("String (3) (\"[0-9]{3}\")");

            entity.Property(e => e.DFeCodCont)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("dFeCodCont")
                .HasComment("String ([2-9][0-9]{3}-([0][1-9]|[1][0-2])-([0][0-9]|[1-2][0-9]|[3][0-1]))");

            entity.Property(e => e.DFeEmiDe)
                .HasColumnType("datetime")
                .HasColumnName("dFeEmiDE");

            entity.Property(e => e.DFeIniT)
                .HasColumnType("date")
                .HasColumnName("dFeIniT");

            entity.Property(e => e.DFecDesp)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("dFecDesp")
                .HasComment("String ([2-9][0-9]{3}-([0][1-9]|[1][0-2])-([0][0-9]|[1-2][0-9]|[3][0-1]))");

            entity.Property(e => e.DFecEm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dFecEm")
                .HasComment("String ([2-9][0-9]{3}-([0][1-9]|[1][0-2])-([0][0-9]|[1-2][0-9]|[3][0-1]))");

            entity.Property(e => e.DFecEmNr)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("dFecEmNR")
                .HasComment("String ([2-9][0-9]{3}-([0][1-9]|[1][0-2])-([0][0-9]|[1-2][0-9]|[3][0-1]))");

            entity.Property(e => e.DFecFinC)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dFecFinC");

            entity.Property(e => e.DFecFirma)
                .HasColumnType("datetime")
                .HasColumnName("dFecFirma");

            entity.Property(e => e.DFecIniC)
                .HasColumnType("date")
                .HasColumnName("dFecIniC")
                .HasComment("Date (\"2018-05-01\")");

            entity.Property(e => e.DFinTras)
                .HasColumnType("date")
                .HasColumnName("dFinTras");

            entity.Property(e => e.DIndi)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("dIndi");

            entity.Property(e => e.DInfAdic)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("dInfAdic")
                .HasComment("String (1-5000)");

            entity.Property(e => e.DInfoEmi)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("dInfoEmi");

            entity.Property(e => e.DInfoFisc)
                .HasMaxLength(3000)
                .IsUnicode(false)
                .HasColumnName("dInfoFisc");

            entity.Property(e => e.DIniTras)
                .HasColumnType("date")
                .HasColumnName("dIniTras")
                .HasComment("Date (\"2018-05-01\")");

            entity.Property(e => e.DIva10)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dIVA10");

            entity.Property(e => e.DIva5)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dIVA5");

            entity.Property(e => e.DIvacomi)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dIVAComi");

            entity.Property(e => e.DIvaimp)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("dIVAImp");

            entity.Property(e => e.DKmR)
                .HasColumnName("dKmR")
                .HasComment("Integer (1- 99999)");

            entity.Property(e => e.DLiqTotIva10)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dLiqTotIVA10");

            entity.Property(e => e.DLiqTotIva5)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dLiqTotIVA5");

            entity.Property(e => e.DModCont)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("dModCont")
                .HasComment("String (2)");

            entity.Property(e => e.DMonEnt)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("dMonEnt");

            entity.Property(e => e.DMsgRes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dMsgRes")
                .HasComment("String(1-255)");

            entity.Property(e => e.DNomChof)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNomChof")
                .HasComment("String (4-60)");

            entity.Property(e => e.DNomDesp)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNomDesp")
                .HasComment("String (4-60)");

            entity.Property(e => e.DNomEmi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dNomEmi")
                .HasComment("String (4-255)");

            entity.Property(e => e.DNomFanEmi)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dNomFanEmi")
                .HasComment("String (4-255)");

            entity.Property(e => e.DNomFanRec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dNomFanRec")
                .HasComment("String (4-255)");

            entity.Property(e => e.DNomRec)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dNomRec")
                .HasComment("String (4-255)");

            entity.Property(e => e.DNomRespDe)
                .HasMaxLength(225)
                .IsUnicode(false)
                .HasColumnName("dNomRespDE")
                .HasComment("String (4-225) Nombre o razón social del responsable de la generación del DE");

            entity.Property(e => e.DNomTrans)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNomTrans")
                .HasComment("String (4-60)");

            entity.Property(e => e.DNomVen)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNomVen")
                .HasComment("String (4-60)");

            entity.Property(e => e.DNombAg)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNombAg")
                .HasComment("String (4-60)");

            entity.Property(e => e.DNuDesp)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dNuDesp");

            entity.Property(e => e.DNuDespImp)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dNuDespImp");

            entity.Property(e => e.DNuManif)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dNuManif")
                .HasComment("String (1-15)");

            entity.Property(e => e.DNumCas)
                .HasColumnName("dNumCas")
                .HasComment("Integer (0-6)");

            entity.Property(e => e.DNumCasRec)
                .HasColumnName("dNumCasRec")
                .HasComment("Integer (0-6)");

            entity.Property(e => e.DNumCasSal)
                .HasColumnName("dNumCasSal")
                .HasComment("Integer (0-6)");

            entity.Property(e => e.DNumCasVen)
                .HasColumnName("dNumCasVen")
                .HasComment("Integer (0-6)");

            entity.Property(e => e.DNumDoc)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("dNumDoc")
                .HasComment("String (7-7) (\"0+[1-9][0-9]*|[1-9]+[0-9]+\")");

            entity.Property(e => e.DNumIdchof)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumIDChof")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNumIdrec)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumIDRec")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNumIdrespDe)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumIDRespDE")
                .HasComment("String (1-20) Número de documento de identidad del responsable de la generación del DE ");

            entity.Property(e => e.DNumIdtrans)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumIDTrans")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNumIdven)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumIDVen")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNumTim)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dNumTim")
                .HasComment("String (8-8) (\"0+[1-9][0-9]*|[1-9]+[0-9]+\")");

            entity.Property(e => e.DOrdCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dOrdCompra")
                .HasComment("String (1-15)");

            entity.Property(e => e.DOrdVta)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dOrdVta")
                .HasComment("String (1-15)");

            entity.Property(e => e.DPlazoCre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dPlazoCre")
                .HasComment("String (2-15)");

            entity.Property(e => e.DPorcDescTotal)
                .HasColumnType("decimal(11, 8)")
                .HasColumnName("dPorcDescTotal");

            entity.Property(e => e.DProtAut)
                .HasColumnName("dProtAut")
                .HasComment("Integer(4)");

            entity.Property(e => e.DPuEmb)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dPuEmb")
                .HasComment("String (5-30)");

            entity.Property(e => e.DPuLleg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dPuLleg")
                .HasComment("String (5-50)");

            entity.Property(e => e.DPunExp)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dPunExp")
                .HasComment("String (3) (\"[0-9]{3}\")");

            entity.Property(e => e.DRedon)
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("dRedon");

            entity.Property(e => e.DRucAg)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRucAg")
                .HasComment("String (3-8)");

            entity.Property(e => e.DRucDesp)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRucDesp")
                .HasComment("String (3-8)");

            entity.Property(e => e.DRucEm)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRucEm")
                .HasComment("String (3-8)");

            entity.Property(e => e.DRucRec)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRucRec")
                .HasComment("String (3-8)");

            entity.Property(e => e.DRucTrans)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRucTrans")
                .HasComment("String (3-8)");

            entity.Property(e => e.DSalAnt)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("dSalAnt");

            entity.Property(e => e.DSecCont)
                .HasColumnName("dSecCont")
                .HasComment("Integer ([0-9]{7})");

            entity.Property(e => e.DSerValor)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("dSerValor");

            entity.Property(e => e.DSerieNum)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("dSerieNum")
                .HasComment("String (\"[A-Z]{2}\")");

            entity.Property(e => e.DSisFact)
                .HasColumnName("dSisFact")
                .HasComment("Integer (1=Sistema Facturación Contribuyente, 2=SIFEN solución gratuita)");

            entity.Property(e => e.DSub10)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dSub10");

            entity.Property(e => e.DSub5)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dSub5");

            entity.Property(e => e.DSubExe)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dSubExe");

            entity.Property(e => e.DSubExo)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dSubExo");

            entity.Property(e => e.DTasaIntAd)
                .HasColumnName("dTasaIntAd")
                .HasComment("Integer (1-99)");

            entity.Property(e => e.DTbasGraIva)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTBasGraIVA");

            entity.Property(e => e.DTelEmi)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dTelEmi")
                .HasComment("String (8-15)");

            entity.Property(e => e.DTelRec)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dTelRec")
                .HasComment("String (\\d{6,15})");

            entity.Property(e => e.DTelSal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dTelSal")
                .HasComment("String (6-15)");

            entity.Property(e => e.DTiCam)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("dTiCam")
                .HasComment("");

            entity.Property(e => e.DTotAnt)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotAnt");

            entity.Property(e => e.DTotAntItem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotAntItem");

            entity.Property(e => e.DTotDesc)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotDesc");

            entity.Property(e => e.DTotDescGlotem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotDescGlotem");

            entity.Property(e => e.DTotGralOpe)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotGralOpe");

            entity.Property(e => e.DTotIva)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotIVA");

            entity.Property(e => e.DTotOpe)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotOpe");

            entity.Property(e => e.DTotPesMerc)
                .HasColumnName("dTotPesMerc")
                .HasComment("Integer (20 total dígitos)");

            entity.Property(e => e.DTotVolMerc)
                .HasColumnName("dTotVolMerc")
                .HasComment("Integer (1-5)");

            entity.Property(e => e.DTotalGs)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotalGs");

            entity.Property(e => e.DValorFle)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("dValorFle");

            entity.Property(e => e.DValorImpGs).HasColumnName("dValorImpGs");

            entity.Property(e => e.DValorInv)
                .HasColumnType("decimal(12, 4)")
                .HasColumnName("dValorInv");

            entity.Property(e => e.DValorSeg)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("dValorSeg");

            entity.Property(e => e.DVend)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dVend")
                .HasComment("String (4-30)");

            entity.Property(e => e.DVerFor).HasColumnName("dVerFor");

            entity.Property(e => e.DeStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DE_STATUS")
                .IsFixedLength();

            entity.Property(e => e.DfecProc)
                .HasColumnType("datetime")
                .HasColumnName("dfecProc");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.ICarCarga)
                .HasColumnName("iCarCarga")
                .HasComment("Integer (1=Mercaderia de cadena de frio, 2=Carga peligrosa, 3=Otro de Características similares (especificar))");

            entity.Property(e => e.ICondAnt)
                .HasColumnName("iCondAnt")
                .HasComment("Short (1 total digito) (1=Anticipo Global, 2=Anticipo por ítem)");

            entity.Property(e => e.ICondCred)
                .HasColumnName("iCondCred")
                .HasComment("Integer (1=Plazo, 2= Cuota)");

            entity.Property(e => e.ICondOpe)
                .HasColumnName("iCondOpe")
                .HasComment("Integer (1=Contado, 2=Credito)");

            entity.Property(e => e.IModTrans)
                .HasColumnName("iModTrans")
                .HasComment("Integer (1=Terrestre, 2=Fluvial, 3=Aéreo, 4=Multimodal)");

            entity.Property(e => e.INatRec)
                .HasColumnName("iNatRec")
                .HasComment("Integer (1=Contribuyente, 2=No Contribuyente)");

            entity.Property(e => e.INatTrans)
                .HasColumnName("iNatTrans")
                .HasComment("Integer (1=Contribuyente, 2=No Contribuyente)");

            entity.Property(e => e.INatVen)
                .HasColumnName("iNatVen")
                .HasComment("BigInteger (1=No Contribuyente, 2=Extranjero)");

            entity.Property(e => e.IRespEmiNr)
                .HasColumnName("iRespEmiNR")
                .HasComment("Integer (1=Emisor de la factura, 2=Poseedor de la factura y bienes, 3=Empresa transportista, 4=Despachante de aduanas, 5=Agente de transporte o intermediario)");

            entity.Property(e => e.IRespFlete)
                .HasColumnName("iRespFlete")
                .HasComment("Integer (1=Emisor de la factura electrónica, 2=Receptor de la factura electrónica, 3=Tercero, 4=Agente intermediario del transporte. 5=Transporte propio)");

            entity.Property(e => e.ITiContRec)
                .HasColumnName("iTiContRec")
                .HasComment("Integer (1=Persona Física, 2=Persona Jurídica");

            entity.Property(e => e.ITiDe)
                .HasColumnName("iTiDE")
                .HasComment("Integer (1-2) (1=Factura Electrónica, 2=Factura electrónica de exportación, 3=Factura Electrónica de importación, 4=Autofactura electrónica, 5=Nota de Crédito Electrónica, 6=Nota de débito electrónica, 7=Nota de remisión electrónica, 8=Comprobante de retención electrónico)");

            entity.Property(e => e.ITiOpe)
                .HasColumnName("iTiOpe")
                .HasComment("Integer (1=B2B, 2=B2C,3=B2G,4=B2F");

            entity.Property(e => e.ITimp)
                .HasColumnName("iTImp")
                .HasComment("(Integer) (1=IVA, 2=ISC, 3=Renta,4=Ninguno, 5=Iva Renta)");

            entity.Property(e => e.ITipCont)
                .HasColumnName("iTipCont")
                .HasComment("Integer (1=Persona física, 2=Persona jurídica)");

            entity.Property(e => e.ITipEmi)
                .HasColumnName("iTipEmi")
                .HasComment("Integer (1=Normal, 2=Contingencia)");

            entity.Property(e => e.ITipIdrec)
                .HasColumnName("iTipIDRec")
                .HasComment("Integer (1=Cédula paraguaya, 2=Pasaporte, 3=Cédula Extranjera, 4=Carnet de residencia, 5=Innominado, 6=Tarjeta diplomática de exoneración fiscal, 9=Otro)");

            entity.Property(e => e.ITipIdrespDe)
                .HasColumnName("iTipIDRespDE")
                .HasComment("Integer (1) (1=Cédula paraguaya, 2=Pasaporte, 3=Cédula extranjera, 4=Carnet de residencia, 9=Otro)");

            entity.Property(e => e.ITipIdtrans)
                .HasColumnName("iTipIDTrans")
                .HasComment("Integer (1=Cédula paraguaya, 2=Pasaporte, 3=Cédula extranjera, 4=Carnet de residencia)");

            entity.Property(e => e.ITipIdven)
                .HasColumnName("iTipIDVen")
                .HasComment("Integer (1=Cedula paraguaya, 2=Pasaporte, 3=Cedula extranjera, 4=Carnet residencia");

            entity.Property(e => e.ITipTra)
                .HasColumnName("iTipTra")
                .HasComment("(integer) (1=Venta de mercaderia, 2=Prestación de servicios, 3=Mixto (Venta de mercaderia y servicios), 4=Venta de activo fijo, 5=Venta de divisas, 6=Compra de divisas, 7=Promoción o entregas de muestras, 8=Donación, 9=Anticipo, 10=Compra de productos, 11=Compra de servicios, 12=Venta de crédito fiscal, 13=Muestra medicas)");

            entity.Property(e => e.ITipTrans)
                .HasColumnName("iTipTrans")
                .HasComment("Integer (1=Propio, 2=Tercero)");

            entity.Property(e => e.Id)
                .HasMaxLength(44)
                .IsUnicode(false);

            entity.Property(e => e.IdTabla)
                .HasColumnName("ID_TABLA")
                .HasComment("Identificar las notas de remision (1=Nota_Envio, 2=Nota_Remision, 3=Nota_Remision_Exportacion,4=AutoFactura Liquidacion, 5=AutoFactura Gasto, 6=Factura Venta,7=Nota Credito,8=Nota Debito )");

            entity.Property(e => e.IindPres)
                .HasColumnName("IIndPres")
                .HasComment("Integer (1=Operación presencial, 2=Electronica, 3=Telemarketing, 4=Venta a domicilio, 5=Operación Bancaria, Operación Ciclica, 9=Otro");

            entity.Property(e => e.ImotEmi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMotEmi")
                .HasComment("String (1=Devolución y ajuste de precios, 2=devolución, 3=Descuento, 4=Bonificación, 5=Crédito incobrable, 6=Recupero de costo, 7=Recupero de gastos, 8=Ajuste de precio)");

            entity.Property(e => e.ImotEmiNr)
                .HasColumnName("IMotEmiNR")
                .HasComment("Integer (1=Traslado por venta, 2=Traslado por consignación, 3=Exportación, 4=Traslado por compra, 5=Importación, 6=Traslado por devolución, 7=Traslado entre locales de la empresa, 8=Traslado de bienes por transformación, 9=Traslado de bienes por reparación, 10=Traslado por emisor móvil, 11=Exhibición o demostración, 12=Participación en ferias, 13=Traslado de encomienda, 14=Decomiso, 99=Otros\r\ndeberá consignarse expresamente el o los motivos diferentes a los mencionados anteriormente) \r\nObs.: Cuando el motivo sea por operaciones internas de la empresa, el RUC del receptor debe ser igual al RUC del emisor. )");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("Se guardaran los ID's de las distintas notas de remision (Nota_Envio, Nota_Remision, Nota_Remision_Exportacion)");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeActiEco>(entity =>
        {
            entity.HasKey(e => e.IdDeActiEco);

            entity.ToTable("DE_ACTI_ECO", "dbo");

            entity.Property(e => e.IdDeActiEco).HasColumnName("ID_DE_ACTI_ECO");

            entity.Property(e => e.CActEco)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("cActEco");

            entity.Property(e => e.DDesActEco)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("dDesActEco");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDeNavigation)
                .WithMany(p => p.DeActiEcos)
                .HasForeignKey(d => d.IdDe)
                .HasConstraintName("FK_DE_ACTI_ECO_DE");
        });

        modelBuilder.Entity<DeAsoc>(entity =>
        {
            entity.HasKey(e => e.IdDeAsoc);

            entity.ToTable("DE_ASOC", "dbo");

            entity.Property(e => e.IdDeAsoc).HasColumnName("ID_DE_ASOC");

            entity.Property(e => e.DCdCderef)
                .HasMaxLength(44)
                .IsUnicode(false)
                .HasColumnName("dCdCDERef");

            entity.Property(e => e.DDesTipCons)
                .HasMaxLength(34)
                .IsUnicode(false)
                .HasColumnName("dDesTipCons")
                .HasComment("String (30-34) “Constancia de no ser contribuyente” “Constancia de microproductores”");

            entity.Property(e => e.DDesTipDocAso)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("dDesTipDocAso")
                .HasComment("String (7-11) (“Electrónico”, “Impreso”, “Constancia Electrónica”)");

            entity.Property(e => e.DDtipoDocAso)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDTipoDocAso")
                .HasComment("String (7-16)");

            entity.Property(e => e.DEstDocAso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dEstDocAso");

            entity.Property(e => e.DFecEmiDi)
                .HasColumnType("date")
                .HasColumnName("dFecEmiDI")
                .HasComment("Date (\"2018-05-01\")");

            entity.Property(e => e.DNtimDi)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dNTimDI");

            entity.Property(e => e.DNumComRet)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dNumComRet");

            entity.Property(e => e.DNumCons).HasColumnName("dNumCons");

            entity.Property(e => e.DNumControl)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dNumControl");

            entity.Property(e => e.DNumDocAso)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("dNumDocAso");

            entity.Property(e => e.DNumResCf)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dNumResCF");

            entity.Property(e => e.DPexpDocAso)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("dPExpDocAso");

            entity.Property(e => e.ITipCons)
                .HasColumnName("iTipCons")
                .HasComment("Integer (1=Constancia de no ser contribuyente, 2=Constancia de microproductores)");

            entity.Property(e => e.ITipDocAso)
                .HasColumnName("iTipDocAso")
                .HasComment("Integer (1=Electrónico, 2=Impreso, 3=Constancia Electrónica)");

            entity.Property(e => e.ITipoDocAso)
                .HasColumnName("iTipoDocAso")
                .HasComment("Integer (1=Factura, 2=Nota de crédito, 3=Nota de débito, 4=Nota de remisión, 5=Comprobante de retención)");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDeNavigation)
                .WithMany(p => p.DeAsocs)
                .HasForeignKey(d => d.IdDe)
                .HasConstraintName("FK_DE_ASOC_DE");
        });

        modelBuilder.Entity<DeCiudad>(entity =>
        {
            entity.HasKey(e => e.IdDeCiudad)
                .HasName("PK_DE_CIUDAD$");

            entity.ToTable("DE_CIUDAD", "dbo");

            entity.Property(e => e.IdDeCiudad).HasColumnName("ID_DE_CIUDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeDistrito).HasColumnName("ID_DE_DISTRITO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeCuota>(entity =>
        {
            entity.HasKey(e => e.IdDeCuotas);

            entity.ToTable("DE_CUOTAS", "dbo");

            entity.Property(e => e.IdDeCuotas).HasColumnName("ID_DE_CUOTAS");

            entity.Property(e => e.CMoneCuo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cMoneCuo")
                .HasComment("String (3) (“AED” – Dirham, “AFN” – Afghani, “ALL” – Lek, “AMD” – Dram, “ANG” - Netherlands Antillian Guilder, “AOA” – Kwanza, “ARS” - Argentine Peso, “AUD” - Australian Dollar, “AWG” - Aruban Guilder, “AZM” - Azerbaijanian Manat, “BAM” - Convertible Mark, “BBD” - Barbados Dollar, “BYN” - Belarusian Ruble, “BDT” – Taka, “BGN” - Bulgarian Lev, “BHD” - Bahraini Dinar, “BIF” - Burundi Franc, “BMD” - Bermudian Dollar (customarily: Bermuda Dollar), “BND” - Brunei Dollar, “BOB” – Boliviano, “BOV” – Mvdol, “BRL” – Brazilian Real, “BSD” - Bahamian Dollar, “BTN” – Ngultrum, “BWP” – Pula, “BYR” - Belarussian Ruble, “BZD” - Belize Dollar, “CAD” - Canadian Dollar, “CDF” - Franc Congolais, “CHF” - Swiss Franc, “CHE” - WIR Euro, “CHW” - WIR Franc, “CLP” - Chilean Peso, “CLF” - Unidad de Fomento, “CNY” - Yuan Renminbi, “COP” - Colombian Peso, “COU” – Unidad de Valor Real, “CRC” – Costa Rica Colon, “CUP” – Cuban Peso, “CUC” – Peso Convertible, “CVE” – Cape Verde Escudo, “CYP” - Cyprus Pound, “CZK” - Czech Koruna, “DJF” - Djibouti Franc, “DKK” - Danish Krone, “DOP” – Dominican Peso, “DZD” - Algerian Dinar, “EEK” – Kroon, “EGP” - Egyptian Pound, “ERN” – Nakfa, “ETB” - Ethopian Birr, “EUR” – Euro, “FJD” - Fiji Dollar, “FKP” - Falkland Islands Pound, “GBP” - Pound Sterling, “GEL” – Lari, “GHS” - Ghana Cedi, “GHC” – Cedi, “GIP” - Gibraltar Pound, “GMD” – Dalasi, “GNF” – Guinea Franc, “GTQ” – Quetzal, “GYD” - Guyana Dollar, “HKD” - Honk Kong Dollar, “HNL” – Lempira, “HKR” – Kuna, “HTG” – Gourde, “HUF” – Forint, “IDR” – Rupiah, “ILS” – New Israeli Shequel, “INR” - Indian Rupee, “IQD” - Iraqi Dinar, “IRR” - Iranian Rial, “ISK” - Iceland Krona, “JMD” - Jamaican Dollar, “JOD” – Jordianian Dinar, “JPY” – Yen, “KES” - Kenyan Shilling, “KGS” – Som, “KHR” – Riel, “KMF” - Comoro Franc, “KPW” - North Korean Won, “KRW” – Won, “KWD” - Kuwaiti Dinar, “KYD” - Cayman Islands Dollar, “KZT” – Tenge, “LAK” – Kip, “LBP” - Lebanese Pound, “LKR” - Sri Lanka Rupee, “LRD” - Liberian Dollar, “LSL” – Loti, “LTL” - Lithuanian Litas, “LVL” - Latvian Lats, “LYD” - Libyan Dinar, “MAD” - Morrocan Dirham, “MZN” - Mozambique Metical, “MDL” – Moldovan Leu, “MGF” - Malagasy Franc, “MKD” – Denar, “MGA” - Malagasy Ariary, “MMK” – Kyat, “MNT” – Tugrik, “MOP” – Pataca, “MRO” – Ouguiya, “MTL” - Maltese Lira, “MUR” - Mauritius Rupee, “XUA” - ADB Unit of Account, “MVR” – Rufiyaa, “MRU” – Ouguiya, “MWK” – Kwacha, “MXN” - Mexican Peso, “MXV” - Mexican Unidad de Inversión, “MYR” - Malaysian Ringgit, “MZM” – Metical, “NAD” - Namibia Dollar, “NGN” – Naira, “NIO” - Cordoba Oro, “NOK” -  Norwegian Krone, “NPR” - Nepalese Rupee,  “NZD” - New Zealand Dollar, “OMR” - Rial Omani, “PAB” -  Balboa, “PEN” - Nuevo Sol, “PGK” – Kina, “PHP” - Philippine Peso, “PKR” - Pakistan Rupee, “PLN” – Zloty, \"PYG\" – Guarani, “QAR” - Qatari Rial, “RON” - Romanian Leu, “ROL” – Leu, “RUB” - Russian Ruble, “RWF” - Rwanda Franc, “SAR” - Saudi Riyal, “RSD” - Serbian Dinar, “SBD” - Solomon Islands Dollar, “SCR” - Seychelles Rupee, “SDD” - Sudanese Dinar, “SDG” - Sudanese Pound, “SRD” - Surinam Dollar, “SEK” - Swedish Krona, “SGD” - Singapore Dollar, “SHP” - St. Helena Pound, “SIT” – Tolar, “SKK”- Slovak Koruna, “SLL” – Leone, “SOS” - Somali Shilling, \"SRG\" - Suriname Guilder, \"SSP\" - South Sudanese Pound, \"STD\"- Dobra, \"SVC\" - El Salvador Colon,  \"SYP\" - Syrian Pound, \"SZL\" – Lilangeni, \"THB\" – Baht, \"TJS\" – Somoni, \"TMM\" – Manat, \"TND\" - Tunisian Dinar, \"TRY\" - Turkish Lira, \"TMT\" - Turkmenistan New Manat, \"TOP\" - Pa&apos;anga, \"TRL\" - Turkish Lira, \"TTD\" - Trinidad and Tobago Dollar, ");

            entity.Property(e => e.DDmoneCuo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDMoneCuo")
                .HasComment("String (3-20)");

            entity.Property(e => e.DMonCuota)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("dMonCuota");

            entity.Property(e => e.DVencCuo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dVencCuo");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDeNavigation)
                .WithMany(p => p.DeCuota)
                .HasForeignKey(d => d.IdDe)
                .HasConstraintName("FK_DE_CUOTAS_DE");
        });

        modelBuilder.Entity<DeDepartamento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("DE_DEPARTAMENTO", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeDepartamento)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DE_DEPARTAMENTO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeDistrito>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("DE_DISTRITO", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeDepartamento).HasColumnName("ID_DE_DEPARTAMENTO");

            entity.Property(e => e.IdDeDistrito)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DE_DISTRITO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeDocumento>(entity =>
        {
            entity.HasKey(e => e.IdDeDocumento);

            entity.ToTable("DE_DOCUMENTO", "dbo");

            entity.Property(e => e.IdDeDocumento).HasColumnName("ID_DE_DOCUMENTO");

            entity.Property(e => e.DeDocumento1).HasColumnName("DE_DOCUMENTO");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<DeError>(entity =>
        {
            entity.HasKey(e => e.IdDeError);

            entity.ToTable("DE_ERROR", "dbo");

            entity.Property(e => e.IdDeError).HasColumnName("ID_DE_ERROR");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Mensaje)
                .HasMaxLength(255)
                .HasColumnName("MENSAJE");

            entity.Property(e => e.Observación).HasColumnName("OBSERVACIÓN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SubCodigo).HasColumnName("SUB_CODIGO");
        });

        modelBuilder.Entity<DeEvento>(entity =>
        {
            entity.HasKey(e => e.IdEvento);

            entity.ToTable("DE_EVENTO", "dbo");

            entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

            entity.Property(e => e.DDvrec)
                .HasColumnName("dDVRec")
                .HasComment("Integer (1)");

            entity.Property(e => e.DEst)
                .HasColumnType("decimal(3, 0)")
                .HasColumnName("dEst");

            entity.Property(e => e.DFecEmi)
                .HasColumnType("datetime")
                .HasColumnName("dFecEmi");

            entity.Property(e => e.DFecFirma)
                .HasColumnType("datetime")
                .HasColumnName("dFecFirma");

            entity.Property(e => e.DFecRecep)
                .HasColumnType("datetime")
                .HasColumnName("dFecRecep");

            entity.Property(e => e.DNomRec)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNomRec")
                .HasComment("String (4-60)");

            entity.Property(e => e.DNumFin)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("dNumFin");

            entity.Property(e => e.DNumId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumID")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNumIn)
                .HasColumnType("decimal(7, 0)")
                .HasColumnName("dNumIn");

            entity.Property(e => e.DNumTim)
                .HasColumnName("dNumTim")
                .HasComment("Integer (8)");

            entity.Property(e => e.DPunExp)
                .HasColumnType("decimal(3, 0)")
                .HasColumnName("dPunExp");

            entity.Property(e => e.DRucRec)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRucRec")
                .HasComment("String (3-8) ");

            entity.Property(e => e.DTipIdrec)
                .HasColumnName("dTipIDRec")
                .HasComment("Integer (1)");

            entity.Property(e => e.DTotalGs)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotalGs");

            entity.Property(e => e.DVerFor)
                .HasColumnName("dVerFor")
                .HasComment("Integer (3)");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EventoStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EVENTO_STATUS")
                .IsFixedLength();

            entity.Property(e => e.ITiDe)
                .HasColumnName("iTiDE")
                .HasComment("Integer(1-2)");

            entity.Property(e => e.ITipConf)
                .HasColumnName("iTipConf")
                .HasComment("Integer (1) (1=Conformidad total del DTE, 2=Conformidad parcial del DTE)");

            entity.Property(e => e.ITipRec)
                .HasColumnName("iTipRec")
                .HasComment("Integer (1)");

            entity.Property(e => e.Id)
                .HasMaxLength(44)
                .IsUnicode(false)
                .HasComment("String (44) (identificador del DTE)");

            entity.Property(e => e.MOtEve)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("mOtEve")
                .HasComment("String (5-500)");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoEvento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_EVENTO")
                .IsFixedLength();
        });

        modelBuilder.Entity<DeFechaVencimientoPago>(entity =>
        {
            entity.HasKey(e => e.IdDeFechaVencimientoPago);

            entity.ToTable("DE_FECHA_VENCIMIENTO_PAGO", "dbo");

            entity.Property(e => e.IdDeFechaVencimientoPago).HasColumnName("ID_DE_FECHA_VENCIMIENTO_PAGO");

            entity.Property(e => e.DVencPag)
                .HasColumnType("datetime")
                .HasColumnName("dVencPag");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDeNavigation)
                .WithMany(p => p.DeFechaVencimientoPagos)
                .HasForeignKey(d => d.IdDe)
                .HasConstraintName("FK_DE_FECHA_VENCIMIENTO_PAGO_DE");
        });

        modelBuilder.Entity<DeItem>(entity =>
        {
            entity.HasKey(e => e.IdDeItem);

            entity.ToTable("DE_ITEM", "dbo");

            entity.Property(e => e.IdDeItem).HasColumnName("ID_DE_ITEM");

            entity.Property(e => e.CPaisOrig)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cPaisOrig")
                .HasComment("String (3) (\"DZA\", \"EGY\",\"LBY\",\"MAR\", \"SDN\", \"TUN\",\"ESH\",\"IOT\", \"BDI\",\"COM\", \"DJI\", \"ERI\", \"ETH\", \"ATF\",\"KEN\", \"MDG\",\"MWI\", \"MUS\", \"MYT\", \"MOZ\", \"REU\", \"RWA\", \"SYC\",\"SOM\",  \"SSD\", \"UGA\", \"TZA\",\"ZMB\", \"ZWE\",\"AGO\", \"CMR\",  \"CAF\", \"TCD\",   \"COG\", \"COD\", \"GNQ\", \"GAB\", \"STP\",  \"BWA\", \"LSO\", \"NAM\", \"ZAF\", \"SWZ\", \"BEN\", \"BFA\",  \"CPV\",\"CIV\", \"GMB\", \"GHA\", \"GIN\", \"GNB\", LBR\", \"MLI\", \"MRT\", \"NER\", “NGA”, “SHN”, “SEN”, “SLE”, “TGO”, “AIA”, “ATG”, “ABW”, “BHS”, “BRB”, “BES”, “VGB”, “CYM”, “CUB”, “CUW”, “DMA”, “DOM”, “GRD”, “GLP”, “HTI”, ”JAM”, “MTQ”, “MSR”, “PRI”, “BLM”, “KNA”, “LCA”, “MAF”, “VCT”, “SXM”, “TTO”, “TCA”, “VIR”, “BLZ”, “CRI”, “SLV”, “GTM”, “HND”, “MEX”, “NIC”, “PAN”, “ARG”, “BOL”, “BRA”, “CHL”, “COL”, “ECU”, “FLK”, “GUF”, “PRY”,”PER”, “SGS”, “SUR”, “URY”, “VEN”, “BMU”,”CAN”, “GRL”, “SPM”, “USA”, “ATA”, “KAZ”, “”KGZ”, “TJK”, “TKM”, “UZB”, “CHN”, “HKG”, “MAC”, “PRK”, “JPN”, “MNG”, “KOR”,”BRN”,”KHM”, “IDN”, “LAO”, “MYS”, “MMR”, “PHL”, “SGP”, “THA”, “TLS”,”VNM”, “AFG”, “BGD”, “BTN”, “IND”, “IRN”, “MDV”, “NPL”, “PAK”, “LKA”, “ARM”, ”AZE”, ”BHR”, ”CYP,”,”GEO”, “IRQ”, “ISR”, “JOR”, “KWT”, “LBN”, “OMN”, “QAT”, “SAU”,”PSE”,”SYR”, “TUR”, “ARE”, “YEM”, “BLR”, “BGR”, “CZE”,”HUN”,”POL”, “MDA”, “ROU”, “RUS”,”SVK”, “UKR”, “ALA”, “GGY”, “JEY”, “DNK”, “EST”, “FRO”, “FIN”, “ISL”, “IRL”,”IMN”, “LVA”, “LTU”, “NOR”, “SJM”, “SWE”, “GBR”,”ALB”, “AND”, ”BIH”, “HRV”, “GIB”, “GRC”, “VAT”, “ITA”, “MLT”, “MNE”, “PRT”, “SMR”, “SRB”, “SVN”, “ESP”, “MKD”, “AUT”, “BEL”, “FRAN”, “DEU”, “LIE”,”LUX”, “MCO”, “NLD”, “CHE”, “AUS”, “CXR”, “CCK”, “HMD”, “NZL”, “NFK”,”FJI”, “NCL”, “PNG”, “SLB”, “VUT”, “GUM”, “KIR”, “MHL”, “FSM”, “NRU”, “MNP”, “PLW”, “UMI”, “ASM”, “COK”, “PYF”, “NIU”, “PCN”, “WSM”, “TKL”, “TON”, “TUV”, “WLF”, “NN”)");

            entity.Property(e => e.CRelMerc)
                .HasColumnName("cRelMerc")
                .HasComment("Integer (1=Tolerancia de quiebra, 2=Tolerancia de merma)");

            entity.Property(e => e.CUniMed)
                .HasColumnName("cUniMed")
                .HasComment("Integer (1-5) (88=Metros, 2366=Costo por mil, 2329=Unidad Internacional, 110=Metros Cúbicos, 77=Unidad – UNI, 86=Gramos – g, 89=Litros – LT, 90=Miligramos – MG, 91=Centímetros – CM, 92=Centímetros cuadrados – CM2, 93=Centímetros cúbicos – CM3, 94=Pulgada, 96=Milímetros cuadrados – MM2, 79=Kilogramos s/metro cuadrado – kg/m2, 97=Año - AA, 98=Mes - ME, 99=Tonelada - TN, 100=Hora – Hs, 101=Minuto – Mi, 104=Determinación – DET, 103=Yardas – Ya, 108=Metros – MT, 109=Metros cuadrados – M2, 95=Milímetros -MM, 666=Segundo – Se, 102=Día – Di, 83=Kilogramos – kg, 88=Milímetros – ML, 625=Kilómetros – Km, 660=Metro Lineal – ml, 885=Unidad medidad Global  - GL, 891=Por Milaje – pm, 869=Hectáreas – ha, 569=Ración - ración)");

            entity.Property(e => e.DAntGloPreUniIt)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dAntGloPreUniIt");

            entity.Property(e => e.DAntPreUniIt)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dAntPreUniIt");

            entity.Property(e => e.DBasGravIva)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dBasGravIVA");

            entity.Property(e => e.DCanQuiMer)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("dCanQuiMer");

            entity.Property(e => e.DCantProSer)
                .HasColumnType("decimal(14, 4)")
                .HasColumnName("dCantProSer");

            entity.Property(e => e.DCdcanticipo)
                .HasMaxLength(44)
                .IsUnicode(false)
                .HasColumnName("dCDCAnticipo");

            entity.Property(e => e.DCodInt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dCodInt")
                .HasComment("String (1-20)");

            entity.Property(e => e.DDesAfecIva)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dDesAfecIVA")
                .HasComment("String (6-15) (\"Gravado IVA\",\"Exonerado (Art. 83- Ley 125/91)\", \"Exento\", \"Gravado parcial (Grav- Exento)\" )");

            entity.Property(e => e.DDesPaisOrig)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesPaisOrig")
                .HasComment("String (4-30)");

            entity.Property(e => e.DDesProSer)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("dDesProSer")
                .HasComment("String (1-120)");

            entity.Property(e => e.DDesRelMerc)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("dDesRelMerc")
                .HasComment("String (19-21) (\"Tolerancia de quiebra\", \"Tolerancia de merma\" )");

            entity.Property(e => e.DDesUniMed)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dDesUniMed")
                .HasComment("String (1-10) (“m” – metros, “CPM” – Costo por mil, “UI” – Unidad Internacional, “M3” – Metros cúbicos, “UNI” – Unidad, “g” – Gramos, “LT” – Litros, “MG” – Miligramos, “CM” – Centímetros, “CM2” – Centímetros cuadrados, “CM3” – Centímetros cúbicos, “PUL” – Pulgada, “MM2” – Milímetros cuadrados, “kg/m2” – Kilogramos s/ metro cuadrado, “AA” – Año, “ME” – Mes, “TN” – Tonelada, “Hs” – Hora, “Mi” – Minuto, “DET” – Determinación, “Ya” – Yardas, “MT” – Metros, “M2” – Metros cuadrados, “MM” – Milímetros, “Se” – Segundo, “Di” – Día, “kg” – Kilogramos, “ML” – Mililitros, “Km” – Kilómetros, “ml” – Metro lineal, “GL” – Unidad Medida Global, “pm” – Por Milaje, “ha” – Hectáreas, “ración” – Ración. ");

            entity.Property(e => e.DDescGloItem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dDescGloItem");

            entity.Property(e => e.DDescItem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dDescItem");

            entity.Property(e => e.DDirImp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirImp");

            entity.Property(e => e.DDncpE)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("dDncpE")
                .HasComment("String (\"{4}\")");

            entity.Property(e => e.DDncpG)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dDncpG")
                .HasComment("String (\"{8}\")");

            entity.Property(e => e.DGtin)
                .HasColumnName("dGtin")
                .HasComment("Integer (\"[0-9]{8,14}\")");

            entity.Property(e => e.DGtinPq)
                .HasColumnName("dGtinPq")
                .HasComment("Integer (\"[0-9]{8,14}\")");

            entity.Property(e => e.DInfItem)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("dInfItem")
                .HasComment("String (1-500)");

            entity.Property(e => e.DLiqIvaitem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dLiqIVAItem");

            entity.Property(e => e.DNcm)
                .HasColumnName("dNCM")
                .HasComment("Integer ([0-9]{6,8})");

            entity.Property(e => e.DNomImp)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dNomImp")
                .HasComment("String (60-4)");

            entity.Property(e => e.DNserie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dNSerie")
                .HasComment("String (1-10)");

            entity.Property(e => e.DNumFir)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dNumFir");

            entity.Property(e => e.DNumLote)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("dNumLote");

            entity.Property(e => e.DNumPedi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumPedi")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNumReg)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumReg");

            entity.Property(e => e.DNumRegEntCom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumRegEntCom");

            entity.Property(e => e.DNumSegui)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNumSegui")
                .HasComment("String (1-20)");

            entity.Property(e => e.DParAranc)
                .HasColumnName("dParAranc")
                .HasComment("Integer (\"[0-9]{4}\")");

            entity.Property(e => e.DPorQuiMer)
                .HasColumnType("decimal(11, 8)")
                .HasColumnName("dPorQuiMer")
                .HasComment("Decimal (11 total dígito, 8 fracción)");

            entity.Property(e => e.DPorcDesIt)
                .HasColumnType("decimal(11, 8)")
                .HasColumnName("dPorcDesIt");

            entity.Property(e => e.DPropIva)
                .HasColumnName("dPropIVA")
                .HasComment("Integer (3)");

            entity.Property(e => e.DPuniProSer)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dPUniProSer");

            entity.Property(e => e.DTasaIva)
                .HasColumnName("dTasaIVA")
                .HasComment("Integer (2)");

            entity.Property(e => e.DTiCamIt)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("dTiCamIt");

            entity.Property(e => e.DTotBruOpeItem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotBruOpeItem");

            entity.Property(e => e.DTotOpeGs)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotOpeGs");

            entity.Property(e => e.DTotOpeItem)
                .HasColumnType("decimal(23, 8)")
                .HasColumnName("dTotOpeItem");

            entity.Property(e => e.DVencMerc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dVencMerc")
                .HasComment("String ");

            entity.Property(e => e.IAfecIva)
                .HasColumnName("iAfecIVA")
                .HasComment("Integer (1=Gravado IVA, 2=Exonerado, 3=Exento, 4=Gravado Parcial)");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDeNavigation)
                .WithMany(p => p.DeItems)
                .HasForeignKey(d => d.IdDe)
                .HasConstraintName("FK_DE_ITEM_DE");
        });

        modelBuilder.Entity<DeLocalEntrega>(entity =>
        {
            entity.HasKey(e => e.IdDeLocalEntrega);

            entity.ToTable("DE_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.IdDeLocalEntrega).HasColumnName("ID_DE_LOCAL_ENTREGA");

            entity.Property(e => e.CCiuEnt).HasColumnName("cCiuEnt");

            entity.Property(e => e.CDepEnt)
                .HasColumnName("cDepEnt")
                .HasComment("Integer (1-2) (1=Capital, 2=Concenpción, 3=San Pedro, 4=San Pedro, 4=Cordillera, 5=Guaira, 6=Caaguazu, 7=Caazapa, 8=Itapua , 9=Misiones, 10=Paraguari, 11=Alto Parana, 12=Central, 13=Neembucu, 14=Amambay, 15=Pte Hayes, 16=Boqueron, 17=Alto Paraguay, 18=Canindeyu, 19=Chaco, 20=Nueva Asunción.");

            entity.Property(e => e.CDisEnt)
                .HasColumnName("cDisEnt")
                .HasComment("Integer (4)");

            entity.Property(e => e.DComp1Ent)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dComp1Ent");

            entity.Property(e => e.DComp2Ent)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dComp2Ent");

            entity.Property(e => e.DDesCiuEnt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesCiuEnt");

            entity.Property(e => e.DDesDepEnt)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("dDesDepEnt")
                .HasComment("String (6-16) (\"CAPITAL\" \"CONCEPCION\" \"SAN PEDRO\" \"CORDILLERA\" \"GUAIRA\" \"CAAGUAZU\" \"CAAZAPA\" \"ITAPUA\" \"MISIONES\" \"PARAGUARI\" \"ALTO PARANA\" \"CENTRAL\" \"NEEMBUCU\" \"AMAMBAY\" \"PTE. HAYES\" \"BOQUERON\" \"ALTO PARAGUAY\" \"CANINDEYU\" \"CHACO\" \"NUEVA ASUNCION\" )");

            entity.Property(e => e.DDesDisEnt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesDisEnt")
                .HasComment("String (1-30)");

            entity.Property(e => e.DDirLocEnt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dDirLocEnt");

            entity.Property(e => e.DNumCasEnt)
                .HasColumnName("dNumCasEnt")
                .HasComment("Integer (6)");

            entity.Property(e => e.DTelEnt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("dTelEnt")
                .HasComment("String (6-15)");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDeNavigation)
                .WithMany(p => p.DeLocalEntregas)
                .HasForeignKey(d => d.IdDe)
                .HasConstraintName("FK_DE_LOCAL_ENTREGA_DE");
        });

        modelBuilder.Entity<DeLote>(entity =>
        {
            entity.HasKey(e => e.IdDeLote);

            entity.ToTable("DE_LOTE", "dbo");

            entity.Property(e => e.IdDeLote).HasColumnName("ID_DE_LOTE");

            entity.Property(e => e.DCodRes)
                .HasColumnName("dCodRes")
                .HasComment("Integer (4)");

            entity.Property(e => e.DFecProc)
                .HasColumnType("datetime")
                .HasColumnName("dFecProc");

            entity.Property(e => e.DMsgRes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dMsgRes")
                .HasComment("String (1-255)");

            entity.Property(e => e.DProtConsLote)
                .HasColumnName("dProtConsLote")
                .HasComment("Integer (1-15) (Número de Lote)");

            entity.Property(e => e.DeLoteStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DE_LOTE_STATUS")
                .IsFixedLength();

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.NextTry)
                .HasColumnType("datetime")
                .HasColumnName("NEXT_TRY");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeLoteItem>(entity =>
        {
            entity.HasKey(e => e.IdDeLoteItem);

            entity.ToTable("DE_LOTE_ITEM", "dbo");

            entity.Property(e => e.IdDeLoteItem).HasColumnName("ID_DE_LOTE_ITEM");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.IdDeLote).HasColumnName("ID_DE_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeLoteResultado>(entity =>
        {
            entity.HasKey(e => e.IdDeLoteResultado);

            entity.ToTable("DE_LOTE_RESULTADO", "dbo");

            entity.Property(e => e.IdDeLoteResultado)
                .ValueGeneratedNever()
                .HasColumnName("ID_DE_LOTE_RESULTADO");

            entity.Property(e => e.DCodResLot)
                .HasColumnName("dCodResLot")
                .HasComment("Integer(4) (Código de resultado de procesamiento del lote)");

            entity.Property(e => e.DFecProc)
                .HasColumnType("datetime")
                .HasColumnName("dFecProc")
                .HasComment("DateTime (Fecha y hora del procesamiento del lote)");

            entity.Property(e => e.DMsgResLot)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dMsgResLot")
                .HasComment("String (1-255) (Mensaje del procesamiento del lote)");

            entity.Property(e => e.IdDeLote).HasColumnName("ID_DE_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DePagoContEntregaIni>(entity =>
        {
            entity.HasKey(e => e.IdDePagoContEntregaIni);

            entity.ToTable("DE_PAGO_CONT_ENTREGA_INI", "dbo");

            entity.Property(e => e.IdDePagoContEntregaIni).HasColumnName("ID_DE_PAGO_CONT_ENTREGA_INI");

            entity.Property(e => e.CMoneTiPag)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("cMoneTiPag")
                .HasComment("String (3) (“AED” – Dirham, “AFN” – Afghani, “ALL” – Lek, “AMD” – Dram, “ANG” - Netherlands Antillian Guilder, “AOA” – Kwanza, “ARS” - Argentine Peso, “AUD” - Australian Dollar, “AWG” - Aruban Guilder, “AZM” - Azerbaijanian Manat, “BAM” - Convertible Mark, “BBD” - Barbados Dollar, “BYN” - Belarusian Ruble, “BDT” – Taka, “BGN” - Bulgarian Lev, “BHD” - Bahraini Dinar, “BIF” - Burundi Franc, “BMD” - Bermudian Dollar (customarily: Bermuda Dollar), “BND” - Brunei Dollar, “BOB” – Boliviano, “BOV” – Mvdol, “BRL” – Brazilian Real, “BSD” - Bahamian Dollar, “BTN” – Ngultrum, “BWP” – Pula, “BYR” - Belarussian Ruble, “BZD” - Belize Dollar, “CAD” - Canadian Dollar, “CDF” - Franc Congolais, “CHF” - Swiss Franc, “CHE” - WIR Euro, “CHW” - WIR Franc, “CLP” - Chilean Peso, “CLF” - Unidad de Fomento, “CNY” - Yuan Renminbi, “COP” - Colombian Peso, “COU” – Unidad de Valor Real, “CRC” – Costa Rica Colon, “CUP” – Cuban Peso, “CUC” – Peso Convertible, “CVE” – Cape Verde Escudo, “CYP” - Cyprus Pound, “CZK” - Czech Koruna, “DJF” - Djibouti Franc, “DKK” - Danish Krone, “DOP” – Dominican Peso, “DZD” - Algerian Dinar, “EEK” – Kroon, “EGP” - Egyptian Pound, “ERN” – Nakfa, “ETB” - Ethopian Birr, “EUR” – Euro, “FJD” - Fiji Dollar, “FKP” - Falkland Islands Pound, “GBP” - Pound Sterling, “GEL” – Lari, “GHS” - Ghana Cedi, “GHC” – Cedi, “GIP” - Gibraltar Pound, “GMD” – Dalasi, “GNF” – Guinea Franc, “GTQ” – Quetzal, “GYD” - Guyana Dollar, “HKD” - Honk Kong Dollar, “HNL” – Lempira, “HKR” – Kuna, “HTG” – Gourde, “HUF” – Forint, “IDR” – Rupiah, “ILS” – New Israeli Shequel, “INR” - Indian Rupee, “IQD” - Iraqi Dinar, “IRR” - Iranian Rial, “ISK” - Iceland Krona, “JMD” - Jamaican Dollar, “JOD” – Jordianian Dinar, “JPY” – Yen, “KES” - Kenyan Shilling, “KGS” – Som, “KHR” – Riel, “KMF” - Comoro Franc, “KPW” - North Korean Won, “KRW” – Won, “KWD” - Kuwaiti Dinar, “KYD” - Cayman Islands Dollar, “KZT” – Tenge, “LAK” – Kip, “LBP” - Lebanese Pound, “LKR” - Sri Lanka Rupee, “LRD” - Liberian Dollar, “LSL” – Loti, “LTL” - Lithuanian Litas, “LVL” - Latvian Lats, “LYD” - Libyan Dinar, “MAD” - Morrocan Dirham, “MZN” - Mozambique Metical, “MDL” – Moldovan Leu, “MGF” - Malagasy Franc, “MKD” – Denar, “MGA” - Malagasy Ariary, “MMK” – Kyat, “MNT” – Tugrik, “MOP” – Pataca, “MRO” – Ouguiya, “MTL” - Maltese Lira, “MUR” - Mauritius Rupee, “XUA” - ADB Unit of Account, “MVR” – Rufiyaa, “MRU” – Ouguiya, “MWK” – Kwacha, “MXN” - Mexican Peso, “MXV” - Mexican Unidad de Inversión, “MYR” - Malaysian Ringgit, “MZM” – Metical, “NAD” - Namibia Dollar, “NGN” – Naira, “NIO” - Cordoba Oro, “NOK” -  Norwegian Krone, “NPR” - Nepalese Rupee,  “NZD” - New Zealand Dollar, “OMR” - Rial Omani, “PAB” -  Balboa, “PEN” - Nuevo Sol, “PGK” – Kina, “PHP” - Philippine Peso, “PKR” - Pakistan Rupee, “PLN” – Zloty, \"PYG\" – Guarani, “QAR” - Qatari Rial, “RON” - Romanian Leu, “ROL” – Leu, “RUB” - Russian Ruble, “RWF” - Rwanda Franc, “SAR” - Saudi Riyal, “RSD” - Serbian Dinar, “SBD” - Solomon Islands Dollar, “SCR” - Seychelles Rupee, “SDD” - Sudanese Dinar, “SDG” - Sudanese Pound, “SRD” - Surinam Dollar, “SEK” - Swedish Krona, “SGD” - Singapore Dollar, “SHP” - St. Helena Pound, “SIT” – Tolar, “SKK”- Slovak Koruna, “SLL” – Leone, “SOS” - Somali Shilling, \"SRG\" - Suriname Guilder, \"SSP\" - South Sudanese Pound, \"STD\"- Dobra, \"SVC\" - El Salvador Colon,  \"SYP\" - Syrian Pound, \"SZL\" – Lilangeni, \"THB\" – Baht, \"TJS\" – Somoni, \"TMM\" – Manat, \"TND\" - Tunisian Dinar, \"TRY\" - Turkish Lira, \"TMT\" - Turkmenistan New Manat, \"TOP\" - Pa&apos;anga, \"TRL\" - Turkish Lira, \"TTD\" - Trinidad and Tobago Dollar, \"TWD\" - New Taiwan Dollar, \"TZS\" - Tanzanian Shilling, \"UAH\" – Hryvnia, \"UGX\" - Uganda Shilling, \"USD\" - US Dollar, \"USN\" - US Dollar(Next day), \"UYU\" - Peso Uruguayo, ");

            entity.Property(e => e.DBcoEmi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dBcoEmi")
                .HasComment("String (4-20)");

            entity.Property(e => e.DCodAuOpe)
                .HasColumnName("dCodAuOpe")
                .HasComment("Integer (10)");

            entity.Property(e => e.DDesDenTarj)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDesDenTarj")
                .HasComment("String (4-20) (\"Visa\" \"Mastercard\" \"American Express\" \"Maestro\" \"Panal\" \"Cabal\" )");

            entity.Property(e => e.DDesTiPag)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dDesTiPag")
                .HasComment("String (4-30) (\"Efectivo\" \"Cheque\", \"Tarjeta de crédito\" \"Tarjeta de débito\" \"Transferencia\" \"Giro\" \"Billetera electrónica\" \"Tarjeta empresarial\" \"Vale\" \"Retención\" \"Pago por anticipo\" \"Valor fiscal\" \"Valor comercial\" \"Compensación\" \"Permuta\" \"Pago bancario\" \"Pago Móvil\" \"Donación\" \"Promoción\" \"Consumo Interno\" \"Pago Electrónico\")");

            entity.Property(e => e.DDmoneTiPag)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dDMoneTiPag")
                .HasComment("String (3-20)");

            entity.Property(e => e.DDvproTar)
                .HasColumnName("dDVProTar")
                .HasComment("Integer (1)");

            entity.Property(e => e.DMonTiPag)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("dMonTiPag");

            entity.Property(e => e.DNomTit)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dNomTit")
                .HasComment("String (4-30)");

            entity.Property(e => e.DNumCheq)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dNumCheq");

            entity.Property(e => e.DNumTarj)
                .HasColumnName("dNumTarj")
                .HasComment("Integer (4)");

            entity.Property(e => e.DRsproTar)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("dRSProTar")
                .HasComment("String (4-60)");

            entity.Property(e => e.DRucproTar)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("dRUCProTar")
                .HasComment("String (3-8)");

            entity.Property(e => e.DTiCamTiPag)
                .HasColumnType("decimal(9, 4)")
                .HasColumnName("dTiCamTiPag");

            entity.Property(e => e.IDenTarj)
                .HasColumnName("iDenTarj")
                .HasComment("Integer (1) (1=Visa, 2=MasterCard, 3=American Express, 4=Maestro, 5=Panal, 6=Cabal, 99=Otro)");

            entity.Property(e => e.IForProPa)
                .HasColumnName("iForProPa")
                .HasComment("Short (1) (1=Pos, 2=Pago Electrónico, 9=Otro)");

            entity.Property(e => e.ITiPago)
                .HasColumnName("iTiPago")
                .HasComment("Integer (1-2) (1=Efectivo, 2=Cheque, 3=Tarjeta de crédito, 4=Tarjeta de débito, 5=Transferencia, 6=Giro, 7=Billetera electrónica, 8=Tarjeta empresarial, 9=Vale, 10=Retención, 11=Pago por anticipo, 12=Valor fiscal, 13=Valor Comercial, 14=Compensación, 15=Permuta, 16=Pago Bancario, 17=Pago Móvil, 18=Donanción, 19=Promoción, 20=Consumo Interno, 21=Pago Electronico, 99=Otro)");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeResultado>(entity =>
        {
            entity.HasKey(e => e.IdDeResultado);

            entity.ToTable("DE_RESULTADO", "dbo");

            entity.Property(e => e.IdDeResultado)
                .ValueGeneratedNever()
                .HasColumnName("ID_DE_RESULTADO");

            entity.Property(e => e.DDigVal)
                .HasColumnName("dDigVal")
                .HasComment("String (28)");

            entity.Property(e => e.DEstRes)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dEstRes")
                .HasComment("String (8-30) Estado del resultado (“Aprobado” “Aprobado con observación” “Rechazado”)");

            entity.Property(e => e.DFecProc)
                .HasColumnType("datetime")
                .HasColumnName("dFecProc")
                .HasComment("DateTime (Fecha y hora del procesamiento)");

            entity.Property(e => e.DProtAut)
                .HasColumnName("dProtAut")
                .HasComment("Integer (10) Número de Transacción");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Id)
                .HasMaxLength(44)
                .IsUnicode(false)
                .HasComment("Integer (44) (CDC del DE Procesado)");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeResultadoItem>(entity =>
        {
            entity.HasKey(e => e.IdDeResultadoItem);

            entity.ToTable("DE_RESULTADO_ITEM", "dbo");

            entity.Property(e => e.IdDeResultadoItem)
                .ValueGeneratedNever()
                .HasColumnName("ID_DE_RESULTADO_ITEM");

            entity.Property(e => e.DCodRes)
                .HasColumnName("dCodRes")
                .HasComment("Integer (4) (Código de resultado del procesamiento)");

            entity.Property(e => e.DMsgRes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dMsgRes")
                .HasComment("String (255) (Mensaje de resultado del procesamiento)");

            entity.Property(e => e.IdDeResultado).HasColumnName("ID_DE_RESULTADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DeVehiculoTransp>(entity =>
        {
            entity.HasKey(e => e.IdDeVehiculoTransp);

            entity.ToTable("DE_VEHICULO_TRANSP", "dbo");

            entity.Property(e => e.IdDeVehiculoTransp).HasColumnName("ID_DE_VEHICULO_TRANSP");

            entity.Property(e => e.DAdicVeh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dAdicVeh")
                .HasComment("String (1-20)");

            entity.Property(e => e.DMarVeh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dMarVeh")
                .HasComment("String (1-10)");

            entity.Property(e => e.DNroIdveh)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("dNroIDVeh")
                .HasComment("String (1-20)");

            entity.Property(e => e.DNroMatVeh)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("dNroMatVeh");

            entity.Property(e => e.DNroVuelo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("dNroVuelo");

            entity.Property(e => e.DTiVehTras)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dTiVehTras")
                .HasComment("String (4-10)");

            entity.Property(e => e.DTipIdenVeh).HasColumnName("dTipIdenVeh");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<DemoraProductoImp>(entity =>
        {
            entity.HasKey(e => e.IdDemoraProductoImp);

            entity.ToTable("DEMORA_PRODUCTO_IMP", "dbo");

            entity.Property(e => e.IdDemoraProductoImp).HasColumnName("ID_DEMORA_PRODUCTO_IMP");

            entity.Property(e => e.DemoraDias).HasColumnName("DEMORA_DIAS");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.DemoraProductoImps)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEMORA_PRODUCTO_IMP_PRODUCTO");
        });

        modelBuilder.Entity<DemoraTrasbordo>(entity =>
        {
            entity.HasKey(e => e.IdDemoraTrasbordo);

            entity.ToTable("DEMORA_TRASBORDO", "dbo");

            entity.Property(e => e.IdDemoraTrasbordo).HasColumnName("ID_DEMORA_TRASBORDO");

            entity.Property(e => e.Dias).HasColumnName("DIAS");

            entity.Property(e => e.IdPuerto).HasColumnName("ID_PUERTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPuertoNavigation)
                .WithMany(p => p.DemoraTrasbordos)
                .HasForeignKey(d => d.IdPuerto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEMORA_TRASBORDO_PUERTO");
        });

        modelBuilder.Entity<Departamento>(entity =>
        {
            entity.HasKey(e => e.IdDepartamento)
                .HasName("PK_DEPARTAMENTOS");

            entity.ToTable("DEPARTAMENTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_DEPARTAMENTO")
                .IsUnique();

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Gerente).HasColumnName("GERENTE");

            entity.Property(e => e.Jefe).HasColumnName("JEFE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAprobacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_APROBACION");

            entity.HasOne(d => d.GerenteNavigation)
                .WithMany(p => p.DepartamentoGerenteNavigations)
                .HasForeignKey(d => d.Gerente)
                .HasConstraintName("FK_DEPARTAMENTO_FUNC_GERENTE");

            entity.HasOne(d => d.JefeNavigation)
                .WithMany(p => p.DepartamentoJefeNavigations)
                .HasForeignKey(d => d.Jefe)
                .HasConstraintName("FK_DEPARTAMENTO_FUNC_JEFE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Departamentos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPARTAMENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Deposito>(entity =>
        {
            entity.HasKey(e => e.IdDeposito);

            entity.ToTable("DEPOSITO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_DEPOSITO")
                .IsUnique();

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Capacidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAPACIDAD");

            entity.Property(e => e.CapacidadEstatica)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAPACIDAD_ESTATICA");

            entity.Property(e => e.CatastroMetas)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CATASTRO_METAS");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.CodMonsanto).HasColumnName("COD_MONSANTO");

            entity.Property(e => e.Codigo)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ComisionGranos).HasColumnName("COMISION_GRANOS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EnvioPedido)
                .HasColumnName("ENVIO_PEDIDO")
                .HasComment("0 = En Notas de Envio no exige nro de pedido cuando es a este deposito, 1 = Exige nro de pedido.");

            entity.Property(e => e.EstaticaSilo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ESTATICA_SILO");

            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Metas)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("METAS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable)
                .HasColumnName("RESPONSABLE")
                .HasComment("ID_FUNCIONARIO");

            entity.Property(e => e.StockMinimo)
                .HasColumnName("STOCK_MINIMO")
                .HasComment("0 = No esta habilitado para Stock Minimo. 1 = Habilitado para Stock Minimo.");

            entity.Property(e => e.Supervisor).HasColumnName("SUPERVISOR");

            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 = Deposito de la empresa, 1 = Deposito de terceros.");

            entity.Property(e => e.TipoProcesado).HasColumnName("TIPO_PROCESADO");

            entity.Property(e => e.TipoProduccion)
                .HasColumnName("TIPO_PRODUCCION")
                .HasComment("0 = No es un deposito de porduccion, 1 = Deposito de Produccion.");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Depositos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPOSITO_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Depositos)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPOSITO_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Depositos)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_DEPOSITO_CLIENTE");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.DepositoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPOSITO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DepositoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPOSITO_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.Depositos)
                .HasForeignKey(d => d.Responsable)
                .HasConstraintName("FK_DEPOSITO_FUNCIONARIO");
        });

        modelBuilder.Entity<DepositoUbicacion>(entity =>
        {
            entity.HasKey(e => e.IdDepositoUbicacion);

            entity.ToTable("DEPOSITO_UBICACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdDeposito, e.X, e.Y, e.Z, e.RegStatus }, "UK_DEPOSITO_UBICACION_1")
                .IsUnique();

            entity.Property(e => e.IdDepositoUbicacion).HasColumnName("ID_DEPOSITO_UBICACION");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Libre)
                .HasColumnName("LIBRE")
                .HasComment("Indica si el lugar esta libre o no. 0 = Libre, 1 = Ocupado.");

            entity.Property(e => e.Orden)
                .HasColumnName("ORDEN")
                .HasDefaultValueSql("((1))")
                .HasComment("Indica el nro de orden del lugar. Con el objetivo de listar por orden.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.DepositoUbicacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPOSITO_UBICACION_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.DepositoUbicacions)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEPOSITO_UBICACION_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.DepositoUbicacions)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_DEPOSITO_UBICACION_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.DepositoUbicacions)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_DEPOSITO_UBICACION_PRODUCTO");
        });

        modelBuilder.Entity<DesarrollistaVen>(entity =>
        {
            entity.HasKey(e => e.IdDesarrollistaVen);

            entity.ToTable("DESARROLLISTA_VEN", "dbo");

            entity.Property(e => e.IdDesarrollistaVen).HasColumnName("ID_DESARROLLISTA_VEN");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<Desarrollistum>(entity =>
        {
            entity.HasKey(e => e.IdDesarrollista);

            entity.ToTable("DESARROLLISTA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.CodigoDesarrollista }, "UK_DESARROLLISTA")
                .IsUnique();

            entity.Property(e => e.IdDesarrollista)
                .ValueGeneratedNever()
                .HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.ActivoCota).HasColumnName("ACTIVO_COTA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoDesarrollista).HasColumnName("CODIGO_DESARROLLISTA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoComision).HasColumnName("TIPO_COMISION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Desarrollista)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESARROLLISTA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Desarrollista)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESARROLLISTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DespachoComex>(entity =>
        {
            entity.HasKey(e => e.IdDespachoComex);

            entity.ToTable("DESPACHO_COMEX", "dbo");

            entity.Property(e => e.IdDespachoComex).HasColumnName("ID_DESPACHO_COMEX");

            entity.Property(e => e.CarpetaDoc).HasColumnName("CARPETA_DOC");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaEntregaDoc)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA_DOC");

            entity.Property(e => e.FechaFiniquito)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FINIQUITO");

            entity.Property(e => e.FechaInicioPd)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_PD");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.NroDespacho)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("NRO_DESPACHO");

            entity.Property(e => e.NroProformaDespacho)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_PROFORMA_DESPACHO");

            entity.Property(e => e.OrdenPago).HasColumnName("ORDEN_PAGO");

            entity.Property(e => e.PreDeclaracion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PRE_DECLARACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ValorProfDespacho)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_PROF_DESPACHO");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.DespachoComices)
                .HasForeignKey(d => d.IdCompraExterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DESPACHO_COMEX_COMPRA_EXTERIOR");
        });

        modelBuilder.Entity<DevolucionAdelCli>(entity =>
        {
            entity.HasKey(e => e.IdDevolucionAdelCli);

            entity.ToTable("DEVOLUCION_ADEL_CLI", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_DEVOLUCION_ADEL_CLI")
                .IsUnique();

            entity.Property(e => e.IdDevolucionAdelCli).HasColumnName("ID_DEVOLUCION_ADEL_CLI");

            entity.Property(e => e.AdelantoSaldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO");

            entity.Property(e => e.ChequeFavorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_FAVORECIDO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAdelanto)
                .HasColumnName("ID_ADELANTO")
                .HasComment("ID_ADELANTO_CLIENTE o ID_ADELANTO_CONTRATO");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoAdelanto)
                .HasColumnName("TIPO_ADELANTO")
                .HasComment("0:ADELANTO DE CLIENTE, 1:ADELANTO DE CONTRATO");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.DevolucionAdelClis)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_CLI_EMPRESA");

            entity.HasOne(d => d.IdAdelantoNavigation)
                .WithMany(p => p.DevolucionAdelClis)
                .HasForeignKey(d => d.IdAdelanto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_CLI_ADELANTO_CLIENTE");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.DevolucionAdelClis)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_DEVOLUCION_ADEL_CLI_CHEQUERA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.DevolucionAdelClis)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_CLI_CUENTA_CORRIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DevolucionAdelClis)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_CLI_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DevolucionAdelPro>(entity =>
        {
            entity.HasKey(e => e.IdDevolucionAdelPro);

            entity.ToTable("DEVOLUCION_ADEL_PRO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_DEVOLUCION_ADEL_PRO")
                .IsUnique();

            entity.Property(e => e.IdDevolucionAdelPro).HasColumnName("ID_DEVOLUCION_ADEL_PRO");

            entity.Property(e => e.AdelantoSaldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO");

            entity.Property(e => e.AdelantoSaldoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO_GUARANI");

            entity.Property(e => e.ChequeFavorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_FAVORECIDO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAdelantoProveedor).HasColumnName("ID_ADELANTO_PROVEEDOR");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.DevolucionAdelPros)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_PRO_EMPRESA");

            entity.HasOne(d => d.IdAdelantoProveedorNavigation)
                .WithMany(p => p.DevolucionAdelPros)
                .HasForeignKey(d => d.IdAdelantoProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_PRO_ADELANTO_PROVEEDOR");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.DevolucionAdelPros)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_PRO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DevolucionAdelPros)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DEVOLUCION_ADEL_PRO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DiarioMe>(entity =>
        {
            entity.HasKey(e => e.IdDiarioMe);

            entity.ToTable("DIARIO_ME", "dbo");

            entity.HasIndex(e => new { e.Documento, e.Serie }, "IDX_DIARIO_ME_DOCUMENTO_SERIE");

            entity.HasIndex(e => new { e.Fecha, e.Lanzamiento, e.Tipo, e.Empresa }, "IDX_Diario_Moneda_Extranjera");

            entity.HasIndex(e => new { e.IdTabla, e.Serie, e.IdProcedure }, "IDX_INTEGRALIZA_FACTURA_VENTA");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_DIARIO_ME")
                .IsUnique();

            entity.Property(e => e.IdDiarioMe).HasColumnName("ID_DIARIO_ME");

            entity.Property(e => e.Asiento).HasColumnName("ASIENTO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Integralizacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INTEGRALIZACION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("ID_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.DiarioMes)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_DIARIO_ME_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DiarioMes)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_DIARIO_ME_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DiarioMeDetalle>(entity =>
        {
            entity.HasKey(e => e.IdDiarioMeDetalle);

            entity.ToTable("DIARIO_ME_DETALLE", "dbo");

            entity.HasIndex(e => new { e.IdPlanCuenta, e.IdCliente, e.IdProveedor, e.CentroCosto, e.TipoAsiento }, "IDX_DIARIO_ME_DETALLE_INF");

            entity.HasIndex(e => e.IdDiarioMe, "IDX_DIARIO_ME_DETALLE_PLAN_CUENTA");

            entity.HasIndex(e => new { e.TipoAsiento, e.Credito, e.RegStatus }, "IDX_PRELIMINAR_MAYOR_CREDITO");

            entity.HasIndex(e => new { e.TipoAsiento, e.Debito, e.RegStatus }, "IDX_PRELIMINAR_MAYOR_DEBITO");

            entity.Property(e => e.IdDiarioMeDetalle).HasColumnName("ID_DIARIO_ME_DETALLE");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.Credito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.Despacho)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDiarioMe).HasColumnName("ID_DIARIO_ME");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdRevaluoItem).HasColumnName("ID_REVALUO_ITEM");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoAsiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_ASIENTO")
                .IsFixedLength();

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.CentroCostoNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.CentroCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_CULTIVO");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_DEPARTAMENTO");

            entity.HasOne(d => d.IdDiarioMeNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdDiarioMe)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_DIARIO_ME");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_FUNCIONARIO");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_PLAN_CUENTA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_PROVEEDOR");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_VENDEDOR");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.DiarioMeDetalles)
                .HasForeignKey(d => d.Unidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DiarioMeDetalleHist>(entity =>
        {
            entity.HasKey(e => new { e.IdDiarioMeDetalle, e.IdBalanceVersion });

            entity.ToTable("DIARIO_ME_DETALLE_HIST", "dbo");

            entity.Property(e => e.IdDiarioMeDetalle).HasColumnName("ID_DIARIO_ME_DETALLE");

            entity.Property(e => e.IdBalanceVersion).HasColumnName("ID_BALANCE_VERSION");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.Credito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.Despacho)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDiarioMe).HasColumnName("ID_DIARIO_ME");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoAsiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_ASIENTO")
                .IsFixedLength();

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.Id)
                .WithMany(p => p.DiarioMeDetalleHists)
                .HasForeignKey(d => new { d.IdDiarioMe, d.IdBalanceVersion })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ME_DETALLE_HIST_ID_DIARIO_ME");
        });

        modelBuilder.Entity<DiarioMeHist>(entity =>
        {
            entity.HasKey(e => new { e.IdDiarioMe, e.IdBalanceVersion });

            entity.ToTable("DIARIO_ME_HIST", "dbo");

            entity.Property(e => e.IdDiarioMe).HasColumnName("ID_DIARIO_ME");

            entity.Property(e => e.IdBalanceVersion).HasColumnName("ID_BALANCE_VERSION");

            entity.Property(e => e.Asiento).HasColumnName("ASIENTO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Integralizacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INTEGRALIZACION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdBalanceVersionNavigation)
                .WithMany(p => p.DiarioMeHists)
                .HasForeignKey(d => d.IdBalanceVersion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ME_HIST_ID_BALANCE_VERSION");
        });

        modelBuilder.Entity<DiarioMl>(entity =>
        {
            entity.HasKey(e => e.IdDiarioMl);

            entity.ToTable("DIARIO_ML", "dbo");

            entity.HasIndex(e => new { e.IdTabla, e.Documento, e.Serie, e.IdProcedure }, "IDX_COSTO_FACTURA_VENTA");

            entity.HasIndex(e => new { e.IdTabla, e.Serie, e.IdProcedure }, "IDX_COSTO_FACT_EXPORT");

            entity.HasIndex(e => new { e.Fecha, e.Lanzamiento, e.Tipo, e.Empresa }, "IDX_Diario_Moneda_Local");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_DIARIO_ML")
                .IsUnique();

            entity.Property(e => e.IdDiarioMl).HasColumnName("ID_DIARIO_ML");

            entity.Property(e => e.Asiento).HasColumnName("ASIENTO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Integralizacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INTEGRALIZACION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("ID_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.DiarioMls)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_DIARIO_ML_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DiarioMls)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_EMPRESA_UNIDAD");

            entity.HasOne(d => d.TipoNavigation)
                .WithMany(p => p.DiarioMls)
                .HasForeignKey(d => d.Tipo)
                .HasConstraintName("FK_DIARIO_ML_TIPO_ASIENTO");
        });

        modelBuilder.Entity<DiarioMlDetalle>(entity =>
        {
            entity.HasKey(e => e.IdDiarioMlDetalle);

            entity.ToTable("DIARIO_ML_DETALLE", "dbo");

            entity.HasIndex(e => e.IdDiarioMl, "IDX_DIARIO_ML_DETALLE_ID_DIARIO_ML_includes");

            entity.HasIndex(e => e.RegStatus, "IDX_PRELIMINAR");

            entity.HasIndex(e => e.IdPlanCuenta, "IDX_PRELIMINAR_2");

            entity.Property(e => e.IdDiarioMlDetalle).HasColumnName("ID_DIARIO_ML_DETALLE");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.Credito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.Despacho)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDepartamento)
                .HasColumnName("ID_DEPARTAMENTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdDiarioMl).HasColumnName("ID_DIARIO_ML");

            entity.Property(e => e.IdFuncionario)
                .HasColumnName("ID_FUNCIONARIO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdRevaluoItem).HasColumnName("ID_REVALUO_ITEM");

            entity.Property(e => e.IdVehiculo)
                .HasColumnName("ID_VEHICULO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdVendedor)
                .HasColumnName("ID_VENDEDOR")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoAsiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_ASIENTO")
                .IsFixedLength();

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.CentroCostoNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.CentroCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_CULTIVO");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_DEPARTAMENTO");

            entity.HasOne(d => d.IdDiarioMlNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdDiarioMl)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_DIARIO_ML");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_FUNCIONARIO");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_PLAN_CUENTA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_PROVEEDOR");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_VENDEDOR");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.DiarioMlDetalles)
                .HasForeignKey(d => d.Unidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DiarioMlDetalleHist>(entity =>
        {
            entity.HasKey(e => new { e.IdDiarioMlDetalle, e.IdBalanceVersion });

            entity.ToTable("DIARIO_ML_DETALLE_HIST", "dbo");

            entity.Property(e => e.IdDiarioMlDetalle).HasColumnName("ID_DIARIO_ML_DETALLE");

            entity.Property(e => e.IdBalanceVersion).HasColumnName("ID_BALANCE_VERSION");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.Credito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.Despacho)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDiarioMl).HasColumnName("ID_DIARIO_ML");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoAsiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_ASIENTO")
                .IsFixedLength();

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.Id)
                .WithMany(p => p.DiarioMlDetalleHists)
                .HasForeignKey(d => new { d.IdDiarioMl, d.IdBalanceVersion })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_DETALLE_HIST_ID_DIARIO_ML");
        });

        modelBuilder.Entity<DiarioMlHist>(entity =>
        {
            entity.HasKey(e => new { e.IdDiarioMl, e.IdBalanceVersion });

            entity.ToTable("DIARIO_ML_HIST", "dbo");

            entity.Property(e => e.IdDiarioMl).HasColumnName("ID_DIARIO_ML");

            entity.Property(e => e.IdBalanceVersion).HasColumnName("ID_BALANCE_VERSION");

            entity.Property(e => e.Asiento).HasColumnName("ASIENTO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Integralizacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INTEGRALIZACION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdBalanceVersionNavigation)
                .WithMany(p => p.DiarioMlHists)
                .HasForeignKey(d => d.IdBalanceVersion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DIARIO_ML_HIST_ID_BALANCE_VERSION");
        });

        modelBuilder.Entity<Documento>(entity =>
        {
            entity.HasKey(e => e.IdDocumentoPk);

            entity.ToTable("DOCUMENTO", "dbo");

            entity.HasIndex(e => new { e.IdDocumento, e.Empresa }, "UK_DOCUMENTO")
                .IsUnique();

            entity.Property(e => e.IdDocumentoPk).HasColumnName("ID_DOCUMENTO_PK");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.Interno)
                .HasColumnName("INTERNO")
                .HasComment("Uso exclusivo del dpto. de informatica, para diferenciar los documentos de autofactura y que los usuarios finales no tengan acceso");

            entity.Property(e => e.Propio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROPIO")
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasComment("El campo indica si el documento es propio de la empresa o no. \r\nPor defecto es 'S'.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoImpuesto)
                .HasColumnName("TIPO_IMPUESTO")
                .HasComment("Exento = 0, Incluido = 1, Destacado = 2, Retencion = 3, No Aplicable = 9");

            entity.Property(e => e.TipoTimbrado)
                .HasColumnName("TIPO_TIMBRADO")
                .HasComment("AUTOFACTURA=0, TIMBRADO_CREDITO=1, TIMBRADO_DEBITO = 2,\r\nTIMBRADO_FACTURA = 3, NO_NECESITA = 4; cualquier otro valor guarda 4.");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Documentos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Documentos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DocumentoEstado>(entity =>
        {
            entity.HasKey(e => e.IdDocumentoEstado);

            entity.ToTable("DOCUMENTO_ESTADO", "dbo");

            entity.Property(e => e.IdDocumentoEstado)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_DOCUMENTO_ESTADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDocumentoPk).HasColumnName("ID_DOCUMENTO_PK");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.NroDocumento)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NRO_DOCUMENTO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.DocumentoEstados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.DocumentoEstados)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_CLIENTE");

            entity.HasOne(d => d.IdDocumentoEstadoNavigation)
                .WithOne(p => p.DocumentoEstadoIdDocumentoEstadoNavigation)
                .HasForeignKey<DocumentoEstado>(d => d.IdDocumentoEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_DOCUMENTO1");

            entity.HasOne(d => d.IdDocumentoPkNavigation)
                .WithMany(p => p.DocumentoEstadoIdDocumentoPkNavigations)
                .HasForeignKey(d => d.IdDocumentoPk)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_DOCUMENTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.DocumentoEstados)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_TABLA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.DocumentoEstados)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DocumentoEstados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_ESTADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<DocumentoRastreo>(entity =>
        {
            entity.HasKey(e => e.IdDocumentoRastreo);

            entity.ToTable("DOCUMENTO_RASTREO", "dbo");

            entity.Property(e => e.IdDocumentoRastreo).HasColumnName("ID_DOCUMENTO_RASTREO");

            entity.Property(e => e.ChoferDestinatario).HasColumnName("CHOFER_DESTINATARIO");

            entity.Property(e => e.ChoferRemitente).HasColumnName("CHOFER_REMITENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FuncionarioDestinatario).HasColumnName("FUNCIONARIO_DESTINATARIO");

            entity.Property(e => e.FuncionarioRemitente).HasColumnName("FUNCIONARIO_REMITENTE");

            entity.Property(e => e.IdUsuario)
                .HasColumnName("ID_USUARIO")
                .HasComment("id_usuario creador");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoDestinatario)
                .HasColumnName("TIPO_DESTINATARIO")
                .HasComment("0 - TRANSPORTADORA 1 - CHOFER 2 - FUNCIONARIO");

            entity.Property(e => e.TipoRemitente)
                .HasColumnName("TIPO_REMITENTE")
                .HasComment("0 - TRANSPORTADORA 1 - CHOFER 2 - FUNCIONARIO");

            entity.Property(e => e.TransportadoraDestinatario).HasColumnName("TRANSPORTADORA_DESTINATARIO");

            entity.Property(e => e.TransportadoraRemitente).HasColumnName("TRANSPORTADORA_REMITENTE");

            entity.HasOne(d => d.ChoferDestinatarioNavigation)
                .WithMany(p => p.DocumentoRastreoChoferDestinatarioNavigations)
                .HasForeignKey(d => d.ChoferDestinatario)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_CHOFER1");

            entity.HasOne(d => d.ChoferRemitenteNavigation)
                .WithMany(p => p.DocumentoRastreoChoferRemitenteNavigations)
                .HasForeignKey(d => d.ChoferRemitente)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_CHOFER");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.DocumentoRastreos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_EMPRESA");

            entity.HasOne(d => d.FuncionarioDestinatarioNavigation)
                .WithMany(p => p.DocumentoRastreoFuncionarioDestinatarioNavigations)
                .HasForeignKey(d => d.FuncionarioDestinatario)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_FUNCIONARIO1");

            entity.HasOne(d => d.FuncionarioRemitenteNavigation)
                .WithMany(p => p.DocumentoRastreoFuncionarioRemitenteNavigations)
                .HasForeignKey(d => d.FuncionarioRemitente)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.DocumentoRastreos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.DocumentoRastreos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_DOCUMENTO_RASTREO");

            entity.HasOne(d => d.TransportadoraDestinatarioNavigation)
                .WithMany(p => p.DocumentoRastreoTransportadoraDestinatarioNavigations)
                .HasForeignKey(d => d.TransportadoraDestinatario)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_TRANSPORTADORA1");

            entity.HasOne(d => d.TransportadoraRemitenteNavigation)
                .WithMany(p => p.DocumentoRastreoTransportadoraRemitenteNavigations)
                .HasForeignKey(d => d.TransportadoraRemitente)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_TRANSPORTADORA");
        });

        modelBuilder.Entity<DocumentoRastreoDet>(entity =>
        {
            entity.HasKey(e => e.IdDocumentoRastreoDet);

            entity.ToTable("DOCUMENTO_RASTREO_DET", "dbo");

            entity.Property(e => e.IdDocumentoRastreoDet).HasColumnName("ID_DOCUMENTO_RASTREO_DET");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = PENDIENTE 1 = ARCHIVADO 2 = EXTRAVIADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Firmado)
                .HasColumnName("FIRMADO")
                .HasComment("0 = NO FIRMADO 1 = FIRMADO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDocumentoEstado).HasColumnName("ID_DOCUMENTO_ESTADO");

            entity.Property(e => e.IdDocumentoRastreo).HasColumnName("ID_DOCUMENTO_RASTREO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.NroDocumento)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NRO_DOCUMENTO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.DocumentoRastreoDets)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_DET_CLIENTE");

            entity.HasOne(d => d.IdDocumentoEstadoNavigation)
                .WithMany(p => p.DocumentoRastreoDets)
                .HasForeignKey(d => d.IdDocumentoEstado)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_DET_DOCUMENTO_ESTADO");

            entity.HasOne(d => d.IdDocumentoRastreoNavigation)
                .WithMany(p => p.DocumentoRastreoDets)
                .HasForeignKey(d => d.IdDocumentoRastreo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_DET_DOCUMENTO_RASTREO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.DocumentoRastreoDets)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_DET_TABLA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.DocumentoRastreoDets)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_DOCUMENTO_RASTREO_DET_TIMBRADO");
        });

        modelBuilder.Entity<Empresa>(entity =>
        {
            entity.HasKey(e => e.IdEmpresa);

            entity.ToTable("EMPRESA", "dbo");

            entity.Property(e => e.IdEmpresa)
                .ValueGeneratedNever()
                .HasColumnName("ID_EMPRESA");

            entity.Property(e => e.ActivaAutPago)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ACTIVA_AUT_PAGO")
                .HasComment("1010 - 1er digito Gastos, 2do Compra Local, 3ro Compra Exterior,4to Factura Exportacion - 0 no genera - 1 genera");

            entity.Property(e => e.ActivaCrtNegativo).HasColumnName("ACTIVA_CRT_NEGATIVO");

            entity.Property(e => e.ActivaFcc).HasColumnName("ACTIVA_FCC");

            entity.Property(e => e.ActivaLcc).HasColumnName("ACTIVA_LCC");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BloqueoRetencion)
                .HasColumnType("datetime")
                .HasColumnName("BLOQUEO_RETENCION");

            entity.Property(e => e.ComprobanteSalida).HasColumnName("COMPROBANTE_SALIDA");

            entity.Property(e => e.ContabDespachosCampo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTAB_DESPACHOS_CAMPO");

            entity.Property(e => e.ControlStockUbicacion).HasColumnName("CONTROL_STOCK_UBICACION");

            entity.Property(e => e.Correo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CORREO");

            entity.Property(e => e.CostoOperacionalEmpresa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_OPERACIONAL_EMPRESA");

            entity.Property(e => e.CreditoActLc)
                .HasColumnType("datetime")
                .HasColumnName("CREDITO_ACT_LC");

            entity.Property(e => e.CreditoReciboFacturas).HasColumnName("CREDITO_RECIBO_FACTURAS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Direccion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Explotacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EXPLOTACION");

            entity.Property(e => e.FacturacionBloqueo).HasColumnName("FACTURACION_BLOQUEO");

            entity.Property(e => e.FacturacionCredito).HasColumnName("FACTURACION_CREDITO");

            entity.Property(e => e.FacturacionRemision).HasColumnName("FACTURACION_REMISION");

            entity.Property(e => e.FacturacionStock).HasColumnName("FACTURACION_STOCK");

            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.GranosLiquidacionAtos)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRANOS_LIQUIDACION_ATOS");

            entity.Property(e => e.GranosLiquidacionRetencion)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GRANOS_LIQUIDACION_RETENCION");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.Logo).HasColumnName("LOGO");

            entity.Property(e => e.Membrete).HasColumnName("MEMBRETE");

            entity.Property(e => e.NotaCreditoStock).HasColumnName("NOTA_CREDITO_STOCK");

            entity.Property(e => e.NotaEnvioStock).HasColumnName("NOTA_ENVIO_STOCK");

            entity.Property(e => e.NroPatronal).HasColumnName("NRO_PATRONAL");

            entity.Property(e => e.PorcFinanciacionImp).HasColumnName("PORC_FINANCIACION_IMP");

            entity.Property(e => e.PorcRetIva5Granos).HasColumnName("PORC_RET_IVA5_GRANOS");

            entity.Property(e => e.PorcRetencionIva).HasColumnName("PORC_RETENCION_IVA");

            entity.Property(e => e.PorcRetencionIva5)
                .HasColumnName("PORC_RETENCION_IVA5")
                .HasComment("Creado: 27/12/16. Gustavo. Se usará para el cálculo de retención cuando la tributación sea gravada 5%, ya que retenemos 30% y no 70%.");

            entity.Property(e => e.RecibirListadoTotalDia).HasColumnName("RECIBIR_LISTADO_TOTAL_DIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegIps)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REG_IPS");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegistroSenave)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REGISTRO_SENAVE");

            entity.Property(e => e.RelojActEstadoTurno)
                .HasColumnType("datetime")
                .HasColumnName("RELOJ_ACT_ESTADO_TURNO");

            entity.Property(e => e.RemisionCredito).HasColumnName("REMISION_CREDITO");

            entity.Property(e => e.RemisionExportacionStock).HasColumnName("REMISION_EXPORTACION_STOCK");

            entity.Property(e => e.RemisionStock).HasColumnName("REMISION_STOCK");

            entity.Property(e => e.RemisionStockEmpresa).HasColumnName("REMISION_STOCK_EMPRESA");

            entity.Property(e => e.RepresentanteNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_NOMBRE");

            entity.Property(e => e.RepresentanteRuc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_RUC");

            entity.Property(e => e.RhActVacaciones)
                .HasColumnType("datetime")
                .HasColumnName("RH_ACT_VACACIONES");

            entity.Property(e => e.Rpc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RPC");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.SdResponsable).HasColumnName("SD_RESPONSABLE");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.Property(e => e.TipoAprovacion)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TIPO_APROVACION");

            entity.Property(e => e.TipoCredito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("TIPO_CREDITO");

            entity.Property(e => e.Version)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VERSION");

            entity.Property(e => e.Web)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WEB");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Empresas)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_CIUDAD");
        });

        modelBuilder.Entity<EmpresaCentroCosto>(entity =>
        {
            entity.HasKey(e => e.IdEmpresaCentroCosto);

            entity.ToTable("EMPRESA_CENTRO_COSTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_EMPRESA_CENTRO_COSTO")
                .IsUnique();

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EmpresaCentroCostos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_CENTRO_COSTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.EmpresaCentroCostos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_CENTRO_COSTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<EmpresaUnidad>(entity =>
        {
            entity.HasKey(e => e.IdUnidad);

            entity.ToTable("EMPRESA_UNIDAD", "dbo");

            entity.HasIndex(e => e.Descripcion, "EMPRESAS_UNID_IDX1");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_EMPRESA_UNIDAD")
                .IsUnique();

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoSet).HasColumnName("CODIGO_SET");

            entity.Property(e => e.CodigoUnidadSa)
                .HasColumnName("CODIGO_UNIDAD_SA")
                .HasComment("CODIGO DE LA UNIDAD SE UTILIZA PARA EL LISTADO UNIFICADO CON LA DOBLE EN CONTABILIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Gerencia).HasColumnName("GERENCIA");

            entity.Property(e => e.GteRegionalGranos)
                .HasColumnName("GTE_REGIONAL_GRANOS")
                .HasComment("Se guarda el id del funcionario que sera el Gerente Regional");

            entity.Property(e => e.Habilitado).HasColumnName("HABILITADO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.Latitud)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LATITUD");

            entity.Property(e => e.Longitud)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LONGITUD");

            entity.Property(e => e.Patronal).HasColumnName("PATRONAL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Ruta).HasColumnName("RUTA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EmpresaUnidads)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_UNIDAD_EMPRESA");

            entity.HasOne(d => d.GerenciaNavigation)
                .WithMany(p => p.EmpresaUnidads)
                .HasForeignKey(d => d.Gerencia)
                .HasConstraintName("FK_EMPRESA_UNIDAD_FUNCIONARIO");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.EmpresaUnidads)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_UNIDAD_CIUDAD");
        });

        modelBuilder.Entity<Encomiendum>(entity =>
        {
            entity.HasKey(e => e.IdEncomienda);

            entity.ToTable("ENCOMIENDA", "dbo");

            entity.Property(e => e.IdEncomienda).HasColumnName("ID_ENCOMIENDA");

            entity.Property(e => e.Destinatario)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESTINATARIO");

            entity.Property(e => e.Destino).HasColumnName("DESTINO");

            entity.Property(e => e.EmpCourrier)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("EMP_COURRIER");

            entity.Property(e => e.EmpHora).HasColumnName("EMP_HORA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaRetiro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RETIRO");

            entity.Property(e => e.Obs)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.ObsRecep)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBS_RECEP");

            entity.Property(e => e.Origen).HasColumnName("ORIGEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remitente)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("REMITENTE");

            entity.Property(e => e.Retirado)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("RETIRADO");

            entity.Property(e => e.SucFechaRecibo)
                .HasColumnType("datetime")
                .HasColumnName("SUC_FECHA_RECIBO");

            entity.Property(e => e.SucRecibido)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SUC_RECIBIDO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Usuario)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("USUARIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Encomienda)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ENCOMIENDA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Encomienda)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ENCOMIENDA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<EntidadFinanciera>(entity =>
        {
            entity.HasKey(e => e.IdEntidadFinanciera);

            entity.ToTable("ENTIDAD_FINANCIERA", "dbo");

            entity.Property(e => e.IdEntidadFinanciera).HasColumnName("ID_ENTIDAD_FINANCIERA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Contacto)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Direccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EntidadFinancieras)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_ENTIDAD_FINANCIERA_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.EntidadFinancieras)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_ENTIDAD_FINANCIERA_CIUDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.EntidadFinancieras)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_ENTIDAD_FINANCIERA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Envase>(entity =>
        {
            entity.HasKey(e => e.IdEnvase)
                .HasName("PK_Envase");

            entity.ToTable("ENVASE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_ENVASE")
                .IsUnique();

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Peso).HasColumnName("PESO");

            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.UnidadMedida)
                .HasColumnName("UNIDAD_MEDIDA")
                .HasComment("0=Bidon  1=Bolsa  2=Kg  3=Dosis  4=Litro  5=Sacola  6=Tambor  7=Tn  8=Unidad  9=Vacio  10=Null ");

            entity.Property(e => e.Verifica)
                .HasColumnName("VERIFICA")
                .HasComment("1=No, 0=Si");

            entity.Property(e => e.Volumen).HasColumnName("VOLUMEN");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Envases)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ENVASE_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Envases)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ENVASE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Error>(entity =>
        {
            entity.HasKey(e => e.IdError);

            entity.ToTable("ERROR", "dbo");

            entity.Property(e => e.IdError).HasColumnName("ID_ERROR");

            entity.Property(e => e.DescProcedimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_PROCEDIMIENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Gravedad).HasColumnName("GRAVEDAD");

            entity.Property(e => e.IdFormulario)
                .HasColumnName("ID_FORMULARIO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdProcedure)
                .HasColumnName("ID_PROCEDURE")
                .HasComment("Para el caso de Id_tabla=1048 Tabla DE\r\n0 Factura\r\n1 Nota de Remision Interna\r\n2 Nota de Envio\r\n3 Nota de Remision Exp\r\n4 Autorfactura Gasto\r\n5 Autorfactura Liquidacion\r\n6\r\n7");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Linea).HasColumnName("LINEA");

            entity.Property(e => e.Mensaje)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("MENSAJE");

            entity.Property(e => e.Numero).HasColumnName("NUMERO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Errors)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_ERROR_EMPRESA");

            entity.HasOne(d => d.IdFormularioNavigation)
                .WithMany(p => p.Errors)
                .HasForeignKey(d => d.IdFormulario)
                .HasConstraintName("FK_ERROR_FORMULARIO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.Errors)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_ERROR_TABLA");
        });

        modelBuilder.Entity<EscaneoFactura>(entity =>
        {
            entity.HasKey(e => e.IdEscaneoFactura);

            entity.ToTable("ESCANEO_FACTURA", "dbo");

            entity.Property(e => e.IdEscaneoFactura).HasColumnName("ID_ESCANEO_FACTURA");

            entity.Property(e => e.Anulacion).HasColumnName("ANULACION");

            entity.Property(e => e.CheckContabilidad).HasColumnName("CHECK_CONTABILIDAD");

            entity.Property(e => e.ChkUnidades).HasColumnName("CHK_UNIDADES");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Concepto)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");

            entity.Property(e => e.CondicionPago).HasColumnName("CONDICION_PAGO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaRecepcion)
                .HasColumnType("date")
                .HasColumnName("FECHA_RECEPCION");

            entity.Property(e => e.HoraRecepcion).HasColumnName("HORA_RECEPCION");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorCuenta).HasColumnName("ID_PROVEEDOR_CUENTA");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdValeSolicitud).HasColumnName("ID_VALE_SOLICITUD");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.MedioPago).HasColumnName("MEDIO_PAGO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MotivoAnula)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_ANULA");

            entity.Property(e => e.Numero)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.ObsFinanciero)
                .IsUnicode(false)
                .HasColumnName("OBS_FINANCIERO");

            entity.Property(e => e.ObsVerifica)
                .IsUnicode(false)
                .HasColumnName("OBS_VERIFICA");

            entity.Property(e => e.PorcLiquidacion).HasColumnName("PORC_LIQUIDACION");

            entity.Property(e => e.RechazaFinanciero).HasColumnName("RECHAZA_FINANCIERO");

            entity.Property(e => e.RechazaVerifica).HasColumnName("RECHAZA_VERIFICA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Timbrado).HasColumnName("TIMBRADO");

            entity.Property(e => e.UsuarioAnula).HasColumnName("USUARIO_ANULA");

            entity.Property(e => e.UsuarioFinanciero).HasColumnName("USUARIO_FINANCIERO");

            entity.Property(e => e.UsuarioVerifica).HasColumnName("USUARIO_VERIFICA");

            entity.Property(e => e.ValeFactura).HasColumnName("VALE_FACTURA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_US");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("date")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_DEPARTAMENTO");

            entity.HasOne(d => d.IdDocumentoNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdDocumento)
                .HasConstraintName("FK_ESCANEO_FACTURA_DOCUMENTO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorCuentaNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdProveedorCuenta)
                .HasConstraintName("FK_ESCANEO_FACTURA_PROVEEDOR_CUENTA");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_ESCANEO_FACTURA_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_ESCANEO_FACTURA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdValeSolicitudNavigation)
                .WithMany(p => p.EscaneoFacturas)
                .HasForeignKey(d => d.IdValeSolicitud)
                .HasConstraintName("FK_ESCANEO_FACTURA_VALE_SOLICITUD");
        });

        modelBuilder.Entity<EscaneoFacturaAutoriza>(entity =>
        {
            entity.HasKey(e => e.IdEscaneoFacturaAutoriza);

            entity.ToTable("ESCANEO_FACTURA_AUTORIZA", "dbo");

            entity.Property(e => e.IdEscaneoFacturaAutoriza).HasColumnName("ID_ESCANEO_FACTURA_AUTORIZA");

            entity.Property(e => e.Autoriza).HasColumnName("AUTORIZA");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.FechaAutoriza)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZA");

            entity.Property(e => e.IdEscaneoFactura).HasColumnName("ID_ESCANEO_FACTURA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Motivo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.Nivel).HasColumnName("NIVEL");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Superior).HasColumnName("SUPERIOR");

            entity.Property(e => e.Token)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TOKEN");

            entity.HasOne(d => d.IdEscaneoFacturaNavigation)
                .WithMany(p => p.EscaneoFacturaAutorizas)
                .HasForeignKey(d => d.IdEscaneoFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_AUTORIZA_ESCANEO_FACTURA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.EscaneoFacturaAutorizas)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_AUTORIZA_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.EscaneoFacturaAutorizas)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_AUTORIZA_USUARIO");
        });

        modelBuilder.Entity<EscaneoFacturaEstado>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("ESCANEO_FACTURA_ESTADO", "dbo");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.IdEscaneoFactura).HasColumnName("ID_ESCANEO_FACTURA");

            entity.Property(e => e.IdEscaneoFacturaEstado)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ESCANEO_FACTURA_ESTADO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<EscaneoFacturaVerifica>(entity =>
        {
            entity.HasKey(e => e.IdEscaneoFacturaVerifica);

            entity.ToTable("ESCANEO_FACTURA_VERIFICA", "dbo");

            entity.Property(e => e.IdEscaneoFacturaVerifica).HasColumnName("ID_ESCANEO_FACTURA_VERIFICA");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.FechaVerifica)
                .HasColumnType("date")
                .HasColumnName("FECHA_VERIFICA");

            entity.Property(e => e.IdEscaneoFactura).HasColumnName("ID_ESCANEO_FACTURA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Verificado).HasColumnName("VERIFICADO");

            entity.HasOne(d => d.IdEscaneoFacturaNavigation)
                .WithMany(p => p.EscaneoFacturaVerificas)
                .HasForeignKey(d => d.IdEscaneoFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_VERIFICA_ESCANEO_FACTURA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.EscaneoFacturaVerificas)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_VERIFICA_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.EscaneoFacturaVerificas)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESCANEO_FACTURA_VERIFICA_USUARIO");
        });

        modelBuilder.Entity<EspTecnicaPeligrosidad>(entity =>
        {
            entity.HasKey(e => e.IdEspTecnicaPeligrosidad);

            entity.ToTable("ESP_TECNICA_PELIGROSIDAD", "dbo");

            entity.Property(e => e.IdEspTecnicaPeligrosidad).HasColumnName("ID_ESP_TECNICA_PELIGROSIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EspecialBlanco)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ESPECIAL_BLANCO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdEspecificacionTecnica).HasColumnName("ID_ESPECIFICACION_TECNICA");

            entity.Property(e => e.InflamableRojo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INFLAMABLE_ROJO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ReactivoAmarillo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REACTIVO_AMARILLO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SaludAzul)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SALUD_AZUL");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EspTecnicaPeligrosidads)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESP_TECNICA_PELIGROSIDAD_EMPRESA");

            entity.HasOne(d => d.IdEspecificacionTecnicaNavigation)
                .WithMany(p => p.EspTecnicaPeligrosidads)
                .HasForeignKey(d => d.IdEspecificacionTecnica)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESP_TECNICA_PELIGROSIDAD_ESP_TECNICA_PELIGROSIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.EspTecnicaPeligrosidads)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESP_TECNICA_PELIGROSIDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<EspTecnicaPeligrosidadDet>(entity =>
        {
            entity.HasKey(e => e.IdEspTecPeligrosidadDet);

            entity.ToTable("ESP_TECNICA_PELIGROSIDAD_DET", "dbo");

            entity.Property(e => e.IdEspTecPeligrosidadDet).HasColumnName("ID_ESP_TEC_PELIGROSIDAD_DET");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdEspTecnicaPeligrosidad).HasColumnName("ID_ESP_TECNICA_PELIGROSIDAD");

            entity.Property(e => e.IdPictogramaRiesgo).HasColumnName("ID_PICTOGRAMA_RIESGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdEspTecnicaPeligrosidadNavigation)
                .WithMany(p => p.EspTecnicaPeligrosidadDets)
                .HasForeignKey(d => d.IdEspTecnicaPeligrosidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESP_TECNICA_PELIGROSIDAD_DET_ESP_TECNICA_PELIGROSIDAD");

            entity.HasOne(d => d.IdPictogramaRiesgoNavigation)
                .WithMany(p => p.EspTecnicaPeligrosidadDets)
                .HasForeignKey(d => d.IdPictogramaRiesgo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESP_TECNICA_PELIGROSIDAD_DET_PICTOGRAMA_RIESGO");
        });

        modelBuilder.Entity<EspecificacionTecnica>(entity =>
        {
            entity.HasKey(e => e.IdEspecificacionTecnica);

            entity.ToTable("ESPECIFICACION_TECNICA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CODIGO_ESP_TECNICA")
                .IsUnique();

            entity.Property(e => e.IdEspecificacionTecnica).HasColumnName("ID_ESPECIFICACION_TECNICA");

            entity.Property(e => e.Codigo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION")
                .HasComment("Número de CAST del producto");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.ImagenEt).HasColumnName("IMAGEN_ET");

            entity.Property(e => e.NroCast)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NRO_CAST");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EspecificacionTecnicas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESPECIFICACION_TECNICA_EMPRESA");
        });

        modelBuilder.Entity<EspecificacionTecnicaSimilar>(entity =>
        {
            entity.HasKey(e => e.IdEspTecSimilar);

            entity.ToTable("ESPECIFICACION_TECNICA_SIMILAR", "dbo");

            entity.Property(e => e.IdEspTecSimilar).HasColumnName("ID_ESP_TEC_SIMILAR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdEspecificacionTecnica1).HasColumnName("ID_ESPECIFICACION_TECNICA_1");

            entity.Property(e => e.IdEspecificacionTecnica2).HasColumnName("ID_ESPECIFICACION_TECNICA_2");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdEspecificacionTecnica1Navigation)
                .WithMany(p => p.EspecificacionTecnicaSimilarIdEspecificacionTecnica1Navigations)
                .HasForeignKey(d => d.IdEspecificacionTecnica1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESPECIFICACION_TECNICA_SIMILAR_ESPECIFICACION_TECNICA");

            entity.HasOne(d => d.IdEspecificacionTecnica2Navigation)
                .WithMany(p => p.EspecificacionTecnicaSimilarIdEspecificacionTecnica2Navigations)
                .HasForeignKey(d => d.IdEspecificacionTecnica2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESPECIFICACION_TECNICA_SIMILAR_ESPECIFICACION_TECNICA1");
        });

        modelBuilder.Entity<Estado>(entity =>
        {
            entity.HasKey(e => e.IdEstado);

            entity.ToTable("ESTADO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_ESTADO")
                .IsUnique();

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");

            entity.Property(e => e.CodMonsanto).HasColumnName("COD_MONSANTO");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.Codigo)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Estados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESTADO_EMPRESA");

            entity.HasOne(d => d.IdPaisNavigation)
                .WithMany(p => p.Estados)
                .HasForeignKey(d => d.IdPais)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESTADO_PAIS");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Estados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESTADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<EstadoOperacion>(entity =>
        {
            entity.HasKey(e => e.IdEstadoOperacion);

            entity.ToTable("ESTADO_OPERACION", "dbo");

            entity.Property(e => e.IdEstadoOperacion).HasColumnName("ID_ESTADO_OPERACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.EstadoOperacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESTADO_OPERACION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.EstadoOperacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ESTADO_OPERACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<EtapaSectorLinea>(entity =>
        {
            entity.HasKey(e => e.IdEtapaSectorLinea)
                .HasName("PK_SERIE_SECTOR_LINEA");

            entity.ToTable("ETAPA_SECTOR_LINEA", "dbo");

            entity.Property(e => e.IdEtapaSectorLinea).HasColumnName("ID_ETAPA_SECTOR_LINEA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.EtapaSectorLineas)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERIE_SECTOR_LINEA_LINEA");

            entity.HasOne(d => d.IdFabricaSectorNavigation)
                .WithMany(p => p.EtapaSectorLineas)
                .HasForeignKey(d => d.IdFabricaSector)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERIE_SECTOR_LINEA_SECTOR");

            entity.HasOne(d => d.IdProduccionEtapaNavigation)
                .WithMany(p => p.EtapaSectorLineas)
                .HasForeignKey(d => d.IdProduccionEtapa)
                .HasConstraintName("FK_ETAPA_SECTOR_LINEA_PRODUCCION_ETAPA");
        });

        modelBuilder.Entity<Evento>(entity =>
        {
            entity.HasKey(e => e.IdEvento)
                .HasName("PK_EVENTOS");

            entity.ToTable("EVENTO", "dbo");

            entity.HasIndex(e => new { e.Codigo, e.Empresa }, "UK_EVENTO")
                .IsUnique();

            entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.Imputable)
                .HasColumnName("IMPUTABLE")
                .HasComment("0: no imputable, 1: imputable");

            entity.Property(e => e.Irp).HasColumnName("IRP");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Servicio).HasColumnName("SERVICIO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.Eventos)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_EVENTO_PLAN_CUENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Eventos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<EventoDetalle>(entity =>
        {
            entity.HasKey(e => e.IdEventoDetalle);

            entity.ToTable("EVENTO_DETALLE", "dbo");

            entity.Property(e => e.IdEventoDetalle).HasColumnName("ID_EVENTO_DETALLE");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdEventoNavigation)
                .WithMany(p => p.EventoDetalles)
                .HasForeignKey(d => d.IdEvento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EVENTO_DETALLE_EVENTO");
        });

        modelBuilder.Entity<Expediente>(entity =>
        {
            entity.HasKey(e => e.IdExpediente);

            entity.ToTable("EXPEDIENTE", "dbo");

            entity.Property(e => e.IdExpediente).HasColumnName("ID_EXPEDIENTE");

            entity.Property(e => e.Abogado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ABOGADO");

            entity.Property(e => e.Ano).HasColumnName("ANO");

            entity.Property(e => e.Caratula)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CARATULA");

            entity.Property(e => e.Cargo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Folio).HasColumnName("FOLIO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdJuzgado).HasColumnName("ID_JUZGADO");

            entity.Property(e => e.IdMateria).HasColumnName("ID_MATERIA");

            entity.Property(e => e.IdMateriaDet).HasColumnName("ID_MATERIA_DET");

            entity.Property(e => e.Juez)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("JUEZ");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Monto)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Numero).HasColumnName("NUMERO");

            entity.Property(e => e.NumeroSecre).HasColumnName("NUMERO_SECRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoDemanda).HasColumnName("TIPO_DEMANDA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Expedientes)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_EXPEDIENTE_CLIENTE");

            entity.HasOne(d => d.IdJuzgadoNavigation)
                .WithMany(p => p.Expedientes)
                .HasForeignKey(d => d.IdJuzgado)
                .HasConstraintName("FK_EXPEDIENTE_JUZGADO");

            entity.HasOne(d => d.IdMateriaNavigation)
                .WithMany(p => p.Expedientes)
                .HasForeignKey(d => d.IdMateria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXPEDIENTE_MATERIAL");

            entity.HasOne(d => d.IdMateriaDetNavigation)
                .WithMany(p => p.Expedientes)
                .HasForeignKey(d => d.IdMateriaDet)
                .HasConstraintName("FK_EXPEDIENTE_MATERIA_DET");
        });

        modelBuilder.Entity<ExpedienteDet>(entity =>
        {
            entity.HasKey(e => e.IdExpedienteDet);

            entity.ToTable("EXPEDIENTE_DET", "dbo");

            entity.Property(e => e.IdExpedienteDet).HasColumnName("ID_EXPEDIENTE_DET");

            entity.Property(e => e.Archivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ARCHIVO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdExpediente).HasColumnName("ID_EXPEDIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoActuacion).HasColumnName("TIPO_ACTUACION");

            entity.HasOne(d => d.IdExpedienteNavigation)
                .WithMany(p => p.ExpedienteDets)
                .HasForeignKey(d => d.IdExpediente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXPEDIENTE_DET_EXPEDIENTE");
        });

        modelBuilder.Entity<Exposicion>(entity =>
        {
            entity.HasKey(e => e.IdExposicion);

            entity.ToTable("EXPOSICION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_EXPOSICION")
                .IsUnique();

            entity.Property(e => e.IdExposicion).HasColumnName("ID_EXPOSICION");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Exposicions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXPOSICION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Exposicions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EXPOSICION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Fabrica>(entity =>
        {
            entity.HasKey(e => e.IdFabrica);

            entity.ToTable("FABRICA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_FABRICA")
                .IsUnique();

            entity.Property(e => e.IdFabrica).HasColumnName("ID_FABRICA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Fabricas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EMPRESA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.FabricaIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricaRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<FabricaEquipo>(entity =>
        {
            entity.HasKey(e => e.IdFabricaEquipo);

            entity.ToTable("FABRICA_EQUIPO", "dbo");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.DatosTecnicos)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DATOS_TECNICOS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.FabricaEquipos)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_FABRICA_LINEA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricaEquipos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabricaEquipoDet>(entity =>
        {
            entity.HasKey(e => e.IdFabricaEquipoDet);

            entity.ToTable("FABRICA_EQUIPO_DET", "dbo");

            entity.Property(e => e.IdFabricaEquipoDet).HasColumnName("ID_FABRICA_EQUIPO_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.DatosTecnicos)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DATOS_TECNICOS");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaEquipoParte).HasColumnName("ID_FABRICA_EQUIPO_PARTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad)
                .HasColumnName("REG_UNIDAD")
                .HasComment("0=Bidon  1=Bolsa  2=Kg  3=Dosis  4=Litro  5=Sacola  6=Tambor  7=Tn  8=Unidad  9=Vacio  10=Null ");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Voltaje)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VOLTAJE");

            entity.HasOne(d => d.IdFabricaEquipoNavigation)
                .WithMany(p => p.FabricaEquipoDets)
                .HasForeignKey(d => d.IdFabricaEquipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_DET_FABRICA_EQUIPO_DET");

            entity.HasOne(d => d.IdFabricaEquipoParteNavigation)
                .WithMany(p => p.FabricaEquipoDets)
                .HasForeignKey(d => d.IdFabricaEquipoParte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_DET_FABRICA_EQUIPO_PARTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricaEquipoDets)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_DET_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabricaEquipoParte>(entity =>
        {
            entity.HasKey(e => e.IdFabricaEquipoParte);

            entity.ToTable("FABRICA_EQUIPO_PARTE", "dbo");

            entity.Property(e => e.IdFabricaEquipoParte).HasColumnName("ID_FABRICA_EQUIPO_PARTE");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabricaEquipoPartes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_PARTE_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricaEquipoPartes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_EQUIPO_PARTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabricaLinea>(entity =>
        {
            entity.HasKey(e => e.IdFabricaLinea)
                .HasName("PK_FABRICAS_LINEAS");

            entity.ToTable("FABRICA_LINEA", "dbo");

            entity.HasIndex(e => new { e.IdFabricaSector, e.Descripcion }, "UK_FABRICA_LINEA")
                .IsUnique();

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.Observacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdFabricaSectorNavigation)
                .WithMany(p => p.FabricaLineas)
                .HasForeignKey(d => d.IdFabricaSector)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_LINEA_FABRICA_SECTOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricaLineas)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_FABRICA_LINEA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabricaSector>(entity =>
        {
            entity.HasKey(e => e.IdFabricaSector);

            entity.ToTable("FABRICA_SECTOR", "dbo");

            entity.HasIndex(e => new { e.IdFabrica, e.Descripcion }, "UK_FABRICA_SECTOR")
                .IsUnique();

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrica).HasColumnName("ID_FABRICA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.IdFabricaNavigation)
                .WithMany(p => p.FabricaSectors)
                .HasForeignKey(d => d.IdFabrica)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_SECTOR_FABRICA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricaSectors)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICA_SECTOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabricanteExt>(entity =>
        {
            entity.HasKey(e => e.IdFabricanteExt);

            entity.ToTable("FABRICANTE_EXT", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_FABRICANTE_EXT")
                .IsUnique();

            entity.Property(e => e.IdFabricanteExt).HasColumnName("ID_FABRICANTE_EXT");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabricanteExts)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICANTE_EXT_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.FabricanteExts)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICANTE_EXT_CIUDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabricanteExts)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRICANTE_EXT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilAuxBoomPlanProduccion>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("FABRIL_AUX_BOOM_PLAN_PRODUCCION", "dbo");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Sem)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany()
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_FABRIL_AUX_BOOM_PLAN_PRODUCCION_PRODUCTO");
        });

        modelBuilder.Entity<FabrilAuxBoomSemana>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("FABRIL_AUX_BOOM_SEMANA", "dbo");

            entity.Property(e => e.Semana)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("semana");
        });

        modelBuilder.Entity<FabrilCcEstado>(entity =>
        {
            entity.HasKey(e => e.IdFabrilCcEstado);

            entity.ToTable("FABRIL_CC_ESTADO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_FABRIL_CC_ESTADO")
                .IsUnique();

            entity.Property(e => e.IdFabrilCcEstado).HasColumnName("ID_FABRIL_CC_ESTADO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilCcEstados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CC_ESTADO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilCcEstados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CC_ESTADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilControlCalidad>(entity =>
        {
            entity.HasKey(e => e.IdFabrilControlCalidad);

            entity.ToTable("FABRIL_CONTROL_CALIDAD", "dbo");

            entity.Property(e => e.IdFabrilControlCalidad).HasColumnName("ID_FABRIL_CONTROL_CALIDAD");

            entity.Property(e => e.Apariencia).HasColumnName("APARIENCIA");

            entity.Property(e => e.Aporte).HasColumnName("APORTE");

            entity.Property(e => e.CapacidadEstiba)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAPACIDAD_ESTIBA");

            entity.Property(e => e.ConcentracionNominal).HasColumnName("CONCENTRACION_NOMINAL");

            entity.Property(e => e.ConcentracionReal).HasColumnName("CONCENTRACION_REAL");

            entity.Property(e => e.Densidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DENSIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdFabrilCcEstado).HasColumnName("ID_FABRIL_CC_ESTADO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Inc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("INC")
                .HasComment("Informe de no conformidad");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.PesoEnvase)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_ENVASE");

            entity.Property(e => e.Ph)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PH");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Retencion).HasColumnName("RETENCION");

            entity.Property(e => e.VencimientoLote)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_LOTE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_EMPRESA");

            entity.HasOne(d => d.IdAprobadorNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.IdAprobador)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_FUNCIONARIO");

            entity.HasOne(d => d.IdFabrilCcEstadoNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.IdFabrilCcEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_FABRIL_CC_ESTADO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilControlCalidads)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_CONTROL_CALIDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilDesarmePack>(entity =>
        {
            entity.HasKey(e => e.IdFabrilDesarmePack);

            entity.ToTable("FABRIL_DESARME_PACK", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_FABRIL_DESARME_PACK_1")
                .IsUnique();

            entity.Property(e => e.IdFabrilDesarmePack).HasColumnName("ID_FABRIL_DESARME_PACK");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_DEPARTAMENTO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_DEPOSITO");

            entity.HasOne(d => d.IdEmpresaCentroCostoNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.IdEmpresaCentroCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilDesarmePacks)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DESARME_PACK_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilDevSolicitud>(entity =>
        {
            entity.HasKey(e => e.IdFabrilDevSolicitud);

            entity.ToTable("FABRIL_DEV_SOLICITUD", "dbo");

            entity.Property(e => e.IdFabrilDevSolicitud).HasColumnName("ID_FABRIL_DEV_SOLICITUD");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilSolicitud).HasColumnName("ID_FABRIL_SOLICITUD");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdFabrilSolicitudNavigation)
                .WithMany(p => p.FabrilDevSolicituds)
                .HasForeignKey(d => d.IdFabrilSolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DEV_SOLICITUD_FABRIL_SOLICITUD");

            entity.HasOne(d => d.IdResponsableNavigation)
                .WithMany(p => p.FabrilDevSolicituds)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DEV_SOLICITUD_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilDevSolicituds)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DEV_SOLICITUD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilDevSolicitudProducto>(entity =>
        {
            entity.HasKey(e => e.IdFabrilDevSolicitudProducto)
                .HasName("PK_PRODUCAO_DEVOL_PRODUTOS");

            entity.ToTable("FABRIL_DEV_SOLICITUD_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdFabrilDevSolicitud, e.IdProducto, e.IdLote, e.RegStatus }, "UK_FABRIL_DEV_SOLICITUD_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdFabrilDevSolicitudProducto).HasColumnName("ID_FABRIL_DEV_SOLICITUD_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilDevSolicitud).HasColumnName("ID_FABRIL_DEV_SOLICITUD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilDevSolicitudNavigation)
                .WithMany(p => p.FabrilDevSolicitudProductos)
                .HasForeignKey(d => d.IdFabrilDevSolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DEV_SOLICITUD_PRODUCTO_FABRIL_DEV_SOLICITUD");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilDevSolicitudProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DEV_SOLICITUD_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilDevSolicitudProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_DEV_SOLICITUD_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<FabrilLiquidoLavado>(entity =>
        {
            entity.HasKey(e => e.IdFabrilLiquidoLavado);

            entity.ToTable("FABRIL_LIQUIDO_LAVADO", "dbo");

            entity.Property(e => e.IdFabrilLiquidoLavado).HasColumnName("ID_FABRIL_LIQUIDO_LAVADO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Uso)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("USO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilLiquidoLavados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_LIQUIDO_LAVADO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilLiquidoLavados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_LIQUIDO_LAVADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilMaterialEspecial>(entity =>
        {
            entity.HasKey(e => e.IdFabrilMaterialEspecial);

            entity.ToTable("FABRIL_MATERIAL_ESPECIAL", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdProducto, e.RegStatus }, "UK_FABRIL_MAT_ESPECIAL")
                .IsUnique();

            entity.Property(e => e.IdFabrilMaterialEspecial).HasColumnName("ID_FABRIL_MATERIAL_ESPECIAL");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Peso).HasColumnName("PESO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilMaterialEspecials)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_MATERIAL_ESPECIAL_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilMaterialEspecials)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_MATERIAL_ESPECIAL_PRODUCTO1");
        });

        modelBuilder.Entity<FabrilPlanProduccion>(entity =>
        {
            entity.HasKey(e => e.IdFabrilPlanProduccion);

            entity.ToTable("FABRIL_PLAN_PRODUCCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_FABRIL_PLAN_PRODUCCION")
                .IsUnique();

            entity.Property(e => e.IdFabrilPlanProduccion).HasColumnName("ID_FABRIL_PLAN_PRODUCCION");

            entity.Property(e => e.Año).HasColumnName("AÑO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = inactivo; 1 = activo");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("Tipo Plan Producción: 0 = formulado; 1 = envasado");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilPlanProduccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLAN_PRODUCCION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilPlanProduccions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLAN_PRODUCCION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilPlanProduccionDet>(entity =>
        {
            entity.HasKey(e => e.IdFabrilPlanProduccionDet);

            entity.ToTable("FABRIL_PLAN_PRODUCCION_DET", "dbo");

            entity.HasIndex(e => new { e.IdFabrilPlanProduccion, e.IdProducto, e.RegStatus }, "UK_IDPRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdFabrilPlanProduccionDet).HasColumnName("ID_FABRIL_PLAN_PRODUCCION_DET");

            entity.Property(e => e.IdFabrilPlanProduccion).HasColumnName("ID_FABRIL_PLAN_PRODUCCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Sem1)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM1");

            entity.Property(e => e.Sem10)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM10");

            entity.Property(e => e.Sem11)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM11");

            entity.Property(e => e.Sem12)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM12");

            entity.Property(e => e.Sem13)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM13");

            entity.Property(e => e.Sem14)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM14");

            entity.Property(e => e.Sem15)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM15");

            entity.Property(e => e.Sem16)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM16");

            entity.Property(e => e.Sem17)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM17");

            entity.Property(e => e.Sem18)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM18");

            entity.Property(e => e.Sem19)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM19");

            entity.Property(e => e.Sem2)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM2");

            entity.Property(e => e.Sem20)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM20");

            entity.Property(e => e.Sem21)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM21");

            entity.Property(e => e.Sem22)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM22");

            entity.Property(e => e.Sem23)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM23");

            entity.Property(e => e.Sem24)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM24");

            entity.Property(e => e.Sem25)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM25");

            entity.Property(e => e.Sem26)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM26");

            entity.Property(e => e.Sem27)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM27");

            entity.Property(e => e.Sem28)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM28");

            entity.Property(e => e.Sem29)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM29");

            entity.Property(e => e.Sem3)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM3");

            entity.Property(e => e.Sem30)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM30");

            entity.Property(e => e.Sem31)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM31");

            entity.Property(e => e.Sem32)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM32");

            entity.Property(e => e.Sem33)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM33");

            entity.Property(e => e.Sem34)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM34");

            entity.Property(e => e.Sem35)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM35");

            entity.Property(e => e.Sem36)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM36");

            entity.Property(e => e.Sem37)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM37");

            entity.Property(e => e.Sem38)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM38");

            entity.Property(e => e.Sem39)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM39");

            entity.Property(e => e.Sem4)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM4");

            entity.Property(e => e.Sem40)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM40");

            entity.Property(e => e.Sem41)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM41");

            entity.Property(e => e.Sem42)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM42");

            entity.Property(e => e.Sem43)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM43");

            entity.Property(e => e.Sem44)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM44");

            entity.Property(e => e.Sem45)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM45");

            entity.Property(e => e.Sem46)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM46");

            entity.Property(e => e.Sem47)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM47");

            entity.Property(e => e.Sem48)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM48");

            entity.Property(e => e.Sem49)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM49");

            entity.Property(e => e.Sem5)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM5");

            entity.Property(e => e.Sem50)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM50");

            entity.Property(e => e.Sem51)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM51");

            entity.Property(e => e.Sem52)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM52");

            entity.Property(e => e.Sem6)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM6");

            entity.Property(e => e.Sem7)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM7");

            entity.Property(e => e.Sem8)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM8");

            entity.Property(e => e.Sem9)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM9");

            entity.HasOne(d => d.IdFabrilPlanProduccionNavigation)
                .WithMany(p => p.FabrilPlanProduccionDets)
                .HasForeignKey(d => d.IdFabrilPlanProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLAN_PRODUCCION_DET_FABRIL_PLAN_PRODUCCION");
        });

        modelBuilder.Entity<FabrilPlanning>(entity =>
        {
            entity.HasKey(e => e.IdFabrilPlanning);

            entity.ToTable("FABRIL_PLANNING", "dbo");

            entity.Property(e => e.IdFabrilPlanning).HasColumnName("ID_FABRIL_PLANNING");

            entity.Property(e => e.Año).HasColumnName("AÑO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = INACTIVO ; 1 = ACTIVO");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("date")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdFabrilPlanProduccion).HasColumnName("ID_FABRIL_PLAN_PRODUCCION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 = Formulado; 1 = Envasado");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilPlannings)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLANNING_EMPRESA");

            entity.HasOne(d => d.IdFabrilPlanProduccionNavigation)
                .WithMany(p => p.FabrilPlannings)
                .HasForeignKey(d => d.IdFabrilPlanProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLANNING_FABRIL_PLAN_PRODUCCION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilPlannings)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLANNING_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilPlanningAuxfechaetum>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("FABRIL_PLANNING_AUXFECHAETA", "dbo");

            entity.Property(e => e.CantPendiente)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_PENDIENTE");

            entity.Property(e => e.CantRemitido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_REMITIDO");

            entity.Property(e => e.Estado)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("ESTADO");

            entity.Property(e => e.FechaEta)
                .HasColumnType("date")
                .HasColumnName("FECHA_ETA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Semana).HasColumnName("SEMANA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany()
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLANNING_AUXFECHAETA_PRODUCTO");
        });

        modelBuilder.Entity<FabrilPlanningDet>(entity =>
        {
            entity.HasKey(e => e.IdFabrilPlanningDet);

            entity.ToTable("FABRIL_PLANNING_DET", "dbo");

            entity.Property(e => e.IdFabrilPlanningDet).HasColumnName("ID_FABRIL_PLANNING_DET");

            entity.Property(e => e.Estado1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO1")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado10)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO10")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado11)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO11")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado12)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO12")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado13)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO13")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado14)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO14")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado15)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO15")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado16)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO16")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado17)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO17")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado18)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO18")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado19)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO19")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO2")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado20)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO20")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado21)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO21")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado22)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO22")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado23)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO23")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado24)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO24")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado25)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO25")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado26)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO26")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado27)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO27")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado28)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO28")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado29)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO29")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO3")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado30)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO30")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado31)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO31")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado32)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO32")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado33)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO33")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado34)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO34")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado35)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO35")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado36)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO36")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado37)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO37")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado38)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO38")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado39)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO39")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO4")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado40)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO40")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado41)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO41")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado42)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO42")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado43)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO43")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado44)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO44")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado45)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO45")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado46)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO46")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado47)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO47")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado48)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO48")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado49)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO49")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado5)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO5")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado50)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO50")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado51)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO51")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado52)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO52")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado6)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO6")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado7)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO7")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado8)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO8")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Estado9)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO9")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdFabrilPlanning).HasColumnName("ID_FABRIL_PLANNING");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Orden)
                .HasColumnName("ORDEN")
                .HasComment("1 = Necesidades Brutas - Producción; 2 = Stock Disponible; 3 = Recibimientos Programados - Compras; 4 = Necesidades Liquidas Nominales");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Sem1)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM1");

            entity.Property(e => e.Sem10)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM10");

            entity.Property(e => e.Sem11)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM11");

            entity.Property(e => e.Sem12)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM12");

            entity.Property(e => e.Sem13)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM13");

            entity.Property(e => e.Sem14)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM14");

            entity.Property(e => e.Sem15)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM15");

            entity.Property(e => e.Sem16)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM16");

            entity.Property(e => e.Sem17)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM17");

            entity.Property(e => e.Sem18)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM18");

            entity.Property(e => e.Sem19)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM19");

            entity.Property(e => e.Sem2)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM2");

            entity.Property(e => e.Sem20)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM20");

            entity.Property(e => e.Sem21)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM21");

            entity.Property(e => e.Sem22)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM22");

            entity.Property(e => e.Sem23)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM23");

            entity.Property(e => e.Sem24)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM24");

            entity.Property(e => e.Sem25)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM25");

            entity.Property(e => e.Sem26)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM26");

            entity.Property(e => e.Sem27)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM27");

            entity.Property(e => e.Sem28)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM28");

            entity.Property(e => e.Sem29)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM29");

            entity.Property(e => e.Sem3)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM3");

            entity.Property(e => e.Sem30)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM30");

            entity.Property(e => e.Sem31)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM31");

            entity.Property(e => e.Sem32)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM32");

            entity.Property(e => e.Sem33)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM33");

            entity.Property(e => e.Sem34)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM34");

            entity.Property(e => e.Sem35)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM35");

            entity.Property(e => e.Sem36)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM36");

            entity.Property(e => e.Sem37)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM37");

            entity.Property(e => e.Sem38)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM38");

            entity.Property(e => e.Sem39)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM39");

            entity.Property(e => e.Sem4)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM4");

            entity.Property(e => e.Sem40)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM40");

            entity.Property(e => e.Sem41)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM41");

            entity.Property(e => e.Sem42)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM42");

            entity.Property(e => e.Sem43)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM43");

            entity.Property(e => e.Sem44)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM44");

            entity.Property(e => e.Sem45)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM45");

            entity.Property(e => e.Sem46)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM46");

            entity.Property(e => e.Sem47)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM47");

            entity.Property(e => e.Sem48)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM48");

            entity.Property(e => e.Sem49)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM49");

            entity.Property(e => e.Sem5)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM5");

            entity.Property(e => e.Sem50)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM50");

            entity.Property(e => e.Sem51)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM51");

            entity.Property(e => e.Sem52)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM52");

            entity.Property(e => e.Sem6)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM6");

            entity.Property(e => e.Sem7)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM7");

            entity.Property(e => e.Sem8)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM8");

            entity.Property(e => e.Sem9)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM9");

            entity.HasOne(d => d.IdFabrilPlanningNavigation)
                .WithMany(p => p.FabrilPlanningDets)
                .HasForeignKey(d => d.IdFabrilPlanning)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLANNING_DET_FABRIL_PLANNING");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilPlanningDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_PLANNING_DET_PRODUCTO");
        });

        modelBuilder.Entity<FabrilRecepcionCodBarra>(entity =>
        {
            entity.HasKey(e => e.IdFabrilRecepcionCodBarra);

            entity.ToTable("FABRIL_RECEPCION_COD_BARRA", "dbo");

            entity.Property(e => e.IdFabrilRecepcionCodBarra).HasColumnName("ID_FABRIL_RECEPCION_COD_BARRA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodBarra)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("COD_BARRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasDefaultValueSql("((0))")
                .HasComment("0= pendiente de recepcion , 1= Cerrado o recepcionado");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilTransferencia).HasColumnName("ID_FABRIL_TRANSFERENCIA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.IdFabrilTransferenciaNavigation)
                .WithMany(p => p.FabrilRecepcionCodBarras)
                .HasForeignKey(d => d.IdFabrilTransferencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_COD_BARRA_FABRIL_TRANSFERENCIA");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilRecepcionCodBarras)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_COD_BARRA_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilRecepcionCodBarras)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_COD_BARRA_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilRecepcionCodBarras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_COD_BARRA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.FabrilRecepcionCodBarras)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_COD_BARRA_USUARIO");
        });

        modelBuilder.Entity<FabrilRecepcionSolicitud>(entity =>
        {
            entity.HasKey(e => e.IdFabrilRecepcionSolicitud);

            entity.ToTable("FABRIL_RECEPCION_SOLICITUD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus }, "UK_FABRIL_RECEPCION_SOLICITUD_1")
                .IsUnique();

            entity.Property(e => e.IdFabrilRecepcionSolicitud).HasColumnName("ID_FABRIL_RECEPCION_SOLICITUD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilSolicitud).HasColumnName("ID_FABRIL_SOLICITUD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ObsEliminado)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS_ELIMINADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilRecepcionSolicituds)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_EMPRESA");

            entity.HasOne(d => d.IdFabrilSolicitudNavigation)
                .WithMany(p => p.FabrilRecepcionSolicituds)
                .HasForeignKey(d => d.IdFabrilSolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_FABRIL_SOLICITUD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilRecepcionSolicituds)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.FabrilRecepcionSolicituds)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_FUNCIONARIO");
        });

        modelBuilder.Entity<FabrilRecepcionSolicitudProducto>(entity =>
        {
            entity.HasKey(e => e.IdRecepcionSolicitudProducto);

            entity.ToTable("FABRIL_RECEPCION_SOLICITUD_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdFabrilRecepcionSolicitud, e.IdProducto, e.IdLote, e.RegStatus }, "UK_FABRIL_RECEPCION_SOLICITUD_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdRecepcionSolicitudProducto).HasColumnName("ID_RECEPCION_SOLICITUD_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilRecepcionSolicitud).HasColumnName("ID_FABRIL_RECEPCION_SOLICITUD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilRecepcionSolicitudNavigation)
                .WithMany(p => p.FabrilRecepcionSolicitudProductos)
                .HasForeignKey(d => d.IdFabrilRecepcionSolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_PRODUCTO_FABRIL_RECEPCION_SOLICITUD");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilRecepcionSolicitudProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilRecepcionSolicitudProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_SOLICITUD_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<FabrilRecepcionTransf>(entity =>
        {
            entity.HasKey(e => e.IdFabrilRecepcionTransf);

            entity.ToTable("FABRIL_RECEPCION_TRANSF", "dbo");

            entity.HasIndex(e => e.IdFabrilTransferencia, "IDX_FABRIL_RECEPCION_TRANSF_IFT");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus, e.IdFabrilRecepcionTransf }, "UK_FABRIL_RECEPCION_TRANSF")
                .IsUnique();

            entity.Property(e => e.IdFabrilRecepcionTransf).HasColumnName("ID_FABRIL_RECEPCION_TRANSF");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilTransferencia).HasColumnName("ID_FABRIL_TRANSFERENCIA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ObsEliminado)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS_ELIMINADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilRecepcionTransfs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_EMPRESA");

            entity.HasOne(d => d.IdFabrilTransferenciaNavigation)
                .WithMany(p => p.FabrilRecepcionTransfs)
                .HasForeignKey(d => d.IdFabrilTransferencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_FABRIL_TRANSFERENCIA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilRecepcionTransfs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.FabrilRecepcionTransfs)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_FUNCIONARIO");
        });

        modelBuilder.Entity<FabrilRecepcionTransfProducto>(entity =>
        {
            entity.HasKey(e => e.IdRecepcionTransfProducto);

            entity.ToTable("FABRIL_RECEPCION_TRANSF_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdFabrilRecepcionTransf, e.IdProducto, e.IdLote, e.RegStatus }, "UK_FABRIL_RECEPCION_TRANSF_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdRecepcionTransfProducto).HasColumnName("ID_RECEPCION_TRANSF_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilRecepcionTransf).HasColumnName("ID_FABRIL_RECEPCION_TRANSF");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilRecepcionTransfNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductos)
                .HasForeignKey(d => d.IdFabrilRecepcionTransf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_FABRIL_RECEPCION_TRANSF");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<FabrilRecepcionTransfProductoPallet>(entity =>
        {
            entity.HasKey(e => e.IdRecepTransfProPallet);

            entity.ToTable("FABRIL_RECEPCION_TRANSF_PRODUCTO_PALLET", "dbo");

            entity.Property(e => e.IdRecepTransfProPallet).HasColumnName("ID_RECEP_TRANSF_PRO_PALLET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRecepcionTransf).HasColumnName("ID_RECEPCION_TRANSF");

            entity.Property(e => e.IdRecepcionTransfProducto).HasColumnName("ID_RECEPCION_TRANSF_PRODUCTO");

            entity.Property(e => e.IdTransferenciaProdPallet).HasColumnName("ID_TRANSFERENCIA_PROD_PALLET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductoPallets)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_PALLET_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductoPallets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_PALLET_PRODUCTO");

            entity.HasOne(d => d.IdRecepcionTransfNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductoPallets)
                .HasForeignKey(d => d.IdRecepcionTransf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_PALLET_FABRIL_RECEPCION_TRANSF");

            entity.HasOne(d => d.IdRecepcionTransfProductoNavigation)
                .WithMany(p => p.FabrilRecepcionTransfProductoPallets)
                .HasForeignKey(d => d.IdRecepcionTransfProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_RECEPCION_TRANSF_PRODUCTO_PALLET_FABRIL_RECEPCION_TRANSF_PRODUCTO");
        });

        modelBuilder.Entity<FabrilSemanaProduccion>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSemanaProduccion);

            entity.ToTable("FABRIL_SEMANA_PRODUCCION", "dbo");

            entity.Property(e => e.IdFabrilSemanaProduccion).HasColumnName("ID_FABRIL_SEMANA_PRODUCCION");

            entity.Property(e => e.Año).HasColumnName("AÑO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO")
                .HasComment("Fecha de inicio de la semana");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Semana).HasColumnName("SEMANA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilSemanaProduccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SEMANA_PRODUCCION_EMPRESA");
        });

        modelBuilder.Entity<FabrilSimCosto>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSimCosto);

            entity.ToTable("FABRIL_SIM_COSTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_FABRIL_SIM_COSTO")
                .IsUnique();

            entity.Property(e => e.IdFabrilSimCosto).HasColumnName("ID_FABRIL_SIM_COSTO");

            entity.Property(e => e.CostoFinancieroCp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_FINANCIERO_CP");

            entity.Property(e => e.CostoFinancieroScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_FINANCIERO_SCP");

            entity.Property(e => e.CostoFormuladoScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_FORMULADO_SCP");

            entity.Property(e => e.CostoInsumosScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_INSUMOS_SCP");

            entity.Property(e => e.CostoMargenScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MARGEN_SCP");

            entity.Property(e => e.CostoOperacionalScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_OPERACIONAL_SCP");

            entity.Property(e => e.CostoProduccionCp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_PRODUCCION_CP");

            entity.Property(e => e.CostoProduccionScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_PRODUCCION_SCP");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCalculoCp)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CALCULO_CP");

            entity.Property(e => e.FechaCalculoScp)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CALCULO_SCP");

            entity.Property(e => e.IdCatCargaFabrilDet).HasColumnName("ID_CAT_CARGA_FABRIL_DET");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.InteresCp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("INTERES_CP");

            entity.Property(e => e.InteresScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("INTERES_SCP");

            entity.Property(e => e.IvaCp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("IVA_CP");

            entity.Property(e => e.IvaScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("IVA_SCP");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.PorcentMargenScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PORCENT_MARGEN_SCP");

            entity.Property(e => e.Referencia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TotalCostoCp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("TOTAL_COSTO_CP");

            entity.Property(e => e.TotalCostoScp)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("TOTAL_COSTO_SCP");

            entity.Property(e => e.UltFechaCierreProduccion)
                .HasColumnType("datetime")
                .HasColumnName("ULT_FECHA_CIERRE_PRODUCCION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_EMPRESA");

            entity.HasOne(d => d.IdCatCargaFabrilDetNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.IdCatCargaFabrilDet)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_CATEGORIA_CARGA_FABRIL_DET");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_CULTIVO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_PRODUCTO");

            entity.HasOne(d => d.IdProductoFormulaNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.IdProductoFormula)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_PRODUCTO_FORMULA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilSimCostos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FabrilSimCostoDet>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSimCostoDet);

            entity.ToTable("FABRIL_SIM_COSTO_DET", "dbo");

            entity.Property(e => e.IdFabrilSimCostoDet).HasColumnName("ID_FABRIL_SIM_COSTO_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.IdFabrilSimCosto).HasColumnName("ID_FABRIL_SIM_COSTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 - PRODUCTO; 1 - FORMULADO");

            entity.Property(e => e.UltFechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("ULT_FECHA_COMPRA");

            entity.HasOne(d => d.IdFabrilSimCostoNavigation)
                .WithMany(p => p.FabrilSimCostoDets)
                .HasForeignKey(d => d.IdFabrilSimCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_DET_FABRIL_SIM_COSTO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilSimCostoDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_DET_PRODUCTO");
        });

        modelBuilder.Entity<FabrilSimCostoProdDet>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSimCostoProdDet);

            entity.ToTable("FABRIL_SIM_COSTO_PROD_DET", "dbo");

            entity.Property(e => e.IdFabrilSimCostoProdDet).HasColumnName("ID_FABRIL_SIM_COSTO_PROD_DET");

            entity.Property(e => e.CantDias).HasColumnName("CANT_DIAS");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadCal)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD_CAL");

            entity.Property(e => e.CondicionPagoDias).HasColumnName("CONDICION_PAGO_DIAS");

            entity.Property(e => e.CostoCal)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CAL");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoContableHist)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE_HIST");

            entity.Property(e => e.CostoFinanciero)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_FINANCIERO");

            entity.Property(e => e.CostoMicronizacion)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MICRONIZACION");

            entity.Property(e => e.CostoUnitarioCif)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_UNITARIO_CIF");

            entity.Property(e => e.FechaActual)
                .HasColumnType("date")
                .HasColumnName("FECHA_ACTUAL");

            entity.Property(e => e.FechaZafra)
                .HasColumnType("date")
                .HasColumnName("FECHA_ZAFRA");

            entity.Property(e => e.Flete)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FLETE");

            entity.Property(e => e.IdFabrilSimCosto).HasColumnName("ID_FABRIL_SIM_COSTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Incoter)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INCOTER");

            entity.Property(e => e.Nacionalizacion)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("NACIONALIZACION");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("OTROS");

            entity.Property(e => e.OtrosFletes)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("OTROS_FLETES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Seguro)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SEGURO");

            entity.Property(e => e.TasaFinanciacion)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("TASA_FINANCIACION");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.UltFechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("ULT_FECHA_COMPRA");

            entity.HasOne(d => d.IdFabrilSimCostoNavigation)
                .WithMany(p => p.FabrilSimCostoProdDets)
                .HasForeignKey(d => d.IdFabrilSimCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_PROD_DET_FABRIL_SIM_COSTO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilSimCostoProdDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SIM_COSTO_PROD_DET_PRODUCTO");
        });

        modelBuilder.Entity<FabrilSolicitud>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSolicitud);

            entity.ToTable("FABRIL_SOLICITUD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_FABRIL_SOLICITUD")
                .IsUnique();

            entity.Property(e => e.IdFabrilSolicitud).HasColumnName("ID_FABRIL_SOLICITUD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ObsEliminado)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS_ELIMINADO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Recepcionada)
                .HasColumnName("RECEPCIONADA")
                .HasComment("0 = No recepcionado completamente. 1 = Recepcion Total. 2 = Recepcion Parcial.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilSolicituds)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.FabrilSolicituds)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_FABRIL_SOLICITUD_DEPARTAMENTO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.FabrilSolicituds)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_DEPOSITO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilSolicituds)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.FabrilSolicituds)
                .HasForeignKey(d => d.Responsable)
                .HasConstraintName("FK_FABRIL_SOLICITUD_FUNCIONARIO");
        });

        modelBuilder.Entity<FabrilSolicitudProducto>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSolicitudProducto);

            entity.ToTable("FABRIL_SOLICITUD_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdFabrilSolicitud, e.IdProducto, e.RegStatus }, "UK_FABRIL_SOLICITUD_PRODUCTO");

            entity.Property(e => e.IdFabrilSolicitudProducto).HasColumnName("ID_FABRIL_SOLICITUD_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilSolicitud).HasColumnName("ID_FABRIL_SOLICITUD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilSolicitudNavigation)
                .WithMany(p => p.FabrilSolicitudProductos)
                .HasForeignKey(d => d.IdFabrilSolicitud)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_PRODUCTO_FABRIL_SOLICITUD");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilSolicitudProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_FABRIL_SOLICITUD_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilSolicitudProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<FabrilSolicitudTransf>(entity =>
        {
            entity.HasKey(e => e.IdFabrilSolicitudTransf);

            entity.ToTable("FABRIL_SOLICITUD_TRANSF", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_FABRIL_SOLICITUD_TRANSF")
                .IsUnique();

            entity.Property(e => e.IdFabrilSolicitudTransf).HasColumnName("ID_FABRIL_SOLICITUD_TRANSF");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaNecesidad)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NECESIDAD");

            entity.Property(e => e.IdDepositoEntrada).HasColumnName("ID_DEPOSITO_ENTRADA");

            entity.Property(e => e.IdDepositoSalida).HasColumnName("ID_DEPOSITO_SALIDA");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ObsEliminado)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS_ELIMINADO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable)
                .HasColumnName("RESPONSABLE")
                .HasComment("Relacion con la tabla FUNCIONARIO.ID_FUNCIONARIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilSolicitudTransfs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_EMPRESA");

            entity.HasOne(d => d.IdDepositoEntradaNavigation)
                .WithMany(p => p.FabrilSolicitudTransfIdDepositoEntradaNavigations)
                .HasForeignKey(d => d.IdDepositoEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_DEPOSITO1");

            entity.HasOne(d => d.IdDepositoSalidaNavigation)
                .WithMany(p => p.FabrilSolicitudTransfIdDepositoSalidaNavigations)
                .HasForeignKey(d => d.IdDepositoSalida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_DEPOSITO");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.FabrilSolicitudTransfs)
                .HasForeignKey(d => d.IdProduccion)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_PRODUCCION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilSolicitudTransfs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.FabrilSolicitudTransfs)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_FUNCIONARIO");
        });

        modelBuilder.Entity<FabrilSolicitudTransfProducto>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudTransfProducto);

            entity.ToTable("FABRIL_SOLICITUD_TRANSF_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdFabrilSolicitudTransf, e.IdProducto, e.IdLote, e.RegStatus }, "UK_FABRIL_SOLICITUD_TRANSF_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdSolicitudTransfProducto).HasColumnName("ID_SOLICITUD_TRANSF_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilSolicitudTransf).HasColumnName("ID_FABRIL_SOLICITUD_TRANSF");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilSolicitudTransfNavigation)
                .WithMany(p => p.FabrilSolicitudTransfProductos)
                .HasForeignKey(d => d.IdFabrilSolicitudTransf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_PRODUCTO_FABRIL_SOLICITUD_TRANSF");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilSolicitudTransfProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilSolicitudTransfProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_SOLICITUD_TRANSF_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<FabrilTablaBoom>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("FABRIL_TABLA_BOOM", "dbo");

            entity.Property(e => e.CantidadItem)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("cantidad_item");

            entity.Property(e => e.CodigoItem)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("codigo_item");

            entity.Property(e => e.DescripcionItem)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion_item");

            entity.Property(e => e.IdFabrilPlanProduccion).HasColumnName("ID_FABRIL_PLAN_PRODUCCION");

            entity.Property(e => e.IdItem).HasColumnName("id_item");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.Sem1)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM1");

            entity.Property(e => e.Sem10)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM10");

            entity.Property(e => e.Sem11)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM11");

            entity.Property(e => e.Sem12)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM12");

            entity.Property(e => e.Sem13)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM13");

            entity.Property(e => e.Sem14)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM14");

            entity.Property(e => e.Sem15)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM15");

            entity.Property(e => e.Sem16)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM16");

            entity.Property(e => e.Sem17)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM17");

            entity.Property(e => e.Sem18)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM18");

            entity.Property(e => e.Sem19)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM19");

            entity.Property(e => e.Sem2)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM2");

            entity.Property(e => e.Sem20)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM20");

            entity.Property(e => e.Sem21)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM21");

            entity.Property(e => e.Sem22)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM22");

            entity.Property(e => e.Sem23)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM23");

            entity.Property(e => e.Sem24)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM24");

            entity.Property(e => e.Sem25)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM25");

            entity.Property(e => e.Sem26)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM26");

            entity.Property(e => e.Sem27)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM27");

            entity.Property(e => e.Sem28)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM28");

            entity.Property(e => e.Sem29)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM29");

            entity.Property(e => e.Sem3)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM3");

            entity.Property(e => e.Sem30)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM30");

            entity.Property(e => e.Sem31)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM31");

            entity.Property(e => e.Sem32)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM32");

            entity.Property(e => e.Sem33)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM33");

            entity.Property(e => e.Sem34)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM34");

            entity.Property(e => e.Sem35)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM35");

            entity.Property(e => e.Sem36)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM36");

            entity.Property(e => e.Sem37)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM37");

            entity.Property(e => e.Sem38)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM38");

            entity.Property(e => e.Sem39)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM39");

            entity.Property(e => e.Sem4)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM4");

            entity.Property(e => e.Sem40)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM40");

            entity.Property(e => e.Sem41)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM41");

            entity.Property(e => e.Sem42)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM42");

            entity.Property(e => e.Sem43)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM43");

            entity.Property(e => e.Sem44)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM44");

            entity.Property(e => e.Sem45)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM45");

            entity.Property(e => e.Sem46)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM46");

            entity.Property(e => e.Sem47)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM47");

            entity.Property(e => e.Sem48)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM48");

            entity.Property(e => e.Sem49)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM49");

            entity.Property(e => e.Sem5)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM5");

            entity.Property(e => e.Sem50)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM50");

            entity.Property(e => e.Sem51)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM51");

            entity.Property(e => e.Sem52)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM52");

            entity.Property(e => e.Sem6)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM6");

            entity.Property(e => e.Sem7)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM7");

            entity.Property(e => e.Sem8)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM8");

            entity.Property(e => e.Sem9)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SEM9");

            entity.Property(e => e.TipoItem).HasColumnName("tipo_item");
        });

        modelBuilder.Entity<FabrilTransferenciaProducto>(entity =>
        {
            entity.HasKey(e => e.IdTransferenciaProducto);

            entity.ToTable("FABRIL_TRANSFERENCIA_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdFabrilTransferencia, e.IdProducto, e.IdLote, e.RegStatus }, "UK_FABRIL_TRANSFERENCIA_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdTransferenciaProducto).HasColumnName("ID_TRANSFERENCIA_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilTransferencia).HasColumnName("ID_FABRIL_TRANSFERENCIA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilTransferenciaNavigation)
                .WithMany(p => p.FabrilTransferenciaProductos)
                .HasForeignKey(d => d.IdFabrilTransferencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_FABRIL_TRANSFERENCIA");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilTransferenciaProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilTransferenciaProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<FabrilTransferenciaProductoPallet>(entity =>
        {
            entity.HasKey(e => e.IdTransferenciaProdPallet);

            entity.ToTable("FABRIL_TRANSFERENCIA_PRODUCTO_PALLET", "dbo");

            entity.Property(e => e.IdTransferenciaProdPallet).HasColumnName("ID_TRANSFERENCIA_PROD_PALLET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFabrilTransferencia).HasColumnName("ID_FABRIL_TRANSFERENCIA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransferenciaProducto).HasColumnName("ID_TRANSFERENCIA_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilTransferenciaNavigation)
                .WithMany(p => p.FabrilTransferenciaProductoPallets)
                .HasForeignKey(d => d.IdFabrilTransferencia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_PALLET_FABRIL_TRANSFERENCIA");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FabrilTransferenciaProductoPallets)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_PALLET_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FabrilTransferenciaProductoPallets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_PALLET_PRODUCTO");

            entity.HasOne(d => d.IdTransferenciaProductoNavigation)
                .WithMany(p => p.FabrilTransferenciaProductoPallets)
                .HasForeignKey(d => d.IdTransferenciaProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_PRODUCTO_PALLET_FABRIL_TRANSFERENCIA_PRODUCTO_PALLET");
        });

        modelBuilder.Entity<FabrilTransferencium>(entity =>
        {
            entity.HasKey(e => e.IdFabrilTransferencia);

            entity.ToTable("FABRIL_TRANSFERENCIA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Fecha }, "IX_FABRIL_TRANSFERENCIA");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdFabrilSolicitudTransf, e.Fecha }, "UK_FABRIL_TRANSFERENCIA")
                .IsUnique();

            entity.Property(e => e.IdFabrilTransferencia).HasColumnName("ID_FABRIL_TRANSFERENCIA");

            entity.Property(e => e.DepositoEntrada).HasColumnName("DEPOSITO_ENTRADA");

            entity.Property(e => e.DepositoSalida).HasColumnName("DEPOSITO_SALIDA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entregado).HasColumnName("ENTREGADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilSolicitudTransf).HasColumnName("ID_FABRIL_SOLICITUD_TRANSF");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ObsEliminado)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS_ELIMINADO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.HasOne(d => d.DepositoEntradaNavigation)
                .WithMany(p => p.FabrilTransferenciumDepositoEntradaNavigations)
                .HasForeignKey(d => d.DepositoEntrada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_DEPOSITO1");

            entity.HasOne(d => d.DepositoSalidaNavigation)
                .WithMany(p => p.FabrilTransferenciumDepositoSalidaNavigations)
                .HasForeignKey(d => d.DepositoSalida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_DEPOSITO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FabrilTransferencia)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_EMPRESA");

            entity.HasOne(d => d.IdFabrilSolicitudTransfNavigation)
                .WithMany(p => p.FabrilTransferencia)
                .HasForeignKey(d => d.IdFabrilSolicitudTransf)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_FABRIL_SOLICITUD_TRANSF");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FabrilTransferencia)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.FabrilTransferencia)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FABRIL_TRANSFERENCIA_FUNCIONARIO");
        });

        modelBuilder.Entity<FacturaCrecon>(entity =>
        {
            entity.HasKey(e => e.IdFacturaCrecon);

            entity.ToTable("FACTURA_CRECON", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Fecha, e.IdCliente }, "IDX_FACTURA_CRECON_INF");

            entity.HasIndex(e => new { e.Fecha, e.RegStatus, e.Empresa, e.IdNotaRemision }, "IDX_F_LIST_VALOR_FACT_CLI");

            entity.HasIndex(e => new { e.Empresa, e.IdPedido, e.IdCliente, e.Nota, e.IdTimbrado, e.RegStatus }, "IDX_L_CUENTA_RECIBIR");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdPedido, e.IdCliente }, "UK_FACTURA_CRECON")
                .IsUnique();

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Anticipo).HasColumnName("ANTICIPO");

            entity.Property(e => e.AtcGerCom).HasColumnName("ATC_GER_COM");

            entity.Property(e => e.AtcGerente)
                .HasColumnName("ATC_GERENTE")
                .HasDefaultValueSql("((0))")
                .HasComment("Se guarda el ID_FUNCIONARIO del gerente del vendedor");

            entity.Property(e => e.AtcGerentePedido).HasColumnName("ATC_GERENTE_PEDIDO");

            entity.Property(e => e.ChoferChapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_CHAPA");

            entity.Property(e => e.ChoferVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_VEHICULO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoVentaPrecio).HasColumnName("ID_CONTRATO_VENTA_PRECIO");

            entity.Property(e => e.IdCuenta)
                .HasColumnName("ID_CUENTA")
                .HasComment("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdPedido)
                .HasColumnName("ID_PEDIDO")
                .HasComment("Factura de Venta: ID_PEDIDO de la tabla PEDIDO.\r\nFactura de Servicio: ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVendCom)
                .HasColumnName("ID_VEND_COM")
                .HasComment("ESTOS DOS CAMPOS SOLO SE AGREGARON A MODO DE ARREGLO PARA COMISION - RONALD/CLEVISON/CHARY");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpCompSalida).HasColumnName("IMP_COMP_SALIDA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION")
                .HasComment("Se guardara el motivo de la cancelacion de la factura, el usuario podra escribir lo que desee hasta 500 caracteres");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.Recepcion).HasColumnName("RECEPCION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION")
                .HasComment("Dato proveniente del adaptador de Semilla");

            entity.Property(e => e.TipoActivo).HasColumnName("TIPO_ACTIVO");

            entity.Property(e => e.TipoFactura)
                .HasColumnName("TIPO_FACTURA")
                .HasComment("0:Venta Normal 1: Venta Servicio 2: Venta Inmobilizado(Otras facturas)");

            entity.Property(e => e.TipoFlete)
                .HasColumnName("TIPO_FLETE")
                .HasComment("0 - Empresa 1 - Cliente");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength()
                .HasComment("0: AutoImpreso 3: Electronica");

            entity.Property(e => e.TipoPago).HasColumnName("TIPO_PAGO");

            entity.Property(e => e.TipoPedido)
                .HasColumnName("TIPO_PEDIDO")
                .HasComment("0: ID_PEDIDO - 1:ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.TipoSalida)
                .HasColumnName("TIPO_SALIDA")
                .HasComment("0:Sin Remision 1:Con Remision");

            entity.Property(e => e.UsuarioControl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("USUARIO_CONTROL");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAnticipo)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_ANTICIPO");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.AtcGerenteNavigation)
                .WithMany(p => p.FacturaCreconAtcGerenteNavigations)
                .HasForeignKey(d => d.AtcGerente)
                .HasConstraintName("FK_FACTURA_CRECON_FUNCIONARIO1");

            entity.HasOne(d => d.AtcGerentePedidoNavigation)
                .WithMany(p => p.FacturaCreconAtcGerentePedidoNavigations)
                .HasForeignKey(d => d.AtcGerentePedido)
                .HasConstraintName("FK_FACTURA_CRECON_FUNCIONARIO2");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_FACTURA_CRECON_CARPETA");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdCentroCosto)
                .HasConstraintName("FK_FACTURA_CRECON_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_FACTURA_CRECON_CHOFER");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_CLIENTE");

            entity.HasOne(d => d.IdContratoVentaPrecioNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdContratoVentaPrecio)
                .HasConstraintName("FK_FACTURA_CRECON_CONTRATO_VENTA_PRECIO");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_FACTURA_CRECON_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_FACTURA_CRECON_DEPARTAMENTO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_FACTURA_CRECON_DEPOSITO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FacturaCreconIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_FACTURA_CRECON_FUNCIONARIO");

            entity.HasOne(d => d.IdNotaRemisionNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdNotaRemision)
                .HasConstraintName("FK_FACTURA_CRECON_NOTA_REMISION");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_PEDIDO");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_FACTURA_CRECON_PLAN_CUENTA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_FACTURA_CRECON_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_FACTURA_CRECON_TRANSPORTADORA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.FacturaCreconIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_FACTURA_CRECON_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.FacturaCrecons)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FacturaCreconRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<FacturaCreconLote>(entity =>
        {
            entity.HasKey(e => e.IdFacturaCreconLote);

            entity.ToTable("FACTURA_CRECON_LOTE", "dbo");

            entity.Property(e => e.IdFacturaCreconLote).HasColumnName("ID_FACTURA_CRECON_LOTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lote)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.FacturaCreconLotes)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_LOTE_FACTURA_CRECON");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FacturaCreconLotes)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_LOTE_PRODUCTO");
        });

        modelBuilder.Entity<FacturaCreconProducto>(entity =>
        {
            entity.HasKey(e => e.IdFacturaCreconProducto);

            entity.ToTable("FACTURA_CRECON_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdProducto, e.IdLote, e.Cantidad, e.RegStatus }, "IDX_FACTURA_CRECON_PRODUCTO_ID_FACTURA_CRECON_ID_PRODUCTO_CANTIDAD_REG_STATUS");

            entity.HasIndex(e => new { e.IdFacturaCrecon, e.RegStatus }, "IDX_Imprime_Documento_Factura");

            entity.HasIndex(e => new { e.Cantidad, e.RegStatus }, "IDX_Listado_Factura_Crecon_Producto");

            entity.Property(e => e.IdFacturaCreconProducto).HasColumnName("ID_FACTURA_CRECON_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Hectarea)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HECTAREA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioGuarani)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UNITARIO_GUARANI");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.FacturaCreconProductos)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_PRODUCTO_FACTURA_CRECON");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FacturaCreconProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FacturaCreconProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_CRECON_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdServicioNavigation)
                .WithMany(p => p.FacturaCreconProductos)
                .HasForeignKey(d => d.IdServicio)
                .HasConstraintName("FK_FACTURA_CRECON_PRODUCTO_SERVICIO");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.FacturaCreconProductos)
                .HasForeignKey(d => d.IdVehiculoPk)
                .HasConstraintName("FK_FACTURA_CRECON_PRODUCTO_VEHICULO");
        });

        modelBuilder.Entity<FacturaExportacion>(entity =>
        {
            entity.HasKey(e => e.IdFacturaExportacion);

            entity.ToTable("FACTURA_EXPORTACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdPedido, e.IdCliente, e.Nota, e.IdTimbrado, e.RegStatus }, "IDX_L_CUENTA_RECIBIR");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_FACTURA_EXPORTACION")
                .IsUnique();

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.Aseguradora).HasColumnName("ASEGURADORA");

            entity.Property(e => e.Certificado).HasColumnName("CERTIFICADO");

            entity.Property(e => e.Condicion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Condicion2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONDICION2");

            entity.Property(e => e.Condicion3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONDICION3");

            entity.Property(e => e.Condicion4)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONDICION4");

            entity.Property(e => e.Condicion5)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONDICION5");

            entity.Property(e => e.Condicion6)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONDICION6");

            entity.Property(e => e.Condicion7)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONDICION7");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Crt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CRT");

            entity.Property(e => e.Declarador).HasColumnName("DECLARADOR");

            entity.Property(e => e.Despachante).HasColumnName("DESPACHANTE");

            entity.Property(e => e.Despacho)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.DespachoCierre)
                .HasColumnType("datetime")
                .HasColumnName("DESPACHO_CIERRE");

            entity.Property(e => e.DespachoCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_COTIZACION");

            entity.Property(e => e.DespachoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_VALOR");

            entity.Property(e => e.DespachoValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_VALOR_DOLAR");

            entity.Property(e => e.DespachoVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("DESPACHO_VENCIMIENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCargaCamion)
                .HasColumnType("date")
                .HasColumnName("FECHA_CARGA_CAMION");

            entity.Property(e => e.FechaPago)
                .HasColumnType("date")
                .HasColumnName("FECHA_PAGO");

            entity.Property(e => e.Fitosanitario).HasColumnName("FITOSANITARIO");

            entity.Property(e => e.FleteDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FLETE_DOCUMENTO");

            entity.Property(e => e.FleteValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FLETE_VALOR");

            entity.Property(e => e.FleteValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FLETE_VALOR_DOLAR");

            entity.Property(e => e.FleteVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FLETE_VENCIMIENTO");

            entity.Property(e => e.Gopi).HasColumnName("GOPI");

            entity.Property(e => e.Historico)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAduana).HasColumnName("ID_ADUANA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProformaCargaExportacion).HasColumnName("ID_PROFORMA_CARGA_EXPORTACION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LimiteCarga)
                .HasColumnType("date")
                .HasColumnName("LIMITE_CARGA");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.Negociacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEGOCIACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.PagoIntermediario).HasColumnName("PAGO_INTERMEDIARIO");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SeguroDocumento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SEGURO_DOCUMENTO");

            entity.Property(e => e.SeguroValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SEGURO_VALOR");

            entity.Property(e => e.SeguroValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SEGURO_VALOR_DOLAR");

            entity.Property(e => e.SeguroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("SEGURO_VENCIMIENTO");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.TransportadoraDetalle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TRANSPORTADORA_DETALLE");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_EMPRESA");

            entity.HasOne(d => d.IdAduanaNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdAduana)
                .HasConstraintName("FK_FACTURA_EXPORTACION_ADUANA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_CLIENTE");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdContratoVenta)
                .HasConstraintName("FK_FACTURA_EXPORTACION_CONTRATO_VENTA");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_FACTURA_EXPORTACION_PEDIDO");

            entity.HasOne(d => d.IdProformaCargaExportacionNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdProformaCargaExportacion)
                .HasConstraintName("FK_FACTURA_EXPORTACION_PROFORMA_CARGA_EXPORTACION");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_FACTURA_EXPORTACION_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_FACTURA_EXPORTACION_TRANSPORTADORA");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_FACTURA_EXPORTACION_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FacturaExportacions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_FACTURA_EXPORTACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FacturaExportacionCierre>(entity =>
        {
            entity.HasKey(e => e.IdFacturaExportacionCierre);

            entity.ToTable("FACTURA_EXPORTACION_CIERRE", "dbo");

            entity.Property(e => e.IdFacturaExportacionCierre).HasColumnName("ID_FACTURA_EXPORTACION_CIERRE");

            entity.Property(e => e.Anulacion).HasColumnName("ANULACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FacturaExportacionCierres)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_CIERRE_EMPRESA");

            entity.HasOne(d => d.IdFacturaExportacionNavigation)
                .WithMany(p => p.FacturaExportacionCierres)
                .HasForeignKey(d => d.IdFacturaExportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_CIERRE_FACTURA_EXPORTACION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FacturaExportacionCierres)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_FACTURA_EXPORTACION_CIERRE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FacturaExportacionFactura>(entity =>
        {
            entity.HasKey(e => e.IdFacturaExportacionFactura)
                .HasName("PK_FATURAS_EXPORTACAO_FATURAS");

            entity.ToTable("FACTURA_EXPORTACION_FACTURA", "dbo");

            entity.HasIndex(e => new { e.DocumentoNumero, e.IdProveedorTimbrado, e.IdProveedor, e.IdDocumento, e.IdFacturaExportacion }, "IX_Factura_Exportacion");

            entity.HasIndex(e => new { e.IdFacturaExportacion, e.IdProveedor, e.IdDocumento, e.DocumentoNumero, e.RegStatus }, "UK_FACTURA_EXPORTACION_FACTURA")
                .IsUnique();

            entity.Property(e => e.IdFacturaExportacionFactura).HasColumnName("ID_FACTURA_EXPORTACION_FACTURA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.DocumentoVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_VENCIMIENTO");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.GeneraPagar).HasColumnName("GENERA_PAGAR");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdClase).HasColumnName("ID_CLASE");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.Imponible)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPONIBLE");

            entity.Property(e => e.Irp).HasColumnName("IRP");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.IvaDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_DOLAR");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdClaseNavigation)
                .WithMany(p => p.FacturaExportacionFacturas)
                .HasForeignKey(d => d.IdClase)
                .HasConstraintName("FK_FACTURA_EXPORTACION_FACTURA_CLASE");

            entity.HasOne(d => d.IdFacturaExportacionNavigation)
                .WithMany(p => p.FacturaExportacionFacturas)
                .HasForeignKey(d => d.IdFacturaExportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_FACTURA_FACTURA_EXPORTACION");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.FacturaExportacionFacturas)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_FACTURA_EXPORTACION_FACTURA_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.FacturaExportacionFacturas)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_FACTURA_EXPORTACION_FACTURA_PROVEEDOR_TIMBRADO");
        });

        modelBuilder.Entity<FacturaExportacionProducto>(entity =>
        {
            entity.HasKey(e => e.IdFacturaExportacionProducto)
                .HasName("PK_FATURAS_EXPORTACAO_PRODUTOS");

            entity.ToTable("FACTURA_EXPORTACION_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdProducto, e.IdLote }, "IDX_FACTURA_EXPORTACION_INF");

            entity.HasIndex(e => new { e.IdFacturaExportacion, e.Cantidad }, "IDX_L_CUENTA_RECIBIR");

            entity.Property(e => e.IdFacturaExportacionProducto).HasColumnName("ID_FACTURA_EXPORTACION_PRODUCTO");

            entity.Property(e => e.Aplicado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("APLICADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.TipoDetalle)
                .HasColumnName("TIPO_DETALLE")
                .HasDefaultValueSql("((0))")
                .HasComment("0 - Linea de Producto / 1 - Linea de Flete / 2 - Linea de Seguros / 3 - Linea de Textos  ");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.HasOne(d => d.IdFacturaExportacionNavigation)
                .WithMany(p => p.FacturaExportacionProductos)
                .HasForeignKey(d => d.IdFacturaExportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_PRODUCTO_FACTURA_EXPORTACION");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.FacturaExportacionProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_FACTURA_EXPORTACION_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.FacturaExportacionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FACTURA_EXPORTACION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<Feriado>(entity =>
        {
            entity.HasKey(e => e.IdFeriado);

            entity.ToTable("FERIADO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Fecha }, "UK_FERIADO")
                .IsUnique();

            entity.Property(e => e.IdFeriado).HasColumnName("ID_FERIADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA")
                .HasDefaultValueSql("('18991231')");

            entity.Property(e => e.Observacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0: Distrital, 1:Departamental, 2:Nacional");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Feriados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FERIADO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Feriados)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_FERIADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FeriadoUnidad>(entity =>
        {
            entity.HasKey(e => e.IdFeriadoUnidad)
                .HasName("PK_FERIADOS_UNID");

            entity.ToTable("FERIADO_UNIDAD", "dbo");

            entity.HasIndex(e => new { e.IdFeriado, e.Unidad }, "UK_FERIADO_UNIDAD")
                .IsUnique();

            entity.Property(e => e.IdFeriadoUnidad).HasColumnName("ID_FERIADO_UNIDAD");

            entity.Property(e => e.IdFeriado).HasColumnName("ID_FERIADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.IdFeriadoNavigation)
                .WithMany(p => p.FeriadoUnidads)
                .HasForeignKey(d => d.IdFeriado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FERIADO_UNIDAD_FERIADO");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.FeriadoUnidads)
                .HasForeignKey(d => d.Unidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FERIADO_UNIDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FormaPago>(entity =>
        {
            entity.HasKey(e => e.IdFormaPago);

            entity.ToTable("FORMA_PAGO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_FORMA_PAGO")
                .IsUnique();

            entity.Property(e => e.IdFormaPago).HasColumnName("ID_FORMA_PAGO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Sigla)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SIGLA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FormaPagos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORMA_PAGO_EMPRESA");
        });

        modelBuilder.Entity<FormaPagoFleteImp>(entity =>
        {
            entity.HasKey(e => e.IdFormaPagoFleteImp);

            entity.ToTable("FORMA_PAGO_FLETE_IMP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_FORMA_PAGO_FLETE_IMP")
                .IsUnique();

            entity.Property(e => e.IdFormaPagoFleteImp).HasColumnName("ID_FORMA_PAGO_FLETE_IMP");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FormaPagoFleteImps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORMA_PAGO_FLETE_IMP_EMPRESA1");
        });

        modelBuilder.Entity<Formulario>(entity =>
        {
            entity.HasKey(e => e.IdFormulario);

            entity.ToTable("FORMULARIO", "dbo");

            entity.HasIndex(e => new { e.Modulo, e.NombreForm }, "UK_FORMULARIO")
                .IsUnique();

            entity.Property(e => e.IdFormulario)
                .ValueGeneratedNever()
                .HasColumnName("ID_FORMULARIO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Modulo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MODULO");

            entity.Property(e => e.NombreForm)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FORM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Formularios)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_FORMULARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Forwarder>(entity =>
        {
            entity.HasKey(e => e.IdForwarder);

            entity.ToTable("FORWARDER", "dbo");

            entity.HasIndex(e => new { e.IdProveedor, e.Empresa }, "UK_FORWARDER")
                .IsUnique();

            entity.Property(e => e.IdForwarder).HasColumnName("ID_FORWARDER");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION")
                .HasComment("Descripcion del representante o agente de carga.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Forwarders)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORWARDER_EMPRESA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Forwarders)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORWARDER_PROVEEDOR");
        });

        modelBuilder.Entity<ForwarderCostoDemDet>(entity =>
        {
            entity.HasKey(e => e.IdForwarderCostoDemDet);

            entity.ToTable("FORWARDER_COSTO_DEM_DET", "dbo");

            entity.Property(e => e.IdForwarderCostoDemDet).HasColumnName("ID_FORWARDER_COSTO_DEM_DET");

            entity.Property(e => e.ClasificacionCarga)
                .HasColumnName("CLASIFICACION_CARGA")
                .HasComment("Clasificacion de la carga, si es peligrosa o no. 0 = Peligrosa,1 = No Peligrosa");

            entity.Property(e => e.CostoDemora)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("COSTO_DEMORA");

            entity.Property(e => e.DiasLibres).HasColumnName("DIAS_LIBRES");

            entity.Property(e => e.IdCamion).HasColumnName("ID_CAMION");

            entity.Property(e => e.IdContenedor).HasColumnName("ID_CONTENEDOR");

            entity.Property(e => e.IdForwarderCostoDem).HasColumnName("ID_FORWARDER_COSTO_DEM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCamionNavigation)
                .WithMany(p => p.ForwarderCostoDemDets)
                .HasForeignKey(d => d.IdCamion)
                .HasConstraintName("FK_FORWARDER_COSTO_DEM_DET_CAMION");

            entity.HasOne(d => d.IdContenedorNavigation)
                .WithMany(p => p.ForwarderCostoDemDets)
                .HasForeignKey(d => d.IdContenedor)
                .HasConstraintName("FK_FORWARDER_COSTO_DEM_DET_CONTENEDOR");

            entity.HasOne(d => d.IdForwarderCostoDemNavigation)
                .WithMany(p => p.ForwarderCostoDemDets)
                .HasForeignKey(d => d.IdForwarderCostoDem)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORWARDER_COSTO_DEM_DET_FORWARDER_COSTO_DEMORA");
        });

        modelBuilder.Entity<ForwarderCostoDemora>(entity =>
        {
            entity.HasKey(e => e.IdForwarderCostoDem)
                .HasName("PK_FORWARDER_DET");

            entity.ToTable("FORWARDER_COSTO_DEMORA", "dbo");

            entity.HasIndex(e => new { e.IdForwarder, e.EmpresaTransporte, e.Fecha }, "UK_FORWARDER_COSTO_DEMORA")
                .IsUnique();

            entity.Property(e => e.IdForwarderCostoDem).HasColumnName("ID_FORWARDER_COSTO_DEM");

            entity.Property(e => e.CostoHasta10Dias)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("COSTO_HASTA_10_DIAS");

            entity.Property(e => e.CostoMayor10Dias)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("COSTO_MAYOR_10_DIAS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EmpresaTransporte).HasColumnName("EMPRESA_TRANSPORTE");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA")
                .HasComment("Dias estipulados para el costo por demora.");

            entity.Property(e => e.IdContenedor).HasColumnName("ID_CONTENEDOR");

            entity.Property(e => e.IdForwarder).HasColumnName("ID_FORWARDER");

            entity.Property(e => e.Moneda)
                .HasColumnName("MONEDA")
                .HasComment("Costo por demora.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ForwarderCostoDemoras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORWARDER_COSTO_DEMORA_EMPRESA");

            entity.HasOne(d => d.EmpresaTransporteNavigation)
                .WithMany(p => p.ForwarderCostoDemoraEmpresaTransporteNavigations)
                .HasForeignKey(d => d.EmpresaTransporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORWARDER_COSTO_DEMORA_CONTENEDOR");

            entity.HasOne(d => d.IdContenedorNavigation)
                .WithMany(p => p.ForwarderCostoDemoraIdContenedorNavigations)
                .HasForeignKey(d => d.IdContenedor)
                .HasConstraintName("FK_FORWARDER_COSTO_DEMORA_CONTENEDOR1");

            entity.HasOne(d => d.IdForwarderNavigation)
                .WithMany(p => p.ForwarderCostoDemoras)
                .HasForeignKey(d => d.IdForwarder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FORWARDER_COSTO_DEMORA_FORWARDER");
        });

        modelBuilder.Entity<Funcionario>(entity =>
        {
            entity.HasKey(e => e.IdFuncionario);

            entity.ToTable("FUNCIONARIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_FUNCIONARIO")
                .IsUnique();

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Altura)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("ALTURA");

            entity.Property(e => e.Ayuda)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AYUDA");

            entity.Property(e => e.AyudaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AYUDA_US");

            entity.Property(e => e.Barrio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Bonificacion).HasColumnName("BONIFICACION");

            entity.Property(e => e.CalcMutual)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CALC_MUTUAL");

            entity.Property(e => e.CarnetCategoria).HasColumnName("CARNET_CATEGORIA");

            entity.Property(e => e.CarnetConducir)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CARNET_CONDUCIR");

            entity.Property(e => e.Celular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Consumicion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONSUMICION");

            entity.Property(e => e.ConsumicionUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONSUMICION_US");

            entity.Property(e => e.ContactoUrgencia)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CONTACTO_URGENCIA");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Dinatran).HasColumnName("DINATRAN");

            entity.Property(e => e.DinatranVencimiento)
                .HasColumnType("date")
                .HasColumnName("DINATRAN_VENCIMIENTO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Domicilio).HasColumnName("DOMICILIO");

            entity.Property(e => e.DomicilioObs)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO_OBS");

            entity.Property(e => e.Edad).HasColumnName("EDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil)
                .HasColumnName("ESTADO_CIVIL")
                .HasComment("Soltero = 0, Casado o Separado = 1, Divorciado = 2, Viudo = 3. Por defecto es 0.");

            entity.Property(e => e.Estudio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTUDIO");

            entity.Property(e => e.FechaAdmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION");

            entity.Property(e => e.FechaAdmision1)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION1");

            entity.Property(e => e.FechaAdmision2)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION2");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FechaRescision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION");

            entity.Property(e => e.FechaRescision1)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION1");

            entity.Property(e => e.FechaRescision2)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION2");

            entity.Property(e => e.FechaTerminoTemp)
                .HasColumnType("date")
                .HasColumnName("FECHA_TERMINO_TEMP");

            entity.Property(e => e.Guarderia).HasColumnName("GUARDERIA");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdCategoria).HasColumnName("ID_CATEGORIA");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");

            entity.Property(e => e.IdNacionalidad).HasColumnName("ID_NACIONALIDAD");

            entity.Property(e => e.IdPorcentajeIrp).HasColumnName("ID_PORCENTAJE_IRP");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdSeguroMedico).HasColumnName("ID_SEGURO_MEDICO");

            entity.Property(e => e.IdSubUnidad).HasColumnName("ID_SUB_UNIDAD");

            entity.Property(e => e.IdTurno).HasColumnName("ID_TURNO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Inmigrante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("INMIGRANTE");

            entity.Property(e => e.Ips)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IPS");

            entity.Property(e => e.Irp).HasColumnName("IRP");

            entity.Property(e => e.Iva).HasColumnName("IVA");

            entity.Property(e => e.Jubilado).HasColumnName("JUBILADO");

            entity.Property(e => e.LugarNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LUGAR_NACIMIENTO");

            entity.Property(e => e.Mail)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("MAIL");

            entity.Property(e => e.Matricula).HasColumnName("MATRICULA");

            entity.Property(e => e.MotivoRescision)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RESCISION");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.NumeroCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CUENTA");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.Observacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pago).HasColumnName("PAGO");

            entity.Property(e => e.Peso)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PESO");

            entity.Property(e => e.PlanSalud)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLAN_SALUD");

            entity.Property(e => e.PlanSaludPorc)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLAN_SALUD_PORC");

            entity.Property(e => e.PlanSaludUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLAN_SALUD_US");

            entity.Property(e => e.Profesion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PROFESION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Reloj)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("RELOJ");

            entity.Property(e => e.Retencion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION");

            entity.Property(e => e.RetencionUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_US");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.SalarioGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_GS");

            entity.Property(e => e.SalarioMinimo)
                .HasColumnName("SALARIO_MINIMO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.SalarioPrestador)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_PRESTADOR");

            entity.Property(e => e.SalarioUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_US");

            entity.Property(e => e.Seguro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SEGURO");

            entity.Property(e => e.Sexo).HasColumnName("SEXO");

            entity.Property(e => e.Telefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TelefonoUrgencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_URGENCIA");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("      0='INSCRIPTO';\r\n      1='TEMPORARIO';\r\n      2='TRAINEE';\r\n      3='PASANTE';\r\n      4='PRESTADOR';");

            entity.Property(e => e.TipoCuenta).HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOCUMENTO");

            entity.Property(e => e.TipoDomicilio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOMICILIO");

            entity.Property(e => e.TipoEmpleado).HasColumnName("TIPO_EMPLEADO");

            entity.Property(e => e.TipoFuncion)
                .HasColumnName("TIPO_FUNCION")
                .HasComment("0 Junior\r\n1 Pleno \r\n2 Senior\r\n");

            entity.Property(e => e.TipoMonedaSal).HasColumnName("TIPO_MONEDA_SAL");

            entity.Property(e => e.TipoSangre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_SANGRE");

            entity.Property(e => e.VacacionesFin)
                .HasColumnType("datetime")
                .HasColumnName("VACACIONES_FIN");

            entity.Property(e => e.VacacionesInicio)
                .HasColumnType("datetime")
                .HasColumnName("VACACIONES_INICIO");

            entity.Property(e => e.VencimientoCi)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_CI");

            entity.Property(e => e.ViaticoPrestador)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VIATICO_PRESTADOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_EMPRESA");

            entity.HasOne(d => d.IdCategoriaNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdCategoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_CATEGORIA");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdCentroCosto)
                .HasConstraintName("FK_FUNCIONARIO_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_FUNCIONARIO_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_FUNCIONARIO_CLIENTE");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_FUNCIONARIO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_DEPARTAMENTO");

            entity.HasOne(d => d.IdEstadoNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdEstado)
                .HasConstraintName("FK_FUNCIONARIO_ESTADO");

            entity.HasOne(d => d.IdPorcentajeIrpNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdPorcentajeIrp)
                .HasConstraintName("FK_FUNCIONARIO_PORCENTAJE_IRP");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_FUNCIONARIO_PROVEEDOR");

            entity.HasOne(d => d.IdSeguroMedicoNavigation)
                .WithMany(p => p.Funcionarios)
                .HasForeignKey(d => d.IdSeguroMedico)
                .HasConstraintName("FK_FUNCIONARIO_SEGURO_MEDICO");

            entity.HasOne(d => d.IdSubUnidadNavigation)
                .WithMany(p => p.FuncionarioIdSubUnidadNavigations)
                .HasForeignKey(d => d.IdSubUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.FuncionarioIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FuncionarioRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_EMPRESA_UNIDAD2");
        });

        modelBuilder.Entity<FuncionarioCargo>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioCargo);

            entity.ToTable("FUNCIONARIO_CARGO", "dbo");

            entity.Property(e => e.IdFuncionarioCargo).HasColumnName("ID_FUNCIONARIO_CARGO");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoFuncionario).HasColumnName("TIPO_FUNCIONARIO");

            entity.Property(e => e.Transicion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TRANSICION");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.FuncionarioCargos)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_FUNCIONARIO_CARGO_DEPARTAMENTO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioCargos)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_ID_FUNCIONARIO_CARGO_FUNCIONARIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.FuncionarioCargos)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_FUNCIONARIO_CARGO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<FuncionarioCarrera>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioCarrera)
                .HasName("PK_CARRERA_UNIVERSITARIA");

            entity.ToTable("FUNCIONARIO_CARRERA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_CARRERA_UNIVERSITARIA")
                .IsUnique();

            entity.Property(e => e.IdFuncionarioCarrera).HasColumnName("ID_FUNCIONARIO_CARRERA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FuncionarioCarreras)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_FUNCIONARIO_CARRERA_EMPRESA");
        });

        modelBuilder.Entity<FuncionarioCoordenadum>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioCoordenada);

            entity.ToTable("FUNCIONARIO_COORDENADA", "dbo");

            entity.HasIndex(e => new { e.IdFuncionario, e.Coordenada }, "UK_FUNCIONARIO_COORDENADA")
                .IsUnique();

            entity.Property(e => e.IdFuncionarioCoordenada).HasColumnName("ID_FUNCIONARIO_COORDENADA");

            entity.Property(e => e.Coordenada)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COORDENADA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioCoordenada)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_FUNCIONARIO_COORDENADA_FUNCIONARIO");
        });

        modelBuilder.Entity<FuncionarioCuestionario>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioCuestionario);

            entity.ToTable("FUNCIONARIO_CUESTIONARIO", "dbo");

            entity.Property(e => e.IdFuncionarioCuestionario).HasColumnName("ID_FUNCIONARIO_CUESTIONARIO");

            entity.Property(e => e.ChkNo).HasColumnName("CHK_NO");

            entity.Property(e => e.ChkSi).HasColumnName("CHK_SI");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioCuestionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_FUNCIONARIO_CUESTIONARIO_FUNCIONARIO");
        });

        modelBuilder.Entity<FuncionarioEscolaridad>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioEscolaridad);

            entity.ToTable("FUNCIONARIO_ESCOLARIDAD", "dbo");

            entity.Property(e => e.IdFuncionarioEscolaridad).HasColumnName("ID_FUNCIONARIO_ESCOLARIDAD");

            entity.Property(e => e.Concluido).HasColumnName("CONCLUIDO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdFuncionarioCarrera).HasColumnName("ID_FUNCIONARIO_CARRERA");

            entity.Property(e => e.IdFuncionarioUniversidad).HasColumnName("ID_FUNCIONARIO_UNIVERSIDAD");

            entity.Property(e => e.Idiomas)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDIOMAS");

            entity.Property(e => e.NivelAcademico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NIVEL_ACADEMICO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Titulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioEscolaridads)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_ESCOLARIDAD_FUNCIONARIO");

            entity.HasOne(d => d.IdFuncionarioCarreraNavigation)
                .WithMany(p => p.FuncionarioEscolaridads)
                .HasForeignKey(d => d.IdFuncionarioCarrera)
                .HasConstraintName("FK_FUNCIONARIO_ESCOLARIDAD_FUNCIONARIO_CARRERA");

            entity.HasOne(d => d.IdFuncionarioUniversidadNavigation)
                .WithMany(p => p.FuncionarioEscolaridads)
                .HasForeignKey(d => d.IdFuncionarioUniversidad)
                .HasConstraintName("FK_FUNCIONARIO_ESCOLARIDAD_FUNCIONARIO_UNIVERSIDAD");
        });

        modelBuilder.Entity<FuncionarioFamiliar>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioFamiliar);

            entity.ToTable("FUNCIONARIO_FAMILIAR", "dbo");

            entity.Property(e => e.IdFuncionarioFamiliar).HasColumnName("ID_FUNCIONARIO_FAMILIAR");

            entity.Property(e => e.CalculaBonificacion).HasColumnName("CALCULA_BONIFICACION");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdNacionalidad).HasColumnName("ID_NACIONALIDAD");

            entity.Property(e => e.LugarTrabajo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LUGAR_TRABAJO");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.Ocupacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OCUPACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Vinculo).HasColumnName("VINCULO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioFamiliars)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_FAMILIAR_FUNCIONARIO");

            entity.HasOne(d => d.IdNacionalidadNavigation)
                .WithMany(p => p.FuncionarioFamiliars)
                .HasForeignKey(d => d.IdNacionalidad)
                .HasConstraintName("FK_FUNCIONARIO_FAMILIAR_NACIONALIDAD");
        });

        modelBuilder.Entity<FuncionarioGuarderium>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("FUNCIONARIO_GUARDERIA", "dbo");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("date")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdFuncionarioGuarderia)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_FUNCIONARIO_GUARDERIA");

            entity.Property(e => e.IdNacionalidad).HasColumnName("ID_NACIONALIDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<FuncionarioSeleccion>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioSeleccion);

            entity.ToTable("FUNCIONARIO_SELECCION", "dbo");

            entity.Property(e => e.IdFuncionarioSeleccion).HasColumnName("ID_FUNCIONARIO_SELECCION");

            entity.Property(e => e.Almuerzo).HasColumnName("ALMUERZO");

            entity.Property(e => e.Comision).HasColumnName("COMISION");

            entity.Property(e => e.DescripcionOtros)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_OTROS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Horario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HORARIO");

            entity.Property(e => e.HorarioOtros)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HORARIO_OTROS");

            entity.Property(e => e.HorarioSabado)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("HORARIO_SABADO");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdFuncionarioContratado).HasColumnName("ID_FUNCIONARIO_CONTRATADO");

            entity.Property(e => e.IdFuncionarioSolicitante).HasColumnName("ID_FUNCIONARIO_SOLICITANTE");

            entity.Property(e => e.IdGerenteSolicitante).HasColumnName("ID_GERENTE_SOLICITANTE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LugarTrabajo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LUGAR_TRABAJO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MotivoSeleccion).HasColumnName("MOTIVO_SELECCION");

            entity.Property(e => e.MotivoSeleccionOtros)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_SELECCION_OTROS");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Otros).HasColumnName("OTROS");

            entity.Property(e => e.Pasaje).HasColumnName("PASAJE");

            entity.Property(e => e.PeriodoPrueba).HasColumnName("PERIODO_PRUEBA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Salario)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO");

            entity.Property(e => e.TipoContrato).HasColumnName("TIPO_CONTRATO");

            entity.Property(e => e.ValorViatico)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_VIATICO");

            entity.Property(e => e.Viatico).HasColumnName("VIATICO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FuncionarioSeleccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioContratadoNavigation)
                .WithMany(p => p.FuncionarioSeleccionIdFuncionarioContratadoNavigations)
                .HasForeignKey(d => d.IdFuncionarioContratado)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_FUNCIONARIO2");

            entity.HasOne(d => d.IdFuncionarioSolicitanteNavigation)
                .WithMany(p => p.FuncionarioSeleccionIdFuncionarioSolicitanteNavigations)
                .HasForeignKey(d => d.IdFuncionarioSolicitante)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_FUNCIONARIO");

            entity.HasOne(d => d.IdGerenteSolicitanteNavigation)
                .WithMany(p => p.FuncionarioSeleccionIdGerenteSolicitanteNavigations)
                .HasForeignKey(d => d.IdGerenteSolicitante)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_FUNCIONARIO1");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.FuncionarioSeleccions)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_USUARIO");
        });

        modelBuilder.Entity<FuncionarioSeleccionDet>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioSeleccionDet);

            entity.ToTable("FUNCIONARIO_SELECCION_DET", "dbo");

            entity.Property(e => e.IdFuncionarioSeleccionDet).HasColumnName("ID_FUNCIONARIO_SELECCION_DET");

            entity.Property(e => e.CheckNo).HasColumnName("CHECK_NO");

            entity.Property(e => e.CheckSi).HasColumnName("CHECK_SI");

            entity.Property(e => e.DescripcionEquipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EQUIPO");

            entity.Property(e => e.IdFuncionarioSeleccion).HasColumnName("ID_FUNCIONARIO_SELECCION");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Observaciones)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFuncionarioSeleccionNavigation)
                .WithMany(p => p.FuncionarioSeleccionDets)
                .HasForeignKey(d => d.IdFuncionarioSeleccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_DET_FUNCIONARIO_SELECCION");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.FuncionarioSeleccionDets)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_FUNCIONARIO_SELECCION_DET_USUARIO");
        });

        modelBuilder.Entity<FuncionarioTraslado>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioTraslado)
                .HasName("PK__FUNCIONA__443AFF31AD242B6E");

            entity.ToTable("FUNCIONARIO_TRASLADO", "dbo");

            entity.Property(e => e.IdFuncionarioTraslado).HasColumnName("ID_FUNCIONARIO_TRASLADO");

            entity.Property(e => e.Beneficio)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BENEFICIO");

            entity.Property(e => e.CondicionTraslado).HasColumnName("CONDICION_TRASLADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaTraslado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_TRASLADO");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdCargoActual).HasColumnName("ID_CARGO_ACTUAL");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDepartamentoActual).HasColumnName("ID_DEPARTAMENTO_ACTUAL");

            entity.Property(e => e.IdEncargado).HasColumnName("ID_ENCARGADO");

            entity.Property(e => e.IdEncargadoActual).HasColumnName("ID_ENCARGADO_ACTUAL");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdGerenteActual).HasColumnName("ID_GERENTE_ACTUAL");

            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadActual).HasColumnName("ID_UNIDAD_ACTUAL");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MotAsc).HasColumnName("MOT_ASC");

            entity.Property(e => e.MotCamCar).HasColumnName("MOT_CAM_CAR");

            entity.Property(e => e.MotCamDep).HasColumnName("MOT_CAM_DEP");

            entity.Property(e => e.MotCamSal).HasColumnName("MOT_CAM_SAL");

            entity.Property(e => e.MotDescripcion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("MOT_DESCRIPCION");

            entity.Property(e => e.MotProm).HasColumnName("MOT_PROM");

            entity.Property(e => e.MotTransfUni).HasColumnName("MOT_TRANSF_UNI");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salario)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SALARIO");

            entity.Property(e => e.SalarioActual)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("SALARIO_ACTUAL");

            entity.Property(e => e.ValorBeneficio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_BENEFICIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FuncionarioTraslados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdDepartamentoNavigations)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_DEPARTAMENTO1");

            entity.HasOne(d => d.IdDepartamentoActualNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdDepartamentoActualNavigations)
                .HasForeignKey(d => d.IdDepartamentoActual)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_DEPARTAMENTO");

            entity.HasOne(d => d.IdEncargadoActualNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdEncargadoActualNavigations)
                .HasForeignKey(d => d.IdEncargadoActual)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_FUNCIONARIO1");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_FUNCIONARIO");

            entity.HasOne(d => d.IdGerenteActualNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdGerenteActualNavigations)
                .HasForeignKey(d => d.IdGerenteActual)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_FUNCIONARIO2");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.IdUnidadActualNavigation)
                .WithMany(p => p.FuncionarioTrasladoIdUnidadActualNavigations)
                .HasForeignKey(d => d.IdUnidadActual)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.FuncionarioTrasladoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_EMPRESA_UNIDAD2");
        });

        modelBuilder.Entity<FuncionarioTrasladoAprobacion>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioTrasladoAprobacion)
                .HasName("PK__FUNCIONA__2538DEE2C6ADB2B7");

            entity.ToTable("FUNCIONARIO_TRASLADO_APROBACION", "dbo");

            entity.Property(e => e.IdFuncionarioTrasladoAprobacion).HasColumnName("ID_FUNCIONARIO_TRASLADO_APROBACION");

            entity.Property(e => e.Autorizado).HasColumnName("AUTORIZADO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdFuncionarioTraslado).HasColumnName("ID_FUNCIONARIO_TRASLADO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.OrdenAutorizado).HasColumnName("ORDEN_AUTORIZADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioTrasladoAprobacions)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_APROBACION_FUNCIONARIO");

            entity.HasOne(d => d.IdFuncionarioTrasladoNavigation)
                .WithMany(p => p.FuncionarioTrasladoAprobacions)
                .HasForeignKey(d => d.IdFuncionarioTraslado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_APROBACION_FUNCIONARIO_TRASLADO");
        });

        modelBuilder.Entity<FuncionarioTrasladoDet>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioTrasladoDet)
                .HasName("PK__FUNCIONA__BC7DFC3991405925");

            entity.ToTable("FUNCIONARIO_TRASLADO_DET", "dbo");

            entity.Property(e => e.IdFuncionarioTrasladoDet).HasColumnName("ID_FUNCIONARIO_TRASLADO_DET");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdFuncionarioTraslado).HasColumnName("ID_FUNCIONARIO_TRASLADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioTrasladoDets)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_DET_FUNCIONARIO");

            entity.HasOne(d => d.IdFuncionarioTrasladoNavigation)
                .WithMany(p => p.FuncionarioTrasladoDets)
                .HasForeignKey(d => d.IdFuncionarioTraslado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TRASLADO_DET_FUNCIONARIO_TRASLADO");
        });

        modelBuilder.Entity<FuncionarioTurno>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioTurno);

            entity.ToTable("FUNCIONARIO_TURNO", "dbo");

            entity.Property(e => e.IdFuncionarioTurno).HasColumnName("ID_FUNCIONARIO_TURNO");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = Turnos viejos, 1 = Turno Actual, 2 = Turnos futuros");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdTurno).HasColumnName("ID_TURNO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.FuncionarioTurnos)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TURNO_FUNCIONARIO");

            entity.HasOne(d => d.IdTurnoNavigation)
                .WithMany(p => p.FuncionarioTurnos)
                .HasForeignKey(d => d.IdTurno)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FUNCIONARIO_TURNO_TURNO");
        });

        modelBuilder.Entity<FuncionarioUniversidad>(entity =>
        {
            entity.HasKey(e => e.IdFuncionarioUniversidad)
                .HasName("PK_UNIVERSIDAD");

            entity.ToTable("FUNCIONARIO_UNIVERSIDAD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_UNIVERSIDAD")
                .IsUnique();

            entity.Property(e => e.IdFuncionarioUniversidad).HasColumnName("ID_FUNCIONARIO_UNIVERSIDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.FuncionarioUniversidads)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_FUNCIONARIO_UNIVERSIDAD_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.FuncionarioUniversidads)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_UNIVERSIDAD_CIUDAD");
        });

        modelBuilder.Entity<GarantiaTercero>(entity =>
        {
            entity.HasKey(e => e.IdGarantiaTercero);

            entity.ToTable("GARANTIA_TERCERO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_GARANTIA_TERCERO")
                .IsUnique();

            entity.Property(e => e.IdGarantiaTercero).HasColumnName("ID_GARANTIA_TERCERO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.GarantiaTerceros)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.GarantiaTerceros)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.GarantiaTerceros)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.GarantiaTerceros)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.GarantiaTerceros)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.GarantiaTerceros)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<GarantiaTerceroDet>(entity =>
        {
            entity.HasKey(e => e.IdGarantiaTerceroDet);

            entity.ToTable("GARANTIA_TERCERO_DET", "dbo");

            entity.Property(e => e.IdGarantiaTerceroDet).HasColumnName("ID_GARANTIA_TERCERO_DET");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.IdGarantiaTercero).HasColumnName("ID_GARANTIA_TERCERO");

            entity.Property(e => e.Numero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdGarantiaTerceroNavigation)
                .WithMany(p => p.GarantiaTerceroDets)
                .HasForeignKey(d => d.IdGarantiaTercero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GARANTIA_TERCERO_DET_GARANTIA_TERCERO");
        });

        modelBuilder.Entity<Gasto>(entity =>
        {
            entity.HasKey(e => e.IdGasto);

            entity.ToTable("GASTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdUnidad }, "UK_GASTO")
                .IsUnique();

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.BloqueoPago).HasColumnName("BLOQUEO_PAGO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Condicion)
                .HasColumnName("CONDICION")
                .HasComment("0:CONTADO, 1:CREDITO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.ExpedidorRet)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR_RET");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdGastoMasivo).HasColumnName("ID_GASTO_MASIVO");

            entity.Property(e => e.IdProveedor)
                .HasColumnName("ID_PROVEEDOR")
                .HasComment("Aqui se insertan los dos tipos de ID_PROVEEDOR y ID_FUNCIONARIO.");

            entity.Property(e => e.IdProveedorCuenta).HasColumnName("ID_PROVEEDOR_CUENTA");

            entity.Property(e => e.IdTimbradoAut).HasColumnName("ID_TIMBRADO_AUT");

            entity.Property(e => e.IdTimbradoRet).HasColumnName("ID_TIMBRADO_RET");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionIrpTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_IRP_TOTAL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RetencionIrpTotalUs)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENCION_IRP_TOTAL_US")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RetencionNota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RETENCION_NOTA");

            entity.Property(e => e.RetencionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL");

            entity.Property(e => e.RetencionTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL_US");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.TipoGasto)
                .HasColumnName("TIPO_GASTO")
                .HasComment("0:GASTO, 1:COMPRA INMOBILIZADO, 2:EMPLEADO");

            entity.Property(e => e.TipoImpresionRet)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION_RET")
                .IsFixedLength();

            entity.Property(e => e.TipoPago)
                .HasColumnName("TIPO_PAGO")
                .HasComment("1: EFECTIVO 2: CHEQUE 5:TRANSFERENCIA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Gastos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_EMPRESA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.Gastos)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_GASTO_CHEQUERA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.Gastos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_GASTO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Gastos)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorCuentaNavigation)
                .WithMany(p => p.Gastos)
                .HasForeignKey(d => d.IdProveedorCuenta)
                .HasConstraintName("FK_GASTO_PROVEEDOR_CUENTA");

            entity.HasOne(d => d.IdTimbradoAutNavigation)
                .WithMany(p => p.GastoIdTimbradoAutNavigations)
                .HasForeignKey(d => d.IdTimbradoAut)
                .HasConstraintName("FK_GASTO_TIMBRADO1");

            entity.HasOne(d => d.IdTimbradoRetNavigation)
                .WithMany(p => p.GastoIdTimbradoRetNavigations)
                .HasForeignKey(d => d.IdTimbradoRet)
                .HasConstraintName("FK_GASTO_TIMBRADO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.GastoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.GastoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<GastoClasificacion>(entity =>
        {
            entity.HasKey(e => e.IdGastoClasificacion);

            entity.ToTable("GASTO_CLASIFICACION", "dbo");

            entity.HasIndex(e => new { e.IdGastoDocumento, e.RegStatus }, "IDX_IMPRIME_DOCUMENTO_GASTO_AUTOFACTURA");

            entity.Property(e => e.IdGastoClasificacion).HasColumnName("ID_GASTO_CLASIFICACION");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdExposicion).HasColumnName("ID_EXPOSICION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.IdMaterial).HasColumnName("ID_MATERIAL");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.Kilometraje).HasColumnName("KILOMETRAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UltKm).HasColumnName("ULT_KM");

            entity.Property(e => e.UnidadCosto).HasColumnName("UNIDAD_COSTO");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdCentroCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_CLASIFICACION_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_GASTO_CLASIFICACION_CULTIVO");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_GASTO_CLASIFICACION_DEPARTAMENTO");

            entity.HasOne(d => d.IdExposicionNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdExposicion)
                .HasConstraintName("FK_GASTO_CLASIFICACION_EXPOSICION");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_GASTO_CLASIFICACION_FUNCIONARIO");

            entity.HasOne(d => d.IdGastoDocumentoNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdGastoDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_CLASIFICACION_GASTO_DOCUMENTO");

            entity.HasOne(d => d.IdMaterialNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdMaterial)
                .HasConstraintName("FK_GASTO_CLASIFICACION_MATERIAL");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_CLASIFICACION_PLAN_CUENTA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_GASTO_CLASIFICACION_PRODUCTO");

            entity.HasOne(d => d.UnidadCostoNavigation)
                .WithMany(p => p.GastoClasificacions)
                .HasForeignKey(d => d.UnidadCosto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_CLASIFICACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<GastoDocumento>(entity =>
        {
            entity.HasKey(e => e.IdGastoDocumento);

            entity.ToTable("GASTO_DOCUMENTO", "dbo");

            entity.HasIndex(e => new { e.Numero, e.IdDocumento, e.IdGasto }, "IDX_Gasto_Documento");

            entity.HasIndex(e => new { e.IdGasto, e.RegStatus }, "IDX_IMPRIME_DOCUMENTO_GASTO_AUTOFACTURA");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.Autorizador)
                .HasColumnName("AUTORIZADOR")
                .HasComment("ID_FUNCIONARIO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.ExpedidorAut)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR_AUT");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdEscaneoFactura).HasColumnName("ID_ESCANEO_FACTURA");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocUnique).HasColumnName("ID_GASTO_DOC_UNIQUE");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdProvisionFlete).HasColumnName("ID_PROVISION_FLETE");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.Impuesto10)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUESTO_10");

            entity.Property(e => e.Impuesto5)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUESTO_5");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NroConstancia).HasColumnName("NRO_CONSTANCIA");

            entity.Property(e => e.NroControl)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTROL");

            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoImpresionAut)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION_AUT")
                .IsFixedLength();

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.GastoDocumentos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_GASTO_DOCUMENTO_EMPRESA");

            entity.HasOne(d => d.IdFacturaExportacionNavigation)
                .WithMany(p => p.GastoDocumentos)
                .HasForeignKey(d => d.IdFacturaExportacion)
                .HasConstraintName("FK_GASTO_DOCUMENTO_FACTURA_EXPORTACION");

            entity.HasOne(d => d.IdGastoNavigation)
                .WithMany(p => p.GastoDocumentos)
                .HasForeignKey(d => d.IdGasto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_DOCUMENTO_GASTO");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.GastoDocumentos)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_GASTO_DOCUMENTO_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.IdProvisionFleteNavigation)
                .WithMany(p => p.GastoDocumentos)
                .HasForeignKey(d => d.IdProvisionFlete)
                .HasConstraintName("FK_GASTO_DOCUMENTO_PROVISION_FLETE");
        });

        modelBuilder.Entity<GastoMasivo>(entity =>
        {
            entity.HasKey(e => e.IdGastoMasivo);

            entity.ToTable("GASTO_MASIVO", "dbo");

            entity.Property(e => e.IdGastoMasivo).HasColumnName("ID_GASTO_MASIVO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.GastoPlantilla).HasColumnName("GASTO_PLANTILLA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.GastoMasivos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_MASIVO_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.GastoMasivos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_MASIVO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.GastoMasivos)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_MASIVO_PLAN_CUENTA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.GastoMasivos)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_MASIVO_PROVEEDOR");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.GastoMasivos)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_GASTO_MASIVO_TIMBRADO");
        });

        modelBuilder.Entity<GastoRetencion>(entity =>
        {
            entity.HasKey(e => e.IdGastoRetencion);

            entity.ToTable("GASTO_RETENCION", "dbo");

            entity.HasIndex(e => e.IdGastoDocumento, "IDX_IMPRIME_DOCUMENTO_GASTO_AUTOFACTURA_2");

            entity.HasIndex(e => e.RegStatus, "IX_IMPRIME_DOCUMENTO_GASTO_AUTOFACTURA");

            entity.Property(e => e.IdGastoRetencion).HasColumnName("ID_GASTO_RETENCION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocUnique).HasColumnName("ID_GASTO_DOC_UNIQUE");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_10");

            entity.Property(e => e.IvaGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_5");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_10");

            entity.Property(e => e.ValorGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_5");

            entity.HasOne(d => d.IdGastoNavigation)
                .WithMany(p => p.GastoRetencions)
                .HasForeignKey(d => d.IdGasto)
                .HasConstraintName("FK_GASTO_RETENCION_GASTO");
        });

        modelBuilder.Entity<GastoRetencionDet>(entity =>
        {
            entity.HasKey(e => e.IdGastoRetencionDet);

            entity.ToTable("GASTO_RETENCION_DET", "dbo");

            entity.Property(e => e.IdGastoRetencionDet).HasColumnName("ID_GASTO_RETENCION_DET");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Factura)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocUnique).HasColumnName("ID_GASTO_DOC_UNIQUE");

            entity.Property(e => e.IdGastoRetencion).HasColumnName("ID_GASTO_RETENCION");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.ImporteIrp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IRP")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IVA");

            entity.Property(e => e.ImporteRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_RENTA");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaSet)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_SET");

            entity.Property(e => e.PorcIrp)
                .HasColumnName("PORC_IRP")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.PorcIva).HasColumnName("PORC_IVA");

            entity.Property(e => e.PorcRenta).HasColumnName("PORC_RENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdGastoNavigation)
                .WithMany(p => p.GastoRetencionDets)
                .HasForeignKey(d => d.IdGasto)
                .HasConstraintName("FK_GASTO_RETENCION_DET_GASTO");

            entity.HasOne(d => d.IdGastoRetencionNavigation)
                .WithMany(p => p.GastoRetencionDets)
                .HasForeignKey(d => d.IdGastoRetencion)
                .HasConstraintName("FK_GASTO_RETENCION_DET_GASTO_RETENCION");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.GastoRetencionDets)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_RETENCION_DET_PROVEEDOR");
        });

        modelBuilder.Entity<GastoRetencionIrp>(entity =>
        {
            entity.HasKey(e => e.IdGastoRetencionIrp);

            entity.ToTable("GASTO_RETENCION_IRP", "dbo");

            entity.Property(e => e.IdGastoRetencionIrp).HasColumnName("ID_GASTO_RETENCION_IRP");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocUnique).HasColumnName("ID_GASTO_DOC_UNIQUE");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RetenidoDolar)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENIDO_DOLAR");

            entity.Property(e => e.RetenidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENIDO_GUARANI");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.HasOne(d => d.IdGastoNavigation)
                .WithMany(p => p.GastoRetencionIrps)
                .HasForeignKey(d => d.IdGasto)
                .HasConstraintName("FK_GASTO_RETENCION_IRP_GASTO");

            entity.HasOne(d => d.IdGastoDocumentoNavigation)
                .WithMany(p => p.GastoRetencionIrps)
                .HasForeignKey(d => d.IdGastoDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GASTO_RETENCION_IRP_GASTO_DOCUMENTO");
        });

        modelBuilder.Entity<GddDocumento>(entity =>
        {
            entity.HasKey(e => e.IdGddDocumentos);

            entity.ToTable("GDD_DOCUMENTOS", "dbo");

            entity.Property(e => e.IdGddDocumentos).HasColumnName("ID_GDD_DOCUMENTOS");

            entity.Property(e => e.Caminho)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CAMINHO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Ordem).HasColumnName("ORDEM");

            entity.Property(e => e.Origem)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ORIGEM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.TipoDa)
                .HasColumnName("TIPO_DA")
                .HasComment("Tipo de documento ambiental");
        });

        modelBuilder.Entity<GddTipo>(entity =>
        {
            entity.HasKey(e => e.IdGddTipos);

            entity.ToTable("GDD_TIPOS", "dbo");

            entity.Property(e => e.IdGddTipos).HasColumnName("ID_GDD_TIPOS");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descricao)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");
        });

        modelBuilder.Entity<GpwAprobadorTipoDocumento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_aprobador_tipo_documento", "dbo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");

            entity.Property(e => e.IdGpwAprobadorTipoDoc)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_aprobador_tipo_doc");

            entity.Property(e => e.IdGpwTipoDocumento).HasColumnName("id_gpw_tipo_documento");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("reg_status");
        });

        modelBuilder.Entity<GpwArchivo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_archivo", "dbo");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.Filename)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("filename");

            entity.Property(e => e.Filepath)
                .HasColumnType("text")
                .HasColumnName("filepath");

            entity.Property(e => e.Filetype)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("filetype");

            entity.Property(e => e.IdGpwArchivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_archivo");

            entity.Property(e => e.IdProceso).HasColumnName("id_proceso");

            entity.Property(e => e.Proceso)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("proceso");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.SizeKb)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("size_kb");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwDepartamento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_departamento", "dbo");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Siglas)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SIGLAS");
        });

        modelBuilder.Entity<GpwDocumento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_documento", "dbo");

            entity.Property(e => e.Comentarios)
                .HasColumnType("text")
                .HasColumnName("comentarios");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Destinatarios)
                .HasColumnType("text")
                .HasColumnName("destinatarios");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("estado");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_aprobacion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaPublicacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_publicacion");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("fecha_vencimiento");

            entity.Property(e => e.FechaVerificacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_verificacion");

            entity.Property(e => e.FechaVigenciaDocumento)
                .HasColumnType("datetime")
                .HasColumnName("fecha_vigencia_documento");

            entity.Property(e => e.GrupoNotificaciones)
                .HasColumnType("text")
                .HasColumnName("grupo_notificaciones");

            entity.Property(e => e.IdDepartamento).HasColumnName("id_departamento");

            entity.Property(e => e.IdGpwDocumentoElaboracion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_documento_elaboracion");

            entity.Property(e => e.IdGpwTipoDocumento).HasColumnName("id_gpw_tipo_documento");

            entity.Property(e => e.MensajeCorreo)
                .HasColumnType("text")
                .HasColumnName("mensaje_correo");

            entity.Property(e => e.Nombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.Property(e => e.NombreDocumento)
                .HasColumnType("text")
                .HasColumnName("nombre_documento");

            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("numero_documento");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data");

            entity.Property(e => e.RevTemp)
                .HasColumnName("rev_temp")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Revision).HasColumnName("revision");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioElaboracion).HasColumnName("usuario_elaboracion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwDocumentoAprobacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_documento_aprobacion", "dbo");

            entity.Property(e => e.ComentarioAprobacion)
                .HasColumnType("text")
                .HasColumnName("comentario_aprobacion");

            entity.Property(e => e.ComentarioSeguimiento)
                .HasColumnType("text")
                .HasColumnName("comentario_seguimiento");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("estado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaFinAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_fin_aprobacion");

            entity.Property(e => e.FechaInicioAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_inicio_aprobacion");

            entity.Property(e => e.FechaRespuesta)
                .HasColumnType("datetime")
                .HasColumnName("fecha_respuesta");

            entity.Property(e => e.FechaSeguimiento)
                .HasColumnType("datetime")
                .HasColumnName("fecha_seguimiento");

            entity.Property(e => e.IdGpwDocumento).HasColumnName("id_gpw_documento");

            entity.Property(e => e.IdGpwDocumentoAprobacion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_documento_aprobacion");

            entity.Property(e => e.Plazo)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("plazo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("reg_status");

            entity.Property(e => e.RequiereOtraAprobacion).HasColumnName("requiere_otra_aprobacion");

            entity.Property(e => e.ResponsableAprobacion).HasColumnName("responsable_aprobacion");

            entity.Property(e => e.ResposableSeguimiento).HasColumnName("resposable_seguimiento");

            entity.Property(e => e.RevTemp).HasColumnName("rev_temp");

            entity.Property(e => e.SiguienteAprobador)
                .HasColumnType("text")
                .HasColumnName("siguiente_aprobador");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwDocumentoVerificacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_documento_verificacion", "dbo");

            entity.Property(e => e.ComentarioSeguimiento)
                .HasColumnType("text")
                .HasColumnName("comentario_seguimiento");

            entity.Property(e => e.ComentarioVerificacion)
                .HasColumnType("text")
                .HasColumnName("comentario_verificacion");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("estado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaFinVerificacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_fin_verificacion");

            entity.Property(e => e.FechaInicioVerificacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_inicio_verificacion");

            entity.Property(e => e.FechaRespuesta)
                .HasColumnType("datetime")
                .HasColumnName("fecha_respuesta");

            entity.Property(e => e.FechaSeguimiento)
                .HasColumnType("datetime")
                .HasColumnName("fecha_seguimiento");

            entity.Property(e => e.IdGpwDocumento).HasColumnName("id_gpw_documento");

            entity.Property(e => e.IdGpwDocumentoVerificacion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_documento_verificacion");

            entity.Property(e => e.Plazo)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("plazo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("reg_status");

            entity.Property(e => e.RequiereOtraVerificacion).HasColumnName("requiere_otra_verificacion");

            entity.Property(e => e.ResponsableSeguimiento).HasColumnName("responsable_seguimiento");

            entity.Property(e => e.ResponsableVerificacion).HasColumnName("responsable_verificacion");

            entity.Property(e => e.RevTemp).HasColumnName("rev_temp");

            entity.Property(e => e.SiguienteVerificador)
                .HasColumnType("text")
                .HasColumnName("siguiente_verificador");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("vencimiento");
        });

        modelBuilder.Entity<GpwDocumentoVerificadorAdicional>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_documento_verificador_adicional", "dbo");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");

            entity.Property(e => e.IdFuncionario).HasColumnName("id_funcionario");

            entity.Property(e => e.IdGpwDocumentoElaboracion).HasColumnName("id_gpw_documento_elaboracion");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<GpwMedidaConductividad>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_medida_conductividad", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwMedidaConductividad)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_medida_conductividad");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwMedidaDureza>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_medida_dureza", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwMedidaDureza)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_medida_dureza");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwMedidaTemperatura>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_medida_temperatura", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwMedidaTemperatura)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_medida_temperatura");

            entity.Property(e => e.RegData)
                .HasColumnType("date")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwNoConformidad>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_no_conformidad", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("cantidad");

            entity.Property(e => e.Cliente).HasColumnName("cliente");

            entity.Property(e => e.ConsumoProducto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("consumo_producto");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.DisposicionEdit).HasColumnName("disposicion_edit");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("estado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwNoConformidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_no_conformidad");

            entity.Property(e => e.IdGpwReclamo).HasColumnName("id_gpw_reclamo");

            entity.Property(e => e.IdGpwSubtipoNoConformidad).HasColumnName("id_gpw_subtipo_no_conformidad");

            entity.Property(e => e.IdGpwTipoDisposicion).HasColumnName("id_gpw_tipo_disposicion");

            entity.Property(e => e.IdGpwTipoNoConformidad).HasColumnName("id_gpw_tipo_no_conformidad");

            entity.Property(e => e.InformeEdit).HasColumnName("informe_edit");

            entity.Property(e => e.NumeroInc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("numero_inc");

            entity.Property(e => e.Producto).HasColumnName("producto");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data");

            entity.Property(e => e.UsuarioAsignacion).HasColumnName("usuario_asignacion");

            entity.Property(e => e.UsuarioAsignarDisposicion).HasColumnName("usuario_asignar_disposicion");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioElaboracion).HasColumnName("usuario_elaboracion");
        });

        modelBuilder.Entity<GpwNoConformidadDisposicion>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_no_conformidad_disposicion", "dbo");

            entity.Property(e => e.ComentarioAprobacion)
                .HasColumnType("text")
                .HasColumnName("comentario_aprobacion");

            entity.Property(e => e.ComentarioDisposicion)
                .HasColumnType("text")
                .HasColumnName("comentario_disposicion");

            entity.Property(e => e.ComentarioSeguimiento)
                .HasColumnType("text")
                .HasColumnName("comentario_seguimiento");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("estado");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_aprobacion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaFinDisposicion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_fin_disposicion");

            entity.Property(e => e.FechaInicioDisposicion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_inicio_disposicion");

            entity.Property(e => e.FechaSeguimiento)
                .HasColumnType("datetime")
                .HasColumnName("fecha_seguimiento");

            entity.Property(e => e.IdGpwNoConformidad).HasColumnName("id_gpw_no_conformidad");

            entity.Property(e => e.IdGpwNoConformidadDisposicion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_no_conformidad_disposicion");

            entity.Property(e => e.Plazo)
                .HasColumnType("datetime")
                .HasColumnName("plazo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ResponsableDisposicion).HasColumnName("responsable_disposicion");

            entity.Property(e => e.ResposableAprobacion).HasColumnName("resposable_aprobacion");

            entity.Property(e => e.ResposableSeguimiento).HasColumnName("resposable_seguimiento");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwNoConformidadDisposicionComentario>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_no_conformidad_disposicion_comentario", "dbo");

            entity.Property(e => e.Comentario)
                .HasColumnType("text")
                .HasColumnName("comentario");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");

            entity.Property(e => e.IdGpwNoConformidadDisposicion).HasColumnName("id_gpw_no_conformidad_disposicion");

            entity.Property(e => e.IdGpwNoConformidadDisposicionComentario)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_no_conformidad_disposicion_comentario");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");
        });

        modelBuilder.Entity<GpwNoConformidadInforme>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_no_conformidad_informe", "dbo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("estado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaFinInforme)
                .HasColumnType("datetime")
                .HasColumnName("fecha_fin_informe");

            entity.Property(e => e.FechaInforme)
                .HasColumnType("datetime")
                .HasColumnName("fecha_informe");

            entity.Property(e => e.IdGpwNoConformidad).HasColumnName("id_gpw_no_conformidad");

            entity.Property(e => e.IdGpwNoConformidadInforme)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_no_conformidad_informe");

            entity.Property(e => e.Plazo)
                .HasColumnType("datetime")
                .HasColumnName("plazo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RequiereSac).HasColumnName("requiere_sac");

            entity.Property(e => e.ResponsableInforme).HasColumnName("responsable_informe");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwNoConformidadLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_no_conformidad_lote", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("cantidad");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwNoConformidad).HasColumnName("id_gpw_no_conformidad");

            entity.Property(e => e.IdGpwNoConformidadLote)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_no_conformidad_lote");

            entity.Property(e => e.IdLote).HasColumnName("id_lote");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwOrigenAgua>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_origen_agua", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwOrigenAgua)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_origen_agua");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwPermiso>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_permiso", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Codigo)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("codigo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwPermiso)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_permiso");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwReclamo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_reclamo", "dbo");

            entity.Property(e => e.AccionesAcordadasCliente)
                .HasColumnType("text")
                .HasColumnName("acciones_acordadas_cliente");

            entity.Property(e => e.Cliente).HasColumnName("cliente");

            entity.Property(e => e.ConductividadAgua)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("conductividad_agua");

            entity.Property(e => e.ContactoReclamo)
                .HasColumnType("text")
                .HasColumnName("contacto_reclamo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Dosis)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("dosis");

            entity.Property(e => e.DosisProducto1)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("dosis_producto1");

            entity.Property(e => e.DosisProducto2)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("dosis_producto2");

            entity.Property(e => e.DosisProducto3)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("dosis_producto3");

            entity.Property(e => e.DurezaAgua)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("dureza_agua");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasColumnType("text")
                .HasColumnName("estado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaModificacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_modificacion");

            entity.Property(e => e.IdGpwReclamo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_reclamo");

            entity.Property(e => e.MedidaConductividad).HasColumnName("medida_conductividad");

            entity.Property(e => e.MedidaDureza).HasColumnName("medida_dureza");

            entity.Property(e => e.MedidaTemperatura).HasColumnName("medida_temperatura");

            entity.Property(e => e.MezclaAdjuvanteAceite)
                .HasColumnType("text")
                .HasColumnName("mezcla_adjuvante_aceite");

            entity.Property(e => e.MezclaProducto1)
                .HasColumnType("text")
                .HasColumnName("mezcla_producto1");

            entity.Property(e => e.MezclaProducto2)
                .HasColumnType("text")
                .HasColumnName("mezcla_producto2");

            entity.Property(e => e.MezclaProducto3)
                .HasColumnType("text")
                .HasColumnName("mezcla_producto3");

            entity.Property(e => e.NumeroReclamo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("numero_reclamo");

            entity.Property(e => e.ObservacionCierre)
                .HasColumnType("text")
                .HasColumnName("observacion_cierre");

            entity.Property(e => e.ObservacionInc)
                .HasColumnType("text")
                .HasColumnName("observacion_inc");

            entity.Property(e => e.OrigenAgua).HasColumnName("origen_agua");

            entity.Property(e => e.PhAgua)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("ph_agua");

            entity.Property(e => e.Producto).HasColumnName("producto");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RequiereInc).HasColumnName("requiere_inc");

            entity.Property(e => e.TemperaturaAgua)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("temperatura_agua");

            entity.Property(e => e.TipoReclamo).HasColumnName("tipo_reclamo");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");

            entity.Property(e => e.UsuarioSeguimiento).HasColumnName("usuario_seguimiento");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("vencimiento");

            entity.Property(e => e.ZonaDistribucion).HasColumnName("zona_distribucion");
        });

        modelBuilder.Entity<GpwReclamoAccion>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_reclamo_accion", "dbo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasColumnType("text")
                .HasColumnName("estado");

            entity.Property(e => e.FechaAccion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_accion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaFinAccion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_fin_accion");

            entity.Property(e => e.IdGpwReclamo).HasColumnName("id_gpw_reclamo");

            entity.Property(e => e.IdGpwReclamoAccion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_reclamo_accion");

            entity.Property(e => e.Plazo)
                .HasColumnType("datetime")
                .HasColumnName("plazo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ResponsableAccion).HasColumnName("responsable_accion");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwReclamoLogistica>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_reclamo_logistica", "dbo");

            entity.Property(e => e.CierreCliente)
                .HasColumnType("text")
                .HasColumnName("cierre_cliente");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.Estado)
                .HasColumnType("text")
                .HasColumnName("estado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.FechaFinLogistica)
                .HasColumnType("datetime")
                .HasColumnName("fecha_fin_logistica");

            entity.Property(e => e.FechaLogistica)
                .HasColumnType("datetime")
                .HasColumnName("fecha_logistica");

            entity.Property(e => e.IdGpwReclamo).HasColumnName("id_gpw_reclamo");

            entity.Property(e => e.IdGpwReclamoLogistica)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_reclamo_logistica");

            entity.Property(e => e.ObservacionCierre)
                .HasColumnType("text")
                .HasColumnName("observacion_cierre");

            entity.Property(e => e.Plazo)
                .HasColumnType("datetime")
                .HasColumnName("plazo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ResponsableLogistica).HasColumnName("responsable_logistica");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwReclamoLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_reclamo_lote", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("cantidad");

            entity.Property(e => e.Eliminado).HasColumnName("eliminado");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwReclamo).HasColumnName("id_gpw_reclamo");

            entity.Property(e => e.IdGpwReclamoLote)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_reclamo_lote");

            entity.Property(e => e.IdLote).HasColumnName("id_lote");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwRol>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_rol", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Codigo)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("codigo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwRol)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_rol");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwRolFuncionario>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_rol_funcionario", "dbo");

            entity.Property(e => e.IdFuncionario).HasColumnName("id_funcionario");

            entity.Property(e => e.IdGpwRol).HasColumnName("id_gpw_rol");

            entity.Property(e => e.IdGpwRolFuncionario)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_rol_funcionario");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<GpwRolPermiso>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_rol_permiso", "dbo");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwPermiso).HasColumnName("id_gpw_permiso");

            entity.Property(e => e.IdGpwRol).HasColumnName("id_gpw_rol");

            entity.Property(e => e.IdGpwRolPermiso)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_rol_permiso");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwSession>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_session", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.FechaLogin)
                .HasColumnType("datetime")
                .HasColumnName("fecha_login");

            entity.Property(e => e.FechaLogout)
                .HasColumnType("datetime")
                .HasColumnName("fecha_logout");

            entity.Property(e => e.IdGpwSession)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_session");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Token)
                .HasColumnType("text")
                .HasColumnName("token");

            entity.Property(e => e.UsuarioLogin).HasColumnName("usuario_login");
        });

        modelBuilder.Entity<GpwSubtipoNoConformidad>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_subtipo_no_conformidad", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwSubtipoNoConformidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_subtipo_no_conformidad");

            entity.Property(e => e.IdGpwTipoNoConformidad).HasColumnName("id_gpw_tipo_no_conformidad");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwTipoDisposicion>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_tipo_disposicion", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwTipoDisposicion)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_tipo_disposicion");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwTipoDocumento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_tipo_documento", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.AprobadoresObligatorios)
                .HasMaxLength(10)
                .HasColumnName("aprobadores_obligatorios")
                .IsFixedLength();

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwTipoDocumento).HasColumnName("id_gpw_tipo_documento");

            entity.Property(e => e.Path)
                .HasColumnType("text")
                .HasColumnName("path");

            entity.Property(e => e.Prefijo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("prefijo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("reg_status");

            entity.Property(e => e.ResponsableElaboracion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("responsable_elaboracion");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwTipoNoConformidad>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_tipo_no_conformidad", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwTipoNoConformidad)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_tipo_no_conformidad");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwTipoNoConformidadXClase>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_tipo_no_conformidad_x_clase", "dbo");

            entity.Property(e => e.IdGpwTipoNoConformidad).HasColumnName("ID_GPW_TIPO_NO_CONFORMIDAD");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.IdTipoNcXClase)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_TIPO_NC_X_CLASE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<GpwTipoReclamo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_tipo_reclamo", "dbo");

            entity.Property(e => e.Activo).HasColumnName("activo");

            entity.Property(e => e.Descripcion)
                .HasColumnType("text")
                .HasColumnName("descripcion");

            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");

            entity.Property(e => e.IdGpwTipoReclamo)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_tipo_reclamo");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.UsuarioCreacion).HasColumnName("usuario_creacion");

            entity.Property(e => e.UsuarioModificacion).HasColumnName("usuario_modificacion");
        });

        modelBuilder.Entity<GpwVerificadorTipoDocumento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("GPW_verificador_tipo_documento", "dbo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");

            entity.Property(e => e.IdGpwTipoDocumento).HasColumnName("id_gpw_tipo_documento");

            entity.Property(e => e.IdGpwVerificadorTipoDoc)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_gpw_verificador_tipo_doc");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("reg_data")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("reg_status");
        });

        modelBuilder.Entity<Grano>(entity =>
        {
            entity.HasKey(e => e.IdGrano);

            entity.ToTable("GRANO", "dbo");

            entity.Property(e => e.IdGrano).HasColumnName("ID_GRANO");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdPesajeRomaneo).HasColumnName("ID_PESAJE_ROMANEO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoLiquido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_LIQUIDO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PHE");

            entity.Property(e => e.Productor).HasColumnName("PRODUCTOR");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALIDA");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VERDOSO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Granos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.Granos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.Granos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.Granos)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_TABLA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Granos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.GranoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.GranoUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRANO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<GratificacionFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdGratificacionFuncionario);

            entity.ToTable("GRATIFICACION_FUNCIONARIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_GRATIFICACION_FUNCIONARIO")
                .IsUnique();

            entity.Property(e => e.IdGratificacionFuncionario).HasColumnName("ID_GRATIFICACION_FUNCIONARIO");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.GratificacionFuncionarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GRATIFICACION_FUNCIONARIO_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.GratificacionFuncionarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_GRATIFICACION_FUNCIONARIO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.GratificacionFuncionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_GRATIFICACION_FUNCIONARIO_FUNCIONARIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.GratificacionFuncionarios)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_GRATIFICACION_FUNCIONARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<HojaPago>(entity =>
        {
            entity.HasKey(e => e.IdHojaPago)
                .HasName("PK_HOJA");

            entity.ToTable("HOJA_PAGO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdFuncionario, e.Fecha, e.Moneda }, "UK_HOJA")
                .IsUnique();

            entity.Property(e => e.IdHojaPago).HasColumnName("ID_HOJA_PAGO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA")
                .HasDefaultValueSql("('18991231')");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.HojaPagos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_PAGO_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.HojaPagos)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_CULTIVO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.HojaPagos)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.HojaPagoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.HojaPagoUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<HojaPagoDet>(entity =>
        {
            entity.HasKey(e => e.IdHojaPagoDet)
                .HasName("PK_HOJA_DETALLE");

            entity.ToTable("HOJA_PAGO_DET", "dbo");

            entity.HasIndex(e => new { e.IdHojaPago, e.IdEvento }, "UK_HOJA_PAGO_DET")
                .IsUnique();

            entity.Property(e => e.IdHojaPagoDet).HasColumnName("ID_HOJA_PAGO_DET");

            entity.Property(e => e.HorasExtras)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("HORAS_EXTRAS");

            entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

            entity.Property(e => e.IdHojaPago).HasColumnName("ID_HOJA_PAGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdEventoNavigation)
                .WithMany(p => p.HojaPagoDets)
                .HasForeignKey(d => d.IdEvento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_DETALLE_EVENTO");

            entity.HasOne(d => d.IdHojaPagoNavigation)
                .WithMany(p => p.HojaPagoDets)
                .HasForeignKey(d => d.IdHojaPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HOJA_DETALLE_HOJA");
        });

        modelBuilder.Entity<ImpDatoBancario>(entity =>
        {
            entity.HasKey(e => e.IdImpDatoBancario)
                .HasName("PK__IMP_DATO__B362F9E59B65F798");

            entity.ToTable("IMP_DATO_BANCARIO", "dbo");

            entity.Property(e => e.IdImpDatoBancario).HasColumnName("ID_IMP_DATO_BANCARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ImpDatoBancarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMP_DATO_BANCARIO_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.ImpDatoBancarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMP_DATO_BANCARIO_CUENTA_CORRIENTE");
        });

        modelBuilder.Entity<ImpDatoBancarioDet>(entity =>
        {
            entity.HasKey(e => e.IdImpDatoBancarioDet)
                .HasName("PK__IMP_DATO__378BFC2FAE1702F2");

            entity.ToTable("IMP_DATO_BANCARIO_DET", "dbo");

            entity.Property(e => e.IdImpDatoBancarioDet).HasColumnName("ID_IMP_DATO_BANCARIO_DET");

            entity.Property(e => e.Credito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.DescripcionOperacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_OPERACION");

            entity.Property(e => e.FechaOperacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_OPERACION");

            entity.Property(e => e.FechaProceso)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROCESO");

            entity.Property(e => e.IdCuentaMov).HasColumnName("ID_CUENTA_MOV");

            entity.Property(e => e.IdImpDatoBancario).HasColumnName("ID_IMP_DATO_BANCARIO");

            entity.Property(e => e.RefOperacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REF_OPERACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCuentaMovNavigation)
                .WithMany(p => p.ImpDatoBancarioDets)
                .HasForeignKey(d => d.IdCuentaMov)
                .HasConstraintName("FK_IMP_DATO_BANCARIO_DET_CUENTA_MOV");

            entity.HasOne(d => d.IdImpDatoBancarioNavigation)
                .WithMany(p => p.ImpDatoBancarioDets)
                .HasForeignKey(d => d.IdImpDatoBancario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMP_DATO_BANCARIO_DET_IMP_DATO_BANCARIO");
        });

        modelBuilder.Entity<ImpresionDocumento>(entity =>
        {
            entity.HasKey(e => e.IdImpresionDocumento);

            entity.ToTable("IMPRESION_DOCUMENTO", "dbo");

            entity.Property(e => e.IdImpresionDocumento).HasColumnName("ID_IMPRESION_DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Final)
                .HasColumnType("datetime")
                .HasColumnName("FINAL")
                .HasDefaultValueSql("('18991231')");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO")
                .HasDefaultValueSql("('18991231')");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ImpresionDocumentos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMPRESION_DOCUMENTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ImpresionDocumentos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMPRESION_DOCUMENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Incoterm>(entity =>
        {
            entity.HasKey(e => e.IdIncoterm);

            entity.ToTable("INCOTERM", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_INCOTERM")
                .IsUnique();

            entity.Property(e => e.IdIncoterm).HasColumnName("ID_INCOTERM");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Flete)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("FLETE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Seguro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SEGURO");

            entity.Property(e => e.Sigla)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SIGLA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Incoterms)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCOTERM_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Incoterms)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INCOTERM_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Informe>(entity =>
        {
            entity.HasKey(e => e.IdInforme);

            entity.ToTable("INFORME", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Nombre }, "IX_INFORME");

            entity.Property(e => e.IdInforme).HasColumnName("ID_INFORME");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Informe1).HasColumnName("INFORME");

            entity.Property(e => e.Nombre)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((3))");

            entity.Property(e => e.Version).HasColumnName("VERSION");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.Informes)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_INFORME_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<InformeBimestralMic>(entity =>
        {
            entity.HasKey(e => e.IdInformeBimestralMic);

            entity.ToTable("INFORME_BIMESTRAL_MIC", "dbo");

            entity.Property(e => e.IdInformeBimestralMic).HasColumnName("ID_INFORME_BIMESTRAL_MIC");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.InformeBimestralMics)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_BIMESTRAL_MIC_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.InformeBimestralMics)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_BIMESTRAL_MIC_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<InformeBimestralMicSol>(entity =>
        {
            entity.HasKey(e => e.IdInformeBimestralMicSol)
                .HasName("PK_SOLICITUD_PRODUCTO_MIC_SOL");

            entity.ToTable("INFORME_BIMESTRAL_MIC_SOL", "dbo");

            entity.Property(e => e.IdInformeBimestralMicSol).HasColumnName("ID_INFORME_BIMESTRAL_MIC_SOL");

            entity.Property(e => e.CantElaborada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_ELABORADA");

            entity.Property(e => e.CantImportada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_IMPORTADA");

            entity.Property(e => e.CantUtilizada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_UTILIZADA");

            entity.Property(e => e.IdInformeBimestralMic).HasColumnName("ID_INFORME_BIMESTRAL_MIC");

            entity.Property(e => e.IdSolicitudProductoMic).HasColumnName("ID_SOLICITUD_PRODUCTO_MIC");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SaldoFinal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SALDO_FINAL");

            entity.HasOne(d => d.IdInformeBimestralMicNavigation)
                .WithMany(p => p.InformeBimestralMicSols)
                .HasForeignKey(d => d.IdInformeBimestralMic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_BIMESTRAL_MIC_SOL_INFORME_BIMESTRAL_MIC");

            entity.HasOne(d => d.IdSolicitudProductoMicNavigation)
                .WithMany(p => p.InformeBimestralMicSols)
                .HasForeignKey(d => d.IdSolicitudProductoMic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_BIMESTRAL_MIC_SOL_SOLICITUD_PRODUCTO_MIC");
        });

        modelBuilder.Entity<InformeBimestralMicSolDet>(entity =>
        {
            entity.HasKey(e => e.IdInformeBimMicSolDet);

            entity.ToTable("INFORME_BIMESTRAL_MIC_SOL_DET", "dbo");

            entity.Property(e => e.IdInformeBimMicSolDet).HasColumnName("ID_INFORME_BIM_MIC_SOL_DET");

            entity.Property(e => e.CantFormulado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_FORMULADO");

            entity.Property(e => e.CantUtilizada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANT_UTILIZADA");

            entity.Property(e => e.IdInformeBimestralMicSol).HasColumnName("ID_INFORME_BIMESTRAL_MIC_SOL");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdInformeBimestralMicSolNavigation)
                .WithMany(p => p.InformeBimestralMicSolDets)
                .HasForeignKey(d => d.IdInformeBimestralMicSol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_BIMESTRAL_MIC_SOL_DET_INFORME_BIMESTRAL_MIC_SOL");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.InformeBimestralMicSolDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_BIMESTRAL_MIC_SOL_DET_PRODUCTO");
        });

        modelBuilder.Entity<InformeLcCapacidadPago>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("INFORME_LC_CAPACIDAD_PAGO", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Caja)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAJA");

            entity.Property(e => e.CapacidadPago)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CAPACIDAD_PAGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCapacidadPago)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CAPACIDAD_PAGO");

            entity.Property(e => e.IdInformeLineacredClieBal).HasColumnName("ID_INFORME_LINEACRED_CLIE_BAL");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldos)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SALDOS");

            entity.Property(e => e.Sensibilidad)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SENSIBILIDAD");
        });

        modelBuilder.Entity<InformeLcClieAccionistum>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieAccionista);

            entity.ToTable("INFORME_LC_CLIE_ACCIONISTA", "dbo");

            entity.Property(e => e.IdInformeLcClieAccionista).HasColumnName("ID_INFORME_LC_CLIE_ACCIONISTA");

            entity.Property(e => e.Cargo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Firmante).HasColumnName("FIRMANTE");

            entity.Property(e => e.IdClienteAccionista).HasColumnName("ID_CLIENTE_ACCIONISTA");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.Participacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PARTICIPACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteAccionistaNavigation)
                .WithMany(p => p.InformeLcClieAccionista)
                .HasForeignKey(d => d.IdClienteAccionista)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_ACCIONISTA_CLIENTE_ACCIONISTA");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieAccionista)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_ACCIONISTA_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieAnalisi>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieAnalisis);

            entity.ToTable("INFORME_LC_CLIE_ANALISIS", "dbo");

            entity.Property(e => e.IdInformeLcClieAnalisis).HasColumnName("ID_INFORME_LC_CLIE_ANALISIS");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.IdLcAnalisisPorUsu).HasColumnName("ID_LC_ANALISIS_POR_USU");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieAnalisis)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_ANALISIS_INFORME_LINEACRED_CLIENTE");

            entity.HasOne(d => d.IdLcAnalisisPorUsuNavigation)
                .WithMany(p => p.InformeLcClieAnalisis)
                .HasForeignKey(d => d.IdLcAnalisisPorUsu)
                .HasConstraintName("FK_INFORME_LC_CLIE_ANALISIS_LC_ANALISIS_POR_USU");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.InformeLcClieAnalisis)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_INFORME_LC_CLIE_ANALISIS_USUARIO");
        });

        modelBuilder.Entity<InformeLcClieCualitativo>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieCualitativo);

            entity.ToTable("INFORME_LC_CLIE_CUALITATIVO", "dbo");

            entity.Property(e => e.IdInformeLcClieCualitativo).HasColumnName("ID_INFORME_LC_CLIE_CUALITATIVO");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.IdClienteCualitativo).HasColumnName("ID_CLIENTE_CUALITATIVO");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.Indicador)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("INDICADOR");

            entity.Property(e => e.Nota)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Rangostr)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RANGOSTR");

            entity.Property(e => e.Referencia)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Resultado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RESULTADO");

            entity.HasOne(d => d.IdClienteCualitativoNavigation)
                .WithMany(p => p.InformeLcClieCualitativos)
                .HasForeignKey(d => d.IdClienteCualitativo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_CUALITATIVO_CLIENTE_INDICADOR_CUALITATIVO");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieCualitativos)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_CUALITATIVO_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieFact>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieFact)
                .HasName("PK_INFORME_LINEACRED_CLIE_FACT");

            entity.ToTable("INFORME_LC_CLIE_FACT", "dbo");

            entity.Property(e => e.IdInformeLcClieFact).HasColumnName("ID_INFORME_LC_CLIE_FACT");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("1 = DEUDAS A VENCER, 2=DEUDAS VENCIDAS, 3= PEDIDO PENDIENTE");

            entity.Property(e => e.Valor)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("date")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieFacts)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_FACT_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieGarante>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieGarante);

            entity.ToTable("INFORME_LC_CLIE_GARANTE", "dbo");

            entity.Property(e => e.IdInformeLcClieGarante).HasColumnName("ID_INFORME_LC_CLIE_GARANTE");

            entity.Property(e => e.Ci)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdClienteGarante).HasColumnName("ID_CLIENTE_GARANTE");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteGaranteNavigation)
                .WithMany(p => p.InformeLcClieGarantes)
                .HasForeignKey(d => d.IdClienteGarante)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_GARANTE_CLIENTE_GARANTE");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieGarantes)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_GARANTE_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieGarantia>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieGarantias);

            entity.ToTable("INFORME_LC_CLIE_GARANTIAS", "dbo");

            entity.Property(e => e.IdInformeLcClieGarantias).HasColumnName("ID_INFORME_LC_CLIE_GARANTIAS");

            entity.Property(e => e.DescripcionOtros)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_OTROS");

            entity.Property(e => e.GarantiaAnegociar).HasColumnName("GARANTIA_ANEGOCIAR");

            entity.Property(e => e.GarantiaCheque).HasColumnName("GARANTIA_CHEQUE");

            entity.Property(e => e.GarantiaContrato).HasColumnName("GARANTIA_CONTRATO");

            entity.Property(e => e.GarantiaFactCredito).HasColumnName("GARANTIA_FACT_CREDITO");

            entity.Property(e => e.GarantiaHipoteca).HasColumnName("GARANTIA_HIPOTECA");

            entity.Property(e => e.GarantiaPagTer).HasColumnName("GARANTIA_PAG_TER");

            entity.Property(e => e.GarantiaPagTerValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_PAG_TER_VALOR");

            entity.Property(e => e.GarantiaPagare).HasColumnName("GARANTIA_PAGARE");

            entity.Property(e => e.GarantiaPagareAval).HasColumnName("GARANTIA_PAGARE_AVAL");

            entity.Property(e => e.GarantiaPrenda).HasColumnName("GARANTIA_PRENDA");

            entity.Property(e => e.HipotecaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_MONTO");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.IdLcGarantiasOfrec).HasColumnName("ID_LC_GARANTIAS_OFREC");

            entity.Property(e => e.Otros).HasColumnName("OTROS");

            entity.Property(e => e.PrendaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRENDA_MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieGarantia)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_GARANTIAS_INFORME_LINEACRED_CLIENTE");

            entity.HasOne(d => d.IdLcGarantiasOfrecNavigation)
                .WithMany(p => p.InformeLcClieGarantia)
                .HasForeignKey(d => d.IdLcGarantiasOfrec)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_GARANTIAS_LC_GARANTIAS_OFREC");
        });

        modelBuilder.Entity<InformeLcClieGrano>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieGrano)
                .HasName("PK_INFORME_LC_CLIE_GRANOS");

            entity.ToTable("INFORME_LC_CLIE_GRANO", "dbo");

            entity.Property(e => e.IdInformeLcClieGrano).HasColumnName("ID_INFORME_LC_CLIE_GRANO");

            entity.Property(e => e.CantContratada)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("CANT_CONTRATADA");

            entity.Property(e => e.CantEntregar)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("CANT_ENTREGAR");

            entity.Property(e => e.DescProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("date")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("TOTAL");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieGranos)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_GRANO_INFORME_LINEACRED_CLIENTE");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.InformeLcClieGranos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_GRANO_ZAFRA");
        });

        modelBuilder.Entity<InformeLcClieInmuebleTer>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieInmuebleTer);

            entity.ToTable("INFORME_LC_CLIE_INMUEBLE_TER", "dbo");

            entity.Property(e => e.IdInformeLcClieInmuebleTer).HasColumnName("ID_INFORME_LC_CLIE_INMUEBLE_TER");

            entity.Property(e => e.CancEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRIBANIA");

            entity.Property(e => e.CancEscritura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CANC_ESCRITURA");

            entity.Property(e => e.CancFecha)
                .HasColumnType("datetime")
                .HasColumnName("CANC_FECHA");

            entity.Property(e => e.CantEmbargo).HasColumnName("CANT_EMBARGO");

            entity.Property(e => e.CantHipoteca).HasColumnName("CANT_HIPOTECA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.EmbargoValor)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("EMBARGO_VALOR");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Finca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FINCA");

            entity.Property(e => e.Garantia).HasColumnName("GARANTIA");

            entity.Property(e => e.Hipoteca)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("HIPOTECA");

            entity.Property(e => e.HipotecaValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_VALOR");

            entity.Property(e => e.IdClienteResumenValoracionTer).HasColumnName("ID_CLIENTE_RESUMEN_VALORACION_TER");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Padron)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PADRON");

            entity.Property(e => e.Propietario)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO");

            entity.Property(e => e.Rango).HasColumnName("RANGO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRO_FECHA");

            entity.Property(e => e.RegistroPublico).HasColumnName("REGISTRO_PUBLICO");

            entity.Property(e => e.RpEscribania)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRIBANIA");

            entity.Property(e => e.RpEscritura)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RP_ESCRITURA");

            entity.Property(e => e.RpFecha)
                .HasColumnType("datetime")
                .HasColumnName("RP_FECHA");

            entity.Property(e => e.RpFolio)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_FOLIO");

            entity.Property(e => e.RpNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_NUMERO");

            entity.Property(e => e.RpSerie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RP_SERIE");

            entity.Property(e => e.Superficie)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SUPERFICIE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.Property(e => e.TituloFecha)
                .HasColumnType("datetime")
                .HasColumnName("TITULO_FECHA");

            entity.Property(e => e.TituloPropiedad).HasColumnName("TITULO_PROPIEDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteResumenValoracionTerNavigation)
                .WithMany(p => p.InformeLcClieInmuebleTers)
                .HasForeignKey(d => d.IdClienteResumenValoracionTer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_INMUEBLE_TER_CLIENTE_RESUMEN_VALORACION_TER");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieInmuebleTers)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_INMUEBLE_TER_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieMaqTer>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieMaqTer);

            entity.ToTable("INFORME_LC_CLIE_MAQ_TER", "dbo");

            entity.Property(e => e.IdInformeLcClieMaqTer).HasColumnName("ID_INFORME_LC_CLIE_MAQ_TER");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdClienteRodadoTer).HasColumnName("ID_CLIENTE_RODADO_TER");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.Marca)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdClienteRodadoTerNavigation)
                .WithMany(p => p.InformeLcClieMaqTers)
                .HasForeignKey(d => d.IdClienteRodadoTer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_MAQ_TER_CLIENTE_RODADO_TER");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieMaqTers)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_MAQ_TER_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieRecibir>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieRecibir);

            entity.ToTable("INFORME_LC_CLIE_RECIBIR", "dbo");

            entity.Property(e => e.IdInformeLcClieRecibir).HasColumnName("ID_INFORME_LC_CLIE_RECIBIR");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ValorTotalCobro)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_TOTAL_COBRO");

            entity.Property(e => e.ValorTotalOrig)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_TOTAL_ORIG");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieRecibirs)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_RECIBIR_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieRefCo>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieRefCo);

            entity.ToTable("INFORME_LC_CLIE_REF_CO", "dbo");

            entity.Property(e => e.IdInformeLcClieRefCo).HasColumnName("ID_INFORME_LC_CLIE_REF_CO");

            entity.Property(e => e.Contacto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdClienteReferenciaComercial).HasColumnName("ID_CLIENTE_REFERENCIA_COMERCIAL");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.HasOne(d => d.IdClienteReferenciaComercialNavigation)
                .WithMany(p => p.InformeLcClieRefCos)
                .HasForeignKey(d => d.IdClienteReferenciaComercial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_REF_CO_CLIENTE_REFERENCIA_COMERCIAL");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieRefCos)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_REF_CO_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcClieTipoCredito>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcClieTipoCredito)
                .HasName("PK_ID_INFORME_LC_CLIE_TIPO_CREDITO");

            entity.ToTable("INFORME_LC_CLIE_TIPO_CREDITO", "dbo");

            entity.Property(e => e.IdInformeLcClieTipoCredito).HasColumnName("ID_INFORME_LC_CLIE_TIPO_CREDITO");

            entity.Property(e => e.CapitalOperativo).HasColumnName("CAPITAL_OPERATIVO");

            entity.Property(e => e.DescripcionOtros)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_OTROS");

            entity.Property(e => e.FinanciamientoActivoFijo).HasColumnName("FINANCIAMIENTO_ACTIVO_FIJO");

            entity.Property(e => e.FinanciamientoInsumos).HasColumnName("FINANCIAMIENTO_INSUMOS");

            entity.Property(e => e.Granos).HasColumnName("GRANOS");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.IdLcTipoCredito).HasColumnName("ID_LC_TIPO_CREDITO");

            entity.Property(e => e.Otros).HasColumnName("OTROS");

            entity.Property(e => e.ReestructuracionDeuda).HasColumnName("REESTRUCTURACION_DEUDA");

            entity.Property(e => e.RefinanciamientoDeuda).HasColumnName("REFINANCIAMIENTO_DEUDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcClieTipoCreditos)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_TIPO_CREDITO_INFORME_LINEACRED_CLIENTE1");

            entity.HasOne(d => d.IdLcTipoCreditoNavigation)
                .WithMany(p => p.InformeLcClieTipoCreditos)
                .HasForeignKey(d => d.IdLcTipoCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_CLIE_TIPO_CREDITO_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcPromAtraso>(entity =>
        {
            entity.HasKey(e => e.IdInformeLcPromAtraso);

            entity.ToTable("INFORME_LC_PROM_ATRASO", "dbo");

            entity.Property(e => e.IdInformeLcPromAtraso).HasColumnName("ID_INFORME_LC_PROM_ATRASO");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.PromAtraso).HasColumnName("PROM_ATRASO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLcPromAtrasos)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_PROM_ATRASO_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLcRating>(entity =>
        {
            entity.HasKey(e => e.IdLcRating)
                .HasName("PK_LC_RATING");

            entity.ToTable("INFORME_LC_RATING", "dbo");

            entity.Property(e => e.IdLcRating).HasColumnName("ID_LC_RATING");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Grupo).HasColumnName("GRUPO");

            entity.Property(e => e.IdInformeLineacredClieBal).HasColumnName("ID_INFORME_LINEACRED_CLIE_BAL");

            entity.Property(e => e.Indicador)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("INDICADOR");

            entity.Property(e => e.Mim)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("MIM")
                .HasComment("Símbolo de <=>");

            entity.Property(e => e.Nota)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Orden)
                .HasColumnName("ORDEN")
                .HasComment("NRO DE ORDEN DE LOS CAMPOS");

            entity.Property(e => e.Porc)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PORC")
                .HasComment("Símbolo del porcentaje %");

            entity.Property(e => e.Rango)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RANGO");

            entity.Property(e => e.Referencia)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("REFERENCIA")
                .HasComment("VALORES DE REFERENCIA PARA PUNTUACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Resultado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RESULTADO");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0: FINANCIEROS; 1: CUALITATIVOS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.InformeLcRatings)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LC_RATING_EMPRESA");

            entity.HasOne(d => d.IdInformeLineacredClieBalNavigation)
                .WithMany(p => p.InformeLcRatings)
                .HasForeignKey(d => d.IdInformeLineacredClieBal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_RATING_INFORME_LINEACRED_CLIE_BAL");
        });

        modelBuilder.Entity<InformeLcScoring>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("INFORME_LC_SCORING", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdInformeLineacredClieBal).HasColumnName("ID_INFORME_LINEACRED_CLIE_BAL");

            entity.Property(e => e.IdLcScoring)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_LC_SCORING");

            entity.Property(e => e.Indicador)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("INDICADOR");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ResultPeso)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RESULT_PESO");

            entity.Property(e => e.ResultTm)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RESULT_TM");

            entity.Property(e => e.Resultado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("RESULTADO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorPeso)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VALOR_PESO");

            entity.Property(e => e.ValorTm)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VALOR_TM");
        });

        modelBuilder.Entity<InformeLcScoringRating>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("INFORME_LC_SCORING_RATING", "dbo");

            entity.Property(e => e.Calificacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.GarantiaTercero)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_TERCERO");

            entity.Property(e => e.Hipoteca)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.IdScoringRating)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SCORING_RATING");

            entity.Property(e => e.Prenda)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRENDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<InformeLineacredClieBal>(entity =>
        {
            entity.HasKey(e => e.IdInformeLineacredClieBal)
                .HasName("PK__INFORME___8EEA67661E74EBF7");

            entity.ToTable("INFORME_LINEACRED_CLIE_BAL", "dbo");

            entity.Property(e => e.IdInformeLineacredClieBal).HasColumnName("ID_INFORME_LINEACRED_CLIE_BAL");

            entity.Property(e => e.AcAnticipos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_ANTICIPOS");

            entity.Property(e => e.AcCreditosPrestamos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_CREDITOS_PRESTAMOS");

            entity.Property(e => e.AcCreditosVentas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_CREDITOS_VENTAS");

            entity.Property(e => e.AcDisponibilidades)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_DISPONIBILIDADES");

            entity.Property(e => e.AcInventarios)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_INVENTARIOS");

            entity.Property(e => e.AcInversionesTemp)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_INVERSIONES_TEMP");

            entity.Property(e => e.AcOtrosActivos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AC_OTROS_ACTIVOS");

            entity.Property(e => e.Activo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ACTIVO");

            entity.Property(e => e.ActivoCorriente)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ACTIVO_CORRIENTE");

            entity.Property(e => e.ActivoNoCorriente)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ACTIVO_NO_CORRIENTE");

            entity.Property(e => e.AncCreditosPrestamos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANC_CREDITOS_PRESTAMOS");

            entity.Property(e => e.AncCreditosVentas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANC_CREDITOS_VENTAS");

            entity.Property(e => e.AncInventarios)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANC_INVENTARIOS");

            entity.Property(e => e.AncInversiones)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANC_INVERSIONES");

            entity.Property(e => e.AncOtrosActivos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANC_OTROS_ACTIVOS");

            entity.Property(e => e.AncPropPlantaEquipo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANC_PROP_PLANTA_EQUIPO");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Capital)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CAPITAL");

            entity.Property(e => e.CostoBienesServiciosVendidos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COSTO_BIENES_SERVICIOS_VENDIDOS");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescuentosBonificaciones)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DESCUENTOS_BONIFICACIONES");

            entity.Property(e => e.DifCambioGananciaInop)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DIF_CAMBIO_GANANCIA_INOP");

            entity.Property(e => e.Diferencia)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DIFERENCIA");

            entity.Property(e => e.DiferenciaCambioPerdida)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DIFERENCIA_CAMBIO_PERDIDA");

            entity.Property(e => e.Ebitda)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("EBITDA");

            entity.Property(e => e.EgnpCostoFinanciero)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("EGNP_COSTO_FINANCIERO");

            entity.Property(e => e.EgnpDepreciacionAmortizacion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("EGNP_DEPRECIACION_AMORTIZACION");

            entity.Property(e => e.EgnpOtrosEgresos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("EGNP_OTROS_EGRESOS");

            entity.Property(e => e.EgresosNoOperativos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("EGRESOS_NO_OPERATIVOS");

            entity.Property(e => e.GananAntesGastosFi)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GANAN_ANTES_GASTOS_FI");

            entity.Property(e => e.GananPerBrutTotal)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GANAN_PER_BRUT_TOTAL");

            entity.Property(e => e.GananPerNetasEjerc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GANAN_PER_NETAS_EJERC");

            entity.Property(e => e.GananPerOperativas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GANAN_PER_OPERATIVAS");

            entity.Property(e => e.GananPerdidaVentas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GANAN_PERDIDA_VENTAS");

            entity.Property(e => e.GastosAdmVentas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GASTOS_ADM_VENTAS");

            entity.Property(e => e.GastosAdministracion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GASTOS_ADMINISTRACION");

            entity.Property(e => e.GastosVentasComerc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("GASTOS_VENTAS_COMERC");

            entity.Property(e => e.IdInformeLineacred).HasColumnName("ID_INFORME_LINEACRED");

            entity.Property(e => e.ImpuestoALaRenta)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("IMPUESTO_A_LA_RENTA");

            entity.Property(e => e.IngresosNoOperativos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("INGRESOS_NO_OPERATIVOS");

            entity.Property(e => e.IngresosOperativos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("INGRESOS_OPERATIVOS");

            entity.Property(e => e.IngresosOperativosNetos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("INGRESOS_OPERATIVOS_NETOS");

            entity.Property(e => e.InteresesCobrados)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("INTERESES_COBRADOS");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.OtrasGanancias)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OTRAS_GANANCIAS");

            entity.Property(e => e.OtrasVentas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OTRAS_VENTAS");

            entity.Property(e => e.OtrosIngresos)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OTROS_INGRESOS");

            entity.Property(e => e.Pasivo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PASIVO");

            entity.Property(e => e.PasivoCorriente)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PASIVO_CORRIENTE");

            entity.Property(e => e.PasivoNoCorriente)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PASIVO_NO_CORRIENTE");

            entity.Property(e => e.PatrimonioNeto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PATRIMONIO_NETO");

            entity.Property(e => e.PcDeudasComerciales)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PC_DEUDAS_COMERCIALES");

            entity.Property(e => e.PcDeudasDiversas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PC_DEUDAS_DIVERSAS");

            entity.Property(e => e.PcDeudasFinanc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PC_DEUDAS_FINANC");

            entity.Property(e => e.PcProvisiones)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PC_PROVISIONES");

            entity.Property(e => e.PncDeudasComerciales)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PNC_DEUDAS_COMERCIALES");

            entity.Property(e => e.PncDeudasDiversas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PNC_DEUDAS_DIVERSAS");

            entity.Property(e => e.PncDeudasFinanc)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PNC_DEUDAS_FINANC");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Reservas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RESERVAS");

            entity.Property(e => e.ResulAcumulado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RESUL_ACUMULADO");

            entity.Property(e => e.ResulAntesDelImpRenta)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RESUL_ANTES_DEL_IMP_RENTA");

            entity.Property(e => e.ResulEjercicio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RESUL_EJERCICIO");

            entity.Property(e => e.ResultadoBruto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RESULTADO_BRUTO");

            entity.Property(e => e.ResultadoNeto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RESULTADO_NETO");

            entity.Property(e => e.TotalActivo)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL_ACTIVO");

            entity.Property(e => e.TotalPasivoPneto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TOTAL_PASIVO_PNETO");

            entity.Property(e => e.VentaGanado)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VENTA_GANADO");

            entity.Property(e => e.VentaMercGral)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VENTA_MERC_GRAL");

            entity.Property(e => e.VentaProductosAgric)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VENTA_PRODUCTOS_AGRIC");

            entity.Property(e => e.VentaSemillas)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VENTA_SEMILLAS");

            entity.HasOne(d => d.IdInformeLineacredNavigation)
                .WithMany(p => p.InformeLineacredClieBals)
                .HasForeignKey(d => d.IdInformeLineacred)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LINEACRED_CLIE_BAL_INFORME_LINEACRED_CLIENTE");
        });

        modelBuilder.Entity<InformeLineacredCliente>(entity =>
        {
            entity.HasKey(e => e.IdInformeLineacredCliente);

            entity.ToTable("INFORME_LINEACRED_CLIENTE", "dbo");

            entity.Property(e => e.IdInformeLineacredCliente).HasColumnName("ID_INFORME_LINEACRED_CLIENTE");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0= valido, 1= invalido");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("date")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.FechaCierre)
                .HasColumnType("date")
                .HasColumnName("FECHA_CIERRE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdZafra)
                .HasColumnName("ID_ZAFRA")
                .HasComment("Zafra vigente al momento de generar el informe de Linea de Crédito");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Numero).HasColumnName("NUMERO");

            entity.Property(e => e.ObsRechazado)
                .HasMaxLength(130)
                .IsUnicode(false)
                .HasColumnName("OBS_RECHAZADO");

            entity.Property(e => e.Rechazado)
                .HasColumnName("RECHAZADO")
                .HasComment("0 = NO RECHAZADO, 1 = RECHAZADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.InformeLineacredClientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LINEACRED_CLIENTE_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.InformeLineacredClientes)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFORME_LINEACRED_CLIENTE_CLIENTE");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.InformeLineacredClientes)
                .HasForeignKey(d => d.IdLineaCredito)
                .HasConstraintName("FK_INFORME_LINEACRED_CLIENTE_LINEA_CREDITO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.InformeLineacredClientes)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_INFORME_LINEACRED_CLIENTE_ZAFRA");
        });

        modelBuilder.Entity<Ingrediente>(entity =>
        {
            entity.HasKey(e => e.IdIngrediente);

            entity.ToTable("INGREDIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_INGREDIENTE")
                .IsUnique();

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Concentracion)
                .HasColumnName("CONCENTRACION")
                .HasComment("Porcentaje de concentracion de la droga");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Modo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("MODO")
                .IsFixedLength();

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO")
                .IsFixedLength()
                .HasComment("F = Formulacion, D = Droga Tecnica, I = Intermediario.");

            entity.Property(e => e.Valido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VALIDO")
                .IsFixedLength()
                .HasComment("S = Valido, N = No valido, no se puede mas seleccionar.");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Ingredientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGREDIENTE_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.Ingredientes)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGREDIENTE_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Ingredientes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGREDIENTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<IngredienteComposicion>(entity =>
        {
            entity.HasKey(e => e.IdIngredienteComposicion);

            entity.ToTable("INGREDIENTE_COMPOSICION", "dbo");

            entity.HasIndex(e => new { e.IdIngrediente, e.IdComposicion }, "UK_INGREDIENTE_COMPOSICION")
                .IsUnique();

            entity.Property(e => e.IdIngredienteComposicion).HasColumnName("ID_INGREDIENTE_COMPOSICION");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdComposicion)
                .HasColumnName("ID_COMPOSICION")
                .HasComment("ID del ingrediente de la composicion. Si el ingrediente es tipo F, su composicion debe ser D. Si es D, debe ser I. I no lleva composicion.");

            entity.Property(e => e.IdIngrediente)
                .HasColumnName("ID_INGREDIENTE")
                .HasComment("FK con ingrediente.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdIngredienteNavigation)
                .WithMany(p => p.IngredienteComposicions)
                .HasForeignKey(d => d.IdIngrediente)
                .HasConstraintName("FK_INGREDIENTE_COMPOSICION_INGREDIENTE");
        });

        modelBuilder.Entity<Ingreso>(entity =>
        {
            entity.HasKey(e => e.IdIngreso);

            entity.ToTable("INGRESO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_INGRESO")
                .IsUnique();

            entity.Property(e => e.IdIngreso).HasColumnName("ID_INGRESO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdChequeraDetalle).HasColumnName("ID_CHEQUERA_DETALLE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGRESO_EMPRESA");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdCentroCosto)
                .HasConstraintName("FK_INGRESO_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdChequeraDetalleNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdChequeraDetalle)
                .HasConstraintName("FK_INGRESO_CHEQUERA");

            entity.HasOne(d => d.IdChequeraDetalle1)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdChequeraDetalle)
                .HasConstraintName("FK_INGRESO_CHEQUERA_DETALLE");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGRESO_CLIENTE");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGRESO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGRESO_DEPARTAMENTO");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_INGRESO_PLAN_CUENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Ingresos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INGRESO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<IntegracionLe>(entity =>
        {
            entity.HasKey(e => e.IdIntegracionLe);

            entity.ToTable("INTEGRACION_LE", "dbo");

            entity.Property(e => e.IdIntegracionLe).HasColumnName("ID_INTEGRACION_LE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.IntegracionLes)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_INTEGRACION_LE_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.IntegracionLes)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_INTEGRACION_LE_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.IntegracionLes)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_INTEGRACION_LE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<IntegracionLeDet>(entity =>
        {
            entity.HasKey(e => e.IdIntegracionLeDet);

            entity.ToTable("INTEGRACION_LE_DET", "dbo");

            entity.Property(e => e.IdIntegracionLeDet).HasColumnName("ID_INTEGRACION_LE_DET");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdIntegracionLe).HasColumnName("ID_INTEGRACION_LE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.IntegracionLeDets)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .HasConstraintName("FK_INTEGRACION_LE_DET_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdIntegracionLeNavigation)
                .WithMany(p => p.IntegracionLeDets)
                .HasForeignKey(d => d.IdIntegracionLe)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INTEGRACION_LE_DET_INTEGRACION_LE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.IntegracionLeDets)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_INTEGRACION_LE_DET_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<IntegracionLeHijo>(entity =>
        {
            entity.HasKey(e => e.IdIntegracionLeHijo);

            entity.ToTable("INTEGRACION_LE_HIJO", "dbo");

            entity.Property(e => e.IdIntegracionLeHijo).HasColumnName("ID_INTEGRACION_LE_HIJO");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdIntegracionLeDet).HasColumnName("ID_INTEGRACION_LE_DET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.IntegracionLeHijos)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .HasConstraintName("FK_INTEGRACION_LE_HIJO_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdIntegracionLeDetNavigation)
                .WithMany(p => p.IntegracionLeHijos)
                .HasForeignKey(d => d.IdIntegracionLeDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INTEGRACION_LE_HIJO_INTEGRACION_LE_DET");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.IntegracionLeHijos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_INTEGRACION_LE_HIJO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<IntegralizacionProcedimiento>(entity =>
        {
            entity.HasKey(e => e.IdIntegralizacionProcedimiento);

            entity.ToTable("INTEGRALIZACION_PROCEDIMIENTO", "dbo");

            entity.Property(e => e.IdIntegralizacionProcedimiento).HasColumnName("ID_INTEGRALIZACION_PROCEDIMIENTO");

            entity.Property(e => e.DescripcionProcedure)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROCEDURE");

            entity.Property(e => e.IdProcedure).HasColumnName("ID_PROCEDURE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Obs)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Titulo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("TITULO");
        });

        modelBuilder.Entity<Juzgado>(entity =>
        {
            entity.HasKey(e => e.IdJuzgado);

            entity.ToTable("JUZGADO", "dbo");

            entity.Property(e => e.IdJuzgado).HasColumnName("ID_JUZGADO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Turno).HasColumnName("TURNO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Juzgados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JUZGADO_EMPRESA");

            entity.HasOne(d => d.IdMunicipioNavigation)
                .WithMany(p => p.Juzgados)
                .HasForeignKey(d => d.IdMunicipio)
                .HasConstraintName("FK_JUZGADO_MUNICIPIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Juzgados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JUZGADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Laboratorio>(entity =>
        {
            entity.HasKey(e => e.IdLaboratorio);

            entity.ToTable("LABORATORIO", "dbo");

            entity.Property(e => e.IdLaboratorio).HasColumnName("ID_LABORATORIO");

            entity.Property(e => e.Aprobador).HasColumnName("APROBADOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdLaboratorioEstado).HasColumnName("ID_LABORATORIO_ESTADO");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Laboratorios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_EMPRESA");

            entity.HasOne(d => d.IdLaboratorioEstadoNavigation)
                .WithMany(p => p.Laboratorios)
                .HasForeignKey(d => d.IdLaboratorioEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_LABORATORIO_ESTADO");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.Laboratorios)
                .HasForeignKey(d => d.IdProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_PRODUCCION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Laboratorios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LaboratorioEstado>(entity =>
        {
            entity.HasKey(e => e.IdLaboratorioEstado);

            entity.ToTable("LABORATORIO_ESTADO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_LABORATORIO_ESTADO")
                .IsUnique();

            entity.Property(e => e.IdLaboratorioEstado).HasColumnName("ID_LABORATORIO_ESTADO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LaboratorioEstados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_ESTADO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.LaboratorioEstados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_ESTADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LaboratorioMezcla>(entity =>
        {
            entity.HasKey(e => e.IdLaboratorioMezcla);

            entity.ToTable("LABORATORIO_MEZCLA", "dbo");

            entity.Property(e => e.IdLaboratorioMezcla).HasColumnName("ID_LABORATORIO_MEZCLA");

            entity.Property(e => e.C1).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C10).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C2).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C3).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C4).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C5).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C6).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C7).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C8).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.C9).HasColumnType("numeric(18, 3)");

            entity.Property(e => e.Densidad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("DENSIDAD");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdLaboratorio).HasColumnName("ID_LABORATORIO");

            entity.Property(e => e.Inc)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("INC");

            entity.Property(e => e.Mezcla).HasColumnName("MEZCLA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Ph)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PH");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Sublote).HasColumnName("SUBLOTE");

            entity.HasOne(d => d.IdLaboratorioNavigation)
                .WithMany(p => p.LaboratorioMezclas)
                .HasForeignKey(d => d.IdLaboratorio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LABORATORIO_MEZCLA_LABORATORIO");
        });

        modelBuilder.Entity<LcAnalisisPorUsu>(entity =>
        {
            entity.HasKey(e => e.IdLcAnalisisPorUsu);

            entity.ToTable("LC_ANALISIS_POR_USU", "dbo");

            entity.Property(e => e.IdLcAnalisisPorUsu).HasColumnName("ID_LC_ANALISIS_POR_USU");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LcAnalisisPorUsus)
                .HasForeignKey(d => d.IdLineaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_ANALISIS_POR_USU_LINEA_CREDITO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.LcAnalisisPorUsus)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_ANALISIS_POR_USU_USUARIO");
        });

        modelBuilder.Entity<LcCapacidadPago>(entity =>
        {
            entity.HasKey(e => e.IdCapacidadPago);

            entity.ToTable("LC_CAPACIDAD_PAGO", "dbo");

            entity.Property(e => e.IdCapacidadPago).HasColumnName("ID_CAPACIDAD_PAGO");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Caja)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAJA");

            entity.Property(e => e.CapacidadPago)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CAPACIDAD_PAGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdInformeLineacredClieBal).HasColumnName("ID_INFORME_LINEACRED_CLIE_BAL");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldos)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SALDOS");

            entity.Property(e => e.Sensibilidad)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("SENSIBILIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LcCapacidadPagos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_CAPACIDAD_PAGO_EMPRESA");

            entity.HasOne(d => d.IdInformeLineacredClieBalNavigation)
                .WithMany(p => p.LcCapacidadPagos)
                .HasForeignKey(d => d.IdInformeLineacredClieBal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_CAPACIDAD_PAGO_INFORME_LINEACRED_CLIE_BAL");
        });

        modelBuilder.Entity<LcDocumento>(entity =>
        {
            entity.HasKey(e => e.IdLcDocumento)
                .HasName("PK_LC_DOCUMENTOS");

            entity.ToTable("LC_DOCUMENTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_LC_DOCUMENTO")
                .IsUnique();

            entity.Property(e => e.IdLcDocumento).HasColumnName("ID_LC_DOCUMENTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.Operador)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPERADOR");

            entity.Property(e => e.Plantilla)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PLANTILLA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LcDocumentos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_DOCUMENTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.LcDocumentos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_LC_DOCUMENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LcExcepcion>(entity =>
        {
            entity.HasKey(e => e.IdLcExcepcion)
                .HasName("PK_LC_EXCEPCIONES");

            entity.ToTable("LC_EXCEPCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_LC_EXCEPCION")
                .IsUnique();

            entity.Property(e => e.IdLcExcepcion).HasColumnName("ID_LC_EXCEPCION");

            entity.Property(e => e.AprobadoPor).HasColumnName("APROBADO_POR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTADO")
                .HasComment("A Aprobado - P Pendiente - U Utilizado");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Operador).HasColumnName("OPERADOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.AprobadoPorNavigation)
                .WithMany(p => p.LcExcepcionAprobadoPorNavigations)
                .HasForeignKey(d => d.AprobadoPor)
                .HasConstraintName("FK_LC_EXCEPCION_USUARIOAPROBADOR");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LcExcepcions)
                .HasForeignKey(d => d.IdLineaCredito)
                .HasConstraintName("FK_LC_EXCEPCION_LINEA_CREDITO");

            entity.HasOne(d => d.OperadorNavigation)
                .WithMany(p => p.LcExcepcionOperadorNavigations)
                .HasForeignKey(d => d.Operador)
                .HasConstraintName("FK_LC_EXCEPCION_USUARIOOPERADOR");
        });

        modelBuilder.Entity<LcExcepcionDet>(entity =>
        {
            entity.HasKey(e => e.IdLcExcepcionDet)
                .HasName("PK_LC_EXCEPCIONES_DET");

            entity.ToTable("LC_EXCEPCION_DET", "dbo");

            entity.Property(e => e.IdLcExcepcionDet).HasColumnName("ID_LC_EXCEPCION_DET");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.Habilitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("HABILITADO")
                .HasComment("S - Excepcion habilitada  N - Excepcion inhabilitada a causa de un cambio de estado");

            entity.Property(e => e.IdLcExcepcion).HasColumnName("ID_LC_EXCEPCION");

            entity.Property(e => e.IdTipo).HasColumnName("ID_TIPO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdLcExcepcionNavigation)
                .WithMany(p => p.LcExcepcionDets)
                .HasForeignKey(d => d.IdLcExcepcion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_EXCEPCION_DET_LC_EXCEPCION");
        });

        modelBuilder.Entity<LcGarantiasOfrec>(entity =>
        {
            entity.HasKey(e => e.IdLcGarantiasOfrec);

            entity.ToTable("LC_GARANTIAS_OFREC", "dbo");

            entity.Property(e => e.IdLcGarantiasOfrec).HasColumnName("ID_LC_GARANTIAS_OFREC");

            entity.Property(e => e.DescripcionOtros)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_OTROS");

            entity.Property(e => e.GarantiaAnegociar).HasColumnName("GARANTIA_ANEGOCIAR");

            entity.Property(e => e.GarantiaCheque).HasColumnName("GARANTIA_CHEQUE");

            entity.Property(e => e.GarantiaContrato).HasColumnName("GARANTIA_CONTRATO");

            entity.Property(e => e.GarantiaFactCredito).HasColumnName("GARANTIA_FACT_CREDITO");

            entity.Property(e => e.GarantiaHipoteca).HasColumnName("GARANTIA_HIPOTECA");

            entity.Property(e => e.GarantiaPagTer).HasColumnName("GARANTIA_PAG_TER");

            entity.Property(e => e.GarantiaPagTerValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_PAG_TER_VALOR");

            entity.Property(e => e.GarantiaPagare).HasColumnName("GARANTIA_PAGARE");

            entity.Property(e => e.GarantiaPagareAval).HasColumnName("GARANTIA_PAGARE_AVAL");

            entity.Property(e => e.GarantiaPrenda).HasColumnName("GARANTIA_PRENDA");

            entity.Property(e => e.HipotecaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_MONTO");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.Otros).HasColumnName("OTROS");

            entity.Property(e => e.PrendaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRENDA_MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LcGarantiasOfrecs)
                .HasForeignKey(d => d.IdLineaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_GARANTIAS_OFREC_LINEA_CREDITO");
        });

        modelBuilder.Entity<LcGarantium>(entity =>
        {
            entity.HasKey(e => e.IdLcGarantia);

            entity.ToTable("LC_GARANTIA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_LC_GARANTIA")
                .IsUnique();

            entity.Property(e => e.IdLcGarantia).HasColumnName("ID_LC_GARANTIA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.Operador)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPERADOR");

            entity.Property(e => e.Plantilla)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PLANTILLA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LcGarantia)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_GARANTIA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.LcGarantia)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_LC_GARANTIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LcTipoCredito>(entity =>
        {
            entity.HasKey(e => e.IdLcTipoCredito);

            entity.ToTable("LC_TIPO_CREDITO", "dbo");

            entity.Property(e => e.IdLcTipoCredito).HasColumnName("ID_LC_TIPO_CREDITO");

            entity.Property(e => e.CapitalOperativo)
                .HasColumnName("CAPITAL_OPERATIVO")
                .HasComment("0= DESMARCADO, 1=MARCADO");

            entity.Property(e => e.DescripcionOtros)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_OTROS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FinanciamientoActivoFijo)
                .HasColumnName("FINANCIAMIENTO_ACTIVO_FIJO")
                .HasComment("0= DESMARCADO, 1=MARCADO");

            entity.Property(e => e.FinanciamientoInsumos)
                .HasColumnName("FINANCIAMIENTO_INSUMOS")
                .HasComment("0= DESMARCADO, 1=MARCADO");

            entity.Property(e => e.Granos)
                .HasColumnName("GRANOS")
                .HasComment("0= DESMARCADO, 1=MARCADO");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.Otros).HasColumnName("OTROS");

            entity.Property(e => e.ReestructuracionDeuda)
                .HasColumnName("REESTRUCTURACION_DEUDA")
                .HasComment("0= DESMARCADO, 1=MARCADO");

            entity.Property(e => e.RefinanciamientoDeuda)
                .HasColumnName("REFINANCIAMIENTO_DEUDA")
                .HasComment("0= DESMARCADO, 1=MARCADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LcTipoCreditos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_TIPO_CREDITO_EMPRESA");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LcTipoCreditos)
                .HasForeignKey(d => d.IdLineaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LC_TIPO_CREDITO_LINEA_CREDITO");
        });

        modelBuilder.Entity<LimiteCargaRemisionExp>(entity =>
        {
            entity.HasKey(e => e.IdLimiteCargaRemisionExp);

            entity.ToTable("LIMITE_CARGA_REMISION_EXP", "dbo");

            entity.Property(e => e.IdLimiteCargaRemisionExp).HasColumnName("ID_LIMITE_CARGA_REMISION_EXP");

            entity.Property(e => e.Autorizar).HasColumnName("AUTORIZAR");

            entity.Property(e => e.CantidadEntregado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD_ENTREGADO");

            entity.Property(e => e.CantidadLimite)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD_LIMITE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoOperacion).HasColumnName("TIPO_OPERACION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LimiteCargaRemisionExps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIMITE_CARGA_REMISION_EXP_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.LimiteCargaRemisionExps)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIMITE_CARGA_REMISION_EXP_CLIENTE");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.LimiteCargaRemisionExps)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIMITE_CARGA_REMISION_EXP_DEPOSITO");
        });

        modelBuilder.Entity<LineaCredito>(entity =>
        {
            entity.HasKey(e => e.IdLineaCredito);

            entity.ToTable("LINEA_CREDITO", "dbo");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.AcumuladoRemision).HasColumnName("ACUMULADO_REMISION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Excepcion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("EXCEPCION");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Operador)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OPERADOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LineaCreditos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.LineaCreditos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_CLIENTE");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.LineaCreditos)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LineaCreditoAdicional>(entity =>
        {
            entity.HasKey(e => e.IdLineaCreditoAdicional);

            entity.ToTable("LINEA_CREDITO_ADICIONAL", "dbo");

            entity.Property(e => e.IdLineaCreditoAdicional).HasColumnName("ID_LINEA_CREDITO_ADICIONAL");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.IdLcExcepcion).HasColumnName("ID_LC_EXCEPCION");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLcExcepcionNavigation)
                .WithMany(p => p.LineaCreditoAdicionals)
                .HasForeignKey(d => d.IdLcExcepcion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_ADICIONAL_LC_EXCEPCION");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LineaCreditoAdicionals)
                .HasForeignKey(d => d.IdLineaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_ADICIONAL_LINEA_CREDITO");
        });

        modelBuilder.Entity<LineaCreditoDocumento>(entity =>
        {
            entity.HasKey(e => e.IdLineaCreditoDocumento)
                .HasName("PK_LINEA_CREDITO_DOCUMENTOS");

            entity.ToTable("LINEA_CREDITO_DOCUMENTO", "dbo");

            entity.Property(e => e.IdLineaCreditoDocumento).HasColumnName("ID_LINEA_CREDITO_DOCUMENTO");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.IdLcDocumento).HasColumnName("ID_LC_DOCUMENTO");

            entity.Property(e => e.IdLcExcepcion).HasColumnName("ID_LC_EXCEPCION");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLcDocumentoNavigation)
                .WithMany(p => p.LineaCreditoDocumentos)
                .HasForeignKey(d => d.IdLcDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_DOCUMENTO_LC_DOCUMENTO");

            entity.HasOne(d => d.IdLcExcepcionNavigation)
                .WithMany(p => p.LineaCreditoDocumentos)
                .HasForeignKey(d => d.IdLcExcepcion)
                .HasConstraintName("FK_LINEA_CREDITO_DOCUMENTOS_LC_EXCEPCIONES");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LineaCreditoDocumentos)
                .HasForeignKey(d => d.IdLineaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_DOCUMENTOS_LINEA_CREDITO");
        });

        modelBuilder.Entity<LineaCreditoGarantium>(entity =>
        {
            entity.HasKey(e => e.IdLineaCreditoGarantia);

            entity.ToTable("LINEA_CREDITO_GARANTIA", "dbo");

            entity.Property(e => e.IdLineaCreditoGarantia).HasColumnName("ID_LINEA_CREDITO_GARANTIA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.IdLcExcepcion).HasColumnName("ID_LC_EXCEPCION");

            entity.Property(e => e.IdLcGarantia).HasColumnName("ID_LC_GARANTIA");

            entity.Property(e => e.IdLineaCredito).HasColumnName("ID_LINEA_CREDITO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLcExcepcionNavigation)
                .WithMany(p => p.LineaCreditoGarantia)
                .HasForeignKey(d => d.IdLcExcepcion)
                .HasConstraintName("FK_LINEA_CREDITO_GARANTIA_LC_EXCEPCIONES");

            entity.HasOne(d => d.IdLcGarantiaNavigation)
                .WithMany(p => p.LineaCreditoGarantia)
                .HasForeignKey(d => d.IdLcGarantia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_GARANTIA_LC_GARANTIA");

            entity.HasOne(d => d.IdLineaCreditoNavigation)
                .WithMany(p => p.LineaCreditoGarantia)
                .HasForeignKey(d => d.IdLineaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LINEA_CREDITO_GARANTIA_LINEA_CREDITO");
        });

        modelBuilder.Entity<LiquidacionFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdLiquidacionFuncionario);

            entity.ToTable("LIQUIDACION_FUNCIONARIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_LIQUIDACION_FUNCIONARIO")
                .IsUnique();

            entity.Property(e => e.IdLiquidacionFuncionario).HasColumnName("ID_LIQUIDACION_FUNCIONARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SalarioPromedio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_PROMEDIO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.UnitarioPromedio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("UNITARIO_PROMEDIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LiquidacionFuncionarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIQUIDACION_FUNCIONARIO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.LiquidacionFuncionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIQUIDACION_FUNCIONARIO_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.LiquidacionFuncionarios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIQUIDACION_FUNCIONARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LiquidacionFuncionarioDet>(entity =>
        {
            entity.HasKey(e => e.IdLiquidacionFuncionarioDet)
                .HasName("PK_FOLHA_LIQ_DET");

            entity.ToTable("LIQUIDACION_FUNCIONARIO_DET", "dbo");

            entity.HasIndex(e => new { e.IdLiquidacionFuncionario, e.IdEvento }, "UK_LIQUIDACION_FUNCIONARIO_DET")
                .IsUnique();

            entity.Property(e => e.IdLiquidacionFuncionarioDet).HasColumnName("ID_LIQUIDACION_FUNCIONARIO_DET");

            entity.Property(e => e.Dias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIAS");

            entity.Property(e => e.IdEvento).HasColumnName("ID_EVENTO");

            entity.Property(e => e.IdLiquidacionFuncionario).HasColumnName("ID_LIQUIDACION_FUNCIONARIO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.HasOne(d => d.IdEventoNavigation)
                .WithMany(p => p.LiquidacionFuncionarioDets)
                .HasForeignKey(d => d.IdEvento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIQUIDACION_FUNCIONARIO_DET_EVENTO");

            entity.HasOne(d => d.IdLiquidacionFuncionarioNavigation)
                .WithMany(p => p.LiquidacionFuncionarioDets)
                .HasForeignKey(d => d.IdLiquidacionFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LIQUIDACION_FUNCIONARIO_DET_LIQUIDACION_FUNCIONARIO");
        });

        modelBuilder.Entity<ListaPrecio>(entity =>
        {
            entity.HasKey(e => e.IdListaPrecio)
                .HasName("PK_LISTA_1");

            entity.ToTable("LISTA_PRECIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.Anho }, "UK_LISTA")
                .IsUnique();

            entity.Property(e => e.IdListaPrecio).HasColumnName("ID_LISTA_PRECIO");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Vencimiento1)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_1");

            entity.Property(e => e.Vencimiento2)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_2");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ListaPrecios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LISTA_PRECIO_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ListaPrecios)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LISTA_PRECIO_CULTIVO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ListaPrecios)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LISTA_PRECIO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ListaPrecios)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_LISTA_PRECIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ListaPrecioDet>(entity =>
        {
            entity.HasKey(e => e.IdListaPrecioDet)
                .HasName("PK_LISTA_PRODUCTO");

            entity.ToTable("LISTA_PRECIO_DET", "dbo");

            entity.HasIndex(e => new { e.IdListaPrecio, e.IdProducto }, "UK_LISTA_PRECIO_DET")
                .IsUnique();

            entity.Property(e => e.IdListaPrecioDet).HasColumnName("ID_LISTA_PRECIO_DET");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.ClieVenc1Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_1_MAX")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ClieVenc1Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_1_MIN")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ClieVenc2Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_2_MAX")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ClieVenc2Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_2_MIN")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.DistVenc1Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_1_MAX")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.DistVenc1Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_1_MIN")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.DistVenc2Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_2_MAX")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.DistVenc2Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_2_MIN")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdListaPrecio).HasColumnName("ID_LISTA_PRECIO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdListaPrecioNavigation)
                .WithMany(p => p.ListaPrecioDets)
                .HasForeignKey(d => d.IdListaPrecio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LISTA_PRECIO_DET_LISTA_PRECIO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ListaPrecioDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LISTA_PRECIO_DET_PRODUCTO");
        });

        modelBuilder.Entity<ListaPrecioServicio>(entity =>
        {
            entity.HasKey(e => e.IdListaPrecioServicio);

            entity.ToTable("LISTA_PRECIO_SERVICIO", "dbo");

            entity.Property(e => e.IdListaPrecioServicio).HasColumnName("ID_LISTA_PRECIO_SERVICIO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ListaPrecioServicios)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_LISTA_PRECIO_SERVICIO_EMPRESA");

            entity.HasOne(d => d.IdServicioNavigation)
                .WithMany(p => p.ListaPrecioServicios)
                .HasForeignKey(d => d.IdServicio)
                .HasConstraintName("FK_LISTA_PRECIO_SERVICIO_SERVICIO");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.IdLog);

            entity.ToTable("LOG", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdTabla, e.Lanzamiento, e.Fecha, e.Hora, e.Accion }, "IDX_F_LISTADO_EXTRAC_CUENTA");

            entity.HasIndex(e => e.IdTabla, "IDX_F_LISTADO_EXT_CUENTA");

            entity.Property(e => e.IdLog).HasColumnName("ID_LOG");

            entity.Property(e => e.Accion).HasColumnName("ACCION");

            entity.Property(e => e.Computador)
                .HasMaxLength(17)
                .IsUnicode(false)
                .HasColumnName("COMPUTADOR")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Hora)
                .HasColumnName("HORA")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LANZAMIENTO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Servidor).HasColumnName("SERVIDOR");

            entity.Property(e => e.Version)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VERSION");

            entity.Property(e => e.VersionWeb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VERSION_WEB");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Logs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_EMPRESA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.Logs)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_TABLA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.Logs)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_USUARIO");
        });

        modelBuilder.Entity<LogFabrilOp>(entity =>
        {
            entity.HasKey(e => e.IdLogFabrilOp);

            entity.ToTable("LOG_FABRIL_OP", "dbo");

            entity.Property(e => e.IdLogFabrilOp).HasColumnName("ID_LOG_FABRIL_OP");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.TipoFormulario)
                .HasColumnName("TIPO_FORMULARIO")
                .HasComment("1 - Orden de Producción - Normal, 2 - Orden de Producción - Excepción por Etapa, 3 - Orden de Producción - Viejo (no usar)");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.LogFabrilOps)
                .HasForeignKey(d => d.IdProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_FABRIL_OP_PRODUCCION");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.LogFabrilOps)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_FABRIL_OP_USUARIO");
        });

        modelBuilder.Entity<LogImpresionEtiquetum>(entity =>
        {
            entity.HasKey(e => e.IdLogImpEtiqueta);

            entity.ToTable("LOG_IMPRESION_ETIQUETA", "dbo");

            entity.Property(e => e.IdLogImpEtiqueta).HasColumnName("ID_LOG_IMP_ETIQUETA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Computador)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COMPUTADOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Observacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Servidor).HasColumnName("SERVIDOR");

            entity.Property(e => e.Version)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VERSION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LogImpresionEtiqueta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_IMPRESION_ETIQUETA_EMPRESA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.LogImpresionEtiqueta)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_IMPRESION_ETIQUETA_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.LogImpresionEtiqueta)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_LOG_IMPRESION_ETIQUETA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LogMovimientoDeposito>(entity =>
        {
            entity.HasKey(e => e.IdLogMovDeposito);

            entity.ToTable("LOG_MOVIMIENTO_DEPOSITO", "dbo");

            entity.Property(e => e.IdLogMovDeposito).HasColumnName("ID_LOG_MOV_DEPOSITO");

            entity.Property(e => e.Accion)
                .HasMaxLength(10)
                .HasColumnName("ACCION")
                .IsFixedLength();

            entity.Property(e => e.Computador)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COMPUTADOR");

            entity.Property(e => e.DepEntrada).HasColumnName("DEP_ENTRADA");

            entity.Property(e => e.DepSalida).HasColumnName("DEP_SALIDA");

            entity.Property(e => e.Detalle).HasColumnName("DETALLE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaNecesidad)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NECESIDAD");

            entity.Property(e => e.Hora).HasColumnName("HORA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Servidor).HasColumnName("SERVIDOR");

            entity.Property(e => e.Version)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VERSION");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LogMovimientoDepositos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_MOVIMIENTO_DEPOSITO_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.LogMovimientoDepositos)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_LOG_MOVIMIENTO_DEPOSITO_DEPARTAMENTO");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.LogMovimientoDepositos)
                .HasForeignKey(d => d.IdProduccion)
                .HasConstraintName("FK_LOG_MOVIMIENTO_DEPOSITO_PRODUCCION");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.LogMovimientoDepositos)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_MOVIMIENTO_DEPOSITO_TABLA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.LogMovimientoDepositos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_MOVIMIENTO_DEPOSITO_USUARIO");
        });

        modelBuilder.Entity<LogVersion>(entity =>
        {
            entity.HasKey(e => e.IdLogVersion);

            entity.ToTable("LOG_VERSION", "dbo");

            entity.Property(e => e.IdLogVersion).HasColumnName("ID_LOG_VERSION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.VersionCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VERSION_CLIENTE");

            entity.Property(e => e.VersionSistema)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VERSION_SISTEMA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.LogVersions)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOG_VERSION_USUARIO");
        });

        modelBuilder.Entity<Lote>(entity =>
        {
            entity.HasKey(e => e.IdLote);

            entity.ToTable("LOTE", "dbo");

            entity.HasIndex(e => e.IdLote, "IDX_LOTE_INF");

            entity.HasIndex(e => new { e.IdProducto, e.NroLote, e.RegStatus }, "UK_LOTE")
                .IsUnique();

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.Anho)
                .HasColumnName("ANHO")
                .HasComment("Utilizado para lote de producto terminado.");

            entity.Property(e => e.Aporte).HasColumnName("APORTE");

            entity.Property(e => e.CapacidadEstiba)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CAPACIDAD_ESTIBA");

            entity.Property(e => e.CodigoDisenho)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CODIGO_DISENHO");

            entity.Property(e => e.ConcentracionNominal)
                .HasColumnName("CONCENTRACION_NOMINAL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ConcentracionReal)
                .HasColumnName("CONCENTRACION_REAL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFabricacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FABRICACION");

            entity.Property(e => e.IdFabrilLiquidoLavado).HasColumnName("ID_FABRIL_LIQUIDO_LAVADO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Inc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("INC");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Orden)
                .HasColumnName("ORDEN")
                .HasComment("Utilizado para lote de producto terminado.");

            entity.Property(e => e.PesoEnvase)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_ENVASE");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Retencion).HasColumnName("RETENCION");

            entity.Property(e => e.Serie)
                .HasColumnName("SERIE")
                .HasComment("Utilizado para lote de producto terminado.");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .HasColumnName("TIPO")
                .IsFixedLength()
                .HasComment("C = Compra, V= Venta");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.Property(e => e.VencimientoSemilla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VENCIMIENTO_SEMILLA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Lotes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOTE_EMPRESA");

            entity.HasOne(d => d.IdFabrilLiquidoLavadoNavigation)
                .WithMany(p => p.Lotes)
                .HasForeignKey(d => d.IdFabrilLiquidoLavado)
                .HasConstraintName("FK_LOTE_FABRIL_LIQUIDO_LAVADO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.Lotes)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOTE_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.Lotes)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOTE_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Lotes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<LoteInc>(entity =>
        {
            entity.HasKey(e => e.IdLoteInc);

            entity.ToTable("LOTE_INC", "dbo");

            entity.Property(e => e.IdLoteInc).HasColumnName("ID_LOTE_INC");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0: EL LOTE Y NO CONFORMIDAD SIGUE ABIERTO, 1: CERRADO");

            entity.Property(e => e.IdGpwNoConformidad).HasColumnName("ID_GPW_NO_CONFORMIDAD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.LoteIncs)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LOTE_INC_LOTE");
        });

        modelBuilder.Entity<LoteKude>(entity =>
        {
            entity.HasKey(e => e.IdLoteKude)
                .HasName("PK__LOTE_KUD__19CCD3522F0CFF3D");

            entity.ToTable("LOTE_KUDE", "dbo");

            entity.Property(e => e.IdLoteKude).HasColumnName("ID_LOTE_KUDE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EnvioStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ENVIO_STATUS");

            entity.Property(e => e.FechaEnviado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENVIADO");

            entity.Property(e => e.FechaGenerado)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_GENERADO");

            entity.Property(e => e.IdDeLote).HasColumnName("ID_DE_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<LpPrecioAutorizar>(entity =>
        {
            entity.HasKey(e => e.IdPrecioAutorizar)
                .HasName("PK_LP_PRECIOS_AUTORIZAR");

            entity.ToTable("LP_PRECIO_AUTORIZAR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdPedido, e.IdProducto, e.RegStatus }, "IDX_LP_PRECIOS_AUTORIZAR")
                .IsUnique();

            entity.Property(e => e.IdPrecioAutorizar).HasColumnName("ID_PRECIO_AUTORIZAR");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAut)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUT");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NoAprobado).HasColumnName("NO_APROBADO");

            entity.Property(e => e.PrecioIngresado).HasColumnName("PRECIO_INGRESADO");

            entity.Property(e => e.PrecioMax).HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin).HasColumnName("PRECIO_MIN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Vbdir).HasColumnName("VBDIR");

            entity.Property(e => e.VencimientoPedido)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_PEDIDO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.LpPrecioAutorizars)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LP_PRECIO_AUTORIZAR_EMPRESA");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.LpPrecioAutorizars)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LP_PRECIO_AUTORIZAR_PEDIDO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.LpPrecioAutorizars)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LP_PRECIO_AUTORIZAR_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.LpPrecioAutorizars)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_LP_PRECIO_AUTORIZAR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<MailAutorizacionProduccion>(entity =>
        {
            entity.HasKey(e => e.IdMailAutorizacionProd);

            entity.ToTable("MAIL_AUTORIZACION_PRODUCCION", "dbo");

            entity.Property(e => e.IdMailAutorizacionProd).HasColumnName("ID_MAIL_AUTORIZACION_PROD");

            entity.Property(e => e.Categoria)
                .HasColumnName("CATEGORIA")
                .HasComment("0: PRODUCCION, 1:PLANIFICACION, 2:LOGISTICA REACONDICIONADO, 3:MATERIALES, 4: MATERIA PRIMA, 5; ALMACEN, 6:CCA, 7:GERENCIA");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<MailEvento>(entity =>
        {
            entity.HasKey(e => e.IdMailEvento)
                .HasName("PK_MAILS_EVENTOS");

            entity.ToTable("MAIL_EVENTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_MAILS_EVENTOS")
                .IsUnique();

            entity.Property(e => e.IdMailEvento).HasColumnName("ID_MAIL_EVENTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.MailEventos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MAIL_EVENTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.MailEventos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MAIL_EVENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<MailSolicitudProducto>(entity =>
        {
            entity.HasKey(e => e.IdMailSolicitudProducto);

            entity.ToTable("MAIL_SOLICITUD_PRODUCTO", "dbo");

            entity.Property(e => e.IdMailSolicitudProducto).HasColumnName("ID_MAIL_SOLICITUD_PRODUCTO");

            entity.Property(e => e.Deposito).HasColumnName("DEPOSITO");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<MailUsuarioEvento>(entity =>
        {
            entity.HasKey(e => e.IdMailUsuarioEvento)
                .HasName("PK_MAILS_USUARIOS_EVENTOS");

            entity.ToTable("MAIL_USUARIO_EVENTO", "dbo");

            entity.Property(e => e.IdMailUsuarioEvento).HasColumnName("ID_MAIL_USUARIO_EVENTO");

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.IdMailEvento).HasColumnName("ID_MAIL_EVENTO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 = Principal, 1 = En copia, 2 = En copia oculta");

            entity.HasOne(d => d.IdMailEventoNavigation)
                .WithMany(p => p.MailUsuarioEventos)
                .HasForeignKey(d => d.IdMailEvento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MAILS_USUARIOS_EVENTOS_MAILS_EVENTOS");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.MailUsuarioEventos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MAIL_USUARIO_EVENTO_USUARIO");
        });

        modelBuilder.Entity<MarcaProducto>(entity =>
        {
            entity.HasKey(e => e.IdMarcaProducto);

            entity.ToTable("MARCA_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_MARCA_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdMarcaProducto).HasColumnName("ID_MARCA_PRODUCTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Sigla)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SIGLA");

            entity.Property(e => e.Valido)
                .HasMaxLength(1)
                .HasColumnName("VALIDO")
                .IsFixedLength()
                .HasComment("S = Valido, N = No valido, no se puede seleccionar.");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.MarcaProductos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MARCA_PRODUCTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.MarcaProductos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MARCA_PRODUCTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<MateriaDet>(entity =>
        {
            entity.HasKey(e => e.IdMateriaDet);

            entity.ToTable("MATERIA_DET", "dbo");

            entity.Property(e => e.IdMateriaDet).HasColumnName("ID_MATERIA_DET");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdMateria).HasColumnName("ID_MATERIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdMateriaNavigation)
                .WithMany(p => p.MateriaDets)
                .HasForeignKey(d => d.IdMateria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MATERIA_DET_MATERIA");
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.HasKey(e => e.IdMaterial)
                .HasName("PK_MATERIAIS");

            entity.ToTable("MATERIAL", "dbo");

            entity.Property(e => e.IdMaterial).HasColumnName("ID_MATERIAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRubroRodados)
                .HasColumnName("ID_RUBRO_RODADOS")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Materials)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_MATERIAL_EMPRESA");

            entity.HasOne(d => d.IdRubroRodadosNavigation)
                .WithMany(p => p.Materials)
                .HasForeignKey(d => d.IdRubroRodados)
                .HasConstraintName("FK_MATERIAL_RUBRO_RODADOS");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Materials)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MATERIAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Materium>(entity =>
        {
            entity.HasKey(e => e.IdMateria);

            entity.ToTable("MATERIA", "dbo");

            entity.Property(e => e.IdMateria).HasColumnName("ID_MATERIA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Materia)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MATERIA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Materia)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_MATERIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Mercado>(entity =>
        {
            entity.HasKey(e => e.IdMercado);

            entity.ToTable("MERCADO", "dbo");

            entity.Property(e => e.IdMercado).HasColumnName("ID_MERCADO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Mercados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MERCADO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Mercados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MERCADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<MetasGrano>(entity =>
        {
            entity.HasKey(e => e.IdMetasGranos);

            entity.ToTable("METAS_GRANOS", "dbo");

            entity.Property(e => e.IdMetasGranos).HasColumnName("ID_METAS_GRANOS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Meta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("META");

            entity.Property(e => e.MetaFecha)
                .HasColumnType("date")
                .HasColumnName("META_FECHA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Supervisor).HasColumnName("SUPERVISOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.MetasGranos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_METAS_GRANOS_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.MetasGranos)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_METAS_GRANOS_CULTIVO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.MetasGranos)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_METAS_GRANOS_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.MetasGranos)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_METAS_GRANOS_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.MetasGranos)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_METAS_GRANOS_ZAFRA");
        });

        modelBuilder.Entity<MigracionCambioLoteG1>(entity =>
        {
            entity.HasKey(e => e.IdMigracionLote);

            entity.ToTable("MIGRACION_CAMBIO_LOTE_G1", "dbo");

            entity.Property(e => e.IdMigracionLote).HasColumnName("ID_MIGRACION_LOTE");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.DescLoteNuevo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESC_LOTE_NUEVO");

            entity.Property(e => e.Error)
                .HasColumnName("error")
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Error, 1 = OK, realizo la transformacion.");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLoteNuevo).HasColumnName("ID_LOTE_NUEVO");

            entity.Property(e => e.IdLoteViejo).HasColumnName("ID_LOTE_VIEJO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransformacion).HasColumnName("ID_TRANSFORMACION");

            entity.Property(e => e.Lote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOTE");

            entity.Property(e => e.Produto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PRODUTO");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALDO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<MktParcela>(entity =>
        {
            entity.HasKey(e => e.IdMktParcela)
                .HasName("PK_MKT_PARCELA_1");

            entity.ToTable("MKT_PARCELA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_MKT_PARCELA")
                .IsUnique();

            entity.Property(e => e.IdMktParcela).HasColumnName("ID_MKT_PARCELA");

            entity.Property(e => e.AplicaFecha)
                .HasColumnType("datetime")
                .HasColumnName("APLICA_FECHA");

            entity.Property(e => e.Base)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BASE");

            entity.Property(e => e.BaseKg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BASE_KG");

            entity.Property(e => e.CantPersonas).HasColumnName("CANT_PERSONAS");

            entity.Property(e => e.Cosecha)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COSECHA");

            entity.Property(e => e.CosechaArea)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("COSECHA_AREA");

            entity.Property(e => e.Desafio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESAFIO");

            entity.Property(e => e.Desarrollista).HasColumnName("DESARROLLISTA");

            entity.Property(e => e.DiaCampo).HasColumnName("DIA_CAMPO");

            entity.Property(e => e.DiaCampoMotivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIA_CAMPO_MOTIVO");

            entity.Property(e => e.Dosis)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DOSIS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Final)
                .HasColumnType("datetime")
                .HasColumnName("FINAL");

            entity.Property(e => e.Gerencia).HasColumnName("GERENCIA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Localidad).HasColumnName("LOCALIDAD");

            entity.Property(e => e.Motivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.Prevision).HasColumnName("PREVISION");

            entity.Property(e => e.PrevisionFecha)
                .HasColumnType("datetime")
                .HasColumnName("PREVISION_FECHA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Resultado).HasColumnName("RESULTADO");

            entity.Property(e => e.SiembraFecha)
                .HasColumnType("datetime")
                .HasColumnName("SIEMBRA_FECHA");

            entity.Property(e => e.Testimonio).HasColumnName("TESTIMONIO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.Variedad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VARIEDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.MktParcelas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MKT_PARCELA_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.MktParcelas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_MKT_PARCELA_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.MktParcelas)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_MKT_PARCELA_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.MktParcelas)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_MKT_PARCELA_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.MktParcelas)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_MKT_PARCELA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.MktParcelas)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_MKT_PARCELA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Modelo>(entity =>
        {
            entity.HasKey(e => e.IdModelo);

            entity.ToTable("MODELO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_MODELO")
                .IsUnique();

            entity.Property(e => e.IdModelo).HasColumnName("ID_MODELO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Modelos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MODELO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Modelos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_MODELO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Municipio>(entity =>
        {
            entity.HasKey(e => e.IdMunicipio);

            entity.ToTable("MUNICIPIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_MUNICIPIO")
                .IsUnique();

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.CodMonsanto).HasColumnName("COD_MONSANTO");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Municipios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MUNICIPIO_EMPRESA");

            entity.HasOne(d => d.IdEstadoNavigation)
                .WithMany(p => p.Municipios)
                .HasForeignKey(d => d.IdEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MUNICIPIO_ESTADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Municipios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MUNICIPIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Nacionalidad>(entity =>
        {
            entity.HasKey(e => e.IdNacionalidad);

            entity.ToTable("NACIONALIDAD", "dbo");

            entity.Property(e => e.IdNacionalidad).HasColumnName("ID_NACIONALIDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Nacionalidads)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_NACIONALIDAD_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Nacionalidads)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_NACIONALIDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NoConformidadSeguimiento>(entity =>
        {
            entity.HasKey(e => e.IdNoConforSeguimiento);

            entity.ToTable("NO_CONFORMIDAD_SEGUIMIENTO", "dbo");

            entity.Property(e => e.IdNoConforSeguimiento).HasColumnName("ID_NO_CONFOR_SEGUIMIENTO");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdLoteInc).HasColumnName("ID_LOTE_INC");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.OperacionOrigen).HasColumnName("OPERACION_ORIGEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("SALIDA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NoConformidadSeguimientos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NO_CONFORMIDAD_SEGUIMIENTO_EMPRESA");

            entity.HasOne(d => d.IdLoteIncNavigation)
                .WithMany(p => p.NoConformidadSeguimientos)
                .HasForeignKey(d => d.IdLoteInc)
                .HasConstraintName("FK_NO_CONFORMIDAD_SEGUIMIENTO_LOTE_INC");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.NoConformidadSeguimientos)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NO_CONFORMIDAD_SEGUIMIENTO_TABLA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.NoConformidadSeguimientoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NO_CONFORMIDAD_SEGUIMIENTO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NoConformidadSeguimientoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_NO_CONFORMIDAD_SEGUIMIENTO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<NotaCredito>(entity =>
        {
            entity.HasKey(e => e.IdNotaCredito);

            entity.ToTable("NOTA_CREDITO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_NOTA_CREDITO")
                .IsUnique();

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.AjustePrecio).HasColumnName("AJUSTE_PRECIO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.IdCentroCosto)
                .HasColumnName("ID_CENTRO_COSTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdNotaCreditoMotivo).HasColumnName("ID_NOTA_CREDITO_MOTIVO");

            entity.Property(e => e.IdNotaDevolucion).HasColumnName("ID_NOTA_DEVOLUCION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.ImpresionObs).HasColumnName("IMPRESION_OBS");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION")
                .HasComment("Dato proveniente del adaptador de Semilla");

            entity.Property(e => e.Tasa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TASA");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.TipoOperacion)
                .HasColumnName("TIPO_OPERACION")
                .HasComment("0 = DEVOLUCION - 1 = DESCUENTO - 2 = DONACION - 3 = BONIFICACION - 4 = RETENCION");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_NOTA_CREDITO_CHOFER");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_CLIENTE");

            entity.HasOne(d => d.IdNotaCreditoMotivoNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdNotaCreditoMotivo)
                .HasConstraintName("FK_NOTA_CREDITO_NOTA_CREDITO_MOTIVO");

            entity.HasOne(d => d.IdNotaDevolucionNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdNotaDevolucion)
                .HasConstraintName("FK_NOTA_CREDITO_NOTA_DEVOLUCION");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_NOTA_CREDITO_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_NOTA_CREDITO_TRANSPORTADORA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_NOTA_CREDITO_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaCreditos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_NOTA_CREDITO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<NotaCreditoCalculo>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoCalculo);

            entity.ToTable("NOTA_CREDITO_CALCULO", "dbo");

            entity.Property(e => e.IdNotaCreditoCalculo).HasColumnName("ID_NOTA_CREDITO_CALCULO");

            entity.Property(e => e.Dias).HasColumnName("DIAS");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tasa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TASA");

            entity.Property(e => e.Valor)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<NotaCreditoLote>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoLote)
                .HasName("PK_NOTAS_CREDITO_LOTES");

            entity.ToTable("NOTA_CREDITO_LOTE", "dbo");

            entity.HasIndex(e => new { e.IdNotaCredito, e.IdProducto, e.Lote }, "UK_NOTA_CREDITO_LOTE")
                .IsUnique();

            entity.Property(e => e.IdNotaCreditoLote).HasColumnName("ID_NOTA_CREDITO_LOTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lote)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdNotaCreditoNavigation)
                .WithMany(p => p.NotaCreditoLotes)
                .HasForeignKey(d => d.IdNotaCredito)
                .HasConstraintName("FK_NOTA_CREDITO_LOTE_NOTA_CREDITO1");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaCreditoLotes)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_NOTA_CREDITO_LOTE_PRODUCTO");
        });

        modelBuilder.Entity<NotaCreditoMotivo>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoMotivo);

            entity.ToTable("NOTA_CREDITO_MOTIVO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_NOTA_CREDITO_MOTIVO")
                .IsUnique();

            entity.Property(e => e.IdNotaCreditoMotivo).HasColumnName("ID_NOTA_CREDITO_MOTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaCreditoMotivos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_MOTIVO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaCreditoMotivos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_MOTIVO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NotaCreditoProducto>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoProducto);

            entity.ToTable("NOTA_CREDITO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdNotaCredito, e.RegStatus }, "IDX_IMPRIME_DOCUMENTO_NOTA_CREDITO");

            entity.Property(e => e.IdNotaCreditoProducto).HasColumnName("ID_NOTA_CREDITO_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdClienteReclamoFacturaDet)
                .HasColumnName("ID_CLIENTE_RECLAMO_FACTURA_DET")
                .HasComment("");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTimbradoFactura)
                .HasColumnName("ID_TIMBRADO_FACTURA")
                .HasComment(" ID_TIMBRADO de la factura sea de venta o exportacion");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA")
                .HasComment("Id de la factura, sea de venta o exportacion");

            entity.Property(e => e.Pedido)
                .HasColumnName("PEDIDO")
                .HasComment("ID_PEDIDO de la factura sea de venta o exportacion");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SerieFactura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE_FACTURA");

            entity.Property(e => e.TipoFactura)
                .HasColumnName("TIPO_FACTURA")
                .HasComment("0 Factura de venta\r\n1 Factura de Exportacion\r\n2 No es factura");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO")
                .HasComment("--05/08/2016 10:05 -- Se aumento los decimales a 8, originalmente estaba en 4");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_IVA5");

            entity.HasOne(d => d.IdClienteReclamoFacturaDetNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdClienteReclamoFacturaDet)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_CLIENTE_RECLAMO_FACTURA_DET");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdNotaCreditoNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdNotaCredito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_NOTA_CREDITO1");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_PLAN_CUENTA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdTimbradoFacturaNavigation)
                .WithMany(p => p.NotaCreditoProductos)
                .HasForeignKey(d => d.IdTimbradoFactura)
                .HasConstraintName("FK_NOTA_CREDITO_PRODUCTO_TIMBRADO");
        });

        modelBuilder.Entity<NotaCreditoProveedor>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoProveedor);

            entity.ToTable("NOTA_CREDITO_PROVEEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_NOTA_CREDITO_PROVEEDOR")
                .IsUnique();

            entity.Property(e => e.IdNotaCreditoProveedor).HasColumnName("ID_NOTA_CREDITO_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NotaCredito)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA_CREDITO");

            entity.Property(e => e.NotaCreditoFecha)
                .HasColumnType("datetime")
                .HasColumnName("NOTA_CREDITO_FECHA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaCreditoProveedors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_EMPRESA");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.NotaCreditoProveedors)
                .HasForeignKey(d => d.IdCentroCosto)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.NotaCreditoProveedors)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.NotaCreditoProveedors)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaCreditoProveedors)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NotaCreditoProveedorFat>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoProveedorFat);

            entity.ToTable("NOTA_CREDITO_PROVEEDOR_FAT", "dbo");

            entity.Property(e => e.IdNotaCreditoProveedorFat).HasColumnName("ID_NOTA_CREDITO_PROVEEDOR_FAT");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescuentoBase)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_BASE");

            entity.Property(e => e.DescuentoBaseGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_BASE_GUARANI");

            entity.Property(e => e.DescuentoIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_IVA");

            entity.Property(e => e.DescuentoIvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_IVA_GUARANI");

            entity.Property(e => e.DescuentoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_VALOR");

            entity.Property(e => e.DescuentoValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_VALOR_GUARANI");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.FacturaRemesa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA_REMESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFacturaExportacionFactura).HasColumnName("ID_FACTURA_EXPORTACION_FACTURA");

            entity.Property(e => e.IdNotaCreditoProveedor).HasColumnName("ID_NOTA_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SaldoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO_GUARANI");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.Property(e => e.VencimientoOriginal)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_ORIGINAL");

            entity.HasOne(d => d.IdFacturaExportacionFacturaNavigation)
                .WithMany(p => p.NotaCreditoProveedorFats)
                .HasForeignKey(d => d.IdFacturaExportacionFactura)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_FAT_FACTURA_EXPORTACION_FACTURA");

            entity.HasOne(d => d.IdNotaCreditoProveedorNavigation)
                .WithMany(p => p.NotaCreditoProveedorFats)
                .HasForeignKey(d => d.IdNotaCreditoProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_FAT_NOTA_CREDITO_PROVEEDOR");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.NotaCreditoProveedorFats)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_FAT_PLAN_CUENTA");
        });

        modelBuilder.Entity<NotaCreditoProveedorPro>(entity =>
        {
            entity.HasKey(e => e.IdNotaCreditoProveedorPro)
                .HasName("PK_PAGAR_DESCONTOS_PRODUTOS");

            entity.ToTable("NOTA_CREDITO_PROVEEDOR_PRO", "dbo");

            entity.Property(e => e.IdNotaCreditoProveedorPro).HasColumnName("ID_NOTA_CREDITO_PROVEEDOR_PRO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaCreditoProveedor).HasColumnName("ID_NOTA_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoCompra)
                .HasColumnName("TIPO_COMPRA")
                .HasComment("0:Compra Local - 1:Compra Exterior");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.NotaCreditoProveedorPros)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_PRO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaCreditoProveedorPros)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_PRO_LOTE");

            entity.HasOne(d => d.IdNotaCreditoProveedorNavigation)
                .WithMany(p => p.NotaCreditoProveedorPros)
                .HasForeignKey(d => d.IdNotaCreditoProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_PRO_NOTA_CREDITO_PROVEEDOR");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaCreditoProveedorPros)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_CREDITO_PROVEEDOR_PRO_PRODUCTO");
        });

        modelBuilder.Entity<NotaDebito>(entity =>
        {
            entity.HasKey(e => e.IdNotaDebito);

            entity.ToTable("NOTA_DEBITO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.Serie }, "UK_NOTA_DEBITO")
                .IsUnique();

            entity.Property(e => e.IdNotaDebito).HasColumnName("ID_NOTA_DEBITO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Favorecido)
                .HasColumnName("FAVORECIDO")
                .HasComment("Si Naturaleza = 0, ID_PROVEEDOR; sino, ID_CLIENTE");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.ImpCompSalida).HasColumnName("IMP_COMP_SALIDA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.Naturaleza).HasColumnName("NATURALEZA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaDebitos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEBITO_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.NotaDebitos)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_NOTA_DEBITO_CARPETA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.NotaDebitos)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_NOTA_DEBITO_CHOFER");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.NotaDebitos)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_NOTA_DEBITO_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.NotaDebitos)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_NOTA_DEBITO_TRANSPORTADORA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaDebitos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_NOTA_DEBITO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NotaDebitoProducto>(entity =>
        {
            entity.HasKey(e => e.IdNotaDebitoProducto)
                .HasName("PK_NOTAS_DEBITO_PRODUTOS");

            entity.ToTable("NOTA_DEBITO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdNotaDebito, e.IdProducto }, "UK_NOTA_DEBITO_PRODUCTO");

            entity.Property(e => e.IdNotaDebitoProducto).HasColumnName("ID_NOTA_DEBITO_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Compra).HasColumnName("COMPRA");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaDebito).HasColumnName("ID_NOTA_DEBITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Naturaleza)
                .HasColumnName("NATURALEZA")
                .HasComment("0 = DEVOLUCION - 2 = COMPLEMENTO - 3 = DEUDA ");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.TipoCompra)
                .HasColumnName("TIPO_COMPRA")
                .HasComment("0:Compra Local, 1:Compra Exterior");

            entity.Property(e => e.TipoFactura)
                .HasColumnName("TIPO_FACTURA")
                .HasComment("0:Factura de Venta - 1:Factura de Exportacion");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO")
                .HasComment("--05/08/2016 10:08 -- Se aumento los decimales a 8, originalmente estaba en 4");

            entity.HasOne(d => d.FacturaNavigation)
                .WithMany(p => p.NotaDebitoProductos)
                .HasForeignKey(d => d.Factura)
                .HasConstraintName("FK_NOTA_DEBITO_PRODUCTO_FACTURA_CRECON");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.NotaDebitoProductos)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_NOTA_DEBITO_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaDebitoProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_NOTA_DEBITO_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdNotaDebitoNavigation)
                .WithMany(p => p.NotaDebitoProductos)
                .HasForeignKey(d => d.IdNotaDebito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEBITO_PRODUCTO_NOTA_DEBITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaDebitoProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEBITO_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<NotaDevolucion>(entity =>
        {
            entity.HasKey(e => e.IdNotaDevolucion);

            entity.ToTable("NOTA_DEVOLUCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_NOTA_DEVOLUCION")
                .IsUnique();

            entity.Property(e => e.IdNotaDevolucion).HasColumnName("ID_NOTA_DEVOLUCION");

            entity.Property(e => e.Chapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_DOCUMENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoDocumento)
                .HasColumnName("TIPO_DOCUMENTO")
                .HasComment("0NOTA ENVIO-1NOTA REMISION-2 NOTA DEBITO-3 NOTA CREDITO-4 FACTURA VENTA-9 OTRO DOCUMENTO");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaDevolucions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.NotaDevolucions)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_NOTA_DEVOLUCION_CHOFER");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.NotaDevolucions)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_CLIENTE");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.NotaDevolucions)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_NOTA_DEVOLUCION_TRANSPORTADORA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.NotaDevolucionIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaDevolucionRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<NotaDevolucionProducto>(entity =>
        {
            entity.HasKey(e => e.IdNotaDevolucionProducto);

            entity.ToTable("NOTA_DEVOLUCION_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdNotaDevolucion, e.IdProducto, e.IdLote, e.RegStatus }, "UK_NOTA_DEVOLUCION_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdNotaDevolucionProducto).HasColumnName("ID_NOTA_DEVOLUCION_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaDevolucion).HasColumnName("ID_NOTA_DEVOLUCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.NotaDevolucionProductos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaDevolucionProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdNotaDevolucionNavigation)
                .WithMany(p => p.NotaDevolucionProductos)
                .HasForeignKey(d => d.IdNotaDevolucion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_PRODUCTO_NOTA_DEVOLUCION");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaDevolucionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_DEVOLUCION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<NotaEnvio>(entity =>
        {
            entity.HasKey(e => e.IdNotaEnvio);

            entity.ToTable("NOTA_ENVIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Fecha, e.RegStatus }, "IDX_NOTA_ENVIO_RECEP");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.Ajuste).HasColumnName("AJUSTE");

            entity.Property(e => e.CargaPeligrosa).HasColumnName("CARGA_PELIGROSA");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.CompletaBienes).HasColumnName("COMPLETA_BIENES");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DepositoDestino).HasColumnName("DEPOSITO_DESTINO");

            entity.Property(e => e.DepositoOrigen).HasColumnName("DEPOSITO_ORIGEN");

            entity.Property(e => e.DistanciaAprox).HasColumnName("DISTANCIA_APROX");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaTermino)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_TERMINO");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdNotaRemisionRechazo).HasColumnName("ID_NOTA_REMISION_RECHAZO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoDistribucion).HasColumnName("ID_PEDIDO_DISTRIBUCION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpCompSalida).HasColumnName("IMP_COMP_SALIDA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.Nfecha)
                .HasColumnType("datetime")
                .HasColumnName("NFECHA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetFertilizante).HasColumnName("RET_FERTILIZANTE");

            entity.Property(e => e.Serie)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SERIE")
                .IsFixedLength();

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.TipoProducto)
                .HasColumnName("TIPO_PRODUCTO")
                .HasComment("0=Producto  1=Granos");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");
        });

        modelBuilder.Entity<NotaEnvioProducto>(entity =>
        {
            entity.HasKey(e => e.IdNotaEnvioProducto);

            entity.ToTable("NOTA_ENVIO_PRODUCTO", "dbo");

            entity.HasIndex(e => e.Cantidad, "IDX_NOTA_ENVIO_RECEP");

            entity.HasIndex(e => new { e.IdProducto, e.IdLote, e.RegStatus }, "IDX_STOCK_VENCIMIENTO");

            entity.Property(e => e.IdNotaEnvioProducto).HasColumnName("ID_NOTA_ENVIO_PRODUCTO");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.ArdidoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_DESCONTADO");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.AveriadoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_DESCONTADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.HumedadDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_DESCONTADA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.ImpurezaDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_DESCONTADA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.ModoPesoBruto).HasColumnName("MODO_PESO_BRUTO");

            entity.Property(e => e.ModoPesoTara).HasColumnName("MODO_PESO_TARA");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoBrutoFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_BRUTO_FECHA");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PesoTaraFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_TARA_FECHA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PHE");

            entity.Property(e => e.PheDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_DESCONTADO");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.QuebradoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_DESCONTADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VERDOSO");

            entity.Property(e => e.VerdosoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_DESCONTADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaEnvioProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_NOTA_ENVIO_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdNotaEnvioNavigation)
                .WithMany(p => p.NotaEnvioProductos)
                .HasForeignKey(d => d.IdNotaEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_ENVIO_PRODUCTO_NOTA_ENVIO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaEnvioProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_ENVIO_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<NotaEnvioRemisionAtraso>(entity =>
        {
            entity.HasKey(e => e.IdNotaEnvioRemisionAtraso);

            entity.ToTable("NOTA_ENVIO_REMISION_ATRASO", "dbo");

            entity.Property(e => e.IdNotaEnvioRemisionAtraso).HasColumnName("ID_NOTA_ENVIO_REMISION_ATRASO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaEnvioRemisionAtrasos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_NOTA_ENVIO_REMISION_ATRASO_EMPRESA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.NotaEnvioRemisionAtrasos)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_NOTA_ENVIO_REMISION_ATRASO_TABLA");
        });

        modelBuilder.Entity<NotaEnvioRemisionDifPeso>(entity =>
        {
            entity.HasKey(e => e.IdNotaEnvioRemisionDifPeso);

            entity.ToTable("NOTA_ENVIO_REMISION_DIF_PESO", "dbo");

            entity.Property(e => e.IdNotaEnvioRemisionDifPeso).HasColumnName("ID_NOTA_ENVIO_REMISION_DIF_PESO");

            entity.Property(e => e.Diferencia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIFERENCIA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.NetoDestino)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NETO_DESTINO");

            entity.Property(e => e.NetoOrigen)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NETO_ORIGEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaEnvioRemisionDifPesos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_NOTA_ENVIO_REMISION_DIF_PESO_EMPRESA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.NotaEnvioRemisionDifPesos)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_NOTA_ENVIO_REMISION_DIF_PESO_TABLA");
        });

        modelBuilder.Entity<NotaRemision>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemision);

            entity.ToTable("NOTA_REMISION", "dbo");

            entity.HasIndex(e => new { e.Nota, e.IdPedido, e.IdCliente, e.IdDeposito, e.Expedidor, e.Empresa }, "IDX_Nota_Remision");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_NOTA_REMISION")
                .IsUnique();

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.Ajuste)
                .HasColumnName("AJUSTE")
                .HasComment("1=No afecta Listado Prom. Flete 0=lanzamiento comun");

            entity.Property(e => e.CargaPeligrosa).HasColumnName("CARGA_PELIGROSA");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.DepositoEntrega).HasColumnName("DEPOSITO_ENTREGA");

            entity.Property(e => e.DireccionTraslado)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_TRASLADO");

            entity.Property(e => e.DistanciaAprox).HasColumnName("DISTANCIA_APROX");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.ExpedidorFactura)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR_FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaTermino)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_TERMINO");

            entity.Property(e => e.IdCarreta).HasColumnName("ID_CARRETA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCiudadTraslado).HasColumnName("ID_CIUDAD_TRASLADO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdConsignatario)
                .HasColumnName("ID_CONSIGNATARIO")
                .HasComment("ID CONSIGNATARIO es el equivalente a ID_CLIENTE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdContratoVentaApl).HasColumnName("ID_CONTRATO_VENTA_APL");

            entity.Property(e => e.IdCuenta).HasColumnName("ID_CUENTA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoApl).HasColumnName("ID_PEDIDO_APL");

            entity.Property(e => e.IdPedidoDistribucion).HasColumnName("ID_PEDIDO_DISTRIBUCION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTimbradoFactura).HasColumnName("ID_TIMBRADO_FACTURA");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpCompSalida).HasColumnName("IMP_COMP_SALIDA");

            entity.Property(e => e.Lanzamiento)
                .HasColumnName("LANZAMIENTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Motivo)
                .HasColumnName("MOTIVO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Observacion2)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION2");

            entity.Property(e => e.PesoBascula)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PESO_BASCULA");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetFertilizante).HasColumnName("RET_FERTILIZANTE");

            entity.Property(e => e.TicketBascula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TICKET_BASCULA");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength()
                .HasComment("A=Autoimpresor, M=Manual");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_NOTA_REMISION_CLIENTE");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .HasConstraintName("FK_NOTA_REMISION_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdContratoVenta)
                .HasConstraintName("FK_NOTA_REMISION_CONTRATO_VENTA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_NOTA_REMISION_DEPOSITO");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_NOTA_REMISION_PEDIDO");

            entity.HasOne(d => d.IdPedidoDistribucionNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdPedidoDistribucion)
                .HasConstraintName("FK_NOTA_REMISION_PEDIDO_DISTRIBUCION");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.NotaRemisionIdTimbradoNavigations)
                .HasForeignKey(d => d.IdTimbrado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_TIMBRADO");

            entity.HasOne(d => d.IdTimbradoFacturaNavigation)
                .WithMany(p => p.NotaRemisionIdTimbradoFacturaNavigations)
                .HasForeignKey(d => d.IdTimbradoFactura)
                .HasConstraintName("FK_NOTA_REMISION_TIMBRADO1");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_NOTA_REMISION_TRANSPORTADORA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_NOTA_REMISION_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaRemisions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_NOTA_REMISION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NotaRemisionExp>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemisionExp);

            entity.ToTable("NOTA_REMISION_EXP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_NOTA_REMISION_EXP");

            entity.Property(e => e.IdNotaRemisionExp).HasColumnName("ID_NOTA_REMISION_EXP");

            entity.Property(e => e.BarrioChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CHOFER");

            entity.Property(e => e.Chapa1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA_1");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Consignatario).HasColumnName("CONSIGNATARIO");

            entity.Property(e => e.DepositoEntrega).HasColumnName("DEPOSITO_ENTREGA");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DistanciaAprox).HasColumnName("DISTANCIA_APROX");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaTermino)
                .HasColumnType("date")
                .HasColumnName("FECHA_TERMINO");

            entity.Property(e => e.HabilitacionChofer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("HABILITACION_CHOFER");

            entity.Property(e => e.IdAduana).HasColumnName("ID_ADUANA");

            entity.Property(e => e.IdCarreta).HasColumnName("ID_CARRETA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCiudad)
                .HasColumnName("ID_CIUDAD")
                .HasComment("ciudad del chofer");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdContratoVentaApl).HasColumnName("ID_CONTRATO_VENTA_APL");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.IdFacturaExportacionApl).HasColumnName("ID_FACTURA_EXPORTACION_APL");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoApl).HasColumnName("ID_PEDIDO_APL");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpCompSalida).HasColumnName("IMP_COMP_SALIDA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MotivoCancelacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_CANCELACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.HasOne(d => d.ConsignatarioNavigation)
                .WithMany(p => p.NotaRemisionExpConsignatarioNavigations)
                .HasForeignKey(d => d.Consignatario)
                .HasConstraintName("FK_NOTA_REMISION_EXP_CLIENTE1");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_EXP_EMPRESA");

            entity.HasOne(d => d.IdAduanaNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdAduana)
                .HasConstraintName("FK_NOTA_REMISION_EXP_ADUANA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_NOTA_REMISION_EXP_CHOFER");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_NOTA_REMISION_EXP_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.NotaRemisionExpIdClienteNavigations)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_NOTA_REMISION_EXP_CLIENTE");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdContratoVenta)
                .HasConstraintName("FK_NOTA_REMISION_EXP_CONTRATO_VENTA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_NOTA_REMISION_EXP_DEPOSITO");

            entity.HasOne(d => d.IdFacturaExportacionNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdFacturaExportacion)
                .HasConstraintName("FK_NOTA_REMISION_EXP_FACTURA_EXPORTACION");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_NOTA_REMISION_EXP_PEDIDO");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_NOTA_REMISION_EXP_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_NOTA_REMISION_EXP_TRANSPORTADORA");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdVehiculoPk)
                .HasConstraintName("FK_NOTA_REMISION_EXP_VEHICULO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_NOTA_REMISION_EXP_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaRemisionExps)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_NOTA_REMISION_EXP_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NotaRemisionExpProducto>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemisionExpProducto);

            entity.ToTable("NOTA_REMISION_EXP_PRODUCTO", "dbo");

            entity.Property(e => e.IdNotaRemisionExpProducto).HasColumnName("ID_NOTA_REMISION_EXP_PRODUCTO");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.ArdidoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_DESCONTADO");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.AveriadoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_DESCONTADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.HumedadDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_DESCONTADA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaRemisionExp).HasColumnName("ID_NOTA_REMISION_EXP");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.ImpurezaDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_DESCONTADA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.ModoPesoBruto).HasColumnName("MODO_PESO_BRUTO");

            entity.Property(e => e.ModoPesoTara).HasColumnName("MODO_PESO_TARA");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoBrutoFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_BRUTO_FECHA");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PesoTaraFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_TARA_FECHA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PHE");

            entity.Property(e => e.PheDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_DESCONTADO");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.QuebradoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_DESCONTADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VERDOSO");

            entity.Property(e => e.VerdosoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_DESCONTADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaRemisionExpProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_NOTA_REMISION_EXP_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdNotaRemisionExpNavigation)
                .WithMany(p => p.NotaRemisionExpProductos)
                .HasForeignKey(d => d.IdNotaRemisionExp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_EXP_PRODUCTO_NOTA_REMISION_EXP");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaRemisionExpProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_EXP_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<NotaRemisionMotivo>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemisionMotivo);

            entity.ToTable("NOTA_REMISION_MOTIVO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_NOTA_REMISION_MOTIVO")
                .IsUnique();

            entity.Property(e => e.IdNotaRemisionMotivo).HasColumnName("ID_NOTA_REMISION_MOTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaRemisionMotivos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_MOTIVO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaRemisionMotivos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_MOTIVO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NotaRemisionProducto>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemisionProducto);

            entity.ToTable("NOTA_REMISION_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdNotaRemision, e.IdProducto, e.IdLote, e.Cantidad }, "UK_NOTA_REMISION_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdNotaRemisionProducto).HasColumnName("ID_NOTA_REMISION_PRODUCTO");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.ArdidoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_DESCONTADO");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.AveriadoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_DESCONTADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.HumedadDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_DESCONTADA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.ImpurezaDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_DESCONTADA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.ModoPesoBruto).HasColumnName("MODO_PESO_BRUTO");

            entity.Property(e => e.ModoPesoTara).HasColumnName("MODO_PESO_TARA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoBrutoFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_BRUTO_FECHA");

            entity.Property(e => e.PesoLiquido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_LIQUIDO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PesoTaraFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_TARA_FECHA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PHE");

            entity.Property(e => e.PheDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_DESCONTADO");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.QuebradoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_DESCONTADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VERDOSO");

            entity.Property(e => e.VerdosoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_DESCONTADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.NotaRemisionProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdNotaRemisionNavigation)
                .WithMany(p => p.NotaRemisionProductos)
                .HasForeignKey(d => d.IdNotaRemision)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_PRODUCTO_NOTA_REMISION");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.NotaRemisionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<NotaRemisionRechazo>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemisionRechazo);

            entity.ToTable("NOTA_REMISION_RECHAZO", "dbo");

            entity.Property(e => e.IdNotaRemisionRechazo).HasColumnName("ID_NOTA_REMISION_RECHAZO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdRemision)
                .HasMaxLength(10)
                .HasColumnName("ID_REMISION")
                .IsFixedLength();

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoRemision).HasColumnName("TIPO_REMISION");
        });

        modelBuilder.Entity<NotaRemisionVentum>(entity =>
        {
            entity.HasKey(e => e.IdNotaRemisionVenta);

            entity.ToTable("NOTA_REMISION_VENTA", "dbo");

            entity.Property(e => e.IdNotaRemisionVenta).HasColumnName("ID_NOTA_REMISION_VENTA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdNotaRemisionProducto).HasColumnName("ID_NOTA_REMISION_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NotaRemisionVenta)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_NOTA_REMISION_VENTA_EMPRESA");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.NotaRemisionVenta)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_VENTA_FACTURA_CRECON");

            entity.HasOne(d => d.IdNotaRemisionProductoNavigation)
                .WithMany(p => p.NotaRemisionVenta)
                .HasForeignKey(d => d.IdNotaRemisionProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_VENTA_NOTA_REMISION_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.NotaRemisionVenta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTA_REMISION_VENTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<NumeroFolio>(entity =>
        {
            entity.HasKey(e => e.IdNumeroFolio);

            entity.ToTable("NUMERO_FOLIO", "dbo");

            entity.Property(e => e.IdNumeroFolio).HasColumnName("ID_NUMERO_FOLIO");

            entity.Property(e => e.Ano)
                .HasMaxLength(4)
                .HasColumnName("ANO")
                .IsFixedLength();

            entity.Property(e => e.CantPaginas).HasColumnName("CANT_PAGINAS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Mes)
                .HasMaxLength(2)
                .HasColumnName("MES")
                .IsFixedLength();

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoFolio)
                .HasColumnName("TIPO_FOLIO")
                .HasComment("1-Compra,2-Venta,3-Mayor,4-Diario");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.NumeroFolios)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_NUMERO_FOLIO_EMPRESA");
        });

        modelBuilder.Entity<OpDeposito>(entity =>
        {
            entity.HasKey(e => e.IdOpDeposito);

            entity.ToTable("OP_DEPOSITO", "dbo");

            entity.Property(e => e.IdOpDeposito).HasColumnName("ID_OP_DEPOSITO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFabrica).HasColumnName("ID_FABRICA");

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.OpMax).HasColumnName("OP_MAX");

            entity.Property(e => e.OpMin).HasColumnName("OP_MIN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.OpDepositos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OP_DEPOSITO_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.OpDepositos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OP_DEPOSITO_DEPOSITO");

            entity.HasOne(d => d.IdFabricaNavigation)
                .WithMany(p => p.OpDepositos)
                .HasForeignKey(d => d.IdFabrica)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OP_DEPOSITO_FABRICA");
        });

        modelBuilder.Entity<OrdenCarga>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCarga);

            entity.ToTable("ORDEN_CARGA", "dbo");

            entity.Property(e => e.IdOrdenCarga).HasColumnName("ID_ORDEN_CARGA");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .HasColumnName("CHAPA")
                .IsFixedLength();

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.OrdenCargas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDEN_CARGA_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.OrdenCargas)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_ORDEN_CARGA_CHOFER");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.OrdenCargas)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_ORDEN_CARGA_TRANSPORTADORA");

            entity.HasOne(d => d.IdVehiculoNavigation)
                .WithMany(p => p.OrdenCargas)
                .HasForeignKey(d => d.IdVehiculo)
                .HasConstraintName("FK_ORDEN_CARGA_VEHICULO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.OrdenCargas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDEN_CARGA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<OrdenCargaDet>(entity =>
        {
            entity.HasKey(e => e.IdOrdenCargaDet);

            entity.ToTable("ORDEN_CARGA_DET", "dbo");

            entity.Property(e => e.IdOrdenCargaDet).HasColumnName("ID_ORDEN_CARGA_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdLocalEntrega).HasColumnName("ID_LOCAL_ENTREGA");

            entity.Property(e => e.IdOrdenCarga).HasColumnName("ID_ORDEN_CARGA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoDistribucion).HasColumnName("ID_PEDIDO_DISTRIBUCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remitido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("REMITIDO");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.HasOne(d => d.IdLocalEntregaNavigation)
                .WithMany(p => p.OrdenCargaDets)
                .HasForeignKey(d => d.IdLocalEntrega)
                .HasConstraintName("FK_ORDEN_CARGA_DET_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdOrdenCargaNavigation)
                .WithMany(p => p.OrdenCargaDets)
                .HasForeignKey(d => d.IdOrdenCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ORDEN_CARGA_DET_ORDEN_CARGA");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.OrdenCargaDets)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_ORDEN_CARGA_DET_PEDIDO");

            entity.HasOne(d => d.IdPedidoDistribucionNavigation)
                .WithMany(p => p.OrdenCargaDets)
                .HasForeignKey(d => d.IdPedidoDistribucion)
                .HasConstraintName("FK_ORDEN_CARGA_DET_PEDIDO_DISTRIBUCION");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.OrdenCargaDets)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_ORDEN_CARGA_DET_PRODUCTO");
        });

        modelBuilder.Entity<Pagar>(entity =>
        {
            entity.HasKey(e => e.IdPagar);

            entity.ToTable("PAGAR", "dbo");

            entity.Property(e => e.IdPagar).HasColumnName("ID_PAGAR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.DescuentoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_GUARANI");

            entity.Property(e => e.Devolucion).HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaRemesa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA_REMESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA")
                .HasComment("Fecha del movimiento");

            entity.Property(e => e.FechaPago)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PAGO");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.InteresGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES_GUARANI");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.NroComprobante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NRO_COMPROBANTE");

            entity.Property(e => e.Observacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Original)
                .HasColumnType("datetime")
                .HasColumnName("ORIGINAL")
                .HasComment("Fecha de vencimiento original.");

            entity.Property(e => e.Pago)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PAGO");

            entity.Property(e => e.PagoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PAGO_GUARANI");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RefIdPagar)
                .HasColumnName("REF_ID_PAGAR")
                .HasComment("Campo donde se guarda el ID de pagar generado con el movimiento de origen.");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("En este campo guardamos el ID del movimiento");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_GS");

            entity.Property(e => e.RetencionIrpGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_IRP_GS");

            entity.Property(e => e.RetencionIrpUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_IRP_US");

            entity.Property(e => e.RetencionUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_US");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO")
                .HasComment("Fecha nueva de vencimiento en caso de cambios. Fecha Real.");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Pagars)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.Pagars)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_PAGAR_CARPETA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Pagars)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PROVEEDOR");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.Pagars)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_TABLA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.PagarIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_PAGAR_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PagarRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<PagarPago>(entity =>
        {
            entity.HasKey(e => e.IdPagarPago);

            entity.ToTable("PAGAR_PAGO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PAGAR_PAGO")
                .IsUnique();

            entity.Property(e => e.IdPagarPago).HasColumnName("ID_PAGAR_PAGO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaInteres)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INTERES");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdRecibirCobro).HasColumnName("ID_RECIBIR_COBRO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionFecha)
                .HasColumnType("datetime")
                .HasColumnName("RETENCION_FECHA");

            entity.Property(e => e.RetencionIraTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_IRA_TOTAL");

            entity.Property(e => e.RetencionIraTotalUs)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENCION_IRA_TOTAL_US");

            entity.Property(e => e.RetencionIrpTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_IRP_TOTAL");

            entity.Property(e => e.RetencionIrpTotalUs)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENCION_IRP_TOTAL_US");

            entity.Property(e => e.RetencionNota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RETENCION_NOTA");

            entity.Property(e => e.RetencionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL");

            entity.Property(e => e.RetencionTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL_US");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.TipoPago).HasColumnName("TIPO_PAGO");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorPago)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_EMPRESA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_PAGAR_PAGO_CHEQUERA");

            entity.HasOne(d => d.IdContratoCompraLiqNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.IdContratoCompraLiq)
                .HasConstraintName("FK_PAGAR_PAGO_CONTRATO_COMPRA_LIQ");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_PAGAR_PAGO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_PROVEEDOR");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_PAGAR_PAGO_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PagarPagos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PagarPagoFactura>(entity =>
        {
            entity.HasKey(e => e.IdPagarPagoFactura);

            entity.ToTable("PAGAR_PAGO_FACTURA", "dbo");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.Aux)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AUX");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.FacturaRemesa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_REMESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdPagarPago).HasColumnName("ID_PAGAR_PAGO");

            entity.Property(e => e.IdPagarPagoFactUnique).HasColumnName("ID_PAGAR_PAGO_FACT_UNIQUE");

            entity.Property(e => e.IdTabla)
                .HasColumnName("ID_TABLA")
                .HasComment("Solo guarda cuando es complemento- sierve como bandera");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO");

            entity.Property(e => e.ValorDescuentoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO_GUARANI");

            entity.Property(e => e.ValorInteres)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES");

            entity.Property(e => e.ValorInteresGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES_GUARANI");

            entity.Property(e => e.ValorOriginal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL");

            entity.Property(e => e.ValorOriginalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL_GUARANI");

            entity.Property(e => e.ValorOriginalReal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL_REAL");

            entity.Property(e => e.ValorPagado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO");

            entity.Property(e => e.ValorPagadoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_GUARANI");

            entity.Property(e => e.ValorPagadoReal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_REAL");

            entity.Property(e => e.ValorPago)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO");

            entity.Property(e => e.ValorPagoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO_GUARANI");

            entity.Property(e => e.ValorPagoReal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO_REAL");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.PagarPagoFacturas)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_FACTURA_CARPETA");

            entity.HasOne(d => d.IdPagarPagoNavigation)
                .WithMany(p => p.PagarPagoFacturas)
                .HasForeignKey(d => d.IdPagarPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_FACTURA_PAGAR_PAGO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.PagarPagoFacturas)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_PAGAR_PAGO_FACTURA_TABLA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.PagarPagoFacturas)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_PAGAR_PAGO_FACTURA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PagarPagoFormaPago>(entity =>
        {
            entity.HasKey(e => e.IdPagarPagoTp);

            entity.ToTable("PAGAR_PAGO_FORMA_PAGO", "dbo");

            entity.Property(e => e.IdPagarPagoTp).HasColumnName("ID_PAGAR_PAGO_TP");

            entity.Property(e => e.Ajuste)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("AJUSTE");

            entity.Property(e => e.Banco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FormaPago).HasColumnName("FORMA_PAGO");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Representante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE");

            entity.Property(e => e.RepresentanteDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DIRECCION");

            entity.Property(e => e.RepresentanteDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DOCUMENTO");

            entity.Property(e => e.Retencion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RETENCION");

            entity.Property(e => e.RetencionIra)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RETENCION_IRA");

            entity.Property(e => e.RetencionIraUs)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RETENCION_IRA_US");

            entity.Property(e => e.RetencionIrp)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RETENCION_IRP");

            entity.Property(e => e.RetencionIrpUs)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RETENCION_IRP_US");

            entity.Property(e => e.RetencionUs)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("RETENCION_US");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.Property(e => e.ValorPago)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_PAGO");

            entity.Property(e => e.ValorUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_US");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.PagarPagoFormaPagos)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_PAGAR_PAGO_FORMA_PAGO_CHEQUERA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.PagarPagoFormaPagos)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_FORMA_PAGO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdPagarPagoFacturaNavigation)
                .WithMany(p => p.PagarPagoFormaPagos)
                .HasForeignKey(d => d.IdPagarPagoFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_FORMA_PAGO_PAGAR_PAGO_FACTURA");
        });

        modelBuilder.Entity<PagarPagoRetencion>(entity =>
        {
            entity.HasKey(e => e.IdPagarPagoRetencion);

            entity.ToTable("PAGAR_PAGO_RETENCION", "dbo");

            entity.Property(e => e.IdPagarPagoRetencion).HasColumnName("ID_PAGAR_PAGO_RETENCION");

            entity.Property(e => e.CotizacionCompra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION_COMPRA");

            entity.Property(e => e.IdPagarPagoFactUnique).HasColumnName("ID_PAGAR_PAGO_FACT_UNIQUE");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_10");

            entity.Property(e => e.IvaGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_5");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_10");

            entity.Property(e => e.ValorGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_5");

            entity.HasOne(d => d.IdPagarPagoFacturaNavigation)
                .WithMany(p => p.PagarPagoRetencions)
                .HasForeignKey(d => d.IdPagarPagoFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_RETENCION_PAGAR_PAGO_FACTURA");
        });

        modelBuilder.Entity<PagarPagoRetencionDet>(entity =>
        {
            entity.HasKey(e => e.IdPagarPagoRetencionDet);

            entity.ToTable("PAGAR_PAGO_RETENCION_DET", "dbo");

            entity.Property(e => e.IdPagarPagoRetencionDet).HasColumnName("ID_PAGAR_PAGO_RETENCION_DET");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdPagarPago).HasColumnName("ID_PAGAR_PAGO");

            entity.Property(e => e.IdPagarPagoFactUnique).HasColumnName("ID_PAGAR_PAGO_FACT_UNIQUE");

            entity.Property(e => e.IdPagarPagoRetencion).HasColumnName("ID_PAGAR_PAGO_RETENCION");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.ImporteIrp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IRP");

            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IVA");

            entity.Property(e => e.ImporteRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_RENTA");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaSet)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_SET");

            entity.Property(e => e.PorcIrp).HasColumnName("PORC_IRP");

            entity.Property(e => e.PorcIva).HasColumnName("PORC_IVA");

            entity.Property(e => e.PorcRenta).HasColumnName("PORC_RENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdPagarPagoNavigation)
                .WithMany(p => p.PagarPagoRetencionDets)
                .HasForeignKey(d => d.IdPagarPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_RETENCION_DET_PAGAR_PAGO");

            entity.HasOne(d => d.IdPagarPagoRetencionNavigation)
                .WithMany(p => p.PagarPagoRetencionDets)
                .HasForeignKey(d => d.IdPagarPagoRetencion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_RETENCION_DET_PAGAR_PAGO_RETENCION");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.PagarPagoRetencionDets)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_RETENCION_DET_PROVEEDOR");
        });

        modelBuilder.Entity<PagarPagoRetencionIra>(entity =>
        {
            entity.HasKey(e => e.IdPagarPagoRetencionIra);

            entity.ToTable("PAGAR_PAGO_RETENCION_IRA", "dbo");

            entity.Property(e => e.IdPagarPagoRetencionIra).HasColumnName("ID_PAGAR_PAGO_RETENCION_IRA");

            entity.Property(e => e.IdPagarPagoFactUnique).HasColumnName("ID_PAGAR_PAGO_FACT_UNIQUE");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RetenidoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENIDO_DOLAR");

            entity.Property(e => e.RetenidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENIDO_GUARANI");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.HasOne(d => d.IdPagarPagoFacturaNavigation)
                .WithMany(p => p.PagarPagoRetencionIras)
                .HasForeignKey(d => d.IdPagarPagoFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_RETENCION_IRA_PAGAR_PAGO_FACTURA");
        });

        modelBuilder.Entity<PagarPagoRetencionIrp>(entity =>
        {
            entity.HasKey(e => e.IdPagarPagoRetencionIrp);

            entity.ToTable("PAGAR_PAGO_RETENCION_IRP", "dbo");

            entity.Property(e => e.IdPagarPagoRetencionIrp).HasColumnName("ID_PAGAR_PAGO_RETENCION_IRP");

            entity.Property(e => e.IdPagarPagoFactUnique).HasColumnName("ID_PAGAR_PAGO_FACT_UNIQUE");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RetenidoDolar)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENIDO_DOLAR");

            entity.Property(e => e.RetenidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENIDO_GUARANI");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.HasOne(d => d.IdPagarPagoFacturaNavigation)
                .WithMany(p => p.PagarPagoRetencionIrps)
                .HasForeignKey(d => d.IdPagarPagoFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGAR_PAGO_RETENCION_IRP_PAGAR_PAGO_FACTURA");
        });

        modelBuilder.Entity<Pagare>(entity =>
        {
            entity.HasKey(e => e.IdPagare);

            entity.ToTable("PAGARE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Vencimiento, e.RegStatus }, "IDX_L_PAGARE_REGISTRADO");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdCliente }, "UK_PAGARE")
                .IsUnique();

            entity.Property(e => e.IdPagare).HasColumnName("ID_PAGARE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Impresion)
                .IsUnicode(false)
                .HasColumnName("IMPRESION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.PendienteFirma).HasColumnName("PENDIENTE_FIRMA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Pagares)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Pagares)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_CLIENTE");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Pagares)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Pagares)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PagareCodeudor>(entity =>
        {
            entity.HasKey(e => e.IdPagareCodeudor);

            entity.ToTable("PAGARE_CODEUDOR", "dbo");

            entity.HasIndex(e => new { e.IdPagare, e.Avalista }, "UK_PAGARE_CODEUDOR")
                .IsUnique();

            entity.Property(e => e.IdPagareCodeudor).HasColumnName("ID_PAGARE_CODEUDOR");

            entity.Property(e => e.Avalista).HasColumnName("AVALISTA");

            entity.Property(e => e.IdPagare).HasColumnName("ID_PAGARE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.AvalistaNavigation)
                .WithMany(p => p.PagareCodeudors)
                .HasForeignKey(d => d.Avalista)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_CODEUDOR_CLIENTE");

            entity.HasOne(d => d.IdPagareNavigation)
                .WithMany(p => p.PagareCodeudors)
                .HasForeignKey(d => d.IdPagare)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_CODEUDOR_PAGARE");
        });

        modelBuilder.Entity<PagareFactura>(entity =>
        {
            entity.HasKey(e => e.IdPagareFactura);

            entity.ToTable("PAGARE_FACTURA", "dbo");

            entity.Property(e => e.IdPagareFactura).HasColumnName("ID_PAGARE_FACTURA");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.IdPagare).HasColumnName("ID_PAGARE");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE")
                .IsFixedLength();

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdPagareNavigation)
                .WithMany(p => p.PagareFacturas)
                .HasForeignKey(d => d.IdPagare)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAGARE_FACTURA_PAGARE");
        });

        modelBuilder.Entity<Pai>(entity =>
        {
            entity.HasKey(e => e.IdPais);

            entity.ToTable("PAIS", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PAIS")
                .IsUnique();

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.CodDe)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("COD_DE");

            entity.Property(e => e.CodTesaka)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("COD_TESAKA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Pais)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAIS_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Pais)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAIS_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Pedido>(entity =>
        {
            entity.HasKey(e => e.IdPedido);

            entity.ToTable("PEDIDO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.CheckTerrex)
                .HasColumnName("CHECK_TERREX")
                .HasDefaultValueSql("((0))")
                .HasComment("la idea es de que una vez verificado modificado el personal de Terrex...se marque el campo como 1, y eso le habilita al facturista para hacer la factura de servicio. 0:No Habilitado 1:Habilitado.");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.DiaVenc)
                .HasColumnName("DIA_VENC")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaReclamo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RECLAMO");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdLista).HasColumnName("ID_LISTA");

            entity.Property(e => e.IdListaPrecioServicio).HasColumnName("ID_LISTA_PRECIO_SERVICIO");

            entity.Property(e => e.IdPedidoBonificacion)
                .HasColumnName("ID_PEDIDO_BONIFICACION")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Reserva).HasColumnName("RESERVA");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdAprobadorNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdAprobador)
                .HasConstraintName("FK_PEDIDO_USUARIO");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CARPETA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CLIENTE");

            entity.HasOne(d => d.IdClienteLeNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdClienteLe)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdContratoVentaNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdContratoVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CONTRATO_VENTA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CULTIVO");

            entity.HasOne(d => d.IdListaNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdLista)
                .HasConstraintName("FK_PEDIDO_LISTA_PRECIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.PedidoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUnidadSalidaNavigation)
                .WithMany(p => p.PedidoIdUnidadSalidaNavigations)
                .HasForeignKey(d => d.IdUnidadSalida)
                .HasConstraintName("FK_PEDIDO_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_PEDIDO_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PEDIDO_EMPRESA_UNIDAD3");
        });

        modelBuilder.Entity<PedidoCancelacion>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCancelacion);

            entity.ToTable("PEDIDO_CANCELACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO_CANCELACION")
                .IsUnique();

            entity.Property(e => e.IdPedidoCancelacion).HasColumnName("ID_PEDIDO_CANCELACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.Lanzamiento)
                .HasColumnName("LANZAMIENTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoCancelacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CANCELACION_EMPRESA");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.PedidoCancelacions)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CANCELACION_PEDIDO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoCancelacions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PEDIDO_CANCELACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoCancelacionProducto>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCancelacionProducto);

            entity.ToTable("PEDIDO_CANCELACION_PRODUCTO", "dbo");

            entity.Property(e => e.IdPedidoCancelacionProducto).HasColumnName("ID_PEDIDO_CANCELACION_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPedidoCancelacion).HasColumnName("ID_PEDIDO_CANCELACION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITARIO");

            entity.HasOne(d => d.IdPedidoCancelacionNavigation)
                .WithMany(p => p.PedidoCancelacionProductos)
                .HasForeignKey(d => d.IdPedidoCancelacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CANCELACION_PRODUCTO_PEDIDO_CANCELACION");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoCancelacionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_CANCELACION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<PedidoCompra>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompra);

            entity.ToTable("PEDIDO_COMPRA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO_COMPRA");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPlanCompra).HasColumnName("ID_PLAN_COMPRA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda)
                .HasColumnName("MONEDA")
                .HasComment("0 - Dolares. 1 - Reales. 2 - Guaranies.");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PedidoProveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PEDIDO_PROVEEDOR")
                .HasComment("Referencia externa del proveedor");

            entity.Property(e => e.PorcentajeMerma).HasColumnName("PORCENTAJE_MERMA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoCompras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PedidoCompras)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_PEDIDO_COMPRA_CULTIVO");

            entity.HasOne(d => d.IdPlanCompraNavigation)
                .WithMany(p => p.PedidoCompras)
                .HasForeignKey(d => d.IdPlanCompra)
                .HasConstraintName("FK_PEDIDO_COMPRA_PLAN_COMPRA_ENC");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.PedidoCompras)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_PEDIDO_COMPRA_PROVEEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PedidoCompras)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_PEDIDO_COMPRA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoCompras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoCompraCan>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraCan)
                .HasName("PK_PEDIDOS_COMPRAS_CAN");

            entity.ToTable("PEDIDO_COMPRA_CAN", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO_COMPRA_CAN")
                .IsUnique();

            entity.Property(e => e.IdPedidoCompraCan).HasColumnName("ID_PEDIDO_COMPRA_CAN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoCompraCans)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_CAN_EMPRESA");

            entity.HasOne(d => d.IdPedidoCompraNavigation)
                .WithMany(p => p.PedidoCompraCans)
                .HasForeignKey(d => d.IdPedidoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_CAN_PEDIDO_COMPRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoCompraCans)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_CAN_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoCompraCanProducto>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraCanProducto);

            entity.ToTable("PEDIDO_COMPRA_CAN_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdPedidoCompraCan, e.IdPedidoCompraProducto, e.RegStatus }, "UK_PEDIDO_COMPRA_CAN_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdPedidoCompraCanProducto).HasColumnName("ID_PEDIDO_COMPRA_CAN_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPedidoCompraCan).HasColumnName("ID_PEDIDO_COMPRA_CAN");

            entity.Property(e => e.IdPedidoCompraProducto).HasColumnName("ID_PEDIDO_COMPRA_PRODUCTO");

            entity.Property(e => e.IdPedidoPlaComexDet).HasColumnName("ID_PEDIDO_PLA_COMEX_DET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPedidoCompraCanNavigation)
                .WithMany(p => p.PedidoCompraCanProductos)
                .HasForeignKey(d => d.IdPedidoCompraCan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_CAN_PRODUCTO_PEDIDO_COMPRA_CAN");

            entity.HasOne(d => d.IdPedidoCompraProductoNavigation)
                .WithMany(p => p.PedidoCompraCanProductos)
                .HasForeignKey(d => d.IdPedidoCompraProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_CAN_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdPedidoPlaComexDetNavigation)
                .WithMany(p => p.PedidoCompraCanProductos)
                .HasForeignKey(d => d.IdPedidoPlaComexDet)
                .HasConstraintName("FK_PEDIDO_COMPRA_CAN_PRODUCTO_PEDIDO_PLA_COMEX_DET");
        });

        modelBuilder.Entity<PedidoCompraExterior>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraExterior);

            entity.ToTable("PEDIDO_COMPRA_EXTERIOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO_COMPRA_EXTERIOR")
                .IsUnique();

            entity.Property(e => e.IdPedidoCompraExterior).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR");

            entity.Property(e => e.Aprobado).HasColumnName("APROBADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoCompraExteriorSolic).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR_SOLIC");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PedidoNum)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PEDIDO_NUM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoCompraExteriors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_EMPRESA");

            entity.HasOne(d => d.IdPedidoCompraExteriorSolicNavigation)
                .WithMany(p => p.PedidoCompraExteriors)
                .HasForeignKey(d => d.IdPedidoCompraExteriorSolic)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_PEDIDO_COMPRA_EXTERIOR_SOLICITANTE");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.PedidoCompraExteriors)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_USUARIO");
        });

        modelBuilder.Entity<PedidoCompraExteriorCan>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraExteriorCan);

            entity.ToTable("PEDIDO_COMPRA_EXTERIOR_CAN", "dbo");

            entity.Property(e => e.IdPedidoCompraExteriorCan).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR_CAN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoCompraExterior).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoCompraExteriorCans)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_EMPRESA");

            entity.HasOne(d => d.IdPedidoCompraExteriorNavigation)
                .WithMany(p => p.PedidoCompraExteriorCans)
                .HasForeignKey(d => d.IdPedidoCompraExterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_PEDIDO_COMPRA_EXTERIOR");
        });

        modelBuilder.Entity<PedidoCompraExteriorCanDet>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraExtCanDet);

            entity.ToTable("PEDIDO_COMPRA_EXTERIOR_CAN_DET", "dbo");

            entity.Property(e => e.IdPedidoCompraExtCanDet).HasColumnName("ID_PEDIDO_COMPRA_EXT_CAN_DET");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPedidoCompraExteriorCan).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR_CAN");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.PedidoCompraExteriorCanDets)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_DET_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PedidoCompraExteriorCanDets)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_DET_CULTIVO");

            entity.HasOne(d => d.IdPedidoCompraExteriorCanNavigation)
                .WithMany(p => p.PedidoCompraExteriorCanDets)
                .HasForeignKey(d => d.IdPedidoCompraExteriorCan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_DET_PEDIDO_COMPRA_EXTERIOR_CAN");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoCompraExteriorCanDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_DET_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PedidoCompraExteriorCanDets)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_CAN_DET_ZAFRA");
        });

        modelBuilder.Entity<PedidoCompraExteriorDet>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraExteriorDet);

            entity.ToTable("PEDIDO_COMPRA_EXTERIOR_DET", "dbo");

            entity.Property(e => e.IdPedidoCompraExteriorDet).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR_DET");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPedidoCompraExterior).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.PedidoCompraExteriorDets)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_DET_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PedidoCompraExteriorDets)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_DET_CULTIVO");

            entity.HasOne(d => d.IdPedidoCompraExteriorNavigation)
                .WithMany(p => p.PedidoCompraExteriorDets)
                .HasForeignKey(d => d.IdPedidoCompraExterior)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_DET_PEDIDO_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoCompraExteriorDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_DET_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PedidoCompraExteriorDets)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_DET_ZAFRA");
        });

        modelBuilder.Entity<PedidoCompraExteriorSolicitante>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraExteriorSolic);

            entity.ToTable("PEDIDO_COMPRA_EXTERIOR_SOLICITANTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PEDIDO_COMPRA_EXTERIOR_SOLICITANTE")
                .IsUnique();

            entity.Property(e => e.IdPedidoCompraExteriorSolic).HasColumnName("ID_PEDIDO_COMPRA_EXTERIOR_SOLIC");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoCompraExteriorSolicitantes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_EXTERIOR_SOLICITANTE_EMPRESA");
        });

        modelBuilder.Entity<PedidoCompraProducto>(entity =>
        {
            entity.HasKey(e => e.IdPedidoCompraProducto);

            entity.ToTable("PEDIDO_COMPRA_PRODUCTO", "dbo");

            entity.Property(e => e.IdPedidoCompraProducto).HasColumnName("ID_PEDIDO_COMPRA_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.IdPedidoPlaComexDet).HasColumnName("ID_PEDIDO_PLA_COMEX_DET");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("UNITARIO");

            entity.HasOne(d => d.IdPedidoCompraNavigation)
                .WithMany(p => p.PedidoCompraProductos)
                .HasForeignKey(d => d.IdPedidoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_PRODUCTO_PEDIDO_COMPRA");

            entity.HasOne(d => d.IdPedidoPlaComexDetNavigation)
                .WithMany(p => p.PedidoCompraProductos)
                .HasForeignKey(d => d.IdPedidoPlaComexDet)
                .HasConstraintName("FK_PEDIDO_COMPRA_PRODUCTO_PEDIDO_PLA_COMEX_DET");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoCompraProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_COMPRA_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<PedidoDistribucion>(entity =>
        {
            entity.HasKey(e => e.IdPedidoDistribucion)
                .HasName("PK__PEDIDO_D__1007DEF6972E6316");

            entity.ToTable("PEDIDO_DISTRIBUCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus }, "UK_PEDIDO_DISTRIBUCION")
                .IsUnique();

            entity.Property(e => e.IdPedidoDistribucion).HasColumnName("ID_PEDIDO_DISTRIBUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZonaDistribucion).HasColumnName("ID_ZONA_DISTRIBUCION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoDistribucions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.PedidoDistribucions)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DEPOSITO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.PedidoDistribucions)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_VENDEDOR");

            entity.HasOne(d => d.IdZonaDistribucionNavigation)
                .WithMany(p => p.PedidoDistribucions)
                .HasForeignKey(d => d.IdZonaDistribucion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_ZONA_DISTRIBUCION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoDistribucions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoDistribucionAux>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("PEDIDO_DISTRIBUCION_AUX", "dbo");

            entity.Property(e => e.CantidadPedido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_PEDIDO");

            entity.Property(e => e.CantidadProg)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_PROG");

            entity.Property(e => e.CodClie).HasColumnName("COD_CLIE");

            entity.Property(e => e.CodProd)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("COD_PROD");

            entity.Property(e => e.CodVend).HasColumnName("COD_VEND");

            entity.Property(e => e.DescClie)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIE");

            entity.Property(e => e.DescEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESC_ENVASE");

            entity.Property(e => e.DescProd)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_PROD");

            entity.Property(e => e.DescVend)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESC_VEND");

            entity.Property(e => e.DescZona)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_ZONA");

            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntregadoPedido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ENTREGADO_PEDIDO");

            entity.Property(e => e.EntregadoProg)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ENTREGADO_PROG");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdLocalEntrega).HasColumnName("ID_LOCAL_ENTREGA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoDistribucion).HasColumnName("ID_PEDIDO_DISTRIBUCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.Programar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROGRAMAR");

            entity.Property(e => e.SaldoPedido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALDO_PEDIDO");

            entity.Property(e => e.SaldoProg)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("SALDO_PROG");

            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.Property(e => e.StockGical)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOCK_GICAL");

            entity.Property(e => e.StockGral)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOCK_GRAL");

            entity.Property(e => e.StockVilleta)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOCK_VILLETA");

            entity.Property(e => e.Tipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TIPO");
        });

        modelBuilder.Entity<PedidoDistribucionDet>(entity =>
        {
            entity.HasKey(e => e.IdPedidoDistribucionDet);

            entity.ToTable("PEDIDO_DISTRIBUCION_DET", "dbo");

            entity.HasIndex(e => new { e.IdPedidoDistribucion, e.IdPedido, e.IdProducto, e.IdLocalEntrega, e.RegStatus }, "UK_PEDIDO_DISTRIBUCION_DET")
                .IsUnique();

            entity.Property(e => e.IdPedidoDistribucionDet).HasColumnName("ID_PEDIDO_DISTRIBUCION_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.IdLocalEntrega).HasColumnName("ID_LOCAL_ENTREGA");

            entity.Property(e => e.IdPedido)
                .HasColumnName("ID_PEDIDO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdPedidoDistribucion).HasColumnName("ID_PEDIDO_DISTRIBUCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoDistribucionDets)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DET_EMPRESA");

            entity.HasOne(d => d.IdLocalEntregaNavigation)
                .WithMany(p => p.PedidoDistribucionDets)
                .HasForeignKey(d => d.IdLocalEntrega)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DET_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.PedidoDistribucionDets)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DET_PEDIDO");

            entity.HasOne(d => d.IdPedidoDistribucionNavigation)
                .WithMany(p => p.PedidoDistribucionDets)
                .HasForeignKey(d => d.IdPedidoDistribucion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DET_PEDIDO_DISTRIBUCION");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoDistribucionDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DET_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoDistribucionDets)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_DISTRIBUCION_DET_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoHist>(entity =>
        {
            entity.HasKey(e => e.IdPedidoVersion);

            entity.ToTable("PEDIDO_HIST", "dbo");

            entity.Property(e => e.IdPedidoVersion)
                .ValueGeneratedNever()
                .HasColumnName("ID_PEDIDO_VERSION");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaReclamo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RECLAMO");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdLista).HasColumnName("ID_LISTA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoBonificacion).HasColumnName("ID_PEDIDO_BONIFICACION");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Reserva).HasColumnName("RESERVA");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<PedidoImp>(entity =>
        {
            entity.HasKey(e => e.IdPedidoImp);

            entity.ToTable("PEDIDO_IMP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO_IMP")
                .IsUnique();

            entity.Property(e => e.IdPedidoImp).HasColumnName("ID_PEDIDO_IMP");

            entity.Property(e => e.Cierre)
                .HasColumnName("CIERRE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaConfirPedido)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CONFIR_PEDIDO");

            entity.Property(e => e.FechaCopiaDoc)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COPIA_DOC");

            entity.Property(e => e.FechaCotizAprobada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COTIZ_APROBADA");

            entity.Property(e => e.FechaCotizRecibida)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COTIZ_RECIBIDA");

            entity.Property(e => e.FechaDocOriginal)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DOC_ORIGINAL");

            entity.Property(e => e.FechaEstimadaEmbarque)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ESTIMADA_EMBARQUE");

            entity.Property(e => e.FechaEtd)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ETD");

            entity.Property(e => e.FechaSolicCotiz)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SOLIC_COTIZ");

            entity.Property(e => e.IdPedidoPlaComexDet).HasColumnName("ID_PEDIDO_PLA_COMEX_DET");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.PuertoDestino)
                .HasColumnName("PUERTO_DESTINO")
                .HasComment("Id Puerto destino");

            entity.Property(e => e.PuertoOrigen)
                .HasColumnName("PUERTO_ORIGEN")
                .HasComment("Id Puerto de origen");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoImps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_IMP_EMPRESA");

            entity.HasOne(d => d.IdPedidoPlaComexDetNavigation)
                .WithMany(p => p.PedidoImps)
                .HasForeignKey(d => d.IdPedidoPlaComexDet)
                .HasConstraintName("FK_PEDIDO_IMP_PEDIDO_PLA_COMEX_DET");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoImps)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_IMP_PRODUCTO");

            entity.HasOne(d => d.IdTipoTransporteNavigation)
                .WithMany(p => p.PedidoImps)
                .HasForeignKey(d => d.IdTipoTransporte)
                .HasConstraintName("FK_PEDIDO_IMP_TIPO_TRANSPORTE");

            entity.HasOne(d => d.PuertoDestinoNavigation)
                .WithMany(p => p.PedidoImpPuertoDestinoNavigations)
                .HasForeignKey(d => d.PuertoDestino)
                .HasConstraintName("FK_PEDIDO_IMP_PUERTO_DES");

            entity.HasOne(d => d.PuertoOrigenNavigation)
                .WithMany(p => p.PedidoImpPuertoOrigenNavigations)
                .HasForeignKey(d => d.PuertoOrigen)
                .HasConstraintName("FK_PEDIDO_IMP_PUERTO_ORI");
        });

        modelBuilder.Entity<PedidoImpDet>(entity =>
        {
            entity.HasKey(e => e.IdPedidoImpDet);

            entity.ToTable("PEDIDO_IMP_DET", "dbo");

            entity.Property(e => e.IdPedidoImpDet).HasColumnName("ID_PEDIDO_IMP_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ConcentSenave)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CONCENT_SENAVE");

            entity.Property(e => e.Concentracion)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CONCENTRACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fabricante)
                .HasColumnName("FABRICANTE")
                .HasComment("Se guarda el ID del proveedor quien fuera el fabricante del producto.");

            entity.Property(e => e.IdPedidoImp).HasColumnName("ID_PEDIDO_IMP");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegSenave)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REG_SENAVE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.FabricanteNavigation)
                .WithMany(p => p.PedidoImpDets)
                .HasForeignKey(d => d.Fabricante)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_IMP_DET_PROVEEDOR");

            entity.HasOne(d => d.IdPedidoImpNavigation)
                .WithMany(p => p.PedidoImpDets)
                .HasForeignKey(d => d.IdPedidoImp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_IMP_DET_PEDIDO_IMP");
        });

        modelBuilder.Entity<PedidoPlaComex>(entity =>
        {
            entity.HasKey(e => e.IdPedidoPlaComex);

            entity.ToTable("PEDIDO_PLA_COMEX", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PEDIDO_PLA_COMEX")
                .IsUnique();

            entity.Property(e => e.IdPedidoPlaComex).HasColumnName("ID_PEDIDO_PLA_COMEX");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoPlaComices)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PedidoPlaComices)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoPlaComexCan>(entity =>
        {
            entity.HasKey(e => e.IdPedidoPlaComexCan);

            entity.ToTable("PEDIDO_PLA_COMEX_CAN", "dbo");

            entity.Property(e => e.IdPedidoPlaComexCan).HasColumnName("ID_PEDIDO_PLA_COMEX_CAN");

            entity.Property(e => e.CantidadCancelar)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD_CANCELAR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoPlaComexDet).HasColumnName("ID_PEDIDO_PLA_COMEX_DET");

            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoPlaComexCans)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_CAN_EMPRESA");

            entity.HasOne(d => d.IdPedidoPlaComexDetNavigation)
                .WithMany(p => p.PedidoPlaComexCans)
                .HasForeignKey(d => d.IdPedidoPlaComexDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_CAN_PEDIDO_PLA_COMEX_DET");
        });

        modelBuilder.Entity<PedidoPlaComexDet>(entity =>
        {
            entity.HasKey(e => e.IdPedidoPlaComexDet)
                .HasName("PK_PEDIDO_PLA_COMEX_DET_1");

            entity.ToTable("PEDIDO_PLA_COMEX_DET", "dbo");

            entity.Property(e => e.IdPedidoPlaComexDet).HasColumnName("ID_PEDIDO_PLA_COMEX_DET");

            entity.Property(e => e.Autorizado).HasColumnName("AUTORIZADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cierre)
                .HasColumnName("CIERRE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.FechaNecesidad)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NECESIDAD");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdPedidoPlaComex).HasColumnName("ID_PEDIDO_PLA_COMEX");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegistradoPor).HasColumnName("REGISTRADO_POR");

            entity.Property(e => e.TipoCompra).HasColumnName("TIPO_COMPRA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PedidoPlaComexDets)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_DET_CULTIVO");

            entity.HasOne(d => d.IdPedidoPlaComexNavigation)
                .WithMany(p => p.PedidoPlaComexDets)
                .HasForeignKey(d => d.IdPedidoPlaComex)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_DET_PEDIDO_PLA_COMEX");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoPlaComexDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_DET_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PedidoPlaComexDets)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_DET_ZAFRA");
        });

        modelBuilder.Entity<PedidoPlaComexDetFecha>(entity =>
        {
            entity.HasKey(e => e.IdPedidoPlaComexDetFecha);

            entity.ToTable("PEDIDO_PLA_COMEX_DET_FECHA", "dbo");

            entity.Property(e => e.IdPedidoPlaComexDetFecha).HasColumnName("ID_PEDIDO_PLA_COMEX_DET_FECHA");

            entity.Property(e => e.FechaNecesidadActualizada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NECESIDAD_ACTUALIZADA");

            entity.Property(e => e.IdPedidoPlaComexDet).HasColumnName("ID_PEDIDO_PLA_COMEX_DET");

            entity.Property(e => e.Observacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPedidoPlaComexDetNavigation)
                .WithMany(p => p.PedidoPlaComexDetFechas)
                .HasForeignKey(d => d.IdPedidoPlaComexDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PLA_COMEX_DET_FECHA_PEDIDO_PLA_COMEX_DET");
        });

        modelBuilder.Entity<PedidoProducto>(entity =>
        {
            entity.HasKey(e => e.IdPedidoProducto);

            entity.ToTable("PEDIDO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdPedido, e.IdProducto, e.Cantidad, e.Unitario }, "UK_PEDIDO_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdPedidoProducto).HasColumnName("ID_PEDIDO_PRODUCTO");

            entity.Property(e => e.Bonificacion)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("BONIFICACION");

            entity.Property(e => e.Cancelado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANCELADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Devuelto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DEVUELTO");

            entity.Property(e => e.Entrega)
                .HasColumnType("datetime")
                .HasColumnName("ENTREGA");

            entity.Property(e => e.Facturado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("FACTURADO");

            entity.Property(e => e.IdClienteReclamoFacturaDet).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA_DET");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoFormula)
                .HasColumnName("ID_PRODUCTO_FORMULA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remitido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("REMITIDO");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO")
                .HasComment("--05/08/2016 10:00 -- Se aumento los decimales a 8, originalmente estaba en 4");

            entity.Property(e => e.ValidarPrecio).HasColumnName("VALIDAR_PRECIO");

            entity.HasOne(d => d.IdClienteReclamoFacturaDetNavigation)
                .WithMany(p => p.PedidoProductos)
                .HasForeignKey(d => d.IdClienteReclamoFacturaDet)
                .HasConstraintName("FK_PEDIDO_PRODUCTO_CLIENTE_RECLAMO_FACTURA_DET");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.PedidoProductos)
                .HasForeignKey(d => d.IdPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PRODUCTO_PEDIDO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PedidoProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdProductoFormulaNavigation)
                .WithMany(p => p.PedidoProductos)
                .HasForeignKey(d => d.IdProductoFormula)
                .HasConstraintName("FK_PEDIDO_PRODUCTO_PRODUCTO_FORMULA");
        });

        modelBuilder.Entity<PedidoProductoHist>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("PEDIDO_PRODUCTO_HIST", "dbo");

            entity.Property(e => e.Cancelado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANCELADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Devuelto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DEVUELTO");

            entity.Property(e => e.Entrega)
                .HasColumnType("datetime")
                .HasColumnName("ENTREGA");

            entity.Property(e => e.Facturado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("FACTURADO");

            entity.Property(e => e.IdClienteReclamoFacturaDet).HasColumnName("ID_CLIENTE_RECLAMO_FACTURA_DET");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoProducto).HasColumnName("ID_PEDIDO_PRODUCTO");

            entity.Property(e => e.IdPedidoVersion).HasColumnName("ID_PEDIDO_VERSION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remitido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("REMITIDO");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValidarPrecio).HasColumnName("VALIDAR_PRECIO");
        });

        modelBuilder.Entity<PedidoTalonario>(entity =>
        {
            entity.HasKey(e => e.IdPedidoTalonario);

            entity.ToTable("PEDIDO_TALONARIO", "dbo");

            entity.Property(e => e.IdPedidoTalonario).HasColumnName("ID_PEDIDO_TALONARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entregado)
                .HasColumnName("ENTREGADO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RangoFin).HasColumnName("RANGO_FIN");

            entity.Property(e => e.RangoIni).HasColumnName("RANGO_INI");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PedidoTalonarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_TALONARIO_EMPRESA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.PedidoTalonarios)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PEDIDO_TALONARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PedidoVencimiento>(entity =>
        {
            entity.HasKey(e => e.IdPedidoVencimiento);

            entity.ToTable("PEDIDO_VENCIMIENTO", "dbo");

            entity.Property(e => e.IdPedidoVencimiento).HasColumnName("ID_PEDIDO_VENCIMIENTO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("date")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdPedidoNavigation)
                .WithMany(p => p.PedidoVencimientos)
                .HasForeignKey(d => d.IdPedido)
                .HasConstraintName("FK_PEDIDO_VENCIMIENTO_PEDIDO");
        });

        modelBuilder.Entity<PedidoVersion>(entity =>
        {
            entity.HasKey(e => e.IdPedidoVersion);

            entity.ToTable("PEDIDO_VERSION", "dbo");

            entity.Property(e => e.IdPedidoVersion).HasColumnName("ID_PEDIDO_VERSION");

            entity.Property(e => e.CodigoVersion).HasColumnName("CODIGO_VERSION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<Pesaje>(entity =>
        {
            entity.HasKey(e => e.IdPesaje);

            entity.ToTable("PESAJE", "dbo");

            entity.HasIndex(e => new { e.IdDeposito, e.RegStatus }, "IDX_ANALISIS_FIJACION");

            entity.HasIndex(e => new { e.Fecha, e.Lanzamiento, e.Empresa }, "IDX_LIST_ROM_DES");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PESAJE")
                .IsUnique();

            entity.Property(e => e.IdPesaje).HasColumnName("ID_PESAJE");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.ArdidoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_DESCONTADO");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.AveriadoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_DESCONTADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Clt)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("CLT");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Depositante)
                .HasColumnName("DEPOSITANTE")
                .HasComment("ID_CLIENTE");

            entity.Property(e => e.DescChofer)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESC_CHOFER");

            entity.Property(e => e.Descarte).HasColumnName("DESCARTE");

            entity.Property(e => e.EmbarcadoSiloCliente).HasColumnName("EMBARCADO_SILO_CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.HumedadDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_DESCONTADA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.ImpurezaDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_DESCONTADA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ModoPeso).HasColumnName("MODO_PESO");

            entity.Property(e => e.ModoPesoBruto).HasColumnName("MODO_PESO_BRUTO");

            entity.Property(e => e.ModoPesoTara).HasColumnName("MODO_PESO_TARA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PbFechaManual)
                .HasColumnType("datetime")
                .HasColumnName("PB_FECHA_MANUAL");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoBrutoFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_BRUTO_FECHA");

            entity.Property(e => e.PesoLiquido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_LIQUIDO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PesoTaraFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_TARA_FECHA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PHE");

            entity.Property(e => e.PheDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_DESCONTADO");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.PtFechaManual)
                .HasColumnType("datetime")
                .HasColumnName("PT_FECHA_MANUAL");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.QuebradoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_DESCONTADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Resultado).HasColumnName("RESULTADO");

            entity.Property(e => e.RomaneoTercero)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("ROMANEO_TERCERO");

            entity.Property(e => e.Servicio).HasColumnName("SERVICIO");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION")
                .HasComment("Dato proveniente del adaptador de Semillas");

            entity.Property(e => e.Transgenica).HasColumnName("TRANSGENICA");

            entity.Property(e => e.Trueque).HasColumnName("TRUEQUE");

            entity.Property(e => e.Variedad).HasColumnName("VARIEDAD");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VERDOSO");

            entity.Property(e => e.VerdosoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_DESCONTADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");

            entity.HasOne(d => d.DepositanteNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.Depositante)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_CLIENTE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.IdChofer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_CHOFER");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_PRODUCTO");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_PESAJE_TIMBRADO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Pesajes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PesajeMonsanto>(entity =>
        {
            entity.HasKey(e => e.IdPesajeMonsanto);

            entity.ToTable("PESAJE_MONSANTO", "dbo");

            entity.Property(e => e.IdPesajeMonsanto).HasColumnName("ID_PESAJE_MONSANTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cliente)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.FechaRomaneo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ROMANEO");

            entity.Property(e => e.FechaValorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VALORIZACION");

            entity.Property(e => e.Iva)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.Neto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("NETO");

            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_DOCUMENTO");

            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Romaneo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ROMANEO");

            entity.Property(e => e.Silo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SILO");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.Tecnologia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TECNOLOGIA");

            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOCUMENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PesajeMonsantos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_MONSANTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PesajeMonsantos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PESAJE_MONSANTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PesajeRomaneo>(entity =>
        {
            entity.HasKey(e => e.IdPesajeRomaneo);

            entity.ToTable("PESAJE_ROMANEO", "dbo");

            entity.HasIndex(e => new { e.Romaneo, e.Liquido, e.RegStatus, e.IdCliente }, "IDX_ROMANEO_DESCUENTO");

            entity.HasIndex(e => new { e.IdPesaje, e.Romaneo, e.IdCliente, e.Liquido }, "UK_PESAJE_ROMANEO")
                .IsUnique();

            entity.Property(e => e.IdPesajeRomaneo).HasColumnName("ID_PESAJE_ROMANEO");

            entity.Property(e => e.Aplicado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("APLICADO");

            entity.Property(e => e.Autoimpresor).HasColumnName("AUTOIMPRESOR");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdPesaje).HasColumnName("ID_PESAJE");

            entity.Property(e => e.Liquido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("LIQUIDO");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Romaneo).HasColumnName("ROMANEO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.PesajeRomaneos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ROMANEO_CLIENTE");

            entity.HasOne(d => d.IdPesajeNavigation)
                .WithMany(p => p.PesajeRomaneos)
                .HasForeignKey(d => d.IdPesaje)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ROMANEO_PESAJE");
        });

        modelBuilder.Entity<PesajeRomaneoCosecha>(entity =>
        {
            entity.HasKey(e => e.IdPesajeRomaneoCosecha);

            entity.ToTable("PESAJE_ROMANEO_COSECHA", "dbo");

            entity.Property(e => e.IdPesajeRomaneoCosecha).HasColumnName("ID_PESAJE_ROMANEO_COSECHA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.IdAgricolaCosecha).HasColumnName("ID_AGRICOLA_COSECHA");

            entity.Property(e => e.IdPesajeRomaneo).HasColumnName("ID_PESAJE_ROMANEO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdAgricolaCosechaNavigation)
                .WithMany(p => p.PesajeRomaneoCosechas)
                .HasForeignKey(d => d.IdAgricolaCosecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ROMANEO_COSECHA_AGRICOLA_COSECHA");

            entity.HasOne(d => d.IdPesajeRomaneoNavigation)
                .WithMany(p => p.PesajeRomaneoCosechas)
                .HasForeignKey(d => d.IdPesajeRomaneo)
                .HasConstraintName("FK_PESAJE_ROMANEO_COSECHA_PESAJE_ROMANEO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PesajeRomaneoCosechas)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PESAJE_ROMANEO_COSECHA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PesajeRomaneoSiembra>(entity =>
        {
            entity.HasKey(e => e.IdPesajeRomaneoSiembra);

            entity.ToTable("PESAJE_ROMANEO_SIEMBRA", "dbo");

            entity.Property(e => e.IdPesajeRomaneoSiembra).HasColumnName("ID_PESAJE_ROMANEO_SIEMBRA");

            entity.Property(e => e.AreaCosechada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_COSECHADA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0=PARCIAL;1=TOTAL");

            entity.Property(e => e.IdAgricolaSiembra).HasColumnName("ID_AGRICOLA_SIEMBRA");

            entity.Property(e => e.IdPesajeRomaneo).HasColumnName("ID_PESAJE_ROMANEO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.PorcCosechada)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PORC_COSECHADA");

            entity.Property(e => e.Promedio)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("PROMEDIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdAgricolaSiembraNavigation)
                .WithMany(p => p.PesajeRomaneoSiembras)
                .HasForeignKey(d => d.IdAgricolaSiembra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ROMANEO_SIEMBRA_AGRICOLA_SIEMBRA");

            entity.HasOne(d => d.IdPesajeRomaneoNavigation)
                .WithMany(p => p.PesajeRomaneoSiembras)
                .HasForeignKey(d => d.IdPesajeRomaneo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ROMANEO_SIEMBRA_PESAJE_ROMANEO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PesajeRomaneoSiembras)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PESAJE_ROMANEO_SIEMBRA_PRODUCTO");
        });

        modelBuilder.Entity<PictogramaRiesgo>(entity =>
        {
            entity.HasKey(e => e.IdPictogramaRiesgo);

            entity.ToTable("PICTOGRAMA_RIESGO", "dbo");

            entity.Property(e => e.IdPictogramaRiesgo).HasColumnName("ID_PICTOGRAMA_RIESGO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.DescripcionArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ARCHIVO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.PathArchivo)
                .HasMaxLength(230)
                .IsUnicode(false)
                .HasColumnName("PATH_ARCHIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PictogramaRiesgos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PICTOGRAMA_RIESGO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PictogramaRiesgos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PICTOGRAMA_RIESGO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCompra>(entity =>
        {
            entity.HasKey(e => e.IdPlanCompra)
                .HasName("PK_PLAN_COMPRA_ENC");

            entity.ToTable("PLAN_COMPRA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PLAN_COMPRA_ENC")
                .IsUnique();

            entity.Property(e => e.IdPlanCompra).HasColumnName("ID_PLAN_COMPRA");

            entity.Property(e => e.Ano).HasColumnName("ANO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCompras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_COMPRA_ENC_EMPRESA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PlanCompras)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_COMPRA_ENC_CULTIVO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.PlanCompras)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_COMPRA_ENC_PROVEEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PlanCompras)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_COMPRA_ENC_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCompras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_COMPRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCompraProducto>(entity =>
        {
            entity.HasKey(e => e.IdPlanCompraProducto)
                .HasName("PK_PLAN_COMPRA_DET");

            entity.ToTable("PLAN_COMPRA_PRODUCTO", "dbo");

            entity.Property(e => e.IdPlanCompraProducto).HasColumnName("ID_PLAN_COMPRA_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPlanCompra).HasColumnName("ID_PLAN_COMPRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdPlanCompraNavigation)
                .WithMany(p => p.PlanCompraProductos)
                .HasForeignKey(d => d.IdPlanCompra)
                .HasConstraintName("FK_PLAN_COMPRA_DET_PLAN_COMPRA_ENC");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PlanCompraProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_COMPRA_DET_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCompraProductos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PLAN_COMPRA_PRODUCTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCuentaClase>(entity =>
        {
            entity.HasKey(e => e.IdPlanCuentaClase);

            entity.ToTable("PLAN_CUENTA_CLASE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PLAN_CUENTA_CLASE")
                .IsUnique();

            entity.Property(e => e.IdPlanCuentaClase).HasColumnName("ID_PLAN_CUENTA_CLASE");

            entity.Property(e => e.Activo)
                .HasColumnName("ACTIVO")
                .HasComment("0=NO, 1=SI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCuentaClases)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PLAN_CUENTA_CLASE_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCuentaClases)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PLAN_CUENTA_CLASE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCuentaGrupo>(entity =>
        {
            entity.HasKey(e => e.IdPlanCuentaGrupo);

            entity.ToTable("PLAN_CUENTA_GRUPO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo, e.IdPlanCuentaClase }, "UK_PLAN_CUENTA_GRUPO")
                .IsUnique();

            entity.Property(e => e.IdPlanCuentaGrupo).HasColumnName("ID_PLAN_CUENTA_GRUPO");

            entity.Property(e => e.Activo)
                .HasColumnName("ACTIVO")
                .HasComment("0=NO, 1=SI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Ejercicio).HasColumnName("EJERCICIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPlanCuentaClase).HasColumnName("ID_PLAN_CUENTA_CLASE");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCuentaGrupos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PLAN_CUENTA_GRUPO_EMPRESA");

            entity.HasOne(d => d.IdPlanCuentaClaseNavigation)
                .WithMany(p => p.PlanCuentaGrupos)
                .HasForeignKey(d => d.IdPlanCuentaClase)
                .HasConstraintName("FK_PLAN_CUENTA_GRUPO_PLAN_CUENTA_CLASE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCuentaGrupos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PLAN_CUENTA_GRUPO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCuentaPreSet>(entity =>
        {
            entity.HasKey(e => e.IdPlanCuentaPreSet);

            entity.ToTable("PLAN_CUENTA_PRE_SET", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo, e.IdPlanCuentaSubgrupo }, "UK_PLAN_CUENTA_PRE_SET")
                .IsUnique();

            entity.Property(e => e.IdPlanCuentaPreSet).HasColumnName("ID_PLAN_CUENTA_PRE_SET");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Ejercicio).HasColumnName("EJERCICIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPlanCuentaSubgrupo).HasColumnName("ID_PLAN_CUENTA_SUBGRUPO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCuentaPreSets)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PLAN_CUENTA_PRE_SET_EMPRESA");

            entity.HasOne(d => d.IdPlanCuentaSubgrupoNavigation)
                .WithMany(p => p.PlanCuentaPreSets)
                .HasForeignKey(d => d.IdPlanCuentaSubgrupo)
                .HasConstraintName("FK_PLAN_CUENTA_PRE_SET_PLAN_CUENTA_SUBGRUPO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCuentaPreSets)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PLAN_CUENTA_PRE_SET_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCuentaSet>(entity =>
        {
            entity.HasKey(e => e.IdPlanCuentaSet);

            entity.ToTable("PLAN_CUENTA_SET", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PLAN_CUENTA_SET")
                .IsUnique();

            entity.Property(e => e.IdPlanCuentaSet).HasColumnName("ID_PLAN_CUENTA_SET");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Ejercicio)
                .HasColumnName("EJERCICIO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPlanCuentaPreSet).HasColumnName("ID_PLAN_CUENTA_PRE_SET");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCuentaSets)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_CUENTA_SET_EMPRESA");
        });

        modelBuilder.Entity<PlanCuentaSubgrupo>(entity =>
        {
            entity.HasKey(e => e.IdPlanCuentaSubgrupo);

            entity.ToTable("PLAN_CUENTA_SUBGRUPO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo, e.IdPlanCuentaGrupo }, "UK_PLAN_CUENTA_SUBGRUPO")
                .IsUnique();

            entity.Property(e => e.IdPlanCuentaSubgrupo).HasColumnName("ID_PLAN_CUENTA_SUBGRUPO");

            entity.Property(e => e.Activo).HasColumnName("ACTIVO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Ejercicio).HasColumnName("EJERCICIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPlanCuentaGrupo).HasColumnName("ID_PLAN_CUENTA_GRUPO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCuentaSubgrupos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PLAN_CUENTA_SUBGRUPO_EMPRESA");

            entity.HasOne(d => d.IdPlanCuentaGrupoNavigation)
                .WithMany(p => p.PlanCuentaSubgrupos)
                .HasForeignKey(d => d.IdPlanCuentaGrupo)
                .HasConstraintName("FK_PLAN_CUENTA_SUBGRUPO_PLAN_CUENTA_GRUPO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCuentaSubgrupos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PLAN_CUENTA_SUBGRUPO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PlanCuentum>(entity =>
        {
            entity.HasKey(e => e.IdPlanCuenta);

            entity.ToTable("PLAN_CUENTA", "dbo");

            entity.HasIndex(e => e.Codigo, "IDX_PLAN_CUENTA_INF");

            entity.HasIndex(e => new { e.Empresa, e.Codigo, e.Ejercicio }, "UK_PLAN_CUENTA")
                .IsUnique();

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.AjusteValuacion).HasColumnName("AJUSTE_VALUACION");

            entity.Property(e => e.BloqueoContable)
                .HasColumnType("datetime")
                .HasColumnName("BLOQUEO_CONTABLE");

            entity.Property(e => e.BloqueoEjercicio).HasColumnName("BLOQUEO_EJERCICIO");

            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Ejercicio).HasColumnName("EJERCICIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0: variable, 1: fijo");

            entity.Property(e => e.Formato)
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("FORMATO");

            entity.Property(e => e.Grado).HasColumnName("GRADO");

            entity.Property(e => e.IdPlanCuentaPreSet)
                .HasColumnName("ID_PLAN_CUENTA_PRE_SET")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdPlanCuentaSet).HasColumnName("ID_PLAN_CUENTA_SET");

            entity.Property(e => e.Imputable)
                .HasColumnName("IMPUTABLE")
                .HasComment("cuentas que estan habilitadas para aplicacion 0=imputable 1=no inputable");

            entity.Property(e => e.Irp).HasColumnName("IRP");

            entity.Property(e => e.Naturaleza).HasColumnName("NATURALEZA");

            entity.Property(e => e.NoUsar).HasColumnName("NO_USAR");

            entity.Property(e => e.PreGrupo).HasColumnName("PRE_GRUPO");

            entity.Property(e => e.PreSubGrupo).HasColumnName("PRE_SUB_GRUPO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PlanCuenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_CUENTA_EMPRESA");

            entity.HasOne(d => d.IdPlanCuentaSetNavigation)
                .WithMany(p => p.PlanCuenta)
                .HasForeignKey(d => d.IdPlanCuentaSet)
                .HasConstraintName("FK_PLAN_CUENTA_PLAN_CUENTA_SET");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PlanCuenta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PLAN_CUENTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PorcentajeIrp>(entity =>
        {
            entity.HasKey(e => e.IdPorcentajeIrp);

            entity.ToTable("PORCENTAJE_IRP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.TipoPorcentaje }, "IX_PORCENTAJE_IRP")
                .IsUnique();

            entity.Property(e => e.IdPorcentajeIrp).HasColumnName("ID_PORCENTAJE_IRP");

            entity.Property(e => e.DescTipoPorcentaje)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_PORCENTAJE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoPorcentaje).HasColumnName("TIPO_PORCENTAJE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PorcentajeIrps)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PORCENTAJE_IRP_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PorcentajeIrps)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PORCENTAJE_IRP_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrecioFlete>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFlete);

            entity.ToTable("PRECIO_FLETE", "dbo");

            entity.Property(e => e.IdPrecioFlete).HasColumnName("ID_PRECIO_FLETE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaFinLog)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN_LOG");

            entity.Property(e => e.FechaIni)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INI");

            entity.Property(e => e.FechaIniLog)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INI_LOG");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<PrecioFleteDe>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteDes);

            entity.ToTable("PRECIO_FLETE_DES", "dbo");

            entity.Property(e => e.IdPrecioFleteDes).HasColumnName("ID_PRECIO_FLETE_DES");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLocalEntrega).HasColumnName("ID_LOCAL_ENTREGA");

            entity.Property(e => e.IdPrecioFleteOri).HasColumnName("ID_PRECIO_FLETE_ORI");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.TipoDestino).HasColumnName("TIPO_DESTINO");
        });

        modelBuilder.Entity<PrecioFleteExp>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteExp);

            entity.ToTable("PRECIO_FLETE_EXP", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRECIO_FLETE_EXP")
                .IsUnique();

            entity.Property(e => e.IdPrecioFleteExp).HasColumnName("ID_PRECIO_FLETE_EXP");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrecioFleteExps)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PRECIO_FLETE_EXP_EMPRESA");

            entity.HasOne(d => d.IdFacturaExportacionNavigation)
                .WithMany(p => p.PrecioFleteExps)
                .HasForeignKey(d => d.IdFacturaExportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_EXP_FACTURA_EXPORTACION");
        });

        modelBuilder.Entity<PrecioFleteExpDeposito>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteExpDeposito);

            entity.ToTable("PRECIO_FLETE_EXP_DEPOSITO", "dbo");

            entity.Property(e => e.IdPrecioFleteExpDeposito).HasColumnName("ID_PRECIO_FLETE_EXP_DEPOSITO");

            entity.Property(e => e.FechaFin)
                .HasColumnType("date")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaIni)
                .HasColumnType("date")
                .HasColumnName("FECHA_INI");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdPrecioFleteExp).HasColumnName("ID_PRECIO_FLETE_EXP");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.PrecioFleteExpDepositos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_EXP_DEPOSITO_DEPOSITO");

            entity.HasOne(d => d.IdPrecioFleteExpNavigation)
                .WithMany(p => p.PrecioFleteExpDepositos)
                .HasForeignKey(d => d.IdPrecioFleteExp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_EXP_DEPOSITO_PRECIO_FLETE_EXP_DEPOSITO");
        });

        modelBuilder.Entity<PrecioFleteExpLote>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteExpLote);

            entity.ToTable("PRECIO_FLETE_EXP_LOTE", "dbo");

            entity.Property(e => e.IdPrecioFleteExpLote).HasColumnName("ID_PRECIO_FLETE_EXP_LOTE");

            entity.Property(e => e.FechaFin)
                .HasColumnType("date")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaIni)
                .HasColumnType("date")
                .HasColumnName("FECHA_INI");

            entity.Property(e => e.IdPrecioFleteExp).HasColumnName("ID_PRECIO_FLETE_EXP");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.PrecioAnterior)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_ANTERIOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPrecioFleteExpNavigation)
                .WithMany(p => p.PrecioFleteExpLotes)
                .HasForeignKey(d => d.IdPrecioFleteExp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_EXP_LOTE_PRECIO_FLETE_EXP");
        });

        modelBuilder.Entity<PrecioFleteImportacion>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteImportacion)
                .HasName("PK_PRECIO_FLETE_IMP");

            entity.ToTable("PRECIO_FLETE_IMPORTACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRECIO_FLETE_IMPORTACION")
                .IsUnique();

            entity.Property(e => e.IdPrecioFleteImportacion).HasColumnName("ID_PRECIO_FLETE_IMPORTACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EmpresaTransporte).HasColumnName("EMPRESA_TRANSPORTE");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = INACTIVO. 1 = ACTIVO. 2 = FUTURO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaValidez)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VALIDEZ");

            entity.Property(e => e.IdForwarder).HasColumnName("ID_FORWARDER");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda)
                .HasColumnName("MONEDA")
                .HasComment("Indica el tipo de moneda 0 = Dolar. 2 = Gs.");

            entity.Property(e => e.PuertoDestino)
                .HasColumnName("PUERTO_DESTINO")
                .HasComment("Id Puerto Destino");

            entity.Property(e => e.PuertoOrigen)
                .HasColumnName("PUERTO_ORIGEN")
                .HasComment("Id Puerto Origen");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TiempoTransito).HasColumnName("TIEMPO_TRANSITO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrecioFleteImportacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_EMPRESA");

            entity.HasOne(d => d.EmpresaTransporteNavigation)
                .WithMany(p => p.PrecioFleteImportacions)
                .HasForeignKey(d => d.EmpresaTransporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_PROVEEDOR");

            entity.HasOne(d => d.IdForwarderNavigation)
                .WithMany(p => p.PrecioFleteImportacions)
                .HasForeignKey(d => d.IdForwarder)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_FORWARDER");

            entity.HasOne(d => d.IdTipoTransporteNavigation)
                .WithMany(p => p.PrecioFleteImportacions)
                .HasForeignKey(d => d.IdTipoTransporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_TIPO_TRANSPORTE");

            entity.HasOne(d => d.PuertoDestinoNavigation)
                .WithMany(p => p.PrecioFleteImportacionPuertoDestinoNavigations)
                .HasForeignKey(d => d.PuertoDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_PUERTO1");

            entity.HasOne(d => d.PuertoOrigenNavigation)
                .WithMany(p => p.PrecioFleteImportacionPuertoOrigenNavigations)
                .HasForeignKey(d => d.PuertoOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_PUERTO");
        });

        modelBuilder.Entity<PrecioFleteImportacionDet>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteImportacionDet)
                .HasName("PK_PRECIO_FLETE_IMP_DET");

            entity.ToTable("PRECIO_FLETE_IMPORTACION_DET", "dbo");

            entity.Property(e => e.IdPrecioFleteImportacionDet).HasColumnName("ID_PRECIO_FLETE_IMPORTACION_DET");

            entity.Property(e => e.AdmFee)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("ADM_FEE");

            entity.Property(e => e.AfipToll)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("AFIP_TOLL");

            entity.Property(e => e.CanjeDocs)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANJE_DOCS");

            entity.Property(e => e.ChequeGarantia)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CHEQUE_GARANTIA");

            entity.Property(e => e.ClasificacionCarga)
                .HasColumnName("CLASIFICACION_CARGA")
                .HasComment("Clasificacion de la carga, si es peligrosa o no. 0 = Peligrosa,1 = No Peligrosa");

            entity.Property(e => e.CostoDemora)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("COSTO_DEMORA");

            entity.Property(e => e.CostoEstadia)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("COSTO_ESTADIA");

            entity.Property(e => e.Desconsolidacion)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("DESCONSOLIDACION");

            entity.Property(e => e.DiasLibres).HasColumnName("DIAS_LIBRES");

            entity.Property(e => e.EmisionLibreDeuda)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("EMISION_LIBRE_DEUDA");

            entity.Property(e => e.FleteMaritimo)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("FLETE_MARITIMO");

            entity.Property(e => e.FleteTerrestre)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("FLETE_TERRESTRE");

            entity.Property(e => e.GastosDesestiba)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("GASTOS_DESESTIBA");

            entity.Property(e => e.GateOutIn)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("GATE_OUT_IN");

            entity.Property(e => e.GtosAdmAnnp)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("GTOS_ADM_ANNP");

            entity.Property(e => e.GtosMdv)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("GTOS_MDV");

            entity.Property(e => e.IdCamion).HasColumnName("ID_CAMION");

            entity.Property(e => e.IdContenedor).HasColumnName("ID_CONTENEDOR");

            entity.Property(e => e.IdPrecioFleteImportacion).HasColumnName("ID_PRECIO_FLETE_IMPORTACION");

            entity.Property(e => e.ImpServicesCharge)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("IMP_SERVICES_CHARGE");

            entity.Property(e => e.InspectionFee)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("INSPECTION_FEE");

            entity.Property(e => e.LimpiezaContenedor)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("LIMPIEZA_CONTENEDOR");

            entity.Property(e => e.LogFee)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("LOG_FEE");

            entity.Property(e => e.Recargo18tn)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("RECARGO_18TN");

            entity.Property(e => e.RecargoImo)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("RECARGO_IMO");

            entity.Property(e => e.RecargoMayor20tn)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("RECARGO_MAYOR_20TN");

            entity.Property(e => e.RecargoMayor23tn)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("RECARGO_MAYOR_23TN");

            entity.Property(e => e.RecargoMayor25tn)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("RECARGO_MAYOR_25TN");

            entity.Property(e => e.RecupSegCont)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("RECUP_SEG_CONT");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TiempoTransito)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("TIEMPO_TRANSITO");

            entity.Property(e => e.VisacionConsular)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VISACION_CONSULAR");

            entity.HasOne(d => d.IdCamionNavigation)
                .WithMany(p => p.PrecioFleteImportacionDets)
                .HasForeignKey(d => d.IdCamion)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_DET_CAMION");

            entity.HasOne(d => d.IdContenedorNavigation)
                .WithMany(p => p.PrecioFleteImportacionDets)
                .HasForeignKey(d => d.IdContenedor)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_DET_CONTENEDOR");

            entity.HasOne(d => d.IdPrecioFleteImportacionNavigation)
                .WithMany(p => p.PrecioFleteImportacionDets)
                .HasForeignKey(d => d.IdPrecioFleteImportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRECIO_FLETE_IMP_DET_PRECIO_FLETE_IMP");
        });

        modelBuilder.Entity<PrecioFleteOri>(entity =>
        {
            entity.HasKey(e => e.IdPrecioFleteOri);

            entity.ToTable("PRECIO_FLETE_ORI", "dbo");

            entity.Property(e => e.IdPrecioFleteOri).HasColumnName("ID_PRECIO_FLETE_ORI");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdPrecioFlete).HasColumnName("ID_PRECIO_FLETE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");
        });

        modelBuilder.Entity<PrestamoBancario>(entity =>
        {
            entity.HasKey(e => e.IdPrestamoBancario);

            entity.ToTable("PRESTAMO_BANCARIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRESTAMO_BANCARIO")
                .IsUnique();

            entity.Property(e => e.IdPrestamoBancario).HasColumnName("ID_PRESTAMO_BANCARIO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorCuenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CUENTA");

            entity.Property(e => e.ValorPagar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGAR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrestamoBancarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_EMPRESA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.PrestamoBancarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.PrestamoBancarios)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.PrestamoBancarios)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrestamoBancarios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrestamoBancarioDet>(entity =>
        {
            entity.HasKey(e => e.IdPrestamoBancarioDet);

            entity.ToTable("PRESTAMO_BANCARIO_DET", "dbo");

            entity.Property(e => e.IdPrestamoBancarioDet).HasColumnName("ID_PRESTAMO_BANCARIO_DET");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdPrestamoBancario).HasColumnName("ID_PRESTAMO_BANCARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.PrestamoBancarioDets)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_DET_PLAN_CUENTA");

            entity.HasOne(d => d.IdPrestamoBancarioNavigation)
                .WithMany(p => p.PrestamoBancarioDets)
                .HasForeignKey(d => d.IdPrestamoBancario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_BANCARIO_DET_PRESTAMO_BANCARIO");
        });

        modelBuilder.Entity<PrestamoCliente>(entity =>
        {
            entity.HasKey(e => e.IdPrestamoCliente);

            entity.ToTable("PRESTAMO_CLIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRESTAMO_CLIENTE")
                .IsUnique();

            entity.Property(e => e.IdPrestamoCliente).HasColumnName("ID_PRESTAMO_CLIENTE");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdReciboAdelanto).HasColumnName("ID_RECIBO_ADELANTO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_CARPETA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_CHEQUERA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_CLIENTE");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrestamoClientes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_CLIENTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrestamoFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdPrestamoFuncionario);

            entity.ToTable("PRESTAMO_FUNCIONARIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRESTAMO_FUNCIONARIO")
                .IsUnique();

            entity.Property(e => e.IdPrestamoFuncionario).HasColumnName("ID_PRESTAMO_FUNCIONARIO");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Cuota).HasColumnName("CUOTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrestamoFuncionarios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.PrestamoFuncionarios)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_CARPETA");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.PrestamoFuncionarios)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.PrestamoFuncionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_FUNCIONARIO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.PrestamoFuncionarios)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrestamoFuncionarios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrestamoFuncionarioDetalle>(entity =>
        {
            entity.HasKey(e => e.IdPrestamoFuncionarioDetalle)
                .HasName("PK_EMP_FUNCIONARIOS_DET");

            entity.ToTable("PRESTAMO_FUNCIONARIO_DETALLE", "dbo");

            entity.Property(e => e.IdPrestamoFuncionarioDetalle).HasColumnName("ID_PRESTAMO_FUNCIONARIO_DETALLE");

            entity.Property(e => e.Cuota).HasColumnName("CUOTA");

            entity.Property(e => e.IdPrestamoFuncionario).HasColumnName("ID_PRESTAMO_FUNCIONARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdPrestamoFuncionarioNavigation)
                .WithMany(p => p.PrestamoFuncionarioDetalles)
                .HasForeignKey(d => d.IdPrestamoFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESTAMO_FUNCIONARIO_DETALLE_PRESTAMO_FUNCIONARIO");
        });

        modelBuilder.Entity<PresupuestoGrupo>(entity =>
        {
            entity.HasKey(e => e.IdPresupuestoGrupo);

            entity.ToTable("PRESUPUESTO_GRUPO", "dbo");

            entity.HasIndex(e => new { e.IdPresupuestoGrupo, e.Empresa }, "UK_PRESUPUESTO_GRUPO")
                .IsUnique();

            entity.Property(e => e.IdPresupuestoGrupo).HasColumnName("ID_PRESUPUESTO_GRUPO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PresupuestoGrupos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESUPUESTO_GRUPO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PresupuestoGrupos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESUPUESTO_GRUPO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PresupuestoProyectado>(entity =>
        {
            entity.HasKey(e => e.IdPresupuestoProyectado);

            entity.ToTable("PRESUPUESTO_PROYECTADO", "dbo");

            entity.Property(e => e.IdPresupuestoProyectado).HasColumnName("ID_PRESUPUESTO_PROYECTADO");

            entity.Property(e => e.Ano).HasColumnName("ANO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");

            entity.Property(e => e.IdPresupuestoSubGrupo).HasColumnName("ID_PRESUPUESTO_SUB_GRUPO");

            entity.Property(e => e.Mes1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_1");

            entity.Property(e => e.Mes10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_10");

            entity.Property(e => e.Mes11)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_11");

            entity.Property(e => e.Mes12)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_12");

            entity.Property(e => e.Mes2)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_2");

            entity.Property(e => e.Mes3)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_3");

            entity.Property(e => e.Mes4)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_4");

            entity.Property(e => e.Mes5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_5");

            entity.Property(e => e.Mes6)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_6");

            entity.Property(e => e.Mes7)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_7");

            entity.Property(e => e.Mes8)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_8");

            entity.Property(e => e.Mes9)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MES_9");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PresupuestoProyectados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESUPUESTO_PROYECTADO_EMPRESA");

            entity.HasOne(d => d.IdPresupuestoSubGrupoNavigation)
                .WithMany(p => p.PresupuestoProyectados)
                .HasForeignKey(d => d.IdPresupuestoSubGrupo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESUPUESTO_PROYECTADO_PRESUPUESTO_SUB_GRUPO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PresupuestoProyectadoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PRESUPUESTO_PROYECTADO_EMPRESA_UNIDAD1");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.PresupuestoProyectadoUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESUPUESTO_PROYECTADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PresupuestoSubGrupo>(entity =>
        {
            entity.HasKey(e => e.IdPresupuestoSubGrupo);

            entity.ToTable("PRESUPUESTO_SUB_GRUPO", "dbo");

            entity.HasIndex(e => new { e.IdPresupuestoGrupo, e.IdPresupuestoSubGrupo }, "UK_PRESUPUESTO_SUB_GRUPO")
                .IsUnique();

            entity.Property(e => e.IdPresupuestoSubGrupo).HasColumnName("ID_PRESUPUESTO_SUB_GRUPO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPresupuestoGrupo).HasColumnName("ID_PRESUPUESTO_GRUPO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PresupuestoSubGrupos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRESUPUESTO_SUB_GRUPO_EMPRESA");
        });

        modelBuilder.Entity<PrevisionCliente>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionCliente);

            entity.ToTable("PREVISION_CLIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus }, "UK_PREVISION_CLIENTE")
                .IsUnique();

            entity.Property(e => e.IdPrevisionCliente).HasColumnName("ID_PREVISION_CLIENTE");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrevisionClientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.PrevisionClientes)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PrevisionClientes)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.PrevisionClientes)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PrevisionClientes)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrevisionClientes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrevisionClienteBloqueo>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionClienteBloqueo);

            entity.ToTable("PREVISION_CLIENTE_BLOQUEO", "dbo");

            entity.Property(e => e.IdPrevisionClienteBloqueo).HasColumnName("ID_PREVISION_CLIENTE_BLOQUEO");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPrevisionCliente).HasColumnName("ID_PREVISION_CLIENTE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad)
                .HasColumnName("REG_UNIDAD")
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.IdPrevisionClienteNavigation)
                .WithMany(p => p.PrevisionClienteBloqueos)
                .HasForeignKey(d => d.IdPrevisionCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_BLOQUEO_PREVISION_VENTA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.PrevisionClienteBloqueos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_BLOQUEO_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrevisionClienteBloqueos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_BLOQUEO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrevisionClienteDetalle>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionClienteDetalle);

            entity.ToTable("PREVISION_CLIENTE_DETALLE", "dbo");

            entity.Property(e => e.IdPrevisionClienteDetalle).HasColumnName("ID_PREVISION_CLIENTE_DETALLE");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPrevisionCliente).HasColumnName("ID_PREVISION_CLIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPrevisionClienteNavigation)
                .WithMany(p => p.PrevisionClienteDetalles)
                .HasForeignKey(d => d.IdPrevisionCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_DETALLE_PREVISION_VENTA1");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PrevisionClienteDetalles)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_CLIENTE_DETALLE_PRODUCTO");
        });

        modelBuilder.Entity<PrevisionVentaBloqueo>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionVentaBloqueo);

            entity.ToTable("PREVISION_VENTA_BLOQUEO", "dbo");

            entity.Property(e => e.IdPrevisionVentaBloqueo).HasColumnName("ID_PREVISION_VENTA_BLOQUEO");

            entity.Property(e => e.Bloqueo)
                .HasColumnName("BLOQUEO")
                .HasComment("La accion que se llevo a cabo. 0 = Se desbloqueo. 1 = Se bloqueo.");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPrevisionVenta).HasColumnName("ID_PREVISION_VENTA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad)
                .HasColumnName("REG_UNIDAD")
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.IdPrevisionVentaNavigation)
                .WithMany(p => p.PrevisionVentaBloqueos)
                .HasForeignKey(d => d.IdPrevisionVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_BLOQUEO_PREVISION_VENTA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.PrevisionVentaBloqueos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_BLOQUEO_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrevisionVentaBloqueos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_BLOQUEO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrevisionVentaCan>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionVentaCan);

            entity.ToTable("PREVISION_VENTA_CAN", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "IX_PREVISION_VENTA_CAN")
                .IsUnique();

            entity.Property(e => e.IdPrevisionVentaCan).HasColumnName("ID_PREVISION_VENTA_CAN");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPrevisionVenta).HasColumnName("ID_PREVISION_VENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrevisionVentaCans)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_CAN_EMPRESA");

            entity.HasOne(d => d.IdPrevisionVentaNavigation)
                .WithMany(p => p.PrevisionVentaCans)
                .HasForeignKey(d => d.IdPrevisionVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_CAN_PREVISION_VENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrevisionVentaCans)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_CAN_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<PrevisionVentaCanDetalle>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionVentaCanDetalle)
                .HasName("PK_PREVISION_VENTA_DETALLE_CAN");

            entity.ToTable("PREVISION_VENTA_CAN_DETALLE", "dbo");

            entity.Property(e => e.IdPrevisionVentaCanDetalle).HasColumnName("ID_PREVISION_VENTA_CAN_DETALLE");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPrevisionVentaCan).HasColumnName("ID_PREVISION_VENTA_CAN");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPrevisionVentaCanNavigation)
                .WithMany(p => p.PrevisionVentaCanDetalles)
                .HasForeignKey(d => d.IdPrevisionVentaCan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_DETALLE_CAN_PREVISION_VENTA_CAN");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PrevisionVentaCanDetalles)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_DETALLE_CAN_PRODUCTO");
        });

        modelBuilder.Entity<PrevisionVentaDetalle>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionVentaDetalle);

            entity.ToTable("PREVISION_VENTA_DETALLE", "dbo");

            entity.HasIndex(e => new { e.IdPrevisionVenta, e.IdProducto }, "UK_PREVISION_VENTA_DETALLE")
                .IsUnique();

            entity.Property(e => e.IdPrevisionVentaDetalle).HasColumnName("ID_PREVISION_VENTA_DETALLE");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdPrevisionVenta).HasColumnName("ID_PREVISION_VENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPrevisionVentaNavigation)
                .WithMany(p => p.PrevisionVentaDetalles)
                .HasForeignKey(d => d.IdPrevisionVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_DETALLE_PREVISION_VENTA1");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.PrevisionVentaDetalles)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_DETALLE_PRODUCTO");
        });

        modelBuilder.Entity<PrevisionVentum>(entity =>
        {
            entity.HasKey(e => e.IdPrevisionVenta);

            entity.ToTable("PREVISION_VENTA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus }, "UK_PREVISION_VENTA")
                .IsUnique();

            entity.Property(e => e.IdPrevisionVenta).HasColumnName("ID_PREVISION_VENTA");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Bloqueo)
                .HasColumnName("BLOQUEO")
                .HasComment("0 = No bloqueado, 1 = bloqueado, no se puede mas modificar salvo desbloqueo.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdListaPrecio).HasColumnName("ID_LISTA_PRECIO");

            entity.Property(e => e.IdPrevisionVentaPadre).HasColumnName("ID_PREVISION_VENTA_PADRE");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.PrevisionVersion).HasColumnName("PREVISION_VERSION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.PrevisionVenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.PrevisionVenta)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_PREVISION_VENTA_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.PrevisionVenta)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_CULTIVO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.PrevisionVenta)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.PrevisionVenta)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.PrevisionVenta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PREVISION_VENTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProcesoBloqueado>(entity =>
        {
            entity.HasKey(e => e.IdProcesoBloqueado);

            entity.ToTable("PROCESO_BLOQUEADO", "dbo");

            entity.Property(e => e.IdProcesoBloqueado).HasColumnName("ID_PROCESO_BLOQUEADO");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = No Autorizado, 1 = Autorizado.");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.IdProcesoBloqueo).HasColumnName("ID_PROCESO_BLOQUEO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdUsuarioAutorizacion).HasColumnName("ID_USUARIO_AUTORIZACION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.SerieOrden).HasColumnName("SERIE_ORDEN");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProcesoBloqueados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_BLOQUEADO_EMPRESA");

            entity.HasOne(d => d.IdProcesoBloqueoNavigation)
                .WithMany(p => p.ProcesoBloqueados)
                .HasForeignKey(d => d.IdProcesoBloqueo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_BLOQUEADO_PROCESO_BLOQUEO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ProcesoBloqueadoIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_BLOQUEADO_USUARIO");

            entity.HasOne(d => d.IdUsuarioAutorizacionNavigation)
                .WithMany(p => p.ProcesoBloqueadoIdUsuarioAutorizacionNavigations)
                .HasForeignKey(d => d.IdUsuarioAutorizacion)
                .HasConstraintName("FK_PROCESO_BLOQUEADO_USUARIO1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProcesoBloqueados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_BLOQUEADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProcesoBloqueo>(entity =>
        {
            entity.HasKey(e => e.IdProcesoBloqueo);

            entity.ToTable("PROCESO_BLOQUEO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PROCESO_BLOQUEO")
                .IsUnique();

            entity.Property(e => e.IdProcesoBloqueo).HasColumnName("ID_PROCESO_BLOQUEO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProcesoBloqueos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_BLOQUEO_EMPRESA");
        });

        modelBuilder.Entity<ProcesoDesbloqueo>(entity =>
        {
            entity.HasKey(e => e.IdProcesoDesbloqueo);

            entity.ToTable("PROCESO_DESBLOQUEO", "dbo");

            entity.Property(e => e.IdProcesoDesbloqueo).HasColumnName("ID_PROCESO_DESBLOQUEO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProcesoBloqueo).HasColumnName("ID_PROCESO_BLOQUEO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");

            entity.HasOne(d => d.IdProcesoBloqueoNavigation)
                .WithMany(p => p.ProcesoDesbloqueos)
                .HasForeignKey(d => d.IdProcesoBloqueo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_DESBLOQUEO_PROCESO_BLOQUEO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.ProcesoDesbloqueos)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROCESO_DESBLOQUEO_USUARIO");
        });

        modelBuilder.Entity<Produccion>(entity =>
        {
            entity.HasKey(e => e.IdProduccion);

            entity.ToTable("PRODUCCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Orden, e.Anho, e.Serie, e.RegStatus }, "UK_PRODUCCION")
                .IsUnique();

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.AutorizadoGarantia)
                .HasColumnName("AUTORIZADO_GARANTIA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Bloqueo)
                .HasColumnName("BLOQUEO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.BloqueoLote)
                .HasColumnName("BLOQUEO_LOTE")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.FechaProgramacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROGRAMACION");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.Property(e => e.Serie).HasColumnName("SERIE");

            entity.Property(e => e.Tiempo).HasColumnName("TIEMPO");

            entity.Property(e => e.UnidadTiempo).HasColumnName("UNIDAD_TIEMPO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_DEPOSITO");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_FABRICA_LINEA");

            entity.HasOne(d => d.IdProduccionEtapaNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.IdProduccionEtapa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_PRODUCCION_ETAPA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_PRODUCTO");

            entity.HasOne(d => d.IdProductoFormulaNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.IdProductoFormula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_PRODUCTO_FORMULA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.Produccions)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_FUNCIONARIO");
        });

        modelBuilder.Entity<ProduccionCierre>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCierre);

            entity.ToTable("PRODUCCION_CIERRE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRODUCCION_CIERRE")
                .IsUnique();

            entity.Property(e => e.IdProduccionCierre).HasColumnName("ID_PRODUCCION_CIERRE");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.CantidadProducida)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_PRODUCIDA");

            entity.Property(e => e.CostoAjuste)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_AJUSTE");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntradaLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ENTRADA_LOTE");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.FechaFinHsExtra)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN_HS_EXTRA");

            entity.Property(e => e.FechaFinLimpieza)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN_LIMPIEZA");

            entity.Property(e => e.FechaInicioHsExtra)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_HS_EXTRA");

            entity.Property(e => e.FechaInicioLimpieza)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_LIMPIEZA");

            entity.Property(e => e.Final)
                .HasColumnType("datetime")
                .HasColumnName("FINAL");

            entity.Property(e => e.IdCategoriaSemilla).HasColumnName("ID_CATEGORIA_SEMILLA");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.IdZaranda).HasColumnName("ID_ZARANDA");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LiquidoEfluente)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("LIQUIDO_EFLUENTE");

            entity.Property(e => e.LiquidoLavado)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("LIQUIDO_LAVADO");

            entity.Property(e => e.Obs)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.PersonasContratado).HasColumnName("PERSONAS_CONTRATADO");

            entity.Property(e => e.PersonasFijo).HasColumnName("PERSONAS_FIJO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION")
                .HasComment("Dato proveniente del adaptador de Semillas");

            entity.Property(e => e.Termino).HasColumnName("TERMINO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProduccionCierres)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_EMPRESA");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.ProduccionCierres)
                .HasForeignKey(d => d.IdProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_PRODUCCION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProduccionCierres)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableNavigation)
                .WithMany(p => p.ProduccionCierres)
                .HasForeignKey(d => d.Responsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_FUNCIONARIO");
        });

        modelBuilder.Entity<ProduccionCierreComp>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCierreComp);

            entity.ToTable("PRODUCCION_CIERRE_COMP", "dbo");

            entity.Property(e => e.IdProduccionCierreComp).HasColumnName("ID_PRODUCCION_CIERRE_COMP");

            entity.Property(e => e.CantidadUtilizada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_UTILIZADA");

            entity.Property(e => e.CostoAjuste)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_AJUSTE");

            entity.Property(e => e.CostoAjusteGs)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_AJUSTE_GS");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.IdCompraComplemento).HasColumnName("ID_COMPRA_COMPLEMENTO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProduccionCierre).HasColumnName("ID_PRODUCCION_CIERRE");

            entity.Property(e => e.Item).HasColumnName("ITEM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.ProduccionCierreComps)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_PRODUCCION_CIERRE_COMP_LOTE");

            entity.HasOne(d => d.IdProduccionCierreNavigation)
                .WithMany(p => p.ProduccionCierreComps)
                .HasForeignKey(d => d.IdProduccionCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_COMP_PRODUCCION_CIERRE");

            entity.HasOne(d => d.ItemNavigation)
                .WithMany(p => p.ProduccionCierreComps)
                .HasForeignKey(d => d.Item)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_COMP_PRODUCTO");
        });

        modelBuilder.Entity<ProduccionCierreCompInc>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCierreCompInc);

            entity.ToTable("PRODUCCION_CIERRE_COMP_INC", "dbo");

            entity.Property(e => e.IdProduccionCierreCompInc).HasColumnName("ID_PRODUCCION_CIERRE_COMP_INC");

            entity.Property(e => e.CantidadUtilizada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_UTILIZADA");

            entity.Property(e => e.IdLoteInc).HasColumnName("ID_LOTE_INC");

            entity.Property(e => e.IdProduccionCierreComp).HasColumnName("ID_PRODUCCION_CIERRE_COMP");

            entity.Property(e => e.IdProduccionCompInc).HasColumnName("ID_PRODUCCION_COMP_INC");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteIncNavigation)
                .WithMany(p => p.ProduccionCierreCompIncs)
                .HasForeignKey(d => d.IdLoteInc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_COMP_INC_LOTE_INC");

            entity.HasOne(d => d.IdProduccionCierreCompNavigation)
                .WithMany(p => p.ProduccionCierreCompIncs)
                .HasForeignKey(d => d.IdProduccionCierreComp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_COMP_INC_PRODUCCION_CIERRE_COMP");

            entity.HasOne(d => d.IdProduccionCompIncNavigation)
                .WithMany(p => p.ProduccionCierreCompIncs)
                .HasForeignKey(d => d.IdProduccionCompInc)
                .HasConstraintName("FK_PRODUCCION_CIERRE_COMP_INC_PRODUCCION_COMPOSICION_INC");
        });

        modelBuilder.Entity<ProduccionCierreLiqLav>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCierreLl);

            entity.ToTable("PRODUCCION_CIERRE_LIQ_LAV", "dbo");

            entity.Property(e => e.IdProduccionCierreLl).HasColumnName("ID_PRODUCCION_CIERRE_LL");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdProduccionCierre).HasColumnName("ID_PRODUCCION_CIERRE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Sublote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUBLOTE");

            entity.HasOne(d => d.IdProduccionCierreNavigation)
                .WithMany(p => p.ProduccionCierreLiqLavs)
                .HasForeignKey(d => d.IdProduccionCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_LIQ_LAV_PRODUCCION_CIERRE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProduccionCierreLiqLavs)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_LIQ_LAV_PRODUCTO");
        });

        modelBuilder.Entity<ProduccionCierreMicronizado>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCierreMicro);

            entity.ToTable("PRODUCCION_CIERRE_MICRONIZADO", "dbo");

            entity.Property(e => e.IdProduccionCierreMicro).HasColumnName("ID_PRODUCCION_CIERRE_MICRO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProduccionCierre).HasColumnName("ID_PRODUCCION_CIERRE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Sublote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SUBLOTE");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.ProduccionCierreMicronizados)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_PRODUCCION_CIERRE_MICRONIZADO_LOTE");

            entity.HasOne(d => d.IdProduccionCierreNavigation)
                .WithMany(p => p.ProduccionCierreMicronizados)
                .HasForeignKey(d => d.IdProduccionCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_MICRONIZADO_PRODUCCION_CIERRE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProduccionCierreMicronizados)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_MICRONIZADO_PRODUCTO");
        });

        modelBuilder.Entity<ProduccionCierreMotParadum>(entity =>
        {
            entity.HasKey(e => e.IdProdCierreMotParada)
                .HasName("PK_CIERRE_PRODUCCION_MOT_PARADA");

            entity.ToTable("PRODUCCION_CIERRE_MOT_PARADA", "dbo");

            entity.Property(e => e.IdProdCierreMotParada).HasColumnName("ID_PROD_CIERRE_MOT_PARADA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 = NO LLEVA EQUIPO, 1 = SI LLEVA EQUIPO");

            entity.Property(e => e.Valido)
                .HasColumnName("VALIDO")
                .HasDefaultValueSql("((1))")
                .HasComment("0= NO VALIDO, 1= VALIDO, DEFAULT = 1 ");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProduccionCierreMotParada)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_MOT_PARADA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProduccionCierreMotParada)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_MOT_PARADA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProduccionCierreParadum>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCierreParada);

            entity.ToTable("PRODUCCION_CIERRE_PARADA", "dbo");

            entity.Property(e => e.IdProduccionCierreParada).HasColumnName("ID_PRODUCCION_CIERRE_PARADA");

            entity.Property(e => e.FechaFinParada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN_PARADA");

            entity.Property(e => e.FechaIniParada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INI_PARADA");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdProduccionCierre).HasColumnName("ID_PRODUCCION_CIERRE");

            entity.Property(e => e.IdProduccionCierreMotParada).HasColumnName("ID_PRODUCCION_CIERRE_MOT_PARADA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TiempoParada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("TIEMPO_PARADA");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0= PLANEADO, 1= NO PLANEADO");

            entity.HasOne(d => d.IdFabricaEquipoNavigation)
                .WithMany(p => p.ProduccionCierreParada)
                .HasForeignKey(d => d.IdFabricaEquipo)
                .HasConstraintName("FK_PRODUCCION_CIERRE_PARADA_FABRICA_EQUIPO");

            entity.HasOne(d => d.IdProduccionCierreNavigation)
                .WithMany(p => p.ProduccionCierreParada)
                .HasForeignKey(d => d.IdProduccionCierre)
                .HasConstraintName("FK_PRODUCCION_CIERRE_PARADA_PRODUCCION_CIERRE");

            entity.HasOne(d => d.IdProduccionCierreMotParadaNavigation)
                .WithMany(p => p.ProduccionCierreParada)
                .HasForeignKey(d => d.IdProduccionCierreMotParada)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_PARADA_PRODUCCION_CIERRE_MOT_PARADA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProduccionCierreParada)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_CIERRE_PARADA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProduccionComposicion>(entity =>
        {
            entity.HasKey(e => e.IdProduccionComposicion)
                .HasName("PK_PRODUCAO_COMPOSICAO");

            entity.ToTable("PRODUCCION_COMPOSICION", "dbo");

            entity.HasIndex(e => new { e.IdProduccion, e.Item, e.IdLote, e.IdDeposito, e.RegStatus }, "UK_PRODUCCION_COMPOSICION")
                .IsUnique();

            entity.Property(e => e.IdProduccionComposicion).HasColumnName("ID_PRODUCCION_COMPOSICION");

            entity.Property(e => e.Calculo).HasColumnName("CALCULO");

            entity.Property(e => e.CantidadProducir).HasColumnName("CANTIDAD_PRODUCIR");

            entity.Property(e => e.DescLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESC_LOTE");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.Item).HasColumnName("ITEM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ProduccionComposicions)
                .HasForeignKey(d => d.IdDeposito)
                .HasConstraintName("FK_PRODUCCION_COMPOSICION_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.ProduccionComposicions)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_PRODUCCION_COMPOSICION_LOTE");

            entity.HasOne(d => d.IdProduccionNavigation)
                .WithMany(p => p.ProduccionComposicions)
                .HasForeignKey(d => d.IdProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_COMPOSICION_PRODUCCION");

            entity.HasOne(d => d.ItemNavigation)
                .WithMany(p => p.ProduccionComposicions)
                .HasForeignKey(d => d.Item)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_COMPOSICION_PRODUCTO");
        });

        modelBuilder.Entity<ProduccionComposicionCalculoAux>(entity =>
        {
            entity.HasKey(e => e.IdProdCompCalcAux);

            entity.ToTable("PRODUCCION_COMPOSICION_CALCULO_AUX", "dbo");

            entity.HasIndex(e => new { e.CalculoUnique, e.IdProducto, e.IdLote, e.IdDeposito }, "UNQ_PRODUCCION_COMPOSICION_CALCULO_AUX")
                .IsUnique();

            entity.Property(e => e.IdProdCompCalcAux).HasColumnName("ID_PROD_COMP_CALC_AUX");

            entity.Property(e => e.CalculoUnique).HasColumnName("CALCULO_UNIQUE");

            entity.Property(e => e.Cant)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANT");

            entity.Property(e => e.CantCalculado)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANT_CALCULADO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdEspecificacionTecnica).HasColumnName("ID_ESPECIFICACION_TECNICA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<ProduccionComposicionInc>(entity =>
        {
            entity.HasKey(e => e.IdProduccionCompInc)
                .HasName("PK_PRODUCCION_COMP_INC");

            entity.ToTable("PRODUCCION_COMPOSICION_INC", "dbo");

            entity.Property(e => e.IdProduccionCompInc).HasColumnName("ID_PRODUCCION_COMP_INC");

            entity.Property(e => e.CantidadProducir).HasColumnName("CANTIDAD_PRODUCIR");

            entity.Property(e => e.IdLoteInc).HasColumnName("ID_LOTE_INC");

            entity.Property(e => e.IdProduccionComposicion).HasColumnName("ID_PRODUCCION_COMPOSICION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteIncNavigation)
                .WithMany(p => p.ProduccionComposicionIncs)
                .HasForeignKey(d => d.IdLoteInc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_COMPOSICION_INC_LOTE_INC");

            entity.HasOne(d => d.IdProduccionComposicionNavigation)
                .WithMany(p => p.ProduccionComposicionIncs)
                .HasForeignKey(d => d.IdProduccionComposicion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_COMPOSICION_INC_PRODUCCION_COMPOSICION");
        });

        modelBuilder.Entity<ProduccionEtapa>(entity =>
        {
            entity.HasKey(e => e.IdProduccionEtapa);

            entity.ToTable("PRODUCCION_ETAPA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PRODUCCION_ETAPA");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProduccionEtapas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCCION_ETAPA_EMPRESA");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.HasKey(e => e.IdProducto);

            entity.ToTable("PRODUCTO", "dbo");

            entity.HasIndex(e => e.Codigo, "IDX_PRODUCTO_INF");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Aplicacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("APLICACION");

            entity.Property(e => e.Clasificacion)
                .HasColumnName("CLASIFICACION")
                .HasDefaultValueSql("((2))")
                .HasComment("0:Rojo 1:Amarillo 2:Otro");

            entity.Property(e => e.Codigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.ComisionPorcentaje).HasColumnName("COMISION_PORCENTAJE");

            entity.Property(e => e.ComisionTarifa)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMISION_TARIFA");

            entity.Property(e => e.Concentracion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONCENTRACION");

            entity.Property(e => e.ContratoObs).HasColumnName("CONTRATO_OBS");

            entity.Property(e => e.ControlCalidad).HasColumnName("CONTROL_CALIDAD");

            entity.Property(e => e.ConversionTonelada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CONVERSION_TONELADA");

            entity.Property(e => e.CultivarIntegracion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CULTIVAR_INTEGRACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Dosis)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DOSIS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.HabilitaControlProceso).HasColumnName("HABILITA_CONTROL_PROCESO");

            entity.Property(e => e.HabilitaStockMinimo)
                .HasColumnName("HABILITA_STOCK_MINIMO")
                .HasComment("0= No  1=Si");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.IdEspecificacionTecnica)
                .HasColumnName("ID_ESPECIFICACION_TECNICA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdMarcaProducto).HasColumnName("ID_MARCA_PRODUCTO");

            entity.Property(e => e.IdMercado).HasColumnName("ID_MERCADO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.NroRegistro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_REGISTRO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Relacionado).HasColumnName("RELACIONADO");

            entity.Property(e => e.StockMinimo).HasColumnName("STOCK_MINIMO");

            entity.Property(e => e.StockNegativo)
                .HasColumnName("STOCK_NEGATIVO")
                .HasComment("0=No  1=Si");

            entity.Property(e => e.TablaDescuento).HasColumnName("TABLA_DESCUENTO");

            entity.Property(e => e.Terrex).HasColumnName("TERREX");

            entity.Property(e => e.TipoPresentacion)
                .HasColumnName("TIPO_PRESENTACION")
                .HasComment("0 -no aplica 1- combo 2- pack");

            entity.Property(e => e.Transgenica)
                .HasColumnName("TRANSGENICA")
                .HasComment("0=No  1=Si");

            entity.Property(e => e.Tributacion)
                .HasColumnName("TRIBUTACION")
                .HasComment("0=Exentas, 1=Gravadas 10%, 2=Gravadas 5%");

            entity.Property(e => e.Valido)
                .HasColumnName("VALIDO")
                .HasComment("0= No Valido  1=Valido y se contabiliza  2=Valido y no se contabiliza");

            entity.Property(e => e.VencCantAnhos).HasColumnName("VENC_CANT_ANHOS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_EMPRESA");

            entity.HasOne(d => d.IdEnvaseNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdEnvase)
                .HasConstraintName("FK_PRODUCTO_ENVASE");

            entity.HasOne(d => d.IdFabricaSectorNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdFabricaSector)
                .HasConstraintName("FK_PRODUCTO_FABRICA_SECTOR");

            entity.HasOne(d => d.IdIngredienteNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdIngrediente)
                .HasConstraintName("FK_PRODUCTO_INGREDIENTE");

            entity.HasOne(d => d.IdMarcaProductoNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdMarcaProducto)
                .HasConstraintName("FK_PRODUCTO_MARCA_PRODUCTO");

            entity.HasOne(d => d.IdPaisNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdPais)
                .HasConstraintName("FK_PRODUCTO_PAIS");

            entity.HasOne(d => d.IdProductoClaseNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdProductoClase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_PRODUCTO_CLASE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_PRODUCTO_PROVEEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Productos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoAtributoMic>(entity =>
        {
            entity.HasKey(e => e.IdProductoAtributoMic);

            entity.ToTable("PRODUCTO_ATRIBUTO_MIC", "dbo");

            entity.Property(e => e.IdProductoAtributoMic).HasColumnName("ID_PRODUCTO_ATRIBUTO_MIC");

            entity.Property(e => e.ConcentracionExt)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONCENTRACION_EXT");

            entity.Property(e => e.DescripcionAtributo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ATRIBUTO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionExt)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EXT");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FormulacionExt)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FORMULACION_EXT");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.ImcoClass)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("IMCO_CLASS");

            entity.Property(e => e.Ncm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NCM");

            entity.Property(e => e.PackingGroup)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("PACKING_GROUP");

            entity.Property(e => e.PorcentajeLiberacion)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PORCENTAJE_LIBERACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Un).HasColumnName("UN");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProductoAtributoMics)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_ATRIBUTO_MIC_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoAtributoMics)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_ATRIBUTO_MIC_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProductoAtributoMics)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_ATRIBUTO_MIC_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoCatCargaFabril>(entity =>
        {
            entity.HasKey(e => e.IdProdCatCargaFabril);

            entity.ToTable("PRODUCTO_CAT_CARGA_FABRIL", "dbo");

            entity.Property(e => e.IdProdCatCargaFabril).HasColumnName("ID_PROD_CAT_CARGA_FABRIL");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCatCargaFabrilDet).HasColumnName("ID_CAT_CARGA_FABRIL_DET");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCatCargaFabrilDetNavigation)
                .WithMany(p => p.ProductoCatCargaFabrils)
                .HasForeignKey(d => d.IdCatCargaFabrilDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CAT_CARGA_FABRIL_CATEGORIA_CARGA_FABRIL_DET");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoCatCargaFabrils)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CAT_CARGA_FABRIL_PRODUCTO");
        });

        modelBuilder.Entity<ProductoCategorium>(entity =>
        {
            entity.HasKey(e => e.IdProductoCategoria);

            entity.ToTable("PRODUCTO_CATEGORIA", "dbo");

            entity.Property(e => e.IdProductoCategoria)
                .ValueGeneratedNever()
                .HasColumnName("ID_PRODUCTO_CATEGORIA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCategoriaVenta).HasColumnName("ID_CATEGORIA_VENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdCategoriaVentaNavigation)
                .WithMany(p => p.ProductoCategoria)
                .HasForeignKey(d => d.IdCategoriaVenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CATEGORIA_CATEGORIA_VENTA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoCategoria)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CATEGORIA_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProductoCategoria)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CATEGORIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoClase>(entity =>
        {
            entity.HasKey(e => e.IdProductoClase);

            entity.ToTable("PRODUCTO_CLASE", "dbo");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProductoClasePadre).HasColumnName("ID_PRODUCTO_CLASE_PADRE");

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Similar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SIMILAR")
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("S = Indica que sus hijos son productos similares, para el calculo de stock. N = No son similares.");

            entity.Property(e => e.Valido)
                .HasMaxLength(1)
                .HasColumnName("VALIDO")
                .IsFixedLength();

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProductoClases)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CLASE_EMPRESA");

            entity.HasOne(d => d.IdProductoGrupoNavigation)
                .WithMany(p => p.ProductoClases)
                .HasForeignKey(d => d.IdProductoGrupo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CLASE_PRODUCTO_GRUPO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProductoClases)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CLASE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoCostoOpDif>(entity =>
        {
            entity.HasKey(e => e.IdProductoCostoOpDif);

            entity.ToTable("PRODUCTO_COSTO_OP_DIF", "dbo");

            entity.Property(e => e.IdProductoCostoOpDif).HasColumnName("ID_PRODUCTO_COSTO_OP_DIF");

            entity.Property(e => e.CostoOperacional)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("COSTO_OPERACIONAL")
                .HasComment("Costo OP forzado. Al costo OP calculado se le va a sumar este valor en el recalculo.");

            entity.Property(e => e.CostoTempGs)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("COSTO_TEMP_GS")
                .HasDefaultValueSql("((0))")
                .HasComment("Utilizado para calculo en el recalculo.");

            entity.Property(e => e.CostoTempUsd)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("COSTO_TEMP_USD")
                .HasDefaultValueSql("((0))")
                .HasComment("Utilizado para calculo en el recalculo.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FinVigencia)
                .HasColumnType("datetime")
                .HasColumnName("FIN_VIGENCIA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IniVigencia)
                .HasColumnType("datetime")
                .HasColumnName("INI_VIGENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valido)
                .HasColumnName("VALIDO")
                .HasDefaultValueSql("((1))")
                .HasComment("0 = No valido, 1 = Valido");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProductoCostoOpDifs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_COSTO_OP_DIF_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoCostoOpDifs)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_COSTO_OP_DIF_PRODUCTO");
        });

        modelBuilder.Entity<ProductoCultivo>(entity =>
        {
            entity.HasKey(e => e.IdProductoCultivo);

            entity.ToTable("PRODUCTO_CULTIVO", "dbo");

            entity.HasIndex(e => new { e.IdProducto, e.IdCultivo, e.GeneraCota }, "UK_PRODUCTO_CULTIVO")
                .IsUnique();

            entity.Property(e => e.IdProductoCultivo).HasColumnName("ID_PRODUCTO_CULTIVO");

            entity.Property(e => e.Dosis).HasColumnName("DOSIS");

            entity.Property(e => e.GeneraCota)
                .HasColumnName("GENERA_COTA")
                .HasComment("0=No  1=Si");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ProductoCultivos)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CULTIVO_CULTIVO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoCultivos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_CULTIVO_PRODUCTO");
        });

        modelBuilder.Entity<ProductoFabricanteExt>(entity =>
        {
            entity.HasKey(e => e.IdProductoFabricanteExt);

            entity.ToTable("PRODUCTO_FABRICANTE_EXT", "dbo");

            entity.Property(e => e.IdProductoFabricanteExt).HasColumnName("ID_PRODUCTO_FABRICANTE_EXT");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Estandar).HasColumnName("ESTANDAR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabricanteExt).HasColumnName("ID_FABRICANTE_EXT");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdFabricanteExtNavigation)
                .WithMany(p => p.ProductoFabricanteExts)
                .HasForeignKey(d => d.IdFabricanteExt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FABRICANTE_EXT_FABRICANTE_EXT");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoFabricanteExts)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FABRICANTE_EXT_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProductoFabricanteExts)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PRODUCTO_FABRICANTE_EXT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoFormPieAnalisisDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("PRODUCTO_FORM_PIE_ANALISIS_DET", "dbo");

            entity.Property(e => e.IdCcaAnalisisDet).HasColumnName("ID_CCA_ANALISIS_DET");

            entity.Property(e => e.IdProdFormPieAnalisis).HasColumnName("ID_PROD_FORM_PIE_ANALISIS");

            entity.Property(e => e.IdProdFormPieAnalisisDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PROD_FORM_PIE_ANALISIS_DET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<ProductoFormula>(entity =>
        {
            entity.HasKey(e => e.IdProductoFormula);

            entity.ToTable("PRODUCTO_FORMULA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PRODUCTO_FORMULA")
                .IsUnique();

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.Icp).HasColumnName("ICP");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Revision).HasColumnName("REVISION");

            entity.Property(e => e.Standard)
                .HasColumnName("STANDARD")
                .HasDefaultValueSql("((1))")
                .HasComment("0 = No, 1 = Es Standard");

            entity.Property(e => e.Valido)
                .HasColumnName("VALIDO")
                .HasDefaultValueSql("((1))")
                .HasComment("0 = No valido, 1 = Valido");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProductoFormulas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_EMPRESA");

            entity.HasOne(d => d.IdProduccionEtapaNavigation)
                .WithMany(p => p.ProductoFormulas)
                .HasForeignKey(d => d.IdProduccionEtapa)
                .HasConstraintName("FK_PRODUCTO_FORMULA_PRODUCCION_ETAPA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoFormulas)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProductoFormulas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoFormulaComp>(entity =>
        {
            entity.HasKey(e => e.IdProductoFormulaComp)
                .HasName("PK_PRODUTOS_COMPOSICAO");

            entity.ToTable("PRODUCTO_FORMULA_COMP", "dbo");

            entity.HasIndex(e => new { e.IdProductoFormula, e.Item }, "UK_PRODUCTO_FORMULA_COMP")
                .IsUnique();

            entity.Property(e => e.IdProductoFormulaComp).HasColumnName("ID_PRODUCTO_FORMULA_COMP");

            entity.Property(e => e.Aporte)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("APORTE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.BalanceoCarga)
                .HasColumnName("BALANCEO_CARGA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ConcAporte).HasColumnName("CONC_APORTE");

            entity.Property(e => e.ConcDtEstandar)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CONC_DT_ESTANDAR")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ConcDtFormulado)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CONC_DT_FORMULADO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ControlProceso)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CONTROL_PROCESO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.Item).HasColumnName("ITEM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoItem).HasColumnName("TIPO_ITEM");

            entity.HasOne(d => d.IdProductoFormulaNavigation)
                .WithMany(p => p.ProductoFormulaComps)
                .HasForeignKey(d => d.IdProductoFormula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_COMP_PRODUCTO_FORMULA");

            entity.HasOne(d => d.ItemNavigation)
                .WithMany(p => p.ProductoFormulaComps)
                .HasForeignKey(d => d.Item)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_COMP_PRODUCTO");
        });

        modelBuilder.Entity<ProductoFormulaLiquidoLavado>(entity =>
        {
            entity.HasKey(e => e.IdProductoFormulaLiqLav);

            entity.ToTable("PRODUCTO_FORMULA_LIQUIDO_LAVADO", "dbo");

            entity.Property(e => e.IdProductoFormulaLiqLav).HasColumnName("ID_PRODUCTO_FORMULA_LIQ_LAV");

            entity.Property(e => e.IdFabrilLiquidoLavado).HasColumnName("ID_FABRIL_LIQUIDO_LAVADO");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.Padre)
                .HasColumnName("PADRE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilLiquidoLavadoNavigation)
                .WithMany(p => p.ProductoFormulaLiquidoLavados)
                .HasForeignKey(d => d.IdFabrilLiquidoLavado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_LIQUIDO_LAVADO_FABRIL_LIQUIDO_LAVADO");

            entity.HasOne(d => d.IdProductoFormulaNavigation)
                .WithMany(p => p.ProductoFormulaLiquidoLavados)
                .HasForeignKey(d => d.IdProductoFormula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_FORMULA_LIQUIDO_LAVADO_PRODUCTO_FORMULA1");
        });

        modelBuilder.Entity<ProductoFormulaPie>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("PRODUCTO_FORMULA_PIE", "dbo");

            entity.Property(e => e.DescRevision)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_REVISION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.FechaRevision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REVISION");

            entity.Property(e => e.FuncionarioAprobador).HasColumnName("FUNCIONARIO_APROBADOR");

            entity.Property(e => e.FuncionarioElaborador).HasColumnName("FUNCIONARIO_ELABORADOR");

            entity.Property(e => e.FuncionarioVerificador).HasColumnName("FUNCIONARIO_VERIFICADOR");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoFormulaPie)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PRODUCTO_FORMULA_PIE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroRevision).HasColumnName("NRO_REVISION");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<ProductoFormulaPieAnalisi>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("PRODUCTO_FORMULA_PIE_ANALISIS", "dbo");

            entity.Property(e => e.CantidadMuestreo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD_MUESTREO");

            entity.Property(e => e.ConAprobacion).HasColumnName("CON_APROBACION");

            entity.Property(e => e.CriterioMax)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CRITERIO_MAX");

            entity.Property(e => e.CriterioMin)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CRITERIO_MIN");

            entity.Property(e => e.CriterioString)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CRITERIO_STRING");

            entity.Property(e => e.Criticidad).HasColumnName("CRITICIDAD");

            entity.Property(e => e.DescFrecuencia)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_FRECUENCIA");

            entity.Property(e => e.IdCcaAnalisis).HasColumnName("ID_CCA_ANALISIS");

            entity.Property(e => e.IdCcaMuestraEtapa).HasColumnName("ID_CCA_MUESTRA_ETAPA");

            entity.Property(e => e.IdProdFormPieAnalisis)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PROD_FORM_PIE_ANALISIS");

            entity.Property(e => e.IdProductoFormulaPie).HasColumnName("ID_PRODUCTO_FORMULA_PIE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Registro)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("REGISTRO");

            entity.Property(e => e.ResponsableAnalisis)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_ANALISIS");

            entity.Property(e => e.ResponsableMuestreo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE_MUESTREO");

            entity.Property(e => e.Tecnica)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TECNICA");

            entity.Property(e => e.TipoFrecuencia).HasColumnName("TIPO_FRECUENCIA");
        });

        modelBuilder.Entity<ProductoGrupo>(entity =>
        {
            entity.HasKey(e => e.IdProductoGrupo);

            entity.ToTable("PRODUCTO_GRUPO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PRODUCTO_GRUPO")
                .IsUnique();

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProductoGrupos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_GRUPO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProductoGrupos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_GRUPO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProductoLiquidoLavado>(entity =>
        {
            entity.HasKey(e => e.IdProductoLiquidoLavado);

            entity.ToTable("PRODUCTO_LIQUIDO_LAVADO", "dbo");

            entity.Property(e => e.IdProductoLiquidoLavado).HasColumnName("ID_PRODUCTO_LIQUIDO_LAVADO");

            entity.Property(e => e.IdFabrilLiquidoLavado).HasColumnName("ID_FABRIL_LIQUIDO_LAVADO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Padre)
                .HasColumnName("PADRE")
                .HasDefaultValueSql("((0))")
                .HasComment("0: NO ES TIPO DE LIQUIDO LAVADO PADRE, 1: LIQUIDO DE LAVADO PADRE EL CUAL LE PERMITE SABER CUAL SE VA GENERAR EN EL CIERRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdFabrilLiquidoLavadoNavigation)
                .WithMany(p => p.ProductoLiquidoLavados)
                .HasForeignKey(d => d.IdFabrilLiquidoLavado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_LIQUIDO_LAVADO_FABRIL_LIQUIDO_LAVADO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoLiquidoLavados)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_LIQUIDO_LAVADO_PRODUCTO");
        });

        modelBuilder.Entity<ProductoMicronizado>(entity =>
        {
            entity.HasKey(e => e.IdProductoMicronizado);

            entity.ToTable("PRODUCTO_MICRONIZADO", "dbo");

            entity.HasIndex(e => e.IdProducto, "UK_ID_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdProductoMicronizado).HasColumnName("ID_PRODUCTO_MICRONIZADO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoPadre).HasColumnName("ID_PRODUCTO_PADRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithOne(p => p.ProductoMicronizadoIdProductoNavigation)
                .HasForeignKey<ProductoMicronizado>(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_MICRONIZADO_PRODUCTO");

            entity.HasOne(d => d.IdProductoPadreNavigation)
                .WithMany(p => p.ProductoMicronizadoIdProductoPadreNavigations)
                .HasForeignKey(d => d.IdProductoPadre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_MICRONIZADO_PRODUCTO1");
        });

        modelBuilder.Entity<ProductoOpAjuste>(entity =>
        {
            entity.HasKey(e => e.IdProductoOpAjustes);

            entity.ToTable("PRODUCTO_OP_AJUSTE", "dbo");

            entity.HasIndex(e => new { e.IdProducto, e.Tipo, e.RegStatus }, "UK_PRODUCTO_OP_AJUSTE")
                .IsUnique();

            entity.Property(e => e.IdProductoOpAjustes).HasColumnName("ID_PRODUCTO_OP_AJUSTES");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 - Redondeo, 1 - Bloqueo");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoOpAjustes)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_PRODUCTO_OP_AJUSTE_PRODUCTO");
        });

        modelBuilder.Entity<ProductoPlancuentum>(entity =>
        {
            entity.HasKey(e => e.IdProductoPlancuenta);

            entity.ToTable("PRODUCTO_PLANCUENTA", "dbo");

            entity.HasIndex(e => new { e.IdProducto, e.Origen, e.RegStatus, e.Empresa }, "IDX_PRODUCTO_PLANCUENTA_EMPRESA_ID_PRODUCTO_ORIGEN_REG_STATUS");

            entity.Property(e => e.IdProductoPlancuenta).HasColumnName("ID_PRODUCTO_PLANCUENTA");

            entity.Property(e => e.Codigo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.DeberHaber)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DEBER_HABER")
                .IsFixedLength();

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Origen)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ORIGEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProductoPlancuenta)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_PRODUCTO_PLANCUENTA_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProductoPlancuenta)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_PRODUCTO_PLANCUENTA_PRODUCTO");
        });

        modelBuilder.Entity<ProductoRelacionado>(entity =>
        {
            entity.HasKey(e => e.IdProductoRelacionado)
                .HasName("PK__PRODUCTO__EE862086D0510040");

            entity.ToTable("PRODUCTO_RELACIONADO", "dbo");

            entity.Property(e => e.IdProductoRelacionado).HasColumnName("ID_PRODUCTO_RELACIONADO");

            entity.Property(e => e.Equivalencia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EQUIVALENCIA");

            entity.Property(e => e.IdProductoHijo).HasColumnName("ID_PRODUCTO_HIJO");

            entity.Property(e => e.IdProductoPadre).HasColumnName("ID_PRODUCTO_PADRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProductoHijoNavigation)
                .WithMany(p => p.ProductoRelacionadoIdProductoHijoNavigations)
                .HasForeignKey(d => d.IdProductoHijo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_RELACIONADO_PRODUCTO");

            entity.HasOne(d => d.IdProductoPadreNavigation)
                .WithMany(p => p.ProductoRelacionadoIdProductoPadreNavigations)
                .HasForeignKey(d => d.IdProductoPadre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PRODUCTO_RELACIONADO_PRODUCTO1");
        });

        modelBuilder.Entity<ProformaCargaExportacion>(entity =>
        {
            entity.HasKey(e => e.IdProformaCargaExportacion);

            entity.ToTable("PROFORMA_CARGA_EXPORTACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PROFORMA_CARGA_EXPORTACION")
                .IsUnique();

            entity.Property(e => e.IdProformaCargaExportacion).HasColumnName("ID_PROFORMA_CARGA_EXPORTACION");

            entity.Property(e => e.BloqueoCargaExp).HasColumnName("BLOQUEO_CARGA_EXP");

            entity.Property(e => e.CantidadCaja)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_CAJA");

            entity.Property(e => e.CodigoNro)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CODIGO_NRO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.CotizacionSeguroFlete)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COTIZACION_SEGURO_FLETE");

            entity.Property(e => e.DescripcionTipoSalida)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TIPO_SALIDA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EsMuestra).HasColumnName("ES_MUESTRA");

            entity.Property(e => e.EstadoImpresion).HasColumnName("ESTADO_IMPRESION");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdCargaExportacion).HasColumnName("ID_CARGA_EXPORTACION");

            entity.Property(e => e.IdIncoterm).HasColumnName("ID_INCOTERM");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MonedaFactura).HasColumnName("MONEDA_FACTURA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorSeguro)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_SEGURO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProformaCargaExportacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_CARGA_EXPORTACION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProformaCargaExportacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_CARGA_EXPORTACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProformaCargaExportacionDet>(entity =>
        {
            entity.HasKey(e => e.IdProformaCargaExpDet);

            entity.ToTable("PROFORMA_CARGA_EXPORTACION_DET", "dbo");

            entity.Property(e => e.IdProformaCargaExpDet).HasColumnName("ID_PROFORMA_CARGA_EXP_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadEnvase)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_ENVASE");

            entity.Property(e => e.CantidadPallet)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_PALLET");

            entity.Property(e => e.ConcentracionExt)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONCENTRACION_EXT");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionExt)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EXT");

            entity.Property(e => e.DescripcionFormulador)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FORMULADOR");

            entity.Property(e => e.DireccionFormulador)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_FORMULADOR");

            entity.Property(e => e.FormulacionExt)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("FORMULACION_EXT");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdFabricanteExt).HasColumnName("ID_FABRICANTE_EXT");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProformaCargaExportacion).HasColumnName("ID_PROFORMA_CARGA_EXPORTACION");

            entity.Property(e => e.NcmExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NCM_EXT");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.Precio)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.TipoFormulador).HasColumnName("TIPO_FORMULADOR");

            entity.Property(e => e.TipoImpresion).HasColumnName("TIPO_IMPRESION");

            entity.HasOne(d => d.IdClienteLocalEntregaNavigation)
                .WithMany(p => p.ProformaCargaExportacionDets)
                .HasForeignKey(d => d.IdClienteLocalEntrega)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_CARGA_EXPORTACION_DET_CLIENTE_LOCAL_ENTREGA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ProformaCargaExportacionDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_CARGA_EXPORTACION_DET_PRODUCTO");

            entity.HasOne(d => d.IdProformaCargaExportacionNavigation)
                .WithMany(p => p.ProformaCargaExportacionDets)
                .HasForeignKey(d => d.IdProformaCargaExportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_CARGA_EXPORTACION_DET_PROFORMA_CARGA_EXPORTACION");
        });

        modelBuilder.Entity<ProformaImportacion>(entity =>
        {
            entity.HasKey(e => e.IdProformaImportacion);

            entity.ToTable("PROFORMA_IMPORTACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "IX_PROFORMA_IMPORTACION")
                .IsUnique();

            entity.Property(e => e.IdProformaImportacion).HasColumnName("ID_PROFORMA_IMPORTACION");

            entity.Property(e => e.AseguradoraExpor).HasColumnName("ASEGURADORA_EXPOR");

            entity.Property(e => e.DiasFinanciacion)
                .HasColumnName("DIAS_FINANCIACION")
                .HasComment("Cantidad de dias de credito asignado para el pago.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("Indica si la proforma esta activa o no. Si=1 , No=0");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.FechaEntregaProd)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA_PROD");

            entity.Property(e => e.FechaVencFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENC_FACTURA");

            entity.Property(e => e.Financista)
                .HasColumnName("FINANCISTA")
                .HasComment("id del proveedor clasificado como el financista");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdFormaPago).HasColumnName("ID_FORMA_PAGO");

            entity.Property(e => e.IdIncoterm).HasColumnName("ID_INCOTERM");

            entity.Property(e => e.IdProformaPadre)
                .HasColumnName("ID_PROFORMA_PADRE")
                .HasComment("Id que referencia cual de las proformas es el inicial, el id padre siempre sera = 0.");

            entity.Property(e => e.InvoiceNro)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("INVOICE_NRO")
                .HasComment("Nro de factura.");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LineaCredito).HasColumnName("LINEA_CREDITO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.ProformaVersion).HasColumnName("PROFORMA_VERSION");

            entity.Property(e => e.PromesaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("PROMESA_ENTREGA");

            entity.Property(e => e.RefNro)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("REF_NRO")
                .HasComment("Nro. de proforma.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Trader)
                .HasColumnName("TRADER")
                .HasComment("id del proveedor clasificado como el trader.");

            entity.Property(e => e.ValorFleteEstimado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VALOR_FLETE_ESTIMADO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProformaImportacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_EMPRESA");

            entity.HasOne(d => d.FinancistaNavigation)
                .WithMany(p => p.ProformaImportacionFinancistaNavigations)
                .HasForeignKey(d => d.Financista)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_PROVEEDOR1");

            entity.HasOne(d => d.IdFormaPagoNavigation)
                .WithMany(p => p.ProformaImportacions)
                .HasForeignKey(d => d.IdFormaPago)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_FORMA_PAGO");

            entity.HasOne(d => d.IdIncotermNavigation)
                .WithMany(p => p.ProformaImportacions)
                .HasForeignKey(d => d.IdIncoterm)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_INCOTERM");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProformaImportacions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_EMPRESA_UNIDAD");

            entity.HasOne(d => d.TraderNavigation)
                .WithMany(p => p.ProformaImportacionTraderNavigations)
                .HasForeignKey(d => d.Trader)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_PROVEEDOR");
        });

        modelBuilder.Entity<ProformaImportacionDet>(entity =>
        {
            entity.HasKey(e => e.IdProformaImportacionDet);

            entity.ToTable("PROFORMA_IMPORTACION_DET", "dbo");

            entity.Property(e => e.IdProformaImportacionDet).HasColumnName("ID_PROFORMA_IMPORTACION_DET");

            entity.Property(e => e.CantPacking)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANT_PACKING");

            entity.Property(e => e.CantidadKg)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANTIDAD_KG");

            entity.Property(e => e.CertifOrigen)
                .HasColumnName("CERTIF_ORIGEN")
                .HasComment("Posee Certificado de Origen. 0=No. 1=Si.");

            entity.Property(e => e.DescripcionCertOrig)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CERT_ORIG");

            entity.Property(e => e.Fabricante).HasColumnName("FABRICANTE");

            entity.Property(e => e.FechaCertifOrig)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CERTIF_ORIG");

            entity.Property(e => e.FechaTkc)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_TKC");

            entity.Property(e => e.IdPedidoImpDet).HasColumnName("ID_PEDIDO_IMP_DET");

            entity.Property(e => e.IdProformaImportacion).HasColumnName("ID_PROFORMA_IMPORTACION");

            entity.Property(e => e.IdTipoEmbalajeComex).HasColumnName("ID_TIPO_EMBALAJE_COMEX");

            entity.Property(e => e.Observacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("PRECIO_UNITARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPedidoImpDetNavigation)
                .WithMany(p => p.ProformaImportacionDets)
                .HasForeignKey(d => d.IdPedidoImpDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_DET_PEDIDO_IMP_DET");

            entity.HasOne(d => d.IdProformaImportacionNavigation)
                .WithMany(p => p.ProformaImportacionDets)
                .HasForeignKey(d => d.IdProformaImportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_DET_PROFORMA_IMPORTACION");

            entity.HasOne(d => d.IdTipoEmbalajeComexNavigation)
                .WithMany(p => p.ProformaImportacionDets)
                .HasForeignKey(d => d.IdTipoEmbalajeComex)
                .HasConstraintName("FK_PROFORMA_IMPORTACION_DET_TIPO_EMBALAJE_COMEX");
        });

        modelBuilder.Entity<ProformaPagoVencimientoImp>(entity =>
        {
            entity.HasKey(e => e.IdProformaPagoVencimientoImp);

            entity.ToTable("PROFORMA_PAGO_VENCIMIENTO_IMP", "dbo");

            entity.Property(e => e.IdProformaPagoVencimientoImp).HasColumnName("ID_PROFORMA_PAGO_VENCIMIENTO_IMP");

            entity.Property(e => e.CondicionPago)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONDICION_PAGO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaActPagos)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ACT_PAGOS");

            entity.Property(e => e.FechaPago)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PAGO");

            entity.Property(e => e.IdProformaImportacion).HasColumnName("ID_PROFORMA_IMPORTACION");

            entity.Property(e => e.ObsCobranza)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OBS_COBRANZA");

            entity.Property(e => e.PorcentajeAnticipo).HasColumnName("PORCENTAJE_ANTICIPO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoPago).HasColumnName("TIPO_PAGO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.ValorPago)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_PAGO");

            entity.Property(e => e.ValorTransferencia)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("VALOR_TRANSFERENCIA");

            entity.HasOne(d => d.IdProformaImportacionNavigation)
                .WithMany(p => p.ProformaPagoVencimientoImps)
                .HasForeignKey(d => d.IdProformaImportacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROFORMA_PAGO_VENCIMIENTO_IMP_PROFORMA_IMPORTACION");
        });

        modelBuilder.Entity<Protocolo>(entity =>
        {
            entity.HasKey(e => e.IdProtocolo);

            entity.ToTable("PROTOCOLO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PROTOCOLO")
                .IsUnique();

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.Portador)
                .HasColumnName("PORTADOR")
                .HasComment("ID_CLIENTE");

            entity.Property(e => e.Recibido).HasColumnName("RECIBIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Protocolos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Protocolos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProtocoloContrato>(entity =>
        {
            entity.HasKey(e => e.IdProtocoloContrato);

            entity.ToTable("PROTOCOLO_CONTRATO", "dbo");

            entity.HasIndex(e => new { e.IdProtocolo, e.IdContratoCompra }, "UK_PROTOCOLO_CONTRATO")
                .IsUnique();

            entity.Property(e => e.IdProtocoloContrato).HasColumnName("ID_PROTOCOLO_CONTRATO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ProtocoloContratos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_CONTRATO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdProtocoloNavigation)
                .WithMany(p => p.ProtocoloContratos)
                .HasForeignKey(d => d.IdProtocolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_CONTRATO_PROTOCOLO");
        });

        modelBuilder.Entity<ProtocoloDocLegal>(entity =>
        {
            entity.HasKey(e => e.IdProtocoloDocLegal);

            entity.ToTable("PROTOCOLO_DOC_LEGAL", "dbo");

            entity.Property(e => e.IdProtocoloDocLegal).HasColumnName("ID_PROTOCOLO_DOC_LEGAL");

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.IdTimbradoExpedidor).HasColumnName("ID_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProtocoloNavigation)
                .WithMany(p => p.ProtocoloDocLegals)
                .HasForeignKey(d => d.IdProtocolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_DOC_LEGAL_PROTOCOLO");

            entity.HasOne(d => d.IdTimbradoExpedidorNavigation)
                .WithMany(p => p.ProtocoloDocLegals)
                .HasForeignKey(d => d.IdTimbradoExpedidor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_DOC_LEGAL_TIMBRADO_EXPEDIDOR");
        });

        modelBuilder.Entity<ProtocoloGarantium>(entity =>
        {
            entity.HasKey(e => e.IdProtocoloGarantia);

            entity.ToTable("PROTOCOLO_GARANTIA", "dbo");

            entity.Property(e => e.IdProtocoloGarantia).HasColumnName("ID_PROTOCOLO_GARANTIA");

            entity.Property(e => e.IdGarantiaTerceroDet).HasColumnName("ID_GARANTIA_TERCERO_DET");

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdGarantiaTerceroDetNavigation)
                .WithMany(p => p.ProtocoloGarantia)
                .HasForeignKey(d => d.IdGarantiaTerceroDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_GARANTIA_GARANTIA_TERCERO_DET");

            entity.HasOne(d => d.IdProtocoloNavigation)
                .WithMany(p => p.ProtocoloGarantia)
                .HasForeignKey(d => d.IdProtocolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_GARANTIA_PROTOCOLO");
        });

        modelBuilder.Entity<ProtocoloLiquidacion>(entity =>
        {
            entity.HasKey(e => e.IdProtocoloLiquidacion);

            entity.ToTable("PROTOCOLO_LIQUIDACION", "dbo");

            entity.HasIndex(e => new { e.IdProtocolo, e.Liquidacion }, "UK_PROTOCOLO_LIQUIDACION")
                .IsUnique();

            entity.Property(e => e.IdProtocoloLiquidacion).HasColumnName("ID_PROTOCOLO_LIQUIDACION");

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProtocoloNavigation)
                .WithMany(p => p.ProtocoloLiquidacions)
                .HasForeignKey(d => d.IdProtocolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_LIQUIDACION_PROTOCOLO");

            entity.HasOne(d => d.LiquidacionNavigation)
                .WithMany(p => p.ProtocoloLiquidacions)
                .HasForeignKey(d => d.Liquidacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_LIQUIDACION_CONTRATO_COMPRA_LIQ");
        });

        modelBuilder.Entity<ProtocoloPagare>(entity =>
        {
            entity.HasKey(e => e.IdProtocoloPagare);

            entity.ToTable("PROTOCOLO_PAGARE", "dbo");

            entity.HasIndex(e => new { e.IdPagare, e.RegStatus }, "IDX_L_PAGARE_REGISTRADO");

            entity.Property(e => e.IdProtocoloPagare).HasColumnName("ID_PROTOCOLO_PAGARE");

            entity.Property(e => e.IdPagare).HasColumnName("ID_PAGARE");

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdPagareNavigation)
                .WithMany(p => p.ProtocoloPagares)
                .HasForeignKey(d => d.IdPagare)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_PAGARE_PAGARE");

            entity.HasOne(d => d.IdProtocoloNavigation)
                .WithMany(p => p.ProtocoloPagares)
                .HasForeignKey(d => d.IdProtocolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_PAGARE_PROTOCOLO");
        });

        modelBuilder.Entity<ProtocoloPagareProv>(entity =>
        {
            entity.HasKey(e => e.IdProtocoloPagareProv)
                .HasName("PK_PROTOCOLOS_PAGARES_PROV");

            entity.ToTable("PROTOCOLO_PAGARE_PROV", "dbo");

            entity.Property(e => e.IdProtocoloPagareProv).HasColumnName("ID_PROTOCOLO_PAGARE_PROV");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProtocolo).HasColumnName("ID_PROTOCOLO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Pagare).HasColumnName("PAGARE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdProtocoloNavigation)
                .WithMany(p => p.ProtocoloPagareProvs)
                .HasForeignKey(d => d.IdProtocolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_PAGARE_PROV_PROTOCOLO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ProtocoloPagareProvs)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROTOCOLO_PAGARE_PROV_PROVEEDOR");
        });

        modelBuilder.Entity<Proveedor>(entity =>
        {
            entity.HasKey(e => e.IdProveedor);

            entity.ToTable("PROVEEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PROVEEDOR")
                .IsUnique();

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Acta).HasColumnName("ACTA");

            entity.Property(e => e.AntiguedadEmpresa).HasColumnName("ANTIGUEDAD_EMPRESA");

            entity.Property(e => e.AuditoriaEmpresa).HasColumnName("AUDITORIA_EMPRESA");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.CategoriaRojo).HasColumnName("CATEGORIA_ROJO");

            entity.Property(e => e.CedulaExtranjera)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CEDULA_EXTRANJERA");

            entity.Property(e => e.Celular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Certificado).HasColumnName("CERTIFICADO");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");

            entity.Property(e => e.ConstanciaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("CONSTANCIA_VENCIMIENTO");

            entity.Property(e => e.Constitucion).HasColumnName("CONSTITUCION");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionDetalleTesaka)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DETALLE_TESAKA");

            entity.Property(e => e.Diplomatico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIPLOMATICO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.EMail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("E_MAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fantasia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FANTASIA");

            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.FechaApertura)
                .HasColumnType("date")
                .HasColumnName("FECHA_APERTURA");

            entity.Property(e => e.FechaConstitucion)
                .HasColumnType("date")
                .HasColumnName("FECHA_CONSTITUCION");

            entity.Property(e => e.Financiero)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FINANCIERO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCuentaCorriente)
                .HasColumnName("ID_CUENTA_CORRIENTE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdPorcentajeIrp).HasColumnName("ID_PORCENTAJE_IRP");

            entity.Property(e => e.IdentificacionTributaria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDENTIFICACION_TRIBUTARIA");

            entity.Property(e => e.Intercompany).HasColumnName("INTERCOMPANY");

            entity.Property(e => e.Irp).HasColumnName("IRP");

            entity.Property(e => e.LinkDocumentos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("LINK_DOCUMENTOS");

            entity.Property(e => e.NroCuenta).HasColumnName("NRO_CUENTA");

            entity.Property(e => e.ObservacionBloqueo)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_BLOQUEO");

            entity.Property(e => e.OtrosDoc).HasColumnName("OTROS_DOC");

            entity.Property(e => e.Pasaporte)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PASAPORTE");

            entity.Property(e => e.Pep).HasColumnName("PEP");

            entity.Property(e => e.PepPosicion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PEP_POSICION");

            entity.Property(e => e.ProveedorCliente).HasColumnName("PROVEEDOR_CLIENTE");

            entity.Property(e => e.ProveedorEstado).HasColumnName("PROVEEDOR_ESTADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionIragro).HasColumnName("RETENCION_IRAGRO");

            entity.Property(e => e.RetencionIva)
                .HasColumnName("RETENCION_IVA")
                .HasComment("0 - No se retiene. 1 - Se retiene.");

            entity.Property(e => e.RetencionRenta)
                .HasColumnName("RETENCION_RENTA")
                .HasComment("Porcentaje de Retencion Renta. Si es 0 no se le retiene. Por defecto debe ser 0.");

            entity.Property(e => e.RetencionTipo).HasColumnName("RETENCION_TIPO");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA")
                .HasComment("RUC obligatorio para libro Hechauka.");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TieneContrato).HasColumnName("TIENE_CONTRATO");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0 - Persona fisica. 1 - Persona juridica. Por defecto es 1.");

            entity.Property(e => e.TipoFisico).HasColumnName("TIPO_FISICO");

            entity.Property(e => e.TipoGasto)
                .HasColumnName("TIPO_GASTO")
                .HasComment("0 - Gasto directo. 1 - Gasto indistinto. Utilizado para la clasificacion de libro de compra.");

            entity.Property(e => e.TipoJuridico).HasColumnName("TIPO_JURIDICO");

            entity.Property(e => e.TipoNacionalidad)
                .HasColumnName("TIPO_NACIONALIDAD")
                .HasComment("0 - Nacional 1 - Extranjero");

            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("URL");

            entity.Property(e => e.VencimientoContrato)
                .HasColumnType("date")
                .HasColumnName("VENCIMIENTO_CONTRATO");

            entity.Property(e => e.Vendedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VENDEDOR");

            entity.Property(e => e.Verificado).HasColumnName("VERIFICADO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Proveedors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Proveedors)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_CIUDAD");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.Proveedors)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK__PROVEEDOR__CUENTA_CORRIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Proveedors)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProveedorAccionistum>(entity =>
        {
            entity.HasKey(e => e.IdProveedorAccionista);

            entity.ToTable("PROVEEDOR_ACCIONISTA", "dbo");

            entity.Property(e => e.IdProveedorAccionista).HasColumnName("ID_PROVEEDOR_ACCIONISTA");

            entity.Property(e => e.DescripcionCargo)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARGO");

            entity.Property(e => e.FuncionarioPropietario)
                .HasColumnName("FUNCIONARIO_PROPIETARIO")
                .HasComment("ID_FUNCIONARIO");

            entity.Property(e => e.FuncionarioRepresentante)
                .HasColumnName("FUNCIONARIO_REPRESENTANTE")
                .HasComment("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.MujerCargoEjecutivo).HasColumnName("MUJER_CARGO_EJECUTIVO");

            entity.Property(e => e.NombrePropietario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_PROPIETARIO");

            entity.Property(e => e.NombreRepresentante)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_REPRESENTANTE");

            entity.Property(e => e.PorcParticipacion)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PORC_PARTICIPACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SexoPropietario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SEXO_PROPIETARIO")
                .IsFixedLength();

            entity.Property(e => e.SexoRepresentante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SEXO_REPRESENTANTE")
                .IsFixedLength();

            entity.Property(e => e.VinculoFamiliar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("VINCULO_FAMILIAR");
        });

        modelBuilder.Entity<ProveedorClase>(entity =>
        {
            entity.HasKey(e => e.IdProveedorClase);

            entity.ToTable("PROVEEDOR_CLASE", "dbo");

            entity.Property(e => e.IdProveedorClase).HasColumnName("ID_PROVEEDOR_CLASE");

            entity.Property(e => e.IdClase).HasColumnName("ID_CLASE");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClaseNavigation)
                .WithMany(p => p.ProveedorClases)
                .HasForeignKey(d => d.IdClase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_CLASE_CLASE");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.ProveedorClases)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_CLASE_PLAN_CUENTA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ProveedorClases)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_CLASE_PROVEEDOR");
        });

        modelBuilder.Entity<ProveedorCliente>(entity =>
        {
            entity.HasKey(e => e.IdProveedorCliente);

            entity.ToTable("PROVEEDOR_CLIENTE", "dbo");

            entity.Property(e => e.IdProveedorCliente).HasColumnName("ID_PROVEEDOR_CLIENTE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ProveedorClientes)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_PROVEEDOR_CLIENTE_CLIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ProveedorClientes)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_PROVEEDOR_CLIENTE_PROVEEDOR");
        });

        modelBuilder.Entity<ProveedorContacto>(entity =>
        {
            entity.HasKey(e => e.IdProveedorContacto);

            entity.ToTable("PROVEEDOR_CONTACTO", "dbo");

            entity.Property(e => e.IdProveedorContacto).HasColumnName("ID_PROVEEDOR_CONTACTO");

            entity.Property(e => e.Celular)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Nombre)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<ProveedorCuentum>(entity =>
        {
            entity.HasKey(e => e.IdProveedorCuenta);

            entity.ToTable("PROVEEDOR_CUENTA", "dbo");

            entity.Property(e => e.IdProveedorCuenta).HasColumnName("ID_PROVEEDOR_CUENTA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdEntidadFinanciera).HasColumnName("ID_ENTIDAD_FINANCIERA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NroCuenta).HasColumnName("NRO_CUENTA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoCuenta).HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.Titular)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.ProveedorCuenta)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .HasConstraintName("FK_PROVEEDOR_CUENTA_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdEntidadFinancieraNavigation)
                .WithMany(p => p.ProveedorCuenta)
                .HasForeignKey(d => d.IdEntidadFinanciera)
                .HasConstraintName("FK_PROVEEDOR_CUENTA_ENTIDAD_FINANCIERA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ProveedorCuenta)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_PROVEEDOR_CUENTA_PROVEEDOR");
        });

        modelBuilder.Entity<ProveedorRefComercial>(entity =>
        {
            entity.HasKey(e => e.IdProveedorRefComercial);

            entity.ToTable("PROVEEDOR_REF_COMERCIAL", "dbo");

            entity.Property(e => e.IdProveedorRefComercial).HasColumnName("ID_PROVEEDOR_REF_COMERCIAL");

            entity.Property(e => e.Cargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Contacto)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Nombre)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Telefono)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<ProveedorTasa>(entity =>
        {
            entity.HasKey(e => e.IdProveedorTasa);

            entity.ToTable("PROVEEDOR_TASA", "dbo");

            entity.Property(e => e.IdProveedorTasa).HasColumnName("ID_PROVEEDOR_TASA");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("date")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tasa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TASA");
        });

        modelBuilder.Entity<ProveedorTimbrado>(entity =>
        {
            entity.HasKey(e => e.IdProveedorTimbrado)
                .HasName("PK_FORNECEDORES_TIMBRADO");

            entity.ToTable("PROVEEDOR_TIMBRADO", "dbo");

            entity.HasIndex(e => new { e.IdProveedor, e.Timbrado, e.Tipo }, "UK_PROVEEDOR_TIMBRADO")
                .IsUnique();

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0=FACTURA,1=NOTA DE CREDITO,2=NOTA DE DEBITO,3=RETENCION,4=AUTOFACTURA");

            entity.Property(e => e.TipoEmision).HasColumnName("TIPO_EMISION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ProveedorTimbrados)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVEEDOR_TIMBRADO_PROVEEDOR");
        });

        modelBuilder.Entity<ProvisionFlete>(entity =>
        {
            entity.HasKey(e => e.IdProvisionFlete);

            entity.ToTable("PROVISION_FLETE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_PROVISION_FLETE")
                .IsUnique();

            entity.Property(e => e.IdProvisionFlete).HasColumnName("ID_PROVISION_FLETE");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Crt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CRT");

            entity.Property(e => e.DocFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOC_FECHA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.Iva10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_10");

            entity.Property(e => e.Iva5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ProvisionFletes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVISION_FLETE_EMPRESA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ProvisionFletes)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_PROVISION_FLETE_PROVEEDOR");

            entity.HasOne(d => d.IdProveedorTimbradoNavigation)
                .WithMany(p => p.ProvisionFletes)
                .HasForeignKey(d => d.IdProveedorTimbrado)
                .HasConstraintName("FK_PROVISION_FLETE_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.ProvisionFletes)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_PROVISION_FLETE_TRANSPORTADORA");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ProvisionFletes)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_PROVISION_FLETE_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ProvisionFletes)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_PROVISION_FLETE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ProvisionFleteDet>(entity =>
        {
            entity.HasKey(e => e.IdProvisionFleteDet);

            entity.ToTable("PROVISION_FLETE_DET", "dbo");

            entity.Property(e => e.IdProvisionFleteDet).HasColumnName("ID_PROVISION_FLETE_DET");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdProvisionFlete).HasColumnName("ID_PROVISION_FLETE");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdProvisionFleteNavigation)
                .WithMany(p => p.ProvisionFleteDets)
                .HasForeignKey(d => d.IdProvisionFlete)
                .HasConstraintName("FK_PROVISION_FLETE_DET_PROVISION_FLETE");
        });

        modelBuilder.Entity<ProvisionFleteDoc>(entity =>
        {
            entity.HasKey(e => e.IdProvisionFleteDoc);

            entity.ToTable("PROVISION_FLETE_DOC", "dbo");

            entity.Property(e => e.IdProvisionFleteDoc).HasColumnName("ID_PROVISION_FLETE_DOC");

            entity.Property(e => e.Diferencia)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DIFERENCIA");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdProvisionFlete).HasColumnName("ID_PROVISION_FLETE");

            entity.Property(e => e.PesoEnviado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_ENVIADO");

            entity.Property(e => e.PesoRecibido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_RECIBIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorDescontadoGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCONTADO_GS");

            entity.Property(e => e.ValorDescontadoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCONTADO_US");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorMercado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_MERCADO");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.ProvisionFleteDocs)
                .HasForeignKey(d => d.IdCompraExterior)
                .HasConstraintName("FK_PROVISION_FLETE_DOC_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.ProvisionFleteDocs)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .HasConstraintName("FK_PROVISION_FLETE_DOC_FACTURA_CRECON");

            entity.HasOne(d => d.IdNotaEnvioNavigation)
                .WithMany(p => p.ProvisionFleteDocs)
                .HasForeignKey(d => d.IdNotaEnvio)
                .HasConstraintName("FK_PROVISION_FLETE_DOC_NOTA_ENVIO");

            entity.HasOne(d => d.IdNotaRemisionNavigation)
                .WithMany(p => p.ProvisionFleteDocs)
                .HasForeignKey(d => d.IdNotaRemision)
                .HasConstraintName("FK_PROVISION_FLETE_DOC_NOTA_REMISION");

            entity.HasOne(d => d.IdProvisionFleteNavigation)
                .WithMany(p => p.ProvisionFleteDocs)
                .HasForeignKey(d => d.IdProvisionFlete)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROVISION_FLETE_DOC_PROVISION_FLETE");
        });

        modelBuilder.Entity<Puerto>(entity =>
        {
            entity.HasKey(e => e.IdPuerto);

            entity.ToTable("PUERTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_PUERTO")
                .IsUnique();

            entity.Property(e => e.IdPuerto).HasColumnName("ID_PUERTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Puertos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUERTO_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.Puertos)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUERTO_CIUDAD");
        });

        modelBuilder.Entity<QuejaSugerencium>(entity =>
        {
            entity.HasKey(e => e.IdQuejaSugerencia);

            entity.ToTable("QUEJA_SUGERENCIA", "dbo");

            entity.Property(e => e.IdQuejaSugerencia).HasColumnName("ID_QUEJA_SUGERENCIA");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RespCorreo).HasColumnName("RESP_CORREO");

            entity.Property(e => e.RespPersona).HasColumnName("RESP_PERSONA");

            entity.Property(e => e.Solucion)
                .IsUnicode(false)
                .HasColumnName("SOLUCION");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<QuiebraSobra>(entity =>
        {
            entity.HasKey(e => e.IdQuiebraSobra);

            entity.ToTable("QUIEBRA_SOBRA", "dbo");

            entity.HasIndex(e => new { e.Remision, e.IdCliente, e.TipoRemision, e.Empresa, e.RegStatus }, "IDX_CONTROL_ENVIO_REMISION");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_QUIEBRA_SOBRA")
                .IsUnique();

            entity.Property(e => e.IdQuiebraSobra).HasColumnName("ID_QUIEBRA_SOBRA");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Diferencia)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DIFERENCIA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.PesoLlegada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_LLEGADA");

            entity.Property(e => e.PesoSalida)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_SALIDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remision)
                .HasColumnName("REMISION")
                .HasComment("ID_NOTA_REMISION o ID_NOTA_REMISION_EXPORTACION");

            entity.Property(e => e.TipoRemision)
                .HasColumnName("TIPO_REMISION")
                .HasComment("0:Interna; 1:Externa");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.QuiebraSobras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QUIEBRA_SOBRA_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.QuiebraSobras)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QUIEBRA_SOBRA_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.QuiebraSobras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QUIEBRA_SOBRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RecepEnvio>(entity =>
        {
            entity.HasKey(e => e.IdRecepEnvio);

            entity.ToTable("RECEP_ENVIO", "dbo");

            entity.HasIndex(e => new { e.IdNotaEnvio, e.Empresa }, "IDX_ID_NOTA_ENVIO_EMPRESA");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdNotaEnvio }, "UK_RECEP_ENVIO")
                .IsUnique();

            entity.Property(e => e.IdRecepEnvio).HasColumnName("ID_RECEP_ENVIO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaLlegada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LLEGADA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdDepositoDestino).HasColumnName("ID_DEPOSITO_DESTINO");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RecepEnvios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECEP_ENVIO_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.RecepEnvios)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_RECEP_ENVIO_CHOFER");

            entity.HasOne(d => d.IdDepositoDestinoNavigation)
                .WithMany(p => p.RecepEnvios)
                .HasForeignKey(d => d.IdDepositoDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECEP_ENVIO_DEPOSITO");

            entity.HasOne(d => d.IdNotaEnvioNavigation)
                .WithMany(p => p.RecepEnvios)
                .HasForeignKey(d => d.IdNotaEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECEP_ENVIO_NOTA_ENVIO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.RecepEnvios)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_RECEP_ENVIO_TRANSPORTADORA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RecepEnvios)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_RECEP_ENVIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RecepEnvioProducto>(entity =>
        {
            entity.HasKey(e => e.IdRecepEnvioProducto);

            entity.ToTable("RECEP_ENVIO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdRecepEnvio, e.IdProducto, e.IdLote }, "IDX_ID_RECEP_ENVIO_ID_PRODUCTO_ID_LOTE");

            entity.HasIndex(e => new { e.IdProducto, e.RegStatus }, "IDX_STOCK_VENCIMIENTO");

            entity.Property(e => e.IdRecepEnvioProducto).HasColumnName("ID_RECEP_ENVIO_PRODUCTO");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.ArdidoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_DESCONTADO");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.AveriadoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_DESCONTADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.HumedadDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_DESCONTADA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRecepEnvio).HasColumnName("ID_RECEP_ENVIO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.ImpurezaDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_DESCONTADA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.ModoPesoBruto).HasColumnName("MODO_PESO_BRUTO");

            entity.Property(e => e.ModoPesoTara).HasColumnName("MODO_PESO_TARA");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoBrutoFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_BRUTO_FECHA");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PesoTaraFecha)
                .HasColumnType("datetime")
                .HasColumnName("PESO_TARA_FECHA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PHE");

            entity.Property(e => e.PheDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_DESCONTADO");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.QuebradoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_DESCONTADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VERDOSO");

            entity.Property(e => e.VerdosoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_DESCONTADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.RecepEnvioProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_RECEP_ENVIO_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.RecepEnvioProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECEP_ENVIO_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdRecepEnvioNavigation)
                .WithMany(p => p.RecepEnvioProductos)
                .HasForeignKey(d => d.IdRecepEnvio)
                .HasConstraintName("FK_RECEP_ENVIO_PRODUCTO_RECEP_ENVIO");
        });

        modelBuilder.Entity<Recibir>(entity =>
        {
            entity.HasKey(e => e.IdRecibir);

            entity.ToTable("RECIBIR", "dbo");

            entity.HasIndex(e => new { e.IdTabla, e.RefLanzamiento, e.IdCliente, e.RegStatus, e.Empresa }, "IDX_LISTADO_RECIBOS");

            entity.HasIndex(e => new { e.Empresa, e.Pedido, e.Factura, e.IdCliente, e.Unidad, e.IdTimbrado, e.Serie, e.RegStatus }, "IDX_L_CUENTA_RECIBIR");

            entity.HasIndex(e => new { e.Empresa, e.Fecha, e.IdCliente, e.Pedido, e.Nota, e.IdTimbrado, e.Factura, e.Serie }, "IDX_V_COMISION_VENDEDOR_T1");

            entity.Property(e => e.IdRecibir).HasColumnName("ID_RECIBIR");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COBRO");

            entity.Property(e => e.Cor1Data)
                .HasColumnType("datetime")
                .HasColumnName("COR1_DATA");

            entity.Property(e => e.Cor1Taxa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TAXA");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion).HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaLegal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("FACTURA_LEGAL");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.Garantia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("GARANTIA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCarpetaOrig).HasColumnName("ID_CARPETA_ORIG");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdMoneda).HasColumnName("ID_MONEDA");

            entity.Property(e => e.IdPagare).HasColumnName("ID_PAGARE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionTi)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_TI");

            entity.Property(e => e.Original)
                .HasColumnType("datetime")
                .HasColumnName("ORIGINAL");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE")
                .IsFixedLength();

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_RECIBIR_CARPETA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_CLIENTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_RECIBIR_CULTIVO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_RECIBIR_TABLA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_RECIBIR_TIMBRADO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_RECIBIR_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_RECIBIR_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Recibirs)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_RECIBIR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RecibirCobro>(entity =>
        {
            entity.HasKey(e => e.IdRecibirCobro);

            entity.ToTable("RECIBIR_COBRO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_RECIBIR_COBRO")
                .IsUnique();

            entity.Property(e => e.IdRecibirCobro).HasColumnName("ID_RECIBIR_COBRO");

            entity.Property(e => e.Aprobado).HasColumnName("APROBADO");

            entity.Property(e => e.ChequeBanco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_BANCO");

            entity.Property(e => e.ChequeEmision)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_EMISION");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.ChequeTitular)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_TITULAR");

            entity.Property(e => e.Concepto)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaInteres)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INTERES");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.IdUsuarioAprobador).HasColumnName("ID_USUARIO_APROBADOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.ObsRechazo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBS_RECHAZO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Rechazado).HasColumnName("RECHAZADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Retencion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.RecibirCobros)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_CLIENTE");

            entity.HasOne(d => d.IdCuentaCorrienteNavigation)
                .WithMany(p => p.RecibirCobros)
                .HasForeignKey(d => d.IdCuentaCorriente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_CUENTA_CORRIENTE");

            entity.HasOne(d => d.IdReciboNavigation)
                .WithMany(p => p.RecibirCobros)
                .HasForeignKey(d => d.IdRecibo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_RECIBO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RecibirCobros)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_RECIBIR_COBRO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RecibirCobroFactura>(entity =>
        {
            entity.HasKey(e => e.IdRecibirCobroFactura);

            entity.ToTable("RECIBIR_COBRO_FACTURA", "dbo");

            entity.Property(e => e.IdRecibirCobroFactura).HasColumnName("ID_RECIBIR_COBRO_FACTURA");

            entity.Property(e => e.Especie)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ESPECIE");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdRecibirCobro).HasColumnName("ID_RECIBIR_COBRO");

            entity.Property(e => e.IdRecibirCobroRecibo).HasColumnName("ID_RECIBIR_COBRO_RECIBO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SerieFactura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE_FACTURA");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorCorregido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO");

            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO");

            entity.Property(e => e.ValorInteres)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES");

            entity.Property(e => e.ValorOriginal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL");

            entity.Property(e => e.ValorRecibido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_RECIBIDO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.RecibirCobroFacturas)
                .HasForeignKey(d => d.IdCarpeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_FACTURA_CARPETA");

            entity.HasOne(d => d.IdRecibirCobroNavigation)
                .WithMany(p => p.RecibirCobroFacturas)
                .HasForeignKey(d => d.IdRecibirCobro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_FACTURA_RECIBIR_COBRO");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.RecibirCobroFacturas)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_RECIBIR_COBRO_FACTURA_TIMBRADO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.RecibirCobroFacturas)
                .HasForeignKey(d => d.IdVendedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_FACTURA_VENDEDOR");
        });

        modelBuilder.Entity<RecibirCobroFormaCobro>(entity =>
        {
            entity.HasKey(e => e.IdRecibirCobroFc);

            entity.ToTable("RECIBIR_COBRO_FORMA_COBRO", "dbo");

            entity.Property(e => e.IdRecibirCobroFc).HasColumnName("ID_RECIBIR_COBRO_FC");

            entity.Property(e => e.Banco)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.ChequeEmision)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_EMISION");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FormaCobro).HasColumnName("FORMA_COBRO");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdRecibirCobro).HasColumnName("ID_RECIBIR_COBRO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.Tercero).HasColumnName("TERCERO");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");
        });

        modelBuilder.Entity<RecibirCobroRecibo>(entity =>
        {
            entity.HasKey(e => e.IdRecibirCobroRecibo);

            entity.ToTable("RECIBIR_COBRO_RECIBO", "dbo");

            entity.HasIndex(e => new { e.IdRecibo, e.IdCliente, e.RegStatus, e.Empresa }, "IDX_LISTADO_RECIBOS");

            entity.Property(e => e.IdRecibirCobroRecibo).HasColumnName("ID_RECIBIR_COBRO_RECIBO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdRecibirCobro).HasColumnName("ID_RECIBIR_COBRO");

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RecibirCobroRecibos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_RECIBIR_COBRO_RECIBO_EMPRESA");

            entity.HasOne(d => d.IdRecibirCobroNavigation)
                .WithMany(p => p.RecibirCobroRecibos)
                .HasForeignKey(d => d.IdRecibirCobro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_RECIBO_RECIBIR_COBRO");

            entity.HasOne(d => d.IdReciboNavigation)
                .WithMany(p => p.RecibirCobroRecibos)
                .HasForeignKey(d => d.IdRecibo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBIR_COBRO_RECIBO_RECIBO");
        });

        modelBuilder.Entity<Recibo>(entity =>
        {
            entity.HasKey(e => e.IdRecibo);

            entity.ToTable("RECIBO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_RECIBO")
                .IsUnique();

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.CalculoComision)
                .HasColumnName("CALCULO_COMISION")
                .HasComment("0 - no se tiene en cuenta comisiones. 1 - se tiene en cuenta comisiones.");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FormaPago).HasColumnName("FORMA_PAGO");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.Recibos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Recibos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ReciboAdelanto>(entity =>
        {
            entity.HasKey(e => e.IdReciboAdelanto);

            entity.ToTable("RECIBO_ADELANTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdCliente, e.IdContratoCompra, e.Aprobador }, "UK_RECIBO_ADELANTO")
                .IsUnique();

            entity.Property(e => e.IdReciboAdelanto).HasColumnName("ID_RECIBO_ADELANTO");

            entity.Property(e => e.AnalisisCredito)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_CREDITO");

            entity.Property(e => e.AnalisisCreditoFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_CREDITO_FECHA");

            entity.Property(e => e.AnalisisCreditoUsuario).HasColumnName("ANALISIS_CREDITO_USUARIO");

            entity.Property(e => e.AnalisisGerencia)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_GERENCIA");

            entity.Property(e => e.AnalisisGerenciaFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_GERENCIA_FECHA");

            entity.Property(e => e.AnalisisGerenciaUsuario).HasColumnName("ANALISIS_GERENCIA_USUARIO");

            entity.Property(e => e.AnalisisJefe)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_JEFE");

            entity.Property(e => e.AnalisisJefeFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_JEFE_FECHA");

            entity.Property(e => e.AnalisisJefeUsuario).HasColumnName("ANALISIS_JEFE_USUARIO");

            entity.Property(e => e.Aprobador).HasColumnName("APROBADOR");

            entity.Property(e => e.AprobadorContable).HasColumnName("APROBADOR_CONTABLE");

            entity.Property(e => e.BancoSolicitado)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("BANCO_SOLICITADO");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.ClaveContable)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE_CONTABLE");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EnvioSucursal)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("ENVIO_SUCURSAL");

            entity.Property(e => e.FacturaFecha)
                .HasColumnType("datetime")
                .HasColumnName("FACTURA_FECHA");

            entity.Property(e => e.FacturaMonto)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("FACTURA_MONTO");

            entity.Property(e => e.FacturaNro)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("FACTURA_NRO");

            entity.Property(e => e.FacturaTimbrado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA_TIMBRADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaPrevision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PREVISION");

            entity.Property(e => e.FormaPago).HasColumnName("FORMA_PAGO");

            entity.Property(e => e.HistoricoAtraso)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_ATRASO");

            entity.Property(e => e.HistoricoGranos)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_GRANOS");

            entity.Property(e => e.HistoricoInsumo)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_INSUMO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.SituacionCuenta)
                .IsUnicode(false)
                .HasColumnName("SITUACION_CUENTA");

            entity.Property(e => e.Tasa)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("TASA");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.AnalisisCreditoUsuarioNavigation)
                .WithMany(p => p.ReciboAdelantoAnalisisCreditoUsuarioNavigations)
                .HasForeignKey(d => d.AnalisisCreditoUsuario)
                .HasConstraintName("FK_RECIBO_ADELANTO_USUARIO1");

            entity.HasOne(d => d.AnalisisGerenciaUsuarioNavigation)
                .WithMany(p => p.ReciboAdelantoAnalisisGerenciaUsuarioNavigations)
                .HasForeignKey(d => d.AnalisisGerenciaUsuario)
                .HasConstraintName("FK_RECIBO_ADELANTO_USUARIO2");

            entity.HasOne(d => d.AprobadorNavigation)
                .WithMany(p => p.ReciboAdelantoAprobadorNavigations)
                .HasForeignKey(d => d.Aprobador)
                .HasConstraintName("FK_RECIBO_ADELANTO_USUARIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_ADELANTO_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_ADELANTO_CLIENTE");

            entity.HasOne(d => d.IdContratoCompraNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.IdContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_ADELANTO_CONTRATO_COMPRA");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_RECIBO_ADELANTO_CULTIVO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_RECIBO_ADELANTO_PROVEEDOR");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_RECIBO_ADELANTO_VENDEDOR");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ReciboAdelantos)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_RECIBO_ADELANTO_ZAFRA");
        });

        modelBuilder.Entity<ReciboCheque>(entity =>
        {
            entity.HasKey(e => e.IdReciboCheque);

            entity.ToTable("RECIBO_CHEQUE", "dbo");

            entity.Property(e => e.IdReciboCheque).HasColumnName("ID_RECIBO_CHEQUE");

            entity.Property(e => e.BancoEmisor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BANCO_EMISOR");

            entity.Property(e => e.FechaDiferido)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DIFERIDO");

            entity.Property(e => e.FechaPago)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PAGO");

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Numero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdReciboNavigation)
                .WithMany(p => p.ReciboCheques)
                .HasForeignKey(d => d.IdRecibo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_CHEQUE_RECIBO");
        });

        modelBuilder.Entity<ReciboFactura>(entity =>
        {
            entity.HasKey(e => e.IdReciboFactura);

            entity.ToTable("RECIBO_FACTURA", "dbo");

            entity.Property(e => e.IdReciboFactura).HasColumnName("ID_RECIBO_FACTURA");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CobroGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COBRO_GUARANI");

            entity.Property(e => e.Detalle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DETALLE");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdContratoCompraLiqFactura).HasColumnName("ID_CONTRATO_COMPRA_LIQ_FACTURA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SaldoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALDO_GUARANI");

            entity.Property(e => e.SerieFactura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE_FACTURA");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdReciboNavigation)
                .WithMany(p => p.ReciboFacturas)
                .HasForeignKey(d => d.IdRecibo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_FACTURA_RECIBO");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.ReciboFacturas)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_RECIBO_FACTURA_TIMBRADO");
        });

        modelBuilder.Entity<ReciboRetencion>(entity =>
        {
            entity.HasKey(e => e.IdReciboRetencion);

            entity.ToTable("RECIBO_RETENCION", "dbo");

            entity.Property(e => e.IdReciboRetencion).HasColumnName("ID_RECIBO_RETENCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdRecibo).HasColumnName("ID_RECIBO");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Timbrado).HasColumnName("TIMBRADO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.HasOne(d => d.IdReciboNavigation)
                .WithMany(p => p.ReciboRetencions)
                .HasForeignKey(d => d.IdRecibo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RECIBO_RETENCION_RECIBO");
        });

        modelBuilder.Entity<RegClaseClaseusoDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_CLASE_CLASEUSO_DET", "dbo");

            entity.Property(e => e.IdRegClaseClaseusoDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_CLASE_CLASEUSO_DET");

            entity.Property(e => e.IdRegClaseMarca).HasColumnName("ID_REG_CLASE_MARCA");

            entity.Property(e => e.IdRegClaseUso).HasColumnName("ID_REG_CLASE_USO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");

            entity.Property(e => e.Vigencia)
                .HasColumnType("datetime")
                .HasColumnName("VIGENCIA");
        });

        modelBuilder.Entity<RegClaseMarca>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_CLASE_MARCA", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoClase).HasColumnName("ESTADO_CLASE");

            entity.Property(e => e.IdRegClaseMarca)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_CLASE_MARCA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<RegClaseUso>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_CLASE_USO", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoClaseUso).HasColumnName("ESTADO_CLASE_USO");

            entity.Property(e => e.IdRegClaseUso)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_CLASE_USO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<RegEstadoMarca>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_ESTADO_MARCA", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRegEstadoMarca)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_ESTADO_MARCA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<RegMarca>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MARCA", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Composicion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMPOSICION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRegEstadoMarca).HasColumnName("ID_REG_ESTADO_MARCA");

            entity.Property(e => e.IdRegMarca)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMovEstado).HasColumnName("ID_REG_MOV_ESTADO");

            entity.Property(e => e.IdSolicitudProceso).HasColumnName("ID_SOLICITUD_PROCESO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<RegMarcaClaseDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MARCA_CLASE_DET", "dbo");

            entity.Property(e => e.IdRegClaseMarca).HasColumnName("ID_REG_CLASE_MARCA");

            entity.Property(e => e.IdRegClaseUso).HasColumnName("ID_REG_CLASE_USO");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMarcaClaDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MARCA_CLA_DET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<RegMarcaDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MARCA_DET", "dbo");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.FechaVecimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VECIMIENTO");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMarcaDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MARCA_DET");

            entity.Property(e => e.NroRegistro).HasColumnName("NRO_REGISTRO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoOperacion).HasColumnName("TIPO_OPERACION");
        });

        modelBuilder.Entity<RegMarcaLogo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MARCA_LOGO", "dbo");

            entity.Property(e => e.DescripcionArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ARCHIVO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMarcaLogo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MARCA_LOGO");

            entity.Property(e => e.PathArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PATH_ARCHIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoArchivo).HasColumnName("TIPO_ARCHIVO");
        });

        modelBuilder.Entity<RegMarcaOp>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MARCA_OP", "dbo");

            entity.Property(e => e.Composicion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMPOSICION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.FechaOperacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_OPERACION");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.IdRegEstadoMarca).HasColumnName("ID_REG_ESTADO_MARCA");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMarcaOp)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MARCA_OP");

            entity.Property(e => e.IdRegMovEstado).HasColumnName("ID_REG_MOV_ESTADO");

            entity.Property(e => e.IdRegSituacion).HasColumnName("ID_REG_SITUACION");

            entity.Property(e => e.IdRegSolicitudProceso).HasColumnName("ID_REG_SOLICITUD_PROCESO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NombreEmpresa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_EMPRESA");

            entity.Property(e => e.NroRegistro).HasColumnName("NRO_REGISTRO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pendiente).HasColumnName("PENDIENTE");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegSituacionAnt).HasColumnName("REG_SITUACION_ANT");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<RegMarcaOpDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MARCA_OP_DET", "dbo");

            entity.Property(e => e.DescripcionArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ARCHIVO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdRegMarcaOp).HasColumnName("ID_REG_MARCA_OP");

            entity.Property(e => e.IdRegMarcaOpDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MARCA_OP_DET");

            entity.Property(e => e.PathArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PATH_ARCHIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoArchivo).HasColumnName("TIPO_ARCHIVO");
        });

        modelBuilder.Entity<RegMovEstado>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MOV_ESTADO", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRegMovEstado)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MOV_ESTADO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<RegMovimiento>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_MOVIMIENTO", "dbo");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaMovimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_MOVIMIENTO");

            entity.Property(e => e.IdMarcaOp).HasColumnName("ID_MARCA_OP");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMovimiento)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_MOVIMIENTO");

            entity.Property(e => e.IdRegSituacion).HasColumnName("ID_REG_SITUACION");

            entity.Property(e => e.IdRegSituacionAnt).HasColumnName("ID_REG_SITUACION_ANT");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<RegSituacionMarca>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_SITUACION_MARCA", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoSituacion).HasColumnName("ESTADO_SITUACION");

            entity.Property(e => e.IdRegSituacion)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_SITUACION");

            entity.Property(e => e.Observacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<RegSolicitudProCla>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_SOLICITUD_PRO_CLA", "dbo");

            entity.Property(e => e.IdRegClaseMarca).HasColumnName("ID_REG_CLASE_MARCA");

            entity.Property(e => e.IdRegClaseUso).HasColumnName("ID_REG_CLASE_USO");

            entity.Property(e => e.IdRegSolProClase)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_SOL_PRO_CLASE");

            entity.Property(e => e.IdRegSolicitudPro).HasColumnName("ID_REG_SOLICITUD_PRO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<RegSolicitudProLogo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_SOLICITUD_PRO_LOGO", "dbo");

            entity.Property(e => e.DescripcionArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ARCHIVO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdRegSolProLogo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_SOL_PRO_LOGO");

            entity.Property(e => e.IdRegSolicitudPro).HasColumnName("ID_REG_SOLICITUD_PRO");

            entity.Property(e => e.PathArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PATH_ARCHIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoArchivo).HasColumnName("TIPO_ARCHIVO");
        });

        modelBuilder.Entity<RegSolicitudProceso>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("REG_SOLICITUD_PROCESO", "dbo");

            entity.Property(e => e.Composicion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("COMPOSICION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaSolicitud)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SOLICITUD");

            entity.Property(e => e.IdRegEstadoMarca).HasColumnName("ID_REG_ESTADO_MARCA");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.IdRegMarcaOp).HasColumnName("ID_REG_MARCA_OP");

            entity.Property(e => e.IdRegMovEstado).HasColumnName("ID_REG_MOV_ESTADO");

            entity.Property(e => e.IdRegSituacion).HasColumnName("ID_REG_SITUACION");

            entity.Property(e => e.IdRegSolicitudProceso)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_REG_SOLICITUD_PROCESO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pendiente).HasColumnName("PENDIENTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.IdRegion)
                .HasName("PK_REGIOES");

            entity.ToTable("REGION", "dbo");

            entity.Property(e => e.IdRegion)
                .ValueGeneratedNever()
                .HasColumnName("ID_REGION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Regions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REGION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Reloj>(entity =>
        {
            entity.HasKey(e => e.IdReloj);

            entity.ToTable("RELOJ", "dbo");

            entity.HasIndex(e => new { e.IdFuncionario, e.Fecha, e.Hora }, "IDX_RELOJ_ID_FUNCIONARIO_FECHA_HORA");

            entity.Property(e => e.IdReloj).HasColumnName("ID_RELOJ");

            entity.Property(e => e.Amonestacion)
                .HasColumnName("AMONESTACION")
                .HasComment("0 = No tiene. 1 = Tiene amonestacion.");

            entity.Property(e => e.Ausencia)
                .HasColumnName("AUSENCIA")
                .HasComment("0 = No tiene. 1 = Tiene ausencia.");

            entity.Property(e => e.CantDescontar).HasColumnName("CANT_DESCONTAR");

            entity.Property(e => e.CantHe100).HasColumnName("CANT_HE100");

            entity.Property(e => e.CantHe130).HasColumnName("CANT_HE130");

            entity.Property(e => e.CantHe30).HasColumnName("CANT_HE30");

            entity.Property(e => e.CantHe50).HasColumnName("CANT_HE50");

            entity.Property(e => e.Descuento)
                .HasColumnName("DESCUENTO")
                .HasComment("0 = No tiene. 1 = Tiene descuento.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Eys)
                .HasColumnName("EYS")
                .HasComment("0 = Entrada, 1 = Salida.");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.He100).HasColumnName("HE100");

            entity.Property(e => e.He130).HasColumnName("HE130");

            entity.Property(e => e.He30).HasColumnName("HE30");

            entity.Property(e => e.He50).HasColumnName("HE50");

            entity.Property(e => e.Hora)
                .HasColumnType("datetime")
                .HasColumnName("HORA");

            entity.Property(e => e.Horasextras).HasColumnName("HORASEXTRAS");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdTipoAusencia).HasColumnName("ID_TIPO_AUSENCIA");

            entity.Property(e => e.IdTurno).HasColumnName("ID_TURNO");

            entity.Property(e => e.Llegadatardia)
                .HasColumnName("LLEGADATARDIA")
                .HasComment("0 = No tiene. 1 = Tiene llegada tardia.");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Relojs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RELOJ_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.Relojs)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RELOJ_FUNCIONARIO");

            entity.HasOne(d => d.IdTipoAusenciaNavigation)
                .WithMany(p => p.Relojs)
                .HasForeignKey(d => d.IdTipoAusencia)
                .HasConstraintName("FK_RELOJ_TIPO_AUSENCIA");

            entity.HasOne(d => d.IdTurnoNavigation)
                .WithMany(p => p.Relojs)
                .HasForeignKey(d => d.IdTurno)
                .HasConstraintName("FK_RELOJ_TURNO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Relojs)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_RELOJ_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RemesaTercero>(entity =>
        {
            entity.HasKey(e => e.IdRemesaTercero);

            entity.ToTable("REMESA_TERCERO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_REMESA_TERCERO")
                .IsUnique();

            entity.Property(e => e.IdRemesaTercero).HasColumnName("ID_REMESA_TERCERO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.DepositoEntrada).HasColumnName("DEPOSITO_ENTRADA");

            entity.Property(e => e.DepositoSalida).HasColumnName("DEPOSITO_SALIDA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Numero)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RemesaTerceros)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMESA_TERCERO_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.RemesaTerceros)
                .HasForeignKey(d => d.IdChofer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMESA_TERCERO_CHOFER");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.RemesaTerceros)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMESA_TERCERO_PROVEEDOR");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.RemesaTerceros)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_REMESA_TERCERO_TRANSPORTADORA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.RemesaTerceroIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_REMESA_TERCERO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.RemesaTerceros)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_REMESA_TERCERO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RemesaTerceroRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_REMESA_TERCERO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<RemesaTerceroProducto>(entity =>
        {
            entity.HasKey(e => e.IdRemesaTerceroProducto);

            entity.ToTable("REMESA_TERCERO_PRODUCTO", "dbo");

            entity.Property(e => e.IdRemesaTerceroProducto).HasColumnName("ID_REMESA_TERCERO_PRODUCTO");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.ArdidoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_DESCONTADO");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.AveriadoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_DESCONTADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ConcentracionNominalLote).HasColumnName("CONCENTRACION_NOMINAL_LOTE");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.HumedadDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_DESCONTADA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRemesaTercero).HasColumnName("ID_REMESA_TERCERO");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.ImpurezaDescontada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_DESCONTADA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Otros)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OTROS");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PHE");

            entity.Property(e => e.PheDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_DESCONTADO");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.QuebradoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_DESCONTADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.VencimientoLote)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_LOTE");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VERDOSO");

            entity.Property(e => e.VerdosoDescontado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_DESCONTADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.RemesaTerceroProductos)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_REMESA_TERCERO_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.RemesaTerceroProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMESA_TERCERO_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdRemesaTerceroNavigation)
                .WithMany(p => p.RemesaTerceroProductos)
                .HasForeignKey(d => d.IdRemesaTercero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMESA_TERCERO_PRODUCTO_REMESA_TERCERO");
        });

        modelBuilder.Entity<RemisionCompra>(entity =>
        {
            entity.HasKey(e => e.IdRemisionCompra);

            entity.ToTable("REMISION_COMPRA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_REMISION_COMPRA")
                .IsUnique();

            entity.Property(e => e.IdRemisionCompra).HasColumnName("ID_REMISION_COMPRA");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdPedidoCompra)
                .HasColumnName("ID_PEDIDO_COMPRA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdChofer)
                .HasConstraintName("FK_REMISION_COMPRA_CHOFER");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdCompraExterior)
                .HasConstraintName("FK_REMISION_COMPRA_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdCompraLocalNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdCompraLocal)
                .HasConstraintName("FK_REMISION_COMPRA_COMPRA_LOCAL");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_DEPOSITO");

            entity.HasOne(d => d.IdPedidoCompraNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdPedidoCompra)
                .HasConstraintName("FK_REMISION_COMPRA_PEDIDO_COMPRA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_REMISION_COMPRA_PROVEEDOR");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_REMISION_COMPRA_TRANSPORTADORA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RemisionCompras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RemisionCompraProducto>(entity =>
        {
            entity.HasKey(e => e.IdRemisionCompraProducto);

            entity.ToTable("REMISION_COMPRA_PRODUCTO", "dbo");

            entity.Property(e => e.IdRemisionCompraProducto).HasColumnName("ID_REMISION_COMPRA_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.ConcentracionNominalLote).HasColumnName("CONCENTRACION_NOMINAL_LOTE");

            entity.Property(e => e.CostoCompra).HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial).HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani).HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.IdFabrilLiquidoLavado).HasColumnName("ID_FABRIL_LIQUIDO_LAVADO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRemisionCompra).HasColumnName("ID_REMISION_COMPRA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.VencimientoLote)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_LOTE");

            entity.Property(e => e.VencimientoSemilla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VENCIMIENTO_SEMILLA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.RemisionCompraProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdRemisionCompraNavigation)
                .WithMany(p => p.RemisionCompraProductos)
                .HasForeignKey(d => d.IdRemisionCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_PRODUCTO_REMISION_COMPRA");
        });

        modelBuilder.Entity<RemisionCompraProductoPallet>(entity =>
        {
            entity.HasKey(e => e.IdRemisionCompraProPallet);

            entity.ToTable("REMISION_COMPRA_PRODUCTO_PALLET", "dbo");

            entity.Property(e => e.IdRemisionCompraProPallet).HasColumnName("ID_REMISION_COMPRA_PRO_PALLET");

            entity.Property(e => e.CantidadCalc)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD_CALC");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRemisionCompra).HasColumnName("ID_REMISION_COMPRA");

            entity.Property(e => e.IdRemisionCompraProducto).HasColumnName("ID_REMISION_COMPRA_PRODUCTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.RemisionCompraProductoPallets)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_REMISION_COMPRA_PRODUCTO_PALLET_PRODUCTO");

            entity.HasOne(d => d.IdRemisionCompraNavigation)
                .WithMany(p => p.RemisionCompraProductoPallets)
                .HasForeignKey(d => d.IdRemisionCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_PRODUCTO_PALLET_REMISION_COMPRA");

            entity.HasOne(d => d.IdRemisionCompraProductoNavigation)
                .WithMany(p => p.RemisionCompraProductoPallets)
                .HasForeignKey(d => d.IdRemisionCompraProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REMISION_COMPRA_PRODUCTO_PALLET_REMISION_COMPRA_PRODUCTO");
        });

        modelBuilder.Entity<Rendicion>(entity =>
        {
            entity.HasKey(e => e.IdRendicion);

            entity.ToTable("RENDICION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.IdFuncionario }, "UK_RENDICION")
                .IsUnique();

            entity.Property(e => e.IdRendicion).HasColumnName("ID_RENDICION");

            entity.Property(e => e.Aprobacion).HasColumnName("APROBACION");

            entity.Property(e => e.ConsumoCombustible)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONSUMO_COMBUSTIBLE");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_TOTAL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepartamento)
                .HasColumnName("ID_DEPARTAMENTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MediaComb)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MEDIA_COMB");

            entity.Property(e => e.MontoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_TOTAL");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Recorrido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RECORRIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Rendicions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RENDICION_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.Rendicions)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RENDICION_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Rendicions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RENDICION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RendicionFactura>(entity =>
        {
            entity.HasKey(e => e.IdRendicionFactura);

            entity.ToTable("RENDICION_FACTURA", "dbo");

            entity.HasIndex(e => new { e.IdRendicion, e.Tipo, e.Km, e.RegStatus }, "IDX_RENDICION_GASTOS");

            entity.Property(e => e.IdRendicionFactura).HasColumnName("ID_RENDICION_FACTURA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdRendicion).HasColumnName("ID_RENDICION");

            entity.Property(e => e.Km)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("KM");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Petroflota).HasColumnName("PETROFLOTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.RendicionFacturas)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_RENDICION_FACTURA_PLAN_CUENTA");

            entity.HasOne(d => d.IdRendicionNavigation)
                .WithMany(p => p.RendicionFacturas)
                .HasForeignKey(d => d.IdRendicion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RENDICION_FACTURA_RENDICION");
        });

        modelBuilder.Entity<Requisicion>(entity =>
        {
            entity.HasKey(e => e.IdRequisicion);

            entity.ToTable("REQUISICION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Fecha, e.RegStatus }, "IDX_LISTADO_PERDIDAS");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_REQUISICION")
                .IsUnique();

            entity.Property(e => e.IdRequisicion).HasColumnName("ID_REQUISICION");

            entity.Property(e => e.Aprobado).HasColumnName("APROBADO");

            entity.Property(e => e.Aprobador)
                .HasColumnName("APROBADOR")
                .HasComment("Es el ID del usuario que aprobo.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaRecepcion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RECEPCION");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdDepartamento)
                .HasColumnName("ID_DEPARTAMENTO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Operacion)
                .HasColumnName("OPERACION")
                .HasComment("0: Entrada 1: Salida por perdida, 2: Consumo");

            entity.Property(e => e.Recepcion).HasColumnName("RECEPCION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Senha)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("SENHA");

            entity.Property(e => e.Tipo)
                .HasColumnName("TIPO")
                .HasComment("0: Consumo Interno, 1: Robo, 2: Mortandad, 3:Donacion, 4: Consumo Tercerizado, 5: Consumo Interno Adm, 6: Consumo EPIS, 9: Otro");

            entity.Property(e => e.TipoEpis)
                .HasColumnName("TIPO_EPIS")
                .HasComment("0: Deposito, 1: Desarrollo, 2: Silos, 4: MicroNutrientes, 3: Otros");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REQUISICION_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_REQUISICION_DEPARTAMENTO");

            entity.HasOne(d => d.IdEmpresaCentroCostoNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.IdEmpresaCentroCosto)
                .HasConstraintName("FK_REQUISICION_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_REQUISICION_PROVEEDOR");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REQUISICION_USUARIO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.IdZafra)
                .HasConstraintName("FK_REQUISICION_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Requisicions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_REQUISICION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RequisicionProdEntrega>(entity =>
        {
            entity.HasKey(e => e.IdRequisicionProdEntrega);

            entity.ToTable("REQUISICION_PROD_ENTREGA", "dbo");

            entity.Property(e => e.IdRequisicionProdEntrega).HasColumnName("ID_REQUISICION_PROD_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RequisicionProdEntregas)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_REQUISICION_PROD_ENTREGA_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.RequisicionProdEntregas)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_REQUISICION_PROD_ENTREGA_FUNCIONARIO");
        });

        modelBuilder.Entity<RequisicionProdEntregaDet>(entity =>
        {
            entity.HasKey(e => e.IdRequisicionProdEntregaDet);

            entity.ToTable("REQUISICION_PROD_ENTREGA_DET", "dbo");

            entity.Property(e => e.IdRequisicionProdEntregaDet).HasColumnName("ID_REQUISICION_PROD_ENTREGA_DET");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdRequisicionProdEntrega).HasColumnName("ID_REQUISICION_PROD_ENTREGA");

            entity.Property(e => e.IdRequisicionProducto).HasColumnName("ID_REQUISICION_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<RequisicionProducto>(entity =>
        {
            entity.HasKey(e => e.IdRequisicionProducto);

            entity.ToTable("REQUISICION_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdRequisicion, e.IdDeposito, e.IdProducto, e.IdLote }, "UK_REQUISICION_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdRequisicionProducto).HasColumnName("ID_REQUISICION_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoDolar)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_DOLAR");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.Historico).HasColumnName("HISTORICO");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRequisicion).HasColumnName("ID_REQUISICION");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Kilometraje).HasColumnName("KILOMETRAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SinLote).HasColumnName("SIN_LOTE");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.RequisicionProductos)
                .HasForeignKey(d => d.IdCultivo)
                .HasConstraintName("FK_REQUISICION_PRODUCTO_CULTIVO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.RequisicionProductos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REQUISICION_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.RequisicionProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REQUISICION_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.RequisicionProductos)
                .HasForeignKey(d => d.IdPlanCuenta)
                .HasConstraintName("FK_REQUISICION_PRODUCTO_PLAN_CUENTA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.RequisicionProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REQUISICION_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdRequisicionNavigation)
                .WithMany(p => p.RequisicionProductos)
                .HasForeignKey(d => d.IdRequisicion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REQUISICION_PRODUCTO_REQUISICION");
        });

        modelBuilder.Entity<RetencionManual>(entity =>
        {
            entity.HasKey(e => e.IdRetencionManual);

            entity.ToTable("RETENCION_MANUAL", "dbo");

            entity.Property(e => e.IdRetencionManual).HasColumnName("ID_RETENCION_MANUAL");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaSet)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_SET");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RetencionManuals)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RETENCION_MANUAL_EMPRESA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.RetencionManuals)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RETENCION_MANUAL_PROVEEDOR");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.RetencionManuals)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_RETENCION_MANUAL_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RetencionManuals)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RETENCION_MANUAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RetencionManualDet>(entity =>
        {
            entity.HasKey(e => e.IdRetencionManualDet);

            entity.ToTable("RETENCION_MANUAL_DET", "dbo");

            entity.Property(e => e.IdRetencionManualDet).HasColumnName("ID_RETENCION_MANUAL_DET");

            entity.Property(e => e.BaseImponibleUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BASE_IMPONIBLE_US");

            entity.Property(e => e.ConceptoIva)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO_IVA");

            entity.Property(e => e.ConceptoRenta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO_RENTA");

            entity.Property(e => e.CondicionCompra).HasColumnName("CONDICION_COMPRA");

            entity.Property(e => e.CotizacionSet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION_SET");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.FechaComprobante)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COMPROBANTE");

            entity.Property(e => e.IdRetencionManual).HasColumnName("ID_RETENCION_MANUAL");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_US");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorcentajeIva10).HasColumnName("PORCENTAJE_IVA_10");

            entity.Property(e => e.PorcentajeIva5).HasColumnName("PORCENTAJE_IVA_5");

            entity.Property(e => e.PorcentajeRenta).HasColumnName("PORCENTAJE_RENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RentaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_GUARANI");

            entity.Property(e => e.RentaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_US");

            entity.Property(e => e.RetencionIva).HasColumnName("RETENCION_IVA");

            entity.Property(e => e.RetencionNota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RETENCION_NOTA");

            entity.Property(e => e.RetencionRenta).HasColumnName("RETENCION_RENTA");

            entity.Property(e => e.TipoComprobante).HasColumnName("TIPO_COMPROBANTE");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.TotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_US");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.HasOne(d => d.IdRetencionManualNavigation)
                .WithMany(p => p.RetencionManualDets)
                .HasForeignKey(d => d.IdRetencionManual)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RETENCION_MANUAL_DET_RETENCION_MANUAL");
        });

        modelBuilder.Entity<RetencionValor>(entity =>
        {
            entity.HasKey(e => e.IdRetencionValor);

            entity.ToTable("RETENCION_VALOR", "dbo");

            entity.Property(e => e.IdRetencionValor).HasColumnName("ID_RETENCION_VALOR");

            entity.Property(e => e.Autofactura).HasColumnName("AUTOFACTURA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoOperacion)
                .HasColumnName("TIPO_OPERACION")
                .HasComment("0 Granos\r\n1 Ganado\r\n2 Otros");

            entity.Property(e => e.TipoRetencion)
                .HasColumnName("TIPO_RETENCION")
                .HasComment("0 Retencion de IVA\r\n1 Retencion de Renta");

            entity.Property(e => e.Tributacion)
                .HasColumnName("TRIBUTACION")
                .HasComment("0 Exentas\r\n1 Gravadas 10%\r\n2 Gravadas 5%");

            entity.Property(e => e.Valor)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<RevaluoBien>(entity =>
        {
            entity.HasKey(e => e.IdRevaluoBien)
                .HasName("PK_REVALUO_BIEN_1");

            entity.ToTable("REVALUO_BIEN", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_REVALUO_BIEN")
                .IsUnique();

            entity.Property(e => e.IdRevaluoBien).HasColumnName("ID_REVALUO_BIEN");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRevaluoGrupo).HasColumnName("ID_REVALUO_GRUPO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdRevaluoGrupoNavigation)
                .WithMany(p => p.RevaluoBiens)
                .HasForeignKey(d => d.IdRevaluoGrupo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_BIEN_REVALUO_GRUPO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RevaluoBiens)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_REVALUO_BIEN_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RevaluoClase>(entity =>
        {
            entity.HasKey(e => e.IdRevaluoClase);

            entity.ToTable("REVALUO_CLASE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_REVALUO_CLASE")
                .IsUnique();

            entity.Property(e => e.IdRevaluoClase).HasColumnName("ID_REVALUO_CLASE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CostoOrigen).HasColumnName("COSTO_ORIGEN");

            entity.Property(e => e.Depreciacion).HasColumnName("DEPRECIACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.PorResidual)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("POR_RESIDUAL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Revaluo).HasColumnName("REVALUO");

            entity.Property(e => e.TasaDeprec)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TASA_DEPREC");

            entity.Property(e => e.VidaUtil)
                .HasColumnType("decimal(18, 1)")
                .HasColumnName("VIDA_UTIL");

            entity.HasOne(d => d.CostoOrigenNavigation)
                .WithMany(p => p.RevaluoClaseCostoOrigenNavigations)
                .HasForeignKey(d => d.CostoOrigen)
                .HasConstraintName("FK_REVALUO_CLASE_PLAN_CUENTA2");

            entity.HasOne(d => d.DepreciacionNavigation)
                .WithMany(p => p.RevaluoClaseDepreciacionNavigations)
                .HasForeignKey(d => d.Depreciacion)
                .HasConstraintName("FK_REVALUO_CLASE_PLAN_CUENTA1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RevaluoClases)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_CLASE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RevaluoNavigation)
                .WithMany(p => p.RevaluoClaseRevaluoNavigations)
                .HasForeignKey(d => d.Revaluo)
                .HasConstraintName("FK_REVALUO_CLASE_PLAN_CUENTA");
        });

        modelBuilder.Entity<RevaluoCoeficiente>(entity =>
        {
            entity.HasKey(e => e.IdRevaluoCoeficiente);

            entity.ToTable("REVALUO_COEFICIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Anho, e.Mes }, "UK_REVALUO_COEFICIENTE")
                .IsUnique();

            entity.Property(e => e.IdRevaluoCoeficiente).HasColumnName("ID_REVALUO_COEFICIENTE");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Coeficiente)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("COEFICIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Enajenado)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("ENAJENADO");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RevaluoCoeficientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_COEFICIENTE_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RevaluoCoeficientes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_COEFICIENTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RevaluoGrupo>(entity =>
        {
            entity.HasKey(e => e.IdRevaluoGrupo);

            entity.ToTable("REVALUO_GRUPO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_REVALUO_GRUPO")
                .IsUnique();

            entity.Property(e => e.IdRevaluoGrupo).HasColumnName("ID_REVALUO_GRUPO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRevaluoClase).HasColumnName("ID_REVALUO_CLASE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdRevaluoClaseNavigation)
                .WithMany(p => p.RevaluoGrupos)
                .HasForeignKey(d => d.IdRevaluoClase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_GRUPO_REVALUO_CLASE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RevaluoGrupos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_GRUPO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<RevaluoItem>(entity =>
        {
            entity.HasKey(e => e.IdRevaluoItem);

            entity.ToTable("REVALUO_ITEM", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_REVALUO_ITEM")
                .IsUnique();

            entity.Property(e => e.IdRevaluoItem).HasColumnName("ID_REVALUO_ITEM");

            entity.Property(e => e.Anho)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("ANHO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chasi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHASI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COLOR");

            entity.Property(e => e.CompraCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMPRA_COTIZACION");

            entity.Property(e => e.CompraFecha)
                .HasColumnType("datetime")
                .HasColumnName("COMPRA_FECHA");

            entity.Property(e => e.CompraImpuestoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMPRA_IMPUESTO_DOLAR");

            entity.Property(e => e.CompraImpuestoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMPRA_IMPUESTO_GUARANI");

            entity.Property(e => e.CompraValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMPRA_VALOR_DOLAR");

            entity.Property(e => e.CompraValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMPRA_VALOR_GUARANI");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdRevaluoBien).HasColumnName("ID_REVALUO_BIEN");

            entity.Property(e => e.Marca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.Modelo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODELO");

            entity.Property(e => e.Motor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MOTOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TerminoVidaUtil).HasColumnName("TERMINO_VIDA_UTIL");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.VentaCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_COTIZACION");

            entity.Property(e => e.VentaFecha)
                .HasColumnType("datetime")
                .HasColumnName("VENTA_FECHA");

            entity.Property(e => e.VentaImpuestoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_IMPUESTO_DOLAR");

            entity.Property(e => e.VentaImpuestoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_IMPUESTO_GUARANI");

            entity.Property(e => e.VentaValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_VALOR_DOLAR");

            entity.Property(e => e.VentaValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VENTA_VALOR_GUARANI");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RevaluoItems)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVALUO_ITEM_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.RevaluoItems)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_REVALUO_ITEM_FUNCIONARIO");

            entity.HasOne(d => d.IdRevaluoBienNavigation)
                .WithMany(p => p.RevaluoItems)
                .HasForeignKey(d => d.IdRevaluoBien)
                .HasConstraintName("FK_REVALUO_ITEM_REVALUO_BIEN");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.RevaluoItemRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_REVALUO_ITEM_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UnidadNavigation)
                .WithMany(p => p.RevaluoItemUnidadNavigations)
                .HasForeignKey(d => d.Unidad)
                .HasConstraintName("FK_REVALUO_ITEM_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<RodadoAccidenteVehicular>(entity =>
        {
            entity.HasKey(e => e.IdRodadoAccidenteVehicular);

            entity.ToTable("RODADO_ACCIDENTE_VEHICULAR", "dbo");

            entity.Property(e => e.IdRodadoAccidenteVehicular).HasColumnName("ID_RODADO_ACCIDENTE_VEHICULAR");

            entity.Property(e => e.ComentarioFlota)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_FLOTA");

            entity.Property(e => e.DanhosMateriales).HasColumnName("DANHOS_MATERIALES");

            entity.Property(e => e.Direccion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Edad).HasColumnName("EDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAccidente)
                .HasColumnType("date")
                .HasColumnName("FECHA_ACCIDENTE");

            entity.Property(e => e.HoraAccidente).HasColumnName("HORA_ACCIDENTE");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdDepartamento)
                .HasColumnName("ID_DEPARTAMENTO")
                .HasComment("estira del funcionario y guarda para no perder el historial");

            entity.Property(e => e.IdDepartamentoVehiculo).HasColumnName("ID_DEPARTAMENTO_VEHICULO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.IdUnidad)
                .HasColumnName("ID_UNIDAD")
                .HasComment("estira del funcionario y guarda para no perder el historial");

            entity.Property(e => e.IdUnidadVehiculo)
                .HasColumnName("ID_UNIDAD_VEHICULO")
                .HasComment("estira del vehículo");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.ImporteFranquicia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_FRANQUICIA")
                .HasDefaultValueSql("((0))")
                .HasComment("0=NO,1=SI");

            entity.Property(e => e.Ocurrido)
                .IsUnicode(false)
                .HasColumnName("OCURRIDO");

            entity.Property(e => e.PagoFranquicia).HasColumnName("PAGO_FRANQUICIA");

            entity.Property(e => e.PersonasHeridas).HasColumnName("PERSONAS_HERIDAS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoChoque)
                .HasColumnName("TIPO_CHOQUE")
                .HasComment("LEVE, MEDIANO, FUERTE");

            entity.Property(e => e.VictimaFatal).HasColumnName("VICTIMA_FATAL");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.IdCiudad)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_CIUDAD");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_DEPARTAMENTO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_FUNCIONARIO");

            entity.HasOne(d => d.IdPaisNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.IdPais)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_PAIS");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.RodadoAccidenteVehiculars)
                .HasForeignKey(d => d.IdVehiculoPk)
                .HasConstraintName("FK_RODADO_ACCIDENTE_VEHICULAR_VEHICULO");
        });

        modelBuilder.Entity<RubroRodado>(entity =>
        {
            entity.HasKey(e => e.IdRubroRodados);

            entity.ToTable("RUBRO_RODADOS", "dbo");

            entity.Property(e => e.IdRubroRodados).HasColumnName("ID_RUBRO_RODADOS");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<SectorLinea>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("SECTOR_LINEA", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.IdSerieSectorLinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SERIE_SECTOR_LINEA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie).HasColumnName("SERIE");
        });

        modelBuilder.Entity<SeguroMedico>(entity =>
        {
            entity.HasKey(e => e.IdSeguroMedico);

            entity.ToTable("SEGURO_MEDICO", "dbo");

            entity.Property(e => e.IdSeguroMedico).HasColumnName("ID_SEGURO_MEDICO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<SeguroPoliza>(entity =>
        {
            entity.HasKey(e => e.IdSeguroPoliza);

            entity.ToTable("SEGURO_POLIZA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Numero, e.Aseguradora }, "UK_SEGURO_POLIZA")
                .IsUnique();

            entity.Property(e => e.IdSeguroPoliza).HasColumnName("ID_SEGURO_POLIZA");

            entity.Property(e => e.Aseguradora)
                .HasColumnName("ASEGURADORA")
                .HasComment("Campo que deriba de ID_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Endosado)
                .HasColumnName("ENDOSADO")
                .HasComment("Campo que deriba de ID_PROVEEDOR");

            entity.Property(e => e.Endoso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENDOSO");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaTasacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_TASACION");

            entity.Property(e => e.IdPolizaRenovacion).HasColumnName("ID_POLIZA_RENOVACION");

            entity.Property(e => e.IdSeguroTipoBien).HasColumnName("ID_SEGURO_TIPO_BIEN");

            entity.Property(e => e.IdSeguroTipoPoliza).HasColumnName("ID_SEGURO_TIPO_POLIZA");

            entity.Property(e => e.LimiteUnico).HasColumnName("LIMITE_UNICO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Numero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.NumeroRenovacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NUMERO_RENOVACION");

            entity.Property(e => e.Premio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PREMIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TASA");

            entity.Property(e => e.Tasacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TASACION");

            entity.Property(e => e.ValorAsegurado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ASEGURADO");

            entity.Property(e => e.VigenciaFinal)
                .HasColumnType("date")
                .HasColumnName("VIGENCIA_FINAL");

            entity.Property(e => e.VigenciaInicio)
                .HasColumnType("date")
                .HasColumnName("VIGENCIA_INICIO");

            entity.HasOne(d => d.AseguradoraNavigation)
                .WithMany(p => p.SeguroPolizaAseguradoraNavigations)
                .HasForeignKey(d => d.Aseguradora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_PROVEEDOR");

            entity.HasOne(d => d.EndosadoNavigation)
                .WithMany(p => p.SeguroPolizaEndosadoNavigations)
                .HasForeignKey(d => d.Endosado)
                .HasConstraintName("FK_SEGURO_POLIZA_PROVEEDOR1");

            entity.HasOne(d => d.IdSeguroTipoBienNavigation)
                .WithMany(p => p.SeguroPolizas)
                .HasForeignKey(d => d.IdSeguroTipoBien)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_SEGURO_TIPO_BIEN");

            entity.HasOne(d => d.IdSeguroTipoPolizaNavigation)
                .WithMany(p => p.SeguroPolizas)
                .HasForeignKey(d => d.IdSeguroTipoPoliza)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_SEGURO_TIPO_POLIZA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SeguroPolizas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SeguroPolizaDet>(entity =>
        {
            entity.HasKey(e => e.IdSeguroPolizaDet);

            entity.ToTable("SEGURO_POLIZA_DET", "dbo");

            entity.Property(e => e.IdSeguroPolizaDet).HasColumnName("ID_SEGURO_POLIZA_DET");

            entity.Property(e => e.IdSeguroPoliza).HasColumnName("ID_SEGURO_POLIZA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.HasOne(d => d.IdSeguroPolizaNavigation)
                .WithMany(p => p.SeguroPolizaDets)
                .HasForeignKey(d => d.IdSeguroPoliza)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_DET_SEGURO_POLIZA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.SeguroPolizaDets)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_DET_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.SeguroPolizaDets)
                .HasForeignKey(d => d.IdVehiculoPk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_POLIZA_DET_VEHICULO");
        });

        modelBuilder.Entity<SeguroSiniestro>(entity =>
        {
            entity.HasKey(e => e.IdSeguroSiniestro);

            entity.ToTable("SEGURO_SINIESTRO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SEGURO_SINIESTRO")
                .IsUnique();

            entity.Property(e => e.IdSeguroSiniestro).HasColumnName("ID_SEGURO_SINIESTRO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaSiniestro)
                .HasColumnType("date")
                .HasColumnName("FECHA_SINIESTRO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdSeguroPoliza).HasColumnName("ID_SEGURO_POLIZA");

            entity.Property(e => e.IdSeguroTipoSiniestro).HasColumnName("ID_SEGURO_TIPO_SINIESTRO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Proceso)
                .HasColumnName("PROCESO")
                .HasComment("(0-Pendiente ,1-Cobrado)");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SiniestroDetalle)
                .IsUnicode(false)
                .HasColumnName("SINIESTRO_DETALLE");

            entity.Property(e => e.SiniestroOcurrencia)
                .IsUnicode(false)
                .HasColumnName("SINIESTRO_OCURRENCIA");

            entity.Property(e => e.ValorReembolso)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_REEMBOLSO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ValorSiniestro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_SINIESTRO");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.SeguroSiniestros)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_SINIESTRO_CIUDAD");

            entity.HasOne(d => d.IdFacturaCreconNavigation)
                .WithMany(p => p.SeguroSiniestros)
                .HasForeignKey(d => d.IdFacturaCrecon)
                .HasConstraintName("FK_SEGURO_SINIESTRO_FACTURA_CRECON");

            entity.HasOne(d => d.IdSeguroPolizaNavigation)
                .WithMany(p => p.SeguroSiniestros)
                .HasForeignKey(d => d.IdSeguroPoliza)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_SINIESTRO_SEGURO_POLIZA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.SeguroSiniestroIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_SINIESTRO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SeguroSiniestroRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SEGURO_SINIESTRO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<SeguroSiniestroDocumento>(entity =>
        {
            entity.HasKey(e => e.IdSeguroSiniestroDocumento)
                .HasName("PK__SEGURO_S__51A74CAC1829B241");

            entity.ToTable("SEGURO_SINIESTRO_DOCUMENTO", "dbo");

            entity.Property(e => e.IdSeguroSiniestroDocumento).HasColumnName("ID_SEGURO_SINIESTRO_DOCUMENTO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.IdSeguroSiniestro).HasColumnName("ID_SEGURO_SINIESTRO");

            entity.Property(e => e.Numero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<SeguroTipoBien>(entity =>
        {
            entity.HasKey(e => e.IdSeguroTipoBien)
                .HasName("PK_BIENES_ASEGURADOS");

            entity.ToTable("SEGURO_TIPO_BIEN", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_BIENES_ASEGURADOS")
                .IsUnique();

            entity.Property(e => e.IdSeguroTipoBien).HasColumnName("ID_SEGURO_TIPO_BIEN");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tasacion).HasColumnName("TASACION");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SeguroTipoBiens)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SEGURO_TIPO_BIEN_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SeguroTipoPoliza>(entity =>
        {
            entity.HasKey(e => e.IdSeguroTipoPoliza)
                .HasName("PK_TIPO_POLIZA");

            entity.ToTable("SEGURO_TIPO_POLIZA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TIPO_POLIZA")
                .IsUnique();

            entity.Property(e => e.IdSeguroTipoPoliza).HasColumnName("ID_SEGURO_TIPO_POLIZA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SeguroTipoPolizas)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SEGURO_TIPO_POLIZA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SeguroTipoSiniestro>(entity =>
        {
            entity.HasKey(e => e.IdSeguroTipoSiniestro)
                .HasName("PK_TIPO_SINIESTRO");

            entity.ToTable("SEGURO_TIPO_SINIESTRO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TIPO_SINIESTRO")
                .IsUnique();

            entity.Property(e => e.IdSeguroTipoSiniestro).HasColumnName("ID_SEGURO_TIPO_SINIESTRO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<SerieEtapa>(entity =>
        {
            entity.HasKey(e => e.IdSerieEtapa);

            entity.ToTable("SERIE_ETAPA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Serie }, "UK_SERIE_ETAPA")
                .IsUnique();

            entity.Property(e => e.IdSerieEtapa).HasColumnName("ID_SERIE_ETAPA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie).HasColumnName("SERIE");

            entity.HasOne(d => d.IdProduccionEtapaNavigation)
                .WithMany(p => p.SerieEtapas)
                .HasForeignKey(d => d.IdProduccionEtapa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERIE_ETAPA_PRODUCCION_ETAPA");
        });

        modelBuilder.Entity<SerieSectorLinea>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("SERIE_SECTOR_LINEA", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdFabricaSector).HasColumnName("ID_FABRICA_SECTOR");

            entity.Property(e => e.IdSerieSectorLinea)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SERIE_SECTOR_LINEA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie).HasColumnName("SERIE");
        });

        modelBuilder.Entity<Servicio>(entity =>
        {
            entity.HasKey(e => e.IdServicio);

            entity.ToTable("SERVICIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_SERVICIO")
                .IsUnique();

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Servicios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERVICIO_EMPRESA");

            entity.HasOne(d => d.IdPlanCuentaNavigation)
                .WithMany(p => p.Servicios)
                .HasForeignKey(d => d.IdPlanCuenta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERVICIO_PLAN_CUENTA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Servicios)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SERVICIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SigassAccidente>(entity =>
        {
            entity.HasKey(e => e.IdSigassAccidente);

            entity.ToTable("SIGASS_ACCIDENTE", "dbo");

            entity.Property(e => e.IdSigassAccidente).HasColumnName("ID_SIGASS_ACCIDENTE");

            entity.Property(e => e.Ambiental).HasColumnName("AMBIENTAL");

            entity.Property(e => e.Aseguradora).HasColumnName("ASEGURADORA");

            entity.Property(e => e.CausaContribuyente)
                .IsUnicode(false)
                .HasColumnName("CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.CausaInmediata)
                .IsUnicode(false)
                .HasColumnName("CAUSA_INMEDIATA");

            entity.Property(e => e.CausaRaiz)
                .IsUnicode(false)
                .HasColumnName("CAUSA_RAIZ");

            entity.Property(e => e.CheckBaja)
                .HasColumnName("CHECK_BAJA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.ComentarioFlota)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO_FLOTA");

            entity.Property(e => e.DanhosMaterialesRodado).HasColumnName("DANHOS_MATERIALES_RODADO");

            entity.Property(e => e.DanosMaterial)
                .IsUnicode(false)
                .HasColumnName("DANOS_MATERIAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DiasPerdidos).HasColumnName("DIAS_PERDIDOS");

            entity.Property(e => e.Direccion)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Edad).HasColumnName("EDAD");

            entity.Property(e => e.EdadTercero).HasColumnName("EDAD_TERCERO");

            entity.Property(e => e.EmailEnviadoCausaContribuyente).HasColumnName("EMAIL_ENVIADO_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.EmailEnviadoCausaInmediata).HasColumnName("EMAIL_ENVIADO_CAUSA_INMEDIATA");

            entity.Property(e => e.EmailEnviadoCausaRaiz).HasColumnName("EMAIL_ENVIADO_CAUSA_RAIZ");

            entity.Property(e => e.EmailGerenteCausaContribuyente).HasColumnName("EMAIL_GERENTE_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.EmailGerenteCausaInmediata).HasColumnName("EMAIL_GERENTE_CAUSA_INMEDIATA");

            entity.Property(e => e.EmailGerenteCausaRaiz).HasColumnName("EMAIL_GERENTE_CAUSA_RAIZ");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCausaContribuyente).HasColumnName("ESTADO_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.EstadoCausaInmediata).HasColumnName("ESTADO_CAUSA_INMEDIATA");

            entity.Property(e => e.EstadoCausaRaiz).HasColumnName("ESTADO_CAUSA_RAIZ");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCausaContribuyente)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.FechaCausaInmediata)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CAUSA_INMEDIATA");

            entity.Property(e => e.FechaCausaRaiz)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CAUSA_RAIZ");

            entity.Property(e => e.FechaEmailCausaContribuyente)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMAIL_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.FechaEmailCausaInmediata)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMAIL_CAUSA_INMEDIATA");

            entity.Property(e => e.FechaEmailCausaRaiz)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMAIL_CAUSA_RAIZ");

            entity.Property(e => e.FechaLanzamiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_LANZAMIENTO");

            entity.Property(e => e.Hora).HasColumnName("HORA");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdCargoResponsableCausaContribuyente).HasColumnName("ID_CARGO_RESPONSABLE_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.IdCargoResponsableCausaInmediata).HasColumnName("ID_CARGO_RESPONSABLE_CAUSA_INMEDIATA");

            entity.Property(e => e.IdCargoResponsableCausaRaiz).HasColumnName("ID_CARGO_RESPONSABLE_CAUSA_RAIZ");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDepartamentoVehiculo).HasColumnName("ID_DEPARTAMENTO_VEHICULO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.IdResponsableCausaContribuyente).HasColumnName("ID_RESPONSABLE_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.IdResponsableCausaInmediata).HasColumnName("ID_RESPONSABLE_CAUSA_INMEDIATA");

            entity.Property(e => e.IdResponsableCausaRaiz).HasColumnName("ID_RESPONSABLE_CAUSA_RAIZ");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadResponsableCausaContribuyente).HasColumnName("ID_UNIDAD_RESPONSABLE_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.IdUnidadResponsableCausaInmediata).HasColumnName("ID_UNIDAD_RESPONSABLE_CAUSA_INMEDIATA");

            entity.Property(e => e.IdUnidadResponsableCausaRaiz).HasColumnName("ID_UNIDAD_RESPONSABLE_CAUSA_RAIZ");

            entity.Property(e => e.IdUnidadVehiculo).HasColumnName("ID_UNIDAD_VEHICULO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.ImporteFranquicia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_FRANQUICIA");

            entity.Property(e => e.Initinere)
                .HasColumnName("INITINERE")
                .HasDefaultValueSql("((0))")
                .HasComment("Campo para los accidentes fuera del horario laboral");

            entity.Property(e => e.MedidaAtencion)
                .IsUnicode(false)
                .HasColumnName("MEDIDA_ATENCION");

            entity.Property(e => e.MedidaAtencionSigass)
                .IsUnicode(false)
                .HasColumnName("MEDIDA_ATENCION_SIGASS");

            entity.Property(e => e.MedidaCorrectiva)
                .IsUnicode(false)
                .HasColumnName("MEDIDA_CORRECTIVA");

            entity.Property(e => e.MedidaCorrectivaSigass)
                .IsUnicode(false)
                .HasColumnName("MEDIDA_CORRECTIVA_SIGASS");

            entity.Property(e => e.Motivo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.MotivoSigass)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_SIGASS");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Ocurrido)
                .IsUnicode(false)
                .HasColumnName("OCURRIDO");

            entity.Property(e => e.PagoFranquicia).HasColumnName("PAGO_FRANQUICIA");

            entity.Property(e => e.PersonaHerida)
                .IsUnicode(false)
                .HasColumnName("PERSONA_HERIDA");

            entity.Property(e => e.PersonasHeridasRodado).HasColumnName("PERSONAS_HERIDAS_RODADO");

            entity.Property(e => e.PlazoCausaContribuyente).HasColumnName("PLAZO_CAUSA_CONTRIBUYENTE");

            entity.Property(e => e.PlazoCausaInmediata).HasColumnName("PLAZO_CAUSA_INMEDIATA");

            entity.Property(e => e.PlazoCausaRaiz).HasColumnName("PLAZO_CAUSA_RAIZ");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoAccidente).HasColumnName("TIPO_ACCIDENTE");

            entity.Property(e => e.TipoFuncionario).HasColumnName("TIPO_FUNCIONARIO");

            entity.Property(e => e.TipoGravedad).HasColumnName("TIPO_GRAVEDAD");

            entity.Property(e => e.VictimaFatal)
                .IsUnicode(false)
                .HasColumnName("VICTIMA_FATAL");

            entity.Property(e => e.VictimaFatalRodado).HasColumnName("VICTIMA_FATAL_RODADO");
        });

        modelBuilder.Entity<SigassCapacitacion>(entity =>
        {
            entity.HasKey(e => e.IdSigassCapacitacion);

            entity.ToTable("SIGASS_CAPACITACION", "dbo");

            entity.Property(e => e.IdSigassCapacitacion).HasColumnName("ID_SIGASS_CAPACITACION");

            entity.Property(e => e.Area)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("AREA");

            entity.Property(e => e.Disertante)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DISERTANTE");

            entity.Property(e => e.Duracion).HasColumnName("DURACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Participante).HasColumnName("PARTICIPANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tema)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TEMA");

            entity.Property(e => e.Tiempo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TIEMPO");
        });

        modelBuilder.Entity<SigassCapacitacionDet>(entity =>
        {
            entity.HasKey(e => e.IdSigassCapacitacionDet);

            entity.ToTable("SIGASS_CAPACITACION_DET", "dbo");

            entity.Property(e => e.IdSigassCapacitacionDet).HasColumnName("ID_SIGASS_CAPACITACION_DET");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdSigassCapacitacion).HasColumnName("ID_SIGASS_CAPACITACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<SigassCapacitacionParticipante>(entity =>
        {
            entity.HasKey(e => e.IdSigassCapacitacionParticipante)
                .HasName("PK__SIGASS_C__8930D661B4CAC97D");

            entity.ToTable("SIGASS_CAPACITACION_PARTICIPANTE", "dbo");

            entity.Property(e => e.IdSigassCapacitacionParticipante).HasColumnName("ID_SIGASS_CAPACITACION_PARTICIPANTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdSigassCapacitacion).HasColumnName("ID_SIGASS_CAPACITACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<SigassConsumoAgua>(entity =>
        {
            entity.HasKey(e => e.IdSigassConsumoAgua);

            entity.ToTable("SIGASS_CONSUMO_AGUA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGASS_CONSUMO_AGUA")
                .IsUnique();

            entity.Property(e => e.IdSigassConsumoAgua).HasColumnName("ID_SIGASS_CONSUMO_AGUA");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Consumo)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CONSUMO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaLectura)
                .HasColumnType("date")
                .HasColumnName("FECHA_LECTURA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Lectura)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("LECTURA");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tanque).HasColumnName("TANQUE");
        });

        modelBuilder.Entity<SigassDesinfeccionLocal>(entity =>
        {
            entity.HasKey(e => e.IdSigassDesinfeccionLocal);

            entity.ToTable("SIGASS_DESINFECCION_LOCAL", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGASS_DESINFECCION_LOCAL")
                .IsUnique();

            entity.Property(e => e.IdSigassDesinfeccionLocal).HasColumnName("ID_SIGASS_DESINFECCION_LOCAL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<SigassDesinfeccionLocalDet>(entity =>
        {
            entity.HasKey(e => e.IdSigassDesinfeccionLocalDet);

            entity.ToTable("SIGASS_DESINFECCION_LOCAL_DET", "dbo");

            entity.Property(e => e.IdSigassDesinfeccionLocalDet).HasColumnName("ID_SIGASS_DESINFECCION_LOCAL_DET");

            entity.Property(e => e.Comentarios)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIOS");

            entity.Property(e => e.Dosis)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DOSIS");

            entity.Property(e => e.FechaAplicacion)
                .HasColumnType("date")
                .HasColumnName("FECHA_APLICACION");

            entity.Property(e => e.IdSigassDesinfeccionLocal).HasColumnName("ID_SIGASS_DESINFECCION_LOCAL");

            entity.Property(e => e.Producto)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tratamiento)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("TRATAMIENTO");
        });

        modelBuilder.Entity<SigassDocumentoAmbiental>(entity =>
        {
            entity.HasKey(e => e.IdSigassDocumentoAmbiental)
                .HasName("PK__SIGASS_D__D0EA4603CC731C49");

            entity.ToTable("SIGASS_DOCUMENTO_AMBIENTAL", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "IX_SIGASS_DOCUMENTO_AMBIENTAL")
                .IsUnique();

            entity.Property(e => e.IdSigassDocumentoAmbiental).HasColumnName("ID_SIGASS_DOCUMENTO_AMBIENTAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdSigassReforestacion).HasColumnName("ID_SIGASS_REFORESTACION");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<SigassGfw>(entity =>
        {
            entity.HasKey(e => e.IdSigassGfw);

            entity.ToTable("SIGASS_GFW", "dbo");

            entity.Property(e => e.IdSigassGfw).HasColumnName("ID_SIGASS_GFW");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Coordenadas)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("COORDENADAS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PerdidaCobertura)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PERDIDA_COBERTURA");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.SigassGfws)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_SIGASS_GFW_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SigassGfws)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SIGASS_GFW_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SigassIndiceAccidente>(entity =>
        {
            entity.HasKey(e => e.IdIndiceAccidente);

            entity.ToTable("SIGASS_INDICE_ACCIDENTE", "dbo");

            entity.Property(e => e.IdIndiceAccidente).HasColumnName("ID_INDICE_ACCIDENTE");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<SigassIndiceAccidenteDet>(entity =>
        {
            entity.HasKey(e => e.IdIndiceAccidenteDet);

            entity.ToTable("SIGASS_INDICE_ACCIDENTE_DET", "dbo");

            entity.Property(e => e.IdIndiceAccidenteDet).HasColumnName("ID_INDICE_ACCIDENTE_DET");

            entity.Property(e => e.CantidadFuncionario).HasColumnName("CANTIDAD_FUNCIONARIO");

            entity.Property(e => e.IdIndiceAccidente).HasColumnName("ID_INDICE_ACCIDENTE");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUsuario).HasColumnName("REG_USUARIO");

            entity.HasOne(d => d.IdIndiceAccidenteNavigation)
                .WithMany(p => p.SigassIndiceAccidenteDets)
                .HasForeignKey(d => d.IdIndiceAccidente)
                .HasConstraintName("FK_SIGASS_INDICE_ACCIDENTE_DET_SIGASS_INDICE_ACCIDENTE");
        });

        modelBuilder.Entity<SigassPermiso>(entity =>
        {
            entity.HasKey(e => e.IdSigassPermiso);

            entity.ToTable("SIGASS_PERMISO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGASS_PERMISO")
                .IsUnique();

            entity.Property(e => e.IdSigassPermiso).HasColumnName("ID_SIGASS_PERMISO");

            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAutoriza)
                .HasColumnType("date")
                .HasColumnName("FECHA_AUTORIZA");

            entity.Property(e => e.HoraAutoriza).HasColumnName("HORA_AUTORIZA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Permiso)
                .HasColumnName("PERMISO")
                .HasComment("1: Si 2: No");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Sector)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SECTOR");

            entity.Property(e => e.TipoPermiso)
                .HasColumnName("TIPO_PERMISO")
                .HasComment("1: ALTURA 2: CONFINADO");

            entity.Property(e => e.Trabajo)
                .IsUnicode(false)
                .HasColumnName("TRABAJO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigassPermisos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGASS_PERMISO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SigassPermisos)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_SIGASS_PERMISO_FUNCIONARIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.SigassPermisoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_SIGASS_PERMISO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SigassPermisoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SIGASS_PERMISO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<SigassPermisoDet>(entity =>
        {
            entity.HasKey(e => e.IdSigassPermisoDet);

            entity.ToTable("SIGASS_PERMISO_DET", "dbo");

            entity.Property(e => e.IdSigassPermisoDet).HasColumnName("ID_SIGASS_PERMISO_DET");

            entity.Property(e => e.ChkNa).HasColumnName("CHK_NA");

            entity.Property(e => e.ChkNo).HasColumnName("CHK_NO");

            entity.Property(e => e.ChkSi).HasColumnName("CHK_SI");

            entity.Property(e => e.DescripcionElementos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ELEMENTOS");

            entity.Property(e => e.IdSigassPermiso).HasColumnName("ID_SIGASS_PERMISO");

            entity.Property(e => e.NroElemento).HasColumnName("NRO_ELEMENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdSigassPermisoNavigation)
                .WithMany(p => p.SigassPermisoDets)
                .HasForeignKey(d => d.IdSigassPermiso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGASS_PERMISO_DET_SIGASS_PERMISO");
        });

        modelBuilder.Entity<SigassReforestacion>(entity =>
        {
            entity.HasKey(e => e.IdSigassReforestacion);

            entity.ToTable("SIGASS_REFORESTACION", "dbo");

            entity.Property(e => e.IdSigassReforestacion).HasColumnName("ID_SIGASS_REFORESTACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigassReforestacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGASS_REFORESTACION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SigassReforestacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGASS_REFORESTACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SigevBoletaProductor>(entity =>
        {
            entity.HasKey(e => e.IdSigevBoletaProductor);

            entity.ToTable("SIGEV_BOLETA_PRODUCTOR", "dbo");

            entity.Property(e => e.IdSigevBoletaProductor).HasColumnName("ID_SIGEV_BOLETA_PRODUCTOR");

            entity.Property(e => e.Asociado).HasColumnName("ASOCIADO");

            entity.Property(e => e.BoletaNro).HasColumnName("BOLETA_NRO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdResponsable)
                .HasColumnName("ID_RESPONSABLE")
                .HasComment("El que firma la boleta. (Recepcion)");

            entity.Property(e => e.IdSigevCarga).HasColumnName("ID_SIGEV_CARGA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigevBoletaProductors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_EMPRESA");

            entity.HasOne(d => d.IdCiudadNavigation)
                .WithMany(p => p.SigevBoletaProductors)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_CIUDAD");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.SigevBoletaProductors)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_CLIENTE");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.SigevBoletaProductors)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_PROVEEDOR");

            entity.HasOne(d => d.IdResponsableNavigation)
                .WithMany(p => p.SigevBoletaProductors)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_FUNCIONARIO");

            entity.HasOne(d => d.IdSigevCargaNavigation)
                .WithMany(p => p.SigevBoletaProductors)
                .HasForeignKey(d => d.IdSigevCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_SIGEV_CARGA");
        });

        modelBuilder.Entity<SigevBoletaProductorDet>(entity =>
        {
            entity.HasKey(e => e.IdSigevBoletaProductorDet);

            entity.ToTable("SIGEV_BOLETA_PRODUCTOR_DET", "dbo");

            entity.Property(e => e.IdSigevBoletaProductorDet).HasColumnName("ID_SIGEV_BOLETA_PRODUCTOR_DET");

            entity.Property(e => e.CantidadStl)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_STL")
                .HasComment("Cantidad Sin Triple Lavado");

            entity.Property(e => e.CantidadTl)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_TL")
                .HasComment("Cantidad Triple Lavado");

            entity.Property(e => e.IdSigevBoletaProductor).HasColumnName("ID_SIGEV_BOLETA_PRODUCTOR");

            entity.Property(e => e.IdSigevEnvase).HasColumnName("ID_SIGEV_ENVASE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdSigevBoletaProductorNavigation)
                .WithMany(p => p.SigevBoletaProductorDets)
                .HasForeignKey(d => d.IdSigevBoletaProductor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_DET_SIGEV_BOLETA_PRODUCTOR");

            entity.HasOne(d => d.IdSigevEnvaseNavigation)
                .WithMany(p => p.SigevBoletaProductorDets)
                .HasForeignKey(d => d.IdSigevEnvase)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_BOLETA_PRODUCTOR_DET_SIGEV_ENVASE");
        });

        modelBuilder.Entity<SigevCarga>(entity =>
        {
            entity.HasKey(e => e.IdSigevCarga);

            entity.ToTable("SIGEV_CARGA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGEV_CARGA");

            entity.Property(e => e.IdSigevCarga).HasColumnName("ID_SIGEV_CARGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdResponsablePeso).HasColumnName("ID_RESPONSABLE_PESO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.KmFinal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("KM_FINAL");

            entity.Property(e => e.KmInicial)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("KM_INICIAL");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Peso)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigevCargas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CARGA_EMPRESA");

            entity.HasOne(d => d.IdChoferNavigation)
                .WithMany(p => p.SigevCargas)
                .HasForeignKey(d => d.IdChofer)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CARGA_CHOFER");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.SigevCargas)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CARGA_DEPARTAMENTO");
        });

        modelBuilder.Entity<SigevCargaProducto>(entity =>
        {
            entity.HasKey(e => e.IdSigevCargaProducto);

            entity.ToTable("SIGEV_CARGA_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdSigevCarga, e.IdProducto, e.NroLote, e.RegStatus }, "UK_SIGEV_CARGA_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdSigevCargaProducto).HasColumnName("ID_SIGEV_CARGA_PRODUCTO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdSigevCarga).HasColumnName("ID_SIGEV_CARGA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.SigevCargaProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CARGA_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdSigevCargaNavigation)
                .WithMany(p => p.SigevCargaProductos)
                .HasForeignKey(d => d.IdSigevCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CARGA_PRODUCTO_SIGEV_CARGA");
        });

        modelBuilder.Entity<SigevClasificacion>(entity =>
        {
            entity.HasKey(e => e.IdSigevClasificacion);

            entity.ToTable("SIGEV_CLASIFICACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGEV_CLASIFICACION")
                .IsUnique();

            entity.Property(e => e.IdSigevClasificacion).HasColumnName("ID_SIGEV_CLASIFICACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigevClasificacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_EMPRESA");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.SigevClasificacions)
                .HasForeignKey(d => d.IdDepartamento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_DEPARTAMENTO");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.SigevClasificacions)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_DEPOSITO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SigevClasificacions)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SigevClasificacionCon>(entity =>
        {
            entity.HasKey(e => e.IdSigevClasificacionCons);

            entity.ToTable("SIGEV_CLASIFICACION_CONS", "dbo");

            entity.HasIndex(e => new { e.IdSigevClasificacion, e.IdProducto, e.IdLote, e.RegStatus }, "UK_SIGEV_CLASIFICACION_CONS")
                .IsUnique();

            entity.Property(e => e.IdSigevClasificacionCons).HasColumnName("ID_SIGEV_CLASIFICACION_CONS");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdSigevClasificacion).HasColumnName("ID_SIGEV_CLASIFICACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.SigevClasificacionCons)
                .HasForeignKey(d => d.IdLote)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_CONS_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.SigevClasificacionCons)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_CONS_PRODUCTO");

            entity.HasOne(d => d.IdSigevClasificacionNavigation)
                .WithMany(p => p.SigevClasificacionCons)
                .HasForeignKey(d => d.IdSigevClasificacion)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_CONS_SIGEV_CLASIFICACION");
        });

        modelBuilder.Entity<SigevClasificacionDet>(entity =>
        {
            entity.HasKey(e => e.IdSigevClasificacionDet);

            entity.ToTable("SIGEV_CLASIFICACION_DET", "dbo");

            entity.Property(e => e.IdSigevClasificacionDet).HasColumnName("ID_SIGEV_CLASIFICACION_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.IdSigevClasificacion).HasColumnName("ID_SIGEV_CLASIFICACION");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.SigevClasificacionDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_DET_PRODUCTO");

            entity.HasOne(d => d.IdResponsableNavigation)
                .WithMany(p => p.SigevClasificacionDets)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_DET_FUNCIONARIO");

            entity.HasOne(d => d.IdSigevClasificacionNavigation)
                .WithMany(p => p.SigevClasificacionDets)
                .HasForeignKey(d => d.IdSigevClasificacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CLASIFICACION_DET_SIGEV_CLASIFICACION");
        });

        modelBuilder.Entity<SigevControlEnvase>(entity =>
        {
            entity.HasKey(e => e.IdSigevControlEnvase)
                .HasName("PK__SIGEV_CO__BCD509AB2D6E07EB");

            entity.ToTable("SIGEV_CONTROL_ENVASE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGEV_CONTROL_ENVASE")
                .IsUnique();

            entity.Property(e => e.IdSigevControlEnvase).HasColumnName("ID_SIGEV_CONTROL_ENVASE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigevControlEnvases)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_SIGEV_CONTROL_ENVASE_EMPRESA");

            entity.HasOne(d => d.IdClienteNavigation)
                .WithMany(p => p.SigevControlEnvases)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_SIGEV_CONTROL_ENVASE_CLIENTE");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.SigevControlEnvaseIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_SIGEV_CONTROL_ENVASE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SigevControlEnvaseRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SIGEV_CONTROL_ENVASE_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<SigevControlEnvaseDet>(entity =>
        {
            entity.HasKey(e => e.IdSigevControlEnvaseDet)
                .HasName("PK__SIGEV_CO__BDBFE14D1007F2F6");

            entity.ToTable("SIGEV_CONTROL_ENVASE_DET", "dbo");

            entity.Property(e => e.IdSigevControlEnvaseDet).HasColumnName("ID_SIGEV_CONTROL_ENVASE_DET");

            entity.Property(e => e.CantidadLavado).HasColumnName("CANTIDAD_LAVADO");

            entity.Property(e => e.CantidadSinLavado).HasColumnName("CANTIDAD_SIN_LAVADO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdSigevControlEnvase).HasColumnName("ID_SIGEV_CONTROL_ENVASE");

            entity.Property(e => e.Observaciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OBSERVACIONES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdSigevControlEnvaseNavigation)
                .WithMany(p => p.SigevControlEnvaseDets)
                .HasForeignKey(d => d.IdSigevControlEnvase)
                .HasConstraintName("FK_SIGEV_CONTROL_ENVASE_DET_SIGEV_CONTROL_ENVASE");
        });

        modelBuilder.Entity<SigevControlResiduo>(entity =>
        {
            entity.HasNoKey();

            entity.ToTable("SIGEV_CONTROL_RESIDUO", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Area).HasColumnName("AREA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdSigevControlResiduo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_SIGEV_CONTROL_RESIDUO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoResiduo)
                .HasColumnName("TIPO_RESIDUO")
                .HasComment("0 = R.S.U. (Residuos solidos urbanos), \r\n1 = Envases vacíos\r,\n 2 = Zaranda");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany()
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_CONTROL_RESIDUO_EMPRESA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany()
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_SIGEV_CONTROL_RESIDUO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany()
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_SIGEV_CONTROL_RESIDUO_USUARIO");
        });

        modelBuilder.Entity<SigevEnvase>(entity =>
        {
            entity.HasKey(e => e.IdSigevEnvase);

            entity.ToTable("SIGEV_ENVASE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_SIGEV_ENVASE")
                .IsUnique();

            entity.Property(e => e.IdSigevEnvase).HasColumnName("ID_SIGEV_ENVASE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigevEnvases)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_ENVASE_EMPRESA");
        });

        modelBuilder.Entity<SigevProduccion>(entity =>
        {
            entity.HasKey(e => e.IdSigevProduccion);

            entity.ToTable("SIGEV_PRODUCCION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SIGEV_PRODUCCION")
                .IsUnique();

            entity.Property(e => e.IdSigevProduccion).HasColumnName("ID_SIGEV_PRODUCCION");

            entity.Property(e => e.Bloqueo)
                .HasColumnName("BLOQUEO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntradaDeposito).HasColumnName("ENTRADA_DEPOSITO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.SalidaDeposito).HasColumnName("SALIDA_DEPOSITO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SigevProduccions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_EMPRESA");

            entity.HasOne(d => d.EntradaDepositoNavigation)
                .WithMany(p => p.SigevProduccionEntradaDepositoNavigations)
                .HasForeignKey(d => d.EntradaDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.SigevProduccions)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_PRODUCTO");

            entity.HasOne(d => d.IdResponsableNavigation)
                .WithMany(p => p.SigevProduccions)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SigevProduccions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_EMPRESA_UNIDAD");

            entity.HasOne(d => d.SalidaDepositoNavigation)
                .WithMany(p => p.SigevProduccionSalidaDepositoNavigations)
                .HasForeignKey(d => d.SalidaDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_DEPOSITO1");
        });

        modelBuilder.Entity<SigevProduccionDet>(entity =>
        {
            entity.HasKey(e => e.IdSigevProduccionDet);

            entity.ToTable("SIGEV_PRODUCCION_DET", "dbo");

            entity.Property(e => e.IdSigevProduccionDet).HasColumnName("ID_SIGEV_PRODUCCION_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdSigevProduccion).HasColumnName("ID_SIGEV_PRODUCCION");

            entity.Property(e => e.Item).HasColumnName("ITEM");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.SigevProduccionDets)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_DET_LOTE");

            entity.HasOne(d => d.IdSigevProduccionNavigation)
                .WithMany(p => p.SigevProduccionDets)
                .HasForeignKey(d => d.IdSigevProduccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_DET_SIGEV_PRODUCCION");

            entity.HasOne(d => d.ItemNavigation)
                .WithMany(p => p.SigevProduccionDets)
                .HasForeignKey(d => d.Item)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SIGEV_PRODUCCION_DET_PRODUCTO");
        });

        modelBuilder.Entity<SolicitudBorrado>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudBorrado);

            entity.ToTable("SOLICITUD_BORRADO", "dbo");

            entity.Property(e => e.IdSolicitudBorrado).HasColumnName("ID_SOLICITUD_BORRADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudBorrados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_BORRADO_EMPRESA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.SolicitudBorrados)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_BORRADO_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SolicitudBorrados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_BORRADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudLavado>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudLavado);

            entity.ToTable("SOLICITUD_LAVADO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SOLICITUD_LAVADO")
                .IsUnique();

            entity.Property(e => e.IdSolicitudLavado).HasColumnName("ID_SOLICITUD_LAVADO");

            entity.Property(e => e.Aprobado).HasColumnName("APROBADO");

            entity.Property(e => e.Comentario)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoLavado).HasColumnName("TIPO_LAVADO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudLavados)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_SOLICITUD_LAVADO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudLavados)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_SOLICITUD_LAVADO_FUNCIONARIO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.SolicitudLavados)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_SOLICITUD_LAVADO_PROVEEDOR");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.SolicitudLavados)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_SOLICITUD_LAVADO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.SolicitudLavados)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_SOLICITUD_LAVADO_USUARIO");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.SolicitudLavados)
                .HasForeignKey(d => d.IdVehiculoPk)
                .HasConstraintName("FK_SOLICITUD_LAVADO_VEHICULO");
        });

        modelBuilder.Entity<SolicitudPermiso>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudPermiso);

            entity.ToTable("SOLICITUD_PERMISO", "dbo");

            entity.Property(e => e.IdSolicitudPermiso).HasColumnName("ID_SOLICITUD_PERMISO");

            entity.Property(e => e.Autorizado).HasColumnName("AUTORIZADO");

            entity.Property(e => e.Dias).HasColumnName("DIAS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("date")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("date")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.FechaRetorna)
                .HasColumnType("date")
                .HasColumnName("FECHA_RETORNA");

            entity.Property(e => e.Gerente).HasColumnName("GERENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuarioGerente)
                .HasColumnName("ID_USUARIO_GERENTE")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");

            entity.Property(e => e.Reemplazante).HasColumnName("REEMPLAZANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudPermisos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_PERMISO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudPermisos)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_PERMISO_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioGerenteNavigation)
                .WithMany(p => p.SolicitudPermisos)
                .HasForeignKey(d => d.IdUsuarioGerente)
                .HasConstraintName("FK_SOLICITUD_PERMISO_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SolicitudPermisos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SOLICITUD_PERMISO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudPermisoIp>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudPermisoIps)
                .HasName("PK__SOLICITU__74E468044C4B01B4");

            entity.ToTable("SOLICITUD_PERMISO_IPS", "dbo");

            entity.Property(e => e.IdSolicitudPermisoIps).HasColumnName("ID_SOLICITUD_PERMISO_IPS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaFinal)
                .HasColumnType("date")
                .HasColumnName("FECHA_FINAL");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("date")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("date")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FechaRetorno)
                .HasColumnType("date")
                .HasColumnName("FECHA_RETORNO");

            entity.Property(e => e.FechaTardia)
                .HasColumnType("date")
                .HasColumnName("FECHA_TARDIA");

            entity.Property(e => e.Gerente).HasColumnName("GERENTE");

            entity.Property(e => e.Hora).HasColumnName("HORA");

            entity.Property(e => e.HoraFinal)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("HORA_FINAL");

            entity.Property(e => e.HoraInicio)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("HORA_INICIO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LugarNacimiento)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LUGAR_NACIMIENTO");

            entity.Property(e => e.Motivo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.Reemplazante).HasColumnName("REEMPLAZANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remunerado)
                .HasColumnName("REMUNERADO")
                .HasComment("(1=Remunerado, 0=No Remunerado)");

            entity.Property(e => e.SolicitudDias).HasColumnName("SOLICITUD_DIAS");

            entity.Property(e => e.TipoPermiso)
                .HasColumnName("TIPO_PERMISO")
                .HasComment("(0=Reposo, 1=Suspensión, 2=Permiso, 3=Ausencia)");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudPermisoIps)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_SOLICITUD_PERMISO_IPS_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudPermisoIpIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_SOLICITUD_PERMISO_IPS_FUNCIONARIO");

            entity.HasOne(d => d.ReemplazanteNavigation)
                .WithMany(p => p.SolicitudPermisoIpReemplazanteNavigations)
                .HasForeignKey(d => d.Reemplazante)
                .HasConstraintName("FK_SOLICITUD_PERMISO_IPS_FUNCIONARIO1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SolicitudPermisoIps)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SOLICITUD_PERMISO_IPS_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudProductoMic>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudProductoMic)
                .HasName("PK_SOLICITUDES_MIC");

            entity.ToTable("SOLICITUD_PRODUCTO_MIC", "dbo");

            entity.Property(e => e.IdSolicitudProductoMic).HasColumnName("ID_SOLICITUD_PRODUCTO_MIC");

            entity.Property(e => e.CantImportada)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CANT_IMPORTADA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.FechaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ACTUALIZACION")
                .HasComment("Última fecha de actualización del registro");

            entity.Property(e => e.IdCompraExteriorProducto).HasColumnName("ID_COMPRA_EXTERIOR_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ProductoMp).HasColumnName("PRODUCTO_MP");

            entity.Property(e => e.ProductoPf).HasColumnName("PRODUCTO_PF");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Saldo)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SaldoFinal)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("SALDO_FINAL");

            entity.Property(e => e.SolicitudImpNro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOLICITUD_IMP_NRO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudProductoMics)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_PRODUCTO_MIC_EMPRESA");

            entity.HasOne(d => d.IdCompraExteriorProductoNavigation)
                .WithMany(p => p.SolicitudProductoMics)
                .HasForeignKey(d => d.IdCompraExteriorProducto)
                .HasConstraintName("FK_SOLICITUD_PRODUCTO_MIC_COMPRA_EXTERIOR_PRODUCTO");

            entity.HasOne(d => d.ProductoMpNavigation)
                .WithMany(p => p.SolicitudProductoMicProductoMpNavigations)
                .HasForeignKey(d => d.ProductoMp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_PRODUCTO_MIC_PRODUCTO_ATRIBUTO_MIC");

            entity.HasOne(d => d.ProductoPfNavigation)
                .WithMany(p => p.SolicitudProductoMicProductoPfNavigations)
                .HasForeignKey(d => d.ProductoPf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_PRODUCTO_MIC_PRODUCTO_ATRIBUTO_MIC1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SolicitudProductoMics)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_PRODUCTO_MIC_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudRepuesto>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudRepuesto);

            entity.ToTable("SOLICITUD_REPUESTO", "dbo");

            entity.Property(e => e.IdSolicitudRepuesto).HasColumnName("ID_SOLICITUD_REPUESTO");

            entity.Property(e => e.Aprobado)
                .HasColumnName("APROBADO")
                .HasComment("0 = No, 1=Si");

            entity.Property(e => e.Comentario)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Empresa)
                .HasColumnName("EMPRESA")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("date")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.KmAnterior).HasColumnName("KM_ANTERIOR");

            entity.Property(e => e.KmVehiculo).HasColumnName("KM_VEHICULO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoRepuesto)
                .HasColumnName("TIPO_REPUESTO")
                .HasComment("(0=Cubierta, 1=Batería, 2= Otros)");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudRepuestos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_SOLICITUD_REPUESTO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudRepuestos)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_SOLICITUD_REPUESTO_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.SolicitudRepuestos)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_SOLICITUD_REPUESTO_USUARIO");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.SolicitudRepuestos)
                .HasForeignKey(d => d.IdVehiculoPk)
                .HasConstraintName("FK_SOLICITUD_REPUESTO_VEHICULO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SolicitudRepuestos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_SOLICITUD_REPUESTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudRevisionSalarial>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudRevisionSalarial);

            entity.ToTable("SOLICITUD_REVISION_SALARIAL", "dbo");

            entity.Property(e => e.IdSolicitudRevisionSalarial).HasColumnName("ID_SOLICITUD_REVISION_SALARIAL");

            entity.Property(e => e.Aprobacion).HasColumnName("APROBACION");

            entity.Property(e => e.Comentario)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaRespuesta)
                .HasColumnType("date")
                .HasColumnName("FECHA_RESPUESTA");

            entity.Property(e => e.GerenteFuncionario)
                .HasColumnName("GERENTE_FUNCIONARIO")
                .HasDefaultValueSql("((0))")
                .HasComment("Aqui va guardar el ID_FUNCIONARIO");

            entity.Property(e => e.IdFuncionario)
                .HasColumnName("ID_FUNCIONARIO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdUnidad)
                .HasColumnName("ID_UNIDAD")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.IdUsuarioGerente).HasColumnName("ID_USUARIO_GERENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Motivo)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PorcentajeInc)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("PORCENTAJE_INC");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.GerenteFuncionarioNavigation)
                .WithMany(p => p.SolicitudRevisionSalarialGerenteFuncionarioNavigations)
                .HasForeignKey(d => d.GerenteFuncionario)
                .HasConstraintName("FK_SOLICITUD_REVISION_SALARIAL_FUNCIONARIO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudRevisionSalarialIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_SOLICITUD_REVISION_SALARIAL_FUNCIONARIO1");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.SolicitudRevisionSalarials)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_SOLICITUD_REVISION_SALARIAL_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudRevisionSalarialDet>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudRevisionSalarialDet);

            entity.ToTable("SOLICITUD_REVISION_SALARIAL_DET", "dbo");

            entity.Property(e => e.IdSolicitudRevisionSalarialDet).HasColumnName("ID_SOLICITUD_REVISION_SALARIAL_DET");

            entity.Property(e => e.Comentario)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdSolicitudRevisionSalarial).HasColumnName("ID_SOLICITUD_REVISION_SALARIAL");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdSolicitudRevisionSalarialNavigation)
                .WithMany(p => p.SolicitudRevisionSalarialDets)
                .HasForeignKey(d => d.IdSolicitudRevisionSalarial)
                .HasConstraintName("FK_SOLICITUD_REVISION_SALARIAL_DET_SOLICITUD_REVISION_SALARIAL");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.SolicitudRevisionSalarialDets)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_SOLICITUD_REVISION_SALARIAL_DET_USUARIO");
        });

        modelBuilder.Entity<SolicitudVacacion>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudVacacion);

            entity.ToTable("SOLICITUD_VACACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_SOLICITUD_VACACION")
                .IsUnique();

            entity.Property(e => e.IdSolicitudVacacion).HasColumnName("ID_SOLICITUD_VACACION");

            entity.Property(e => e.Autorizado).HasColumnName("AUTORIZADO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("datetime")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Final)
                .HasColumnType("datetime")
                .HasColumnName("FINAL");

            entity.Property(e => e.Gerente).HasColumnName("GERENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdUsuarioGerente)
                .HasColumnName("ID_USUARIO_GERENTE")
                .HasComment("");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.Reemplazante).HasColumnName("REEMPLAZANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Retorno)
                .HasColumnType("datetime")
                .HasColumnName("RETORNO");

            entity.Property(e => e.VacacionCorr).HasColumnName("VACACION_CORR");

            entity.Property(e => e.VacacionPosLiq).HasColumnName("VACACION_POS_LIQ");

            entity.Property(e => e.VacacionProp).HasColumnName("VACACION_PROP");

            entity.Property(e => e.VacacionSaldo).HasColumnName("VACACION_SALDO");

            entity.Property(e => e.VacacionSoli).HasColumnName("VACACION_SOLI");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudVacacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_VACACION_EMPRESA");

            entity.HasOne(d => d.GerenteNavigation)
                .WithMany(p => p.SolicitudVacacionGerenteNavigations)
                .HasForeignKey(d => d.Gerente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_VACACION_FUNCIONARIO1");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudVacacionIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_VACACION_FUNCIONARIO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.SolicitudVacacionIdUsuarioNavigations)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_SOLICITUD_VACACION_USUARIO");

            entity.HasOne(d => d.IdUsuarioGerenteNavigation)
                .WithMany(p => p.SolicitudVacacionIdUsuarioGerenteNavigations)
                .HasForeignKey(d => d.IdUsuarioGerente)
                .HasConstraintName("FK_SOLICITUD_VACACION_USUARIO1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.SolicitudVacacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOLICITUD_VACACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<SolicitudVehiculo>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudVehiculo);

            entity.ToTable("SOLICITUD_VEHICULO", "dbo");

            entity.Property(e => e.IdSolicitudVehiculo).HasColumnName("ID_SOLICITUD_VEHICULO");

            entity.Property(e => e.Aprobacion).HasColumnName("APROBACION");

            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("COMENTARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDevolucion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DEVOLUCION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdTipoVehiculo).HasColumnName("ID_TIPO_VEHICULO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.SolicitudVehiculos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_SOLICITUD_VEHICULO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.SolicitudVehiculos)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_SOLICITUD_VEHICULO_FUNCIONARIO");

            entity.HasOne(d => d.IdTipoVehiculoNavigation)
                .WithMany(p => p.SolicitudVehiculos)
                .HasForeignKey(d => d.IdTipoVehiculo)
                .HasConstraintName("FK_SOLICITUD_VEHICULO_TIPO_VEHICULO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.SolicitudVehiculos)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_SOLICITUD_VEHICULO_USUARIO");
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => e.IdStock);

            entity.ToTable("STOCK", "dbo");

            entity.HasIndex(e => new { e.Fecha, e.IdProducto, e.IdDeposito, e.RegStatus }, "IDX_FACTURACION_COSTO");

            entity.HasIndex(e => new { e.IdProducto, e.IdLote, e.Fecha, e.IdUnidad, e.IdDeposito, e.Contable, e.Fisico, e.RegStatus, e.Empresa, e.Serie, e.IdTabla }, "IDX_STOCK_P_S_RECAL_STOCK_NUEVO");

            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");

            entity.Property(e => e.AjusteInterno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AJUSTE_INTERNO");

            entity.Property(e => e.AjusteInternoFecha)
                .HasColumnType("datetime")
                .HasColumnName("AJUSTE_INTERNO_FECHA");

            entity.Property(e => e.Comprobante)
                .HasColumnName("COMPROBANTE")
                .HasComment("Anteriormente Fatura");

            entity.Property(e => e.Contable)
                .HasColumnName("CONTABLE")
                .HasComment("0 = NO / 1 = SI");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoContableValor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE_VALOR");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoMedioCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MEDIO_COMPRA");

            entity.Property(e => e.CostoMedioContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MEDIO_CONTABLE");

            entity.Property(e => e.CostoMedioGerencial).HasColumnName("COSTO_MEDIO_GERENCIAL");

            entity.Property(e => e.CostoMedioGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MEDIO_GUARANI");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Fisico)
                .HasColumnName("FISICO")
                .HasComment("0 = NO / 1 = SI");

            entity.Property(e => e.IdCategoriaSemilla).HasColumnName("ID_CATEGORIA_SEMILLA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdEstadoOperacion)
                .HasColumnName("ID_ESTADO_OPERACION")
                .HasComment("Anteriormente el campo se llamaba ID_ESTADO, que era STATUS en el legacy, no se sabe aun cual es la funcion del campo.");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdStockReserva).HasColumnName("ID_STOCK_RESERVA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.IdZaranda).HasColumnName("ID_ZARANDA");

            entity.Property(e => e.OperacionOrigen)
                .HasColumnName("OPERACION_ORIGEN")
                .HasComment("Anteriormente Pedido");

            entity.Property(e => e.RefLanzamiento)
                .HasColumnName("REF_LANZAMIENTO")
                .HasComment("el ID del movimiento");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE")
                .HasComment("V: SIGEV, C: COMPRA, X: NOTA_CREDITO_PROVEEDOR, G: ROMANEO, L: LIQUIDACION, O: TRANSFORMACION, P: AGRICOLA_CIERRE, R: REQUISICION, S: AGRICOLA_SOLICITUD, T: TRANSFORMACION, U: RECEP_ENVIO");
        });

        modelBuilder.Entity<StockCosto>(entity =>
        {
            entity.HasKey(e => e.IdStockCosto);

            entity.ToTable("STOCK_COSTO", "dbo");

            entity.Property(e => e.IdStockCosto).HasColumnName("ID_STOCK_COSTO");

            entity.Property(e => e.CostoCompra).HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial).HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani).HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoMedioCompra).HasColumnName("COSTO_MEDIO_COMPRA");

            entity.Property(e => e.CostoMedioContable).HasColumnName("COSTO_MEDIO_CONTABLE");

            entity.Property(e => e.CostoMedioGerencial).HasColumnName("COSTO_MEDIO_GERENCIAL");

            entity.Property(e => e.CostoMedioGuarani).HasColumnName("COSTO_MEDIO_GUARANI");

            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoCosto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_COSTO");

            entity.HasOne(d => d.IdStockNavigation)
                .WithMany(p => p.StockCostos)
                .HasForeignKey(d => d.IdStock)
                .HasConstraintName("FK_STOCK_COSTO_STOCK");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.StockCostos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_STOCK_COSTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<StockCostoMedioContable>(entity =>
        {
            entity.HasKey(e => e.IdStockCostoMedioContable);

            entity.ToTable("STOCK_COSTO_MEDIO_CONTABLE", "dbo");

            entity.Property(e => e.IdStockCostoMedioContable).HasColumnName("ID_STOCK_COSTO_MEDIO_CONTABLE");

            entity.Property(e => e.CostoMedioContable)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("COSTO_MEDIO_CONTABLE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.StockCostoMedioContables)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_STOCK_COSTO_MEDIO_CONTABLE_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.StockCostoMedioContables)
                .HasForeignKey(d => d.IdProducto)
                .HasConstraintName("FK_STOCK_COSTO_MEDIO_CONTABLE_PRODUCTO");
        });

        modelBuilder.Entity<StockMinimo>(entity =>
        {
            entity.HasKey(e => e.IdStockMinimo);

            entity.ToTable("STOCK_MINIMO", "dbo");

            entity.Property(e => e.IdStockMinimo).HasColumnName("ID_STOCK_MINIMO");

            entity.Property(e => e.EmailEnviado)
                .HasColumnName("EMAIL_ENVIADO")
                .HasComment("0 - No; 1- Si");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 Salió; 1 Entró");

            entity.Property(e => e.FechaIngreso)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INGRESO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.StockMinimos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_MINIMO_EMPRESA");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.StockMinimos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_MINIMO_PRODUCTO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.StockMinimos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_MINIMO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<StockReserva>(entity =>
        {
            entity.HasKey(e => e.IdStockReserva);

            entity.ToTable("STOCK_RESERVA", "dbo");

            entity.Property(e => e.IdStockReserva)
                .ValueGeneratedNever()
                .HasColumnName("ID_STOCK_RESERVA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.StockReservas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_EMPRESA");

            entity.HasOne(d => d.IdEstadoNavigation)
                .WithMany(p => p.StockReservas)
                .HasForeignKey(d => d.IdEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_ESTADO_OPERACION");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.StockReservas)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_TABLA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.StockReservas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<StockReservaCargaExp>(entity =>
        {
            entity.HasKey(e => e.IdStockReservaCargaExp);

            entity.ToTable("STOCK_RESERVA_CARGA_EXP", "dbo");

            entity.Property(e => e.IdStockReservaCargaExp).HasColumnName("ID_STOCK_RESERVA_CARGA_EXP");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTablaPadre).HasColumnName("ID_TABLA_PADRE");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.StockReservaCargaExps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.StockReservaCargaExps)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.StockReservaCargaExps)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.StockReservaCargaExps)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.StockReservaCargaExpIdTablaNavigations)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_TABLA");

            entity.HasOne(d => d.IdTablaPadreNavigation)
                .WithMany(p => p.StockReservaCargaExpIdTablaPadreNavigations)
                .HasForeignKey(d => d.IdTablaPadre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_TABLA1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.StockReservaCargaExps)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CARGA_EXP_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<StockReservaConsumo>(entity =>
        {
            entity.HasKey(e => e.IdStockReservaConsumo);

            entity.ToTable("STOCK_RESERVA_CONSUMO", "dbo");

            entity.Property(e => e.IdStockReservaConsumo).HasColumnName("ID_STOCK_RESERVA_CONSUMO");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDepositoDest).HasColumnName("ID_DEPOSITO_DEST");

            entity.Property(e => e.IdDepositoOri).HasColumnName("ID_DEPOSITO_ORI");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTablaPadre).HasColumnName("ID_TABLA_PADRE");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.StockReservaConsumos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_EMPRESA");

            entity.HasOne(d => d.IdDepositoDestNavigation)
                .WithMany(p => p.StockReservaConsumoIdDepositoDestNavigations)
                .HasForeignKey(d => d.IdDepositoDest)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_DEPOSITO1");

            entity.HasOne(d => d.IdDepositoOriNavigation)
                .WithMany(p => p.StockReservaConsumoIdDepositoOriNavigations)
                .HasForeignKey(d => d.IdDepositoOri)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.StockReservaConsumos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.StockReservaConsumos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.StockReservaConsumoIdTablaNavigations)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_TABLA");

            entity.HasOne(d => d.IdTablaPadreNavigation)
                .WithMany(p => p.StockReservaConsumoIdTablaPadreNavigations)
                .HasForeignKey(d => d.IdTablaPadre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_TABLA1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.StockReservaConsumos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_CONSUMO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<StockReservaProducto>(entity =>
        {
            entity.HasKey(e => e.IdStockReservaProducto);

            entity.ToTable("STOCK_RESERVA_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.IdStockReserva, e.IdProducto, e.IdLote, e.RegStatus }, "UK_STOCK_RESERVA_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdStockReservaProducto)
                .ValueGeneratedNever()
                .HasColumnName("ID_STOCK_RESERVA_PRODUCTO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdStockReserva).HasColumnName("ID_STOCK_RESERVA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.StockReservaProductos)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_PRODUCTO_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.StockReservaProductos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_PRODUCTO_PRODUCTO");

            entity.HasOne(d => d.IdStockReservaNavigation)
                .WithMany(p => p.StockReservaProductos)
                .HasForeignKey(d => d.IdStockReserva)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_RESERVA_PRODUCTO_STOCK_RESERVA");
        });

        modelBuilder.Entity<StockUbicacion>(entity =>
        {
            entity.HasKey(e => e.IdStockUbicacion);

            entity.ToTable("STOCK_UBICACION", "dbo");

            entity.Property(e => e.IdStockUbicacion).HasColumnName("ID_STOCK_UBICACION");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.OperacionOrigen).HasColumnName("OPERACION_ORIGEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus)
                .HasColumnName("REG_STATUS")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("SALIDA");

            entity.Property(e => e.X).HasComment("Ubicacion en el eje X");

            entity.Property(e => e.Y).HasComment("Ubicacion en el eje Y");

            entity.Property(e => e.Z).HasComment("Ubicacion en el eje Z");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.StockUbicacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.StockUbicacions)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_DEPOSITO");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.StockUbicacions)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.StockUbicacions)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_PRODUCTO");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.StockUbicacions)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_TABLA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.StockUbicacionIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.StockUbicacionRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_STOCK_UBICACION_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<Tabla>(entity =>
        {
            entity.HasKey(e => e.IdTabla);

            entity.ToTable("TABLA", "dbo");

            entity.Property(e => e.IdTabla)
                .ValueGeneratedNever()
                .HasColumnName("ID_TABLA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<TablaCodigo>(entity =>
        {
            entity.HasKey(e => e.IdTablaCodigo);

            entity.ToTable("TABLA_CODIGO", "dbo");

            entity.HasIndex(e => new { e.IdTabla, e.Empresa }, "UK_TABLA_CODIGO_1")
                .IsUnique();

            entity.Property(e => e.IdTablaCodigo).HasColumnName("ID_TABLA_CODIGO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.TablaCodigos)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TABLA_CODIGO_TABLA");
        });

        modelBuilder.Entity<TallerEspecialidadOt>(entity =>
        {
            entity.HasKey(e => e.IdTallerEspecialidadOt)
                .HasName("PK_TALLER_TALLER_OT");

            entity.ToTable("TALLER_ESPECIALIDAD_OT", "dbo");

            entity.Property(e => e.IdTallerEspecialidadOt).HasColumnName("ID_TALLER_ESPECIALIDAD_OT");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerEspecialidadOts)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_TALLER_OT_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerEspecialidadOts)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ESPECIALIDAD_OT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerEspecialidadRutina>(entity =>
        {
            entity.HasKey(e => e.IdTallerEspecialidadRutina);

            entity.ToTable("TALLER_ESPECIALIDAD_RUTINA", "dbo");

            entity.Property(e => e.IdTallerEspecialidadRutina).HasColumnName("ID_TALLER_ESPECIALIDAD_RUTINA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerEspecialidadRutinas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ESPECIALIDAD_RUTINA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerEspecialidadRutinas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ESPECIALIDAD_RUTINA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerGuardium>(entity =>
        {
            entity.HasKey(e => e.IdTallerGuardia);

            entity.ToTable("TALLER_GUARDIA", "dbo");

            entity.Property(e => e.IdTallerGuardia).HasColumnName("ID_TALLER_GUARDIA");

            entity.Property(e => e.Detalle)
                .IsUnicode(false)
                .HasColumnName("DETALLE");

            entity.Property(e => e.DuracionHorasEst).HasColumnName("DURACION_HORAS_EST");

            entity.Property(e => e.DuracionMinutosEst).HasColumnName("DURACION_MINUTOS_EST");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historial)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("HISTORIAL");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaEquipoDet).HasColumnName("ID_FABRICA_EQUIPO_DET");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoEjecutor).HasColumnName("TIPO_EJECUTOR");

            entity.HasOne(d => d.IdFabricaEquipoNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.IdFabricaEquipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_GUARDIA_FABRICA_EQUIPO");

            entity.HasOne(d => d.IdFabricaEquipoDetNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.IdFabricaEquipoDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_GUARDIA_FABRICA_EQUIPO_DET");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_GUARDIA_FABRICA_LINEA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_TALLER_GUARDIA_FUNCIONARIO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_TALLER_GUARDIA_PROVEEDOR");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("FK_TALLER_GUARDIA_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerGuardia)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_GUARDIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerMovimiento>(entity =>
        {
            entity.HasKey(e => e.IdTallerMovimiento);

            entity.ToTable("TALLER_MOVIMIENTO", "dbo");

            entity.Property(e => e.IdTallerMovimiento).HasColumnName("ID_TALLER_MOVIMIENTO");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaEquipoDet).HasColumnName("ID_FABRICA_EQUIPO_DET");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdMovimientoPadre).HasColumnName("ID_MOVIMIENTO_PADRE");

            entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTablaPadre).HasColumnName("ID_TABLA_PADRE");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.UsuarioAutorizador).HasColumnName("USUARIO_AUTORIZADOR");

            entity.Property(e => e.UsuarioRegistro)
                .HasColumnName("USUARIO_REGISTRO")
                .HasComment("Para pedido de trabajo es el solicitante. ");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerMovimientos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_MOVIMIENTO_EMPRESA");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.TallerMovimientos)
                .HasForeignKey(d => d.IdFabricaLinea)
                .HasConstraintName("FK_TALLER_MOVIMIENTO_FABRICA_LINEA");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.TallerMovimientoIdTablaNavigations)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_MOVIMIENTO_TABLA");

            entity.HasOne(d => d.IdTablaPadreNavigation)
                .WithMany(p => p.TallerMovimientoIdTablaPadreNavigations)
                .HasForeignKey(d => d.IdTablaPadre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_MOVIMIENTO_TABLA1");
        });

        modelBuilder.Entity<TallerOrdenTrabajo>(entity =>
        {
            entity.HasKey(e => e.IdTallerOrdenTrabajo);

            entity.ToTable("TALLER_ORDEN_TRABAJO", "dbo");

            entity.Property(e => e.IdTallerOrdenTrabajo).HasColumnName("ID_TALLER_ORDEN_TRABAJO");

            entity.Property(e => e.Criticidad).HasColumnName("CRITICIDAD");

            entity.Property(e => e.DetalleOt)
                .IsUnicode(false)
                .HasColumnName("DETALLE_OT");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaProgramacionEjec)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROGRAMACION_EJEC");

            entity.Property(e => e.IdFuncionario)
                .HasColumnName("ID_FUNCIONARIO")
                .HasComment("Funcionario que ejecuta la obra");

            entity.Property(e => e.IdProveedor)
                .HasColumnName("ID_PROVEEDOR")
                .HasComment("Proveedor que ejecuta la obra");

            entity.Property(e => e.IdTallerEspecialidadOt).HasColumnName("ID_TALLER_ESPECIALIDAD_OT");

            entity.Property(e => e.IdTallerPedidoTrabajo).HasColumnName("ID_TALLER_PEDIDO_TRABAJO");

            entity.Property(e => e.IdTallerTipoOt).HasColumnName("ID_TALLER_TIPO_OT");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.MontoEstimado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MONTO_ESTIMADO");

            entity.Property(e => e.RealizarEn).HasColumnName("REALIZAR_EN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoEjecutor)
                .HasColumnName("TIPO_EJECUTOR")
                .HasComment("0 - Propio. 1 - Tercero");

            entity.Property(e => e.UsuarioAsignador)
                .HasColumnName("USUARIO_ASIGNADOR")
                .HasComment("id_funcionario");

            entity.Property(e => e.UsuarioResponsable)
                .HasColumnName("USUARIO_RESPONSABLE")
                .HasComment("id_usuario");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerOrdenTrabajos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.TallerOrdenTrabajos)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_FUNCIONARIO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TallerOrdenTrabajos)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_PROVEEDOR");

            entity.HasOne(d => d.IdTallerEspecialidadOtNavigation)
                .WithMany(p => p.TallerOrdenTrabajos)
                .HasForeignKey(d => d.IdTallerEspecialidadOt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_TALLER_TALLER_OT");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerOrdenTrabajos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UsuarioAsignadorNavigation)
                .WithMany(p => p.TallerOrdenTrabajoUsuarioAsignadorNavigations)
                .HasForeignKey(d => d.UsuarioAsignador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_USUARIO1");

            entity.HasOne(d => d.UsuarioResponsableNavigation)
                .WithMany(p => p.TallerOrdenTrabajoUsuarioResponsableNavigations)
                .HasForeignKey(d => d.UsuarioResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_USUARIO");
        });

        modelBuilder.Entity<TallerOrdenTrabajoCierre>(entity =>
        {
            entity.HasKey(e => e.IdTallerOrdenTrabajoCierre);

            entity.ToTable("TALLER_ORDEN_TRABAJO_CIERRE", "dbo");

            entity.Property(e => e.IdTallerOrdenTrabajoCierre).HasColumnName("ID_TALLER_ORDEN_TRABAJO_CIERRE");

            entity.Property(e => e.Duracion).HasColumnName("DURACION");

            entity.Property(e => e.DuracionHorasEst).HasColumnName("DURACION_HORAS_EST");

            entity.Property(e => e.DuracionMinutosEst).HasColumnName("DURACION_MINUTOS_EST");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaEjecucion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EJECUCION");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTallerOrdenTrabajo).HasColumnName("ID_TALLER_ORDEN_TRABAJO");

            entity.Property(e => e.IdUsuario)
                .HasColumnName("ID_USUARIO")
                .HasComment("id_usuario responsable");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Termino)
                .HasColumnName("TERMINO")
                .HasComment("0 - Cierre Parcial. 1 - Cierre Final. ");

            entity.Property(e => e.TipoEjecutor).HasColumnName("TIPO_EJECUTOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerOrdenTrabajoCierres)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CIERRE_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.TallerOrdenTrabajoCierres)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CIERRE_FUNCIONARIO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TallerOrdenTrabajoCierres)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CIERRE_PROVEEDOR");

            entity.HasOne(d => d.IdTallerOrdenTrabajoNavigation)
                .WithMany(p => p.TallerOrdenTrabajoCierres)
                .HasForeignKey(d => d.IdTallerOrdenTrabajo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CIERRE_TALLER_ORDEN_TRABAJO");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.TallerOrdenTrabajoCierres)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CIERRE_USUARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerOrdenTrabajoCierres)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CIERRE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerOrdenTrabajoConformidad>(entity =>
        {
            entity.HasKey(e => e.IdTallerOrdenTrabajoConfor);

            entity.ToTable("TALLER_ORDEN_TRABAJO_CONFORMIDAD", "dbo");

            entity.Property(e => e.IdTallerOrdenTrabajoConfor).HasColumnName("ID_TALLER_ORDEN_TRABAJO_CONFOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado).HasColumnName("ESTADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaConformidad)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CONFORMIDAD");

            entity.Property(e => e.IdTallerOrdenTrabajoCierre).HasColumnName("ID_TALLER_ORDEN_TRABAJO_CIERRE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdTallerOrdenTrabajoCierreNavigation)
                .WithMany(p => p.TallerOrdenTrabajoConformidads)
                .HasForeignKey(d => d.IdTallerOrdenTrabajoCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CONFORMIDAD_TALLER_ORDEN_TRABAJO_CIERRE");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.TallerOrdenTrabajoConformidads)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CONFORMIDAD_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerOrdenTrabajoConformidads)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_ORDEN_TRABAJO_CONFORMIDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerPedidoTrabajo>(entity =>
        {
            entity.HasKey(e => e.IdTallerPedidoTrabajo);

            entity.ToTable("TALLER_PEDIDO_TRABAJO", "dbo");

            entity.Property(e => e.IdTallerPedidoTrabajo)
                .HasColumnName("ID_TALLER_PEDIDO_TRABAJO")
                .HasComment("ID_FUNCIONARIO de la persona solicitante");

            entity.Property(e => e.Criticidad)
                .HasColumnName("CRITICIDAD")
                .HasComment("0 - Alta. 1 -Media. 2 - Baja");

            entity.Property(e => e.DetallePt)
                .IsUnicode(false)
                .HasColumnName("DETALLE_PT");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 - FALTA APROBACIÓN 1 - APROBADO 2 - RECHAZADO");

            entity.Property(e => e.EstadoConformidad).HasColumnName("ESTADO_CONFORMIDAD");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaEquipoDet).HasColumnName("ID_FABRICA_EQUIPO_DET");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RealizarEn)
                .HasColumnName("REALIZAR_EN")
                .HasComment("0 - Parada. 1 - Produccion.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.UsuarioAutorizador).HasColumnName("USUARIO_AUTORIZADOR");

            entity.Property(e => e.UsuarioSolicitante)
                .HasColumnName("USUARIO_SOLICITANTE")
                .HasComment("id_usuario del solicitante del pedido de trabajo");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerPedidoTrabajos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_EMPRESA");

            entity.HasOne(d => d.IdFabricaEquipoNavigation)
                .WithMany(p => p.TallerPedidoTrabajos)
                .HasForeignKey(d => d.IdFabricaEquipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_FABRICA_EQUIPO");

            entity.HasOne(d => d.IdFabricaEquipoDetNavigation)
                .WithMany(p => p.TallerPedidoTrabajos)
                .HasForeignKey(d => d.IdFabricaEquipoDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_FABRICA_EQUIPO_DET");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.TallerPedidoTrabajos)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_FABRICA_LINEA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerPedidoTrabajos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UsuarioAutorizadorNavigation)
                .WithMany(p => p.TallerPedidoTrabajoUsuarioAutorizadorNavigations)
                .HasForeignKey(d => d.UsuarioAutorizador)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_USUARIO1");

            entity.HasOne(d => d.UsuarioSolicitanteNavigation)
                .WithMany(p => p.TallerPedidoTrabajoUsuarioSolicitanteNavigations)
                .HasForeignKey(d => d.UsuarioSolicitante)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_TRABAJO_USUARIO3");
        });

        modelBuilder.Entity<TallerPedidoTrabajoAdjunto>(entity =>
        {
            entity.HasKey(e => e.IdTallerPedidoTrabAdjunto)
                .HasName("PK_TALLER_PEDIDO_ADJUNTO");

            entity.ToTable("TALLER_PEDIDO_TRABAJO_ADJUNTO", "dbo");

            entity.Property(e => e.IdTallerPedidoTrabAdjunto).HasColumnName("ID_TALLER_PEDIDO_TRAB_ADJUNTO");

            entity.Property(e => e.DescripcionArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ARCHIVO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTallerPedidoTrabajo).HasColumnName("ID_TALLER_PEDIDO_TRABAJO");

            entity.Property(e => e.PathArchivo)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PATH_ARCHIVO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoArchivo)
                .HasColumnName("TIPO_ARCHIVO")
                .HasComment("0 - Video 1 - Foto 2 - Pdf");

            entity.HasOne(d => d.IdTallerPedidoTrabajoNavigation)
                .WithMany(p => p.TallerPedidoTrabajoAdjuntos)
                .HasForeignKey(d => d.IdTallerPedidoTrabajo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_PEDIDO_ADJUNTO_TALLER_PEDIDO_TRABAJO");
        });

        modelBuilder.Entity<TallerRutina>(entity =>
        {
            entity.HasKey(e => e.IdTallerRutina);

            entity.ToTable("TALLER_RUTINA", "dbo");

            entity.Property(e => e.IdTallerRutina).HasColumnName("ID_TALLER_RUTINA");

            entity.Property(e => e.DescripcionTarea)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TAREA");

            entity.Property(e => e.DuracionHorasEst).HasColumnName("DURACION_HORAS_EST");

            entity.Property(e => e.DuracionMinutosEst).HasColumnName("DURACION_MINUTOS_EST");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 - PENDIENTE 1 - VIGENTE 2 - FINALIZADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaFinalizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FINALIZACION");

            entity.Property(e => e.FechaProximaEjecucion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROXIMA_EJECUCION");

            entity.Property(e => e.FechaUltimaEjecucion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ULTIMA_EJECUCION");

            entity.Property(e => e.Frecuencia)
                .HasColumnName("FRECUENCIA")
                .HasComment("0 - Diaria. 1 - Semanal. 2 - Mensual. 3 - Semestral. 4 - Anual.");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaEquipoDet).HasColumnName("ID_FABRICA_EQUIPO_DET");

            entity.Property(e => e.IdFabricaLinea).HasColumnName("ID_FABRICA_LINEA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTallerEspecialidadRutina).HasColumnName("ID_TALLER_ESPECIALIDAD_RUTINA");

            entity.Property(e => e.IdTallerTipoRutina).HasColumnName("ID_TALLER_TIPO_RUTINA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MotivoFinalizacion)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_FINALIZACION");

            entity.Property(e => e.PlazoEnDias).HasColumnName("PLAZO_EN_DIAS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoEjecutor)
                .HasColumnName("TIPO_EJECUTOR")
                .HasComment("0 - Propio. 1 - Tercero");

            entity.Property(e => e.UsuarioAsignador)
                .HasColumnName("USUARIO_ASIGNADOR")
                .HasComment("Usuario Emisor, (log_usuario en el delphi)");

            entity.Property(e => e.UsuarioFinalizacion).HasColumnName("USUARIO_FINALIZACION");

            entity.Property(e => e.UsuarioResponsable)
                .HasColumnName("USUARIO_RESPONSABLE")
                .HasComment("Funcionario Responsable");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_EMPRESA");

            entity.HasOne(d => d.IdFabricaEquipoNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.IdFabricaEquipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_FABRICA_EQUIPO");

            entity.HasOne(d => d.IdFabricaEquipoDetNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.IdFabricaEquipoDet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_FABRICA_EQUIPO_DET");

            entity.HasOne(d => d.IdFabricaLineaNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.IdFabricaLinea)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_FABRICA_LINEA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_TALLER_RUTINA_FUNCIONARIO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_TALLER_RUTINA_PROVEEDOR");

            entity.HasOne(d => d.IdTallerTipoRutinaNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.IdTallerTipoRutina)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_TALLER_TIPO_RUTINA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerRutinas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_EMPRESA_UNIDAD");

            entity.HasOne(d => d.UsuarioAsignadorNavigation)
                .WithMany(p => p.TallerRutinaUsuarioAsignadorNavigations)
                .HasForeignKey(d => d.UsuarioAsignador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_USUARIO");

            entity.HasOne(d => d.UsuarioFinalizacionNavigation)
                .WithMany(p => p.TallerRutinaUsuarioFinalizacionNavigations)
                .HasForeignKey(d => d.UsuarioFinalizacion)
                .HasConstraintName("FK_TALLER_RUTINA_USUARIO2");

            entity.HasOne(d => d.UsuarioResponsableNavigation)
                .WithMany(p => p.TallerRutinaUsuarioResponsableNavigations)
                .HasForeignKey(d => d.UsuarioResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_USUARIO1");
        });

        modelBuilder.Entity<TallerRutinaCierre>(entity =>
        {
            entity.HasKey(e => e.IdTallerRutinaCierre);

            entity.ToTable("TALLER_RUTINA_CIERRE", "dbo");

            entity.Property(e => e.IdTallerRutinaCierre).HasColumnName("ID_TALLER_RUTINA_CIERRE");

            entity.Property(e => e.DuracionHoras).HasColumnName("DURACION_HORAS");

            entity.Property(e => e.DuracionMinutos).HasColumnName("DURACION_MINUTOS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaEjecucionReal)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EJECUCION_REAL");

            entity.Property(e => e.FechaEjecucionRutina)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EJECUCION_RUTINA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTallerRutina).HasColumnName("ID_TALLER_RUTINA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("MONTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ResponsableCierre).HasColumnName("RESPONSABLE_CIERRE");

            entity.Property(e => e.TipoEjecutor).HasColumnName("TIPO_EJECUTOR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerRutinaCierres)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_CIERRE_EMPRESA1");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.TallerRutinaCierres)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_TALLER_RUTINA_CIERRE_FUNCIONARIO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TallerRutinaCierres)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_TALLER_RUTINA_CIERRE_PROVEEDOR");

            entity.HasOne(d => d.IdTallerRutinaNavigation)
                .WithMany(p => p.TallerRutinaCierres)
                .HasForeignKey(d => d.IdTallerRutina)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_CIERRE_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerRutinaCierres)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_CIERRE_EMPRESA_UNIDAD");

            entity.HasOne(d => d.ResponsableCierreNavigation)
                .WithMany(p => p.TallerRutinaCierres)
                .HasForeignKey(d => d.ResponsableCierre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_CIERRE_USUARIO");
        });

        modelBuilder.Entity<TallerRutinaReprogramar>(entity =>
        {
            entity.HasKey(e => e.IdTallerRutinaReprogramar);

            entity.ToTable("TALLER_RUTINA_REPROGRAMAR", "dbo");

            entity.Property(e => e.IdTallerRutinaReprogramar).HasColumnName("ID_TALLER_RUTINA_REPROGRAMAR");

            entity.Property(e => e.Detalle)
                .IsUnicode(false)
                .HasColumnName("DETALLE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaProximaEjecucion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROXIMA_EJECUCION");

            entity.Property(e => e.FechaProximaEjecucionHist)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PROXIMA_EJECUCION_HIST");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.Frecuencia).HasColumnName("FRECUENCIA");

            entity.Property(e => e.FrecuenciaHist).HasColumnName("FRECUENCIA_HIST");

            entity.Property(e => e.IdTallerRutina).HasColumnName("ID_TALLER_RUTINA");

            entity.Property(e => e.IdUsuario)
                .HasColumnName("ID_USUARIO")
                .HasComment("id del usuario que realiza la reprogramación");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.PlazoEnDias).HasColumnName("PLAZO_EN_DIAS");

            entity.Property(e => e.PlazoEnDiasHist).HasColumnName("PLAZO_EN_DIAS_HIST");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerRutinaReprogramars)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_REPROGRAMAR_EMPRESA");

            entity.HasOne(d => d.IdTallerRutinaNavigation)
                .WithMany(p => p.TallerRutinaReprogramars)
                .HasForeignKey(d => d.IdTallerRutina)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_REPROGRAMAR_TALLER_RUTINA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.TallerRutinaReprogramars)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_REPROGRAMAR_FUNCIONARIO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerRutinaReprogramars)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_RUTINA_REPROGRAMAR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerTipoOt>(entity =>
        {
            entity.HasKey(e => e.IdTallerTipoOt);

            entity.ToTable("TALLER_TIPO_OT", "dbo");

            entity.Property(e => e.IdTallerTipoOt).HasColumnName("ID_TALLER_TIPO_OT");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerTipoOts)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_TIPO_OT_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerTipoOts)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_TIPO_OT_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TallerTipoRutina>(entity =>
        {
            entity.HasKey(e => e.IdTallerTipoRutina);

            entity.ToTable("TALLER_TIPO_RUTINA", "dbo");

            entity.Property(e => e.IdTallerTipoRutina).HasColumnName("ID_TALLER_TIPO_RUTINA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TallerTipoRutinas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_TIPO_RUTINA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TallerTipoRutinas)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TALLER_TIPO_RUTINA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TiempoTraslado>(entity =>
        {
            entity.HasKey(e => e.IdTiempoTraslado);

            entity.ToTable("TIEMPO_TRASLADO", "dbo");

            entity.HasIndex(e => new { e.IdTipoTransporte, e.PuertoOrigen, e.PuertoDestino, e.RegStatus }, "UK_TIEMPO_TRASLADO")
                .IsUnique();

            entity.Property(e => e.IdTiempoTraslado).HasColumnName("ID_TIEMPO_TRASLADO");

            entity.Property(e => e.EmbarqueEtd)
                .HasColumnName("EMBARQUE_ETD")
                .HasComment("Estimativo tiempo de delivery desde el embarque  (cant. dias)");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Etd)
                .HasColumnName("ETD")
                .HasComment("Estimativo tiempo de delivery  (cant. dias)");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.PuertoDestino)
                .HasColumnName("PUERTO_DESTINO")
                .HasComment("Id Puerto del destino.");

            entity.Property(e => e.PuertoOrigen)
                .HasColumnName("PUERTO_ORIGEN")
                .HasComment("Id Puerto del origen.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TiempoTraslados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIEMPO_TRASLADO_EMPRESA");

            entity.HasOne(d => d.IdTipoTransporteNavigation)
                .WithMany(p => p.TiempoTraslados)
                .HasForeignKey(d => d.IdTipoTransporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIEMPO_TRASLADO_TIPO_TRANSPORTE");

            entity.HasOne(d => d.PuertoDestinoNavigation)
                .WithMany(p => p.TiempoTrasladoPuertoDestinoNavigations)
                .HasForeignKey(d => d.PuertoDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIEMPO_TRASLADO_PUERTO1");

            entity.HasOne(d => d.PuertoOrigenNavigation)
                .WithMany(p => p.TiempoTrasladoPuertoOrigenNavigations)
                .HasForeignKey(d => d.PuertoOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIEMPO_TRASLADO_PUERTO");
        });

        modelBuilder.Entity<Timbrado>(entity =>
        {
            entity.HasKey(e => e.IdTimbrado);

            entity.ToTable("TIMBRADO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Timbrado1 }, "UK_TIMBRADO")
                .IsUnique();

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Timbrado1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Timbrados)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIMBRADO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Timbrados)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIMBRADO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TimbradoExpedidor>(entity =>
        {
            entity.HasKey(e => e.IdTimbradoExpedidor);

            entity.ToTable("TIMBRADO_EXPEDIDOR", "dbo");

            entity.HasIndex(e => new { e.IdTimbrado, e.IdUnidad, e.IdDocumento, e.Expedidor, e.TipoEmision }, "UK_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.IdTimbradoExpedidor).HasColumnName("ID_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.Expedidor).HasColumnName("EXPEDIDOR");

            entity.Property(e => e.FechaEnvio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENVIO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Interno).HasColumnName("INTERNO");

            entity.Property(e => e.RangoFin).HasColumnName("RANGO_FIN");

            entity.Property(e => e.RangoIni).HasColumnName("RANGO_INI");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoEmision).HasColumnName("TIPO_EMISION");

            entity.HasOne(d => d.IdResponsableNavigation)
                .WithMany(p => p.TimbradoExpedidors)
                .HasForeignKey(d => d.IdResponsable)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIMBRADO_EXPEDIDOR_USUARIO");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.TimbradoExpedidors)
                .HasForeignKey(d => d.IdTimbrado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIMBRADO_EXPEDIDOR_TIMBRADO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.TimbradoExpedidors)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIMBRADO_EXPEDIDOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TimbradoExpedidorDet>(entity =>
        {
            entity.HasKey(e => e.IdTimbradoExpedidorDet)
                .HasName("PK_TIMBRADO_DISTRIBUCION");

            entity.ToTable("TIMBRADO_EXPEDIDOR_DET", "dbo");

            entity.Property(e => e.IdTimbradoExpedidorDet).HasColumnName("ID_TIMBRADO_EXPEDIDOR_DET");

            entity.Property(e => e.FechaEnvio)
                .HasColumnType("date")
                .HasColumnName("FECHA_ENVIO");

            entity.Property(e => e.FechaRetorna)
                .HasColumnType("date")
                .HasColumnName("FECHA_RETORNA");

            entity.Property(e => e.IdAutorizador).HasColumnName("ID_AUTORIZADOR");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdTimbradoExpedidor).HasColumnName("ID_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.Observacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdAutorizadorNavigation)
                .WithMany(p => p.TimbradoExpedidorDets)
                .HasForeignKey(d => d.IdAutorizador)
                .HasConstraintName("FK_TIMBRADO_EXPEDIDOR_DET_USUARIO");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.TimbradoExpedidorDets)
                .HasForeignKey(d => d.IdCentroCosto)
                .HasConstraintName("FK_TIMBRADO_EXPEDIDOR_DET_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdTimbradoExpedidorNavigation)
                .WithMany(p => p.TimbradoExpedidorDets)
                .HasForeignKey(d => d.IdTimbradoExpedidor)
                .HasConstraintName("FK_TIMBRADO_EXPEDIDOR_DET_TIMBRADO_EXPEDIDOR");
        });

        modelBuilder.Entity<TimbradoNumeracion>(entity =>
        {
            entity.HasKey(e => e.IdTimbradoNumeracion);

            entity.ToTable("TIMBRADO_NUMERACION", "dbo");

            entity.Property(e => e.IdTimbradoNumeracion).HasColumnName("ID_TIMBRADO_NUMERACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTimbradoExpedidor).HasColumnName("ID_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.NroComprobante).HasColumnName("NRO_COMPROBANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TimbradoNumeracions)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_TIMBRADO_NUMERACION_EMPRESA");

            entity.HasOne(d => d.IdTimbradoExpedidorNavigation)
                .WithMany(p => p.TimbradoNumeracions)
                .HasForeignKey(d => d.IdTimbradoExpedidor)
                .HasConstraintName("FK_TIMBRADO_NUMERACION_TIMBRADO_EXPEDIDOR");
        });

        modelBuilder.Entity<TipoActuacion>(entity =>
        {
            entity.HasKey(e => e.IdTipoActuacion);

            entity.ToTable("TIPO_ACTUACION", "dbo");

            entity.Property(e => e.IdTipoActuacion).HasColumnName("ID_TIPO_ACTUACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoActuacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_ACTUACION_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TipoActuacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_ACTUACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TipoAsiento>(entity =>
        {
            entity.HasKey(e => e.IdTipoAsiento);

            entity.ToTable("TIPO_ASIENTO", "dbo");

            entity.Property(e => e.IdTipoAsiento).HasColumnName("ID_TIPO_ASIENTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoAsientos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_ASIENTO_EMPRESA");
        });

        modelBuilder.Entity<TipoAusencium>(entity =>
        {
            entity.HasKey(e => e.IdTipoAusencia);

            entity.ToTable("TIPO_AUSENCIA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TIPO_AUSENCIA")
                .IsUnique();

            entity.Property(e => e.IdTipoAusencia).HasColumnName("ID_TIPO_AUSENCIA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoAusencia)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_AUSENCIA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TipoAusencia)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_AUSENCIA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TipoCamion>(entity =>
        {
            entity.HasKey(e => e.IdTipoCamion);

            entity.ToTable("TIPO_CAMION", "dbo");

            entity.Property(e => e.IdTipoCamion).HasColumnName("ID_TIPO_CAMION");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoCamions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_CAMION_EMPRESA");
        });

        modelBuilder.Entity<TipoComprobanteImp>(entity =>
        {
            entity.HasKey(e => e.IdTipoComprobanteImp)
                .HasName("PK_TIPO_COMPROBANTE");

            entity.ToTable("TIPO_COMPROBANTE_IMP", "dbo");

            entity.Property(e => e.IdTipoComprobanteImp).HasColumnName("ID_TIPO_COMPROBANTE_IMP");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoComprobanteImps)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_COMPROBANTE_IMP_EMPRESA");
        });

        modelBuilder.Entity<TipoEmbalajeComex>(entity =>
        {
            entity.HasKey(e => e.IdTipoEmbalajeComex);

            entity.ToTable("TIPO_EMBALAJE_COMEX", "dbo");

            entity.Property(e => e.IdTipoEmbalajeComex).HasColumnName("ID_TIPO_EMBALAJE_COMEX");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoEmbalajeComices)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_EMBALAJE_COMEX_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TipoEmbalajeComices)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_EMBALAJE_COMEX_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TipoProceso>(entity =>
        {
            entity.HasKey(e => e.IdTipoProceso);

            entity.ToTable("TIPO_PROCESO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_TIPO_PROCESO")
                .IsUnique();

            entity.Property(e => e.IdTipoProceso).HasColumnName("ID_TIPO_PROCESO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoProcesos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_TIPO_PROCESO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TipoProcesos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_TIPO_PROCESO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TipoProducto>(entity =>
        {
            entity.HasKey(e => e.IdTipoProducto);

            entity.ToTable("TIPO_PRODUCTO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TIPO_PRODUCTO")
                .IsUnique();

            entity.Property(e => e.IdTipoProducto).HasColumnName("ID_TIPO_PRODUCTO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("VALIDO")
                .IsFixedLength()
                .HasComment("S = Valido, N = No valido, no se puede mas seleccionar.");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoProductos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_PRODUCTO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TipoProductos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_PRODUCTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TipoTransporte>(entity =>
        {
            entity.HasKey(e => e.IdTipoTransporte);

            entity.ToTable("TIPO_TRANSPORTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TIPO_TRANSPORTE")
                .IsUnique();

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DiasEspera)
                .HasColumnName("DIAS_ESPERA")
                .HasComment("Es el tiempo de transito por tipo de transporte.");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoTransportes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_TRANSPORTE_EMPRESA");
        });

        modelBuilder.Entity<TipoVehiculo>(entity =>
        {
            entity.HasKey(e => e.IdTipoVehiculo);

            entity.ToTable("TIPO_VEHICULO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Descripcion }, "UK_TIPO_VEHICULO")
                .IsUnique();

            entity.Property(e => e.IdTipoVehiculo).HasColumnName("ID_TIPO_VEHICULO");

            entity.Property(e => e.Capacidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CAPACIDAD");

            entity.Property(e => e.CapacidadKg)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CAPACIDAD_KG")
                .HasComment("Capacidad del Camion, unidad en Kg.");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TipoVehiculos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_VEHICULO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TipoVehiculos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TIPO_VEHICULO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransfCreditoCliente>(entity =>
        {
            entity.HasKey(e => e.IdTransfCreditoCliente);

            entity.ToTable("TRANSF_CREDITO_CLIENTE", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_TRANSF_CREDITO_CLIENTE")
                .IsUnique();

            entity.Property(e => e.IdTransfCreditoCliente).HasColumnName("ID_TRANSF_CREDITO_CLIENTE");

            entity.Property(e => e.AdelantoSaldo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAdelanto)
                .HasColumnName("ID_ADELANTO")
                .HasComment("ID_ADELANTO_CLIENTE o ID_ADELANTO_CONTRATO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoAdelanto)
                .HasColumnName("TIPO_ADELANTO")
                .HasComment("0:ADELANTO DE CLIENTE, 1:ADELANTO DE CONTRATO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransfCreditoClientes)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_EMPRESA");

            entity.HasOne(d => d.IdAdelantoNavigation)
                .WithMany(p => p.TransfCreditoClientes)
                .HasForeignKey(d => d.IdAdelanto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_ADELANTO_CLIENTE");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TransfCreditoClientes)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransfCreditoClienteDet>(entity =>
        {
            entity.HasKey(e => e.IdTransfCreditoClienteDet);

            entity.ToTable("TRANSF_CREDITO_CLIENTE_DET", "dbo");

            entity.Property(e => e.IdTransfCreditoClienteDet).HasColumnName("ID_TRANSF_CREDITO_CLIENTE_DET");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransfCreditoCliente).HasColumnName("ID_TRANSF_CREDITO_CLIENTE");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SerieFactura)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE_FACTURA");

            entity.Property(e => e.ValorCorregido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO");

            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO");

            entity.Property(e => e.ValorInteres)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES");

            entity.Property(e => e.ValorOriginal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL");

            entity.Property(e => e.ValorRecibido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_RECIBIDO");

            entity.Property(e => e.ValorTransferido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRANSFERIDO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.TransfCreditoClienteDets)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_DET_CARPETA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.TransfCreditoClienteDets)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_DET_TIMBRADO");

            entity.HasOne(d => d.IdTransfCreditoClienteNavigation)
                .WithMany(p => p.TransfCreditoClienteDets)
                .HasForeignKey(d => d.IdTransfCreditoCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_DET_TRANSF_CREDITO_CLIENTE");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.TransfCreditoClienteDets)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_TRANSF_CREDITO_CLIENTE_DET_VENDEDOR");
        });

        modelBuilder.Entity<TransfCreditoProvRetDet>(entity =>
        {
            entity.HasKey(e => e.IdTransfCreditoProvRetDet);

            entity.ToTable("TRANSF_CREDITO_PROV_RET_DET", "dbo");

            entity.Property(e => e.IdTransfCreditoProvRetDet).HasColumnName("ID_TRANSF_CREDITO_PROV_RET_DET");

            entity.Property(e => e.Factura)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTransfCreditoProvUnique).HasColumnName("ID_TRANSF_CREDITO_PROV_UNIQUE");

            entity.Property(e => e.IdTransfCreditoProveedor).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdTransfCreditoProveedorRet).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR_RET");

            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IVA");

            entity.Property(e => e.ImporteRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_RENTA");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorcIva).HasColumnName("PORC_IVA");

            entity.Property(e => e.PorcRenta).HasColumnName("PORC_RENTA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TransfCreditoProvRetDets)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROV_RET_DET_PROVEEDOR");

            entity.HasOne(d => d.IdTransfCreditoProveedorNavigation)
                .WithMany(p => p.TransfCreditoProvRetDets)
                .HasForeignKey(d => d.IdTransfCreditoProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROV_RET_DET_TRANSF_CREDITO_PROVEEDOR");

            entity.HasOne(d => d.IdTransfCreditoProveedorRetNavigation)
                .WithMany(p => p.TransfCreditoProvRetDets)
                .HasForeignKey(d => d.IdTransfCreditoProveedorRet)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROV_RET_DET_TRANSF_CREDITO_PROVEEDOR_RETENCION");
        });

        modelBuilder.Entity<TransfCreditoProveedor>(entity =>
        {
            entity.HasKey(e => e.IdTransfCreditoProveedor);

            entity.ToTable("TRANSF_CREDITO_PROVEEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.Fecha }, "UK_TRANSF_CREDITO_PROVEEDOR")
                .IsUnique();

            entity.Property(e => e.IdTransfCreditoProveedor).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR");

            entity.Property(e => e.AdelantoSaldoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO_DOLAR");

            entity.Property(e => e.AdelantoSaldoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO_GUARANI");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAdelantoProveedor).HasColumnName("ID_ADELANTO_PROVEEDOR");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransfCreditoProvUnique).HasColumnName("ID_TRANSF_CREDITO_PROV_UNIQUE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionFecha)
                .HasColumnType("datetime")
                .HasColumnName("RETENCION_FECHA");

            entity.Property(e => e.RetencionNota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RETENCION_NOTA");

            entity.Property(e => e.RetencionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL");

            entity.Property(e => e.RetencionTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL_US");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransfCreditoProveedors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_EMPRESA");

            entity.HasOne(d => d.IdAdelantoProveedorNavigation)
                .WithMany(p => p.TransfCreditoProveedors)
                .HasForeignKey(d => d.IdAdelantoProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_ADELANTO_PROVEEDOR");

            entity.HasOne(d => d.IdCompraExteriorNavigation)
                .WithMany(p => p.TransfCreditoProveedors)
                .HasForeignKey(d => d.IdCompraExterior)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_COMPRA_EXTERIOR");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.TransfCreditoProveedors)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_TIMBRADO");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TransfCreditoProveedors)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransfCreditoProveedorDet>(entity =>
        {
            entity.HasKey(e => e.IdTransfCreditoProveedorDet);

            entity.ToTable("TRANSF_CREDITO_PROVEEDOR_DET", "dbo");

            entity.Property(e => e.IdTransfCreditoProveedorDet).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR_DET");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTransfCreditoProvUnique).HasColumnName("ID_TRANSF_CREDITO_PROV_UNIQUE");

            entity.Property(e => e.IdTransfCreditoProveedor).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.ValorCorregido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO");

            entity.Property(e => e.ValorCorregidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO_GUARANI");

            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO");

            entity.Property(e => e.ValorDescuentoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO_GUARANI");

            entity.Property(e => e.ValorInteres)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES");

            entity.Property(e => e.ValorInteresGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES_GUARANI");

            entity.Property(e => e.ValorOriginal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL");

            entity.Property(e => e.ValorOriginalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL_GUARANI");

            entity.Property(e => e.ValorPagado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO");

            entity.Property(e => e.ValorPagadoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_GUARANI");

            entity.Property(e => e.ValorTransferido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRANSFERIDO");

            entity.Property(e => e.ValorTransferidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRANSFERIDO_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransfCreditoProveedorDets)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_DET_EMPRESA");

            entity.HasOne(d => d.IdCarpetaNavigation)
                .WithMany(p => p.TransfCreditoProveedorDets)
                .HasForeignKey(d => d.IdCarpeta)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_DET_CARPETA");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.TransfCreditoProveedorDets)
                .HasForeignKey(d => d.IdProveedor)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_DET_PROVEEDOR");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.TransfCreditoProveedorDets)
                .HasForeignKey(d => d.IdTabla)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_DET_TABLA");

            entity.HasOne(d => d.IdTransfCreditoProveedorNavigation)
                .WithMany(p => p.TransfCreditoProveedorDets)
                .HasForeignKey(d => d.IdTransfCreditoProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_DET_TRANSF_CREDITO_PROVEEDOR");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.TransfCreditoProveedorDets)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_TRANSF_CREDITO_PROVEEDOR_DET_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransfCreditoProveedorRetencion>(entity =>
        {
            entity.HasKey(e => e.IdTransfCreditoProveedorRetencion);

            entity.ToTable("TRANSF_CREDITO_PROVEEDOR_RETENCION", "dbo");

            entity.Property(e => e.IdTransfCreditoProveedorRetencion).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR_RETENCION");

            entity.Property(e => e.CotizacionCompra)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION_COMPRA");

            entity.Property(e => e.IdTransfCreditoProvUnique).HasColumnName("ID_TRANSF_CREDITO_PROV_UNIQUE");

            entity.Property(e => e.IdTransfCreditoProveedor).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdTransfCreditoProveedorDet).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR_DET");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_10");

            entity.Property(e => e.IvaGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_5");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_10");

            entity.Property(e => e.ValorGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_5");
        });

        modelBuilder.Entity<TransfDeposito>(entity =>
        {
            entity.HasKey(e => e.IdTransfDeposito);

            entity.ToTable("TRANSF_DEPOSITO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_TRANSF_DEPOSITO")
                .IsUnique();

            entity.Property(e => e.IdTransfDeposito).HasColumnName("ID_TRANSF_DEPOSITO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadLlegada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD_LLEGADA");

            entity.Property(e => e.ChapaVehiculo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA_VEHICULO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdDepositoDestino).HasColumnName("ID_DEPOSITO_DESTINO");

            entity.Property(e => e.IdDepositoOrigen).HasColumnName("ID_DEPOSITO_ORIGEN");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransfDepositos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_DEPOSITO_EMPRESA");

            entity.HasOne(d => d.IdDepositoDestinoNavigation)
                .WithMany(p => p.TransfDepositoIdDepositoDestinoNavigations)
                .HasForeignKey(d => d.IdDepositoDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_DEPOSITO_DEPOSITO1");

            entity.HasOne(d => d.IdDepositoOrigenNavigation)
                .WithMany(p => p.TransfDepositoIdDepositoOrigenNavigations)
                .HasForeignKey(d => d.IdDepositoOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_DEPOSITO_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.TransfDepositos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_DEPOSITO_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.TransfDepositos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_DEPOSITO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TransfDepositos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_TRANSF_DEPOSITO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransfGrano>(entity =>
        {
            entity.HasKey(e => e.IdTransfGranos);

            entity.ToTable("TRANSF_GRANOS", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.DestinoContratoCompra, e.RegStatus }, "IDX_GRN_CONTRATO_ENTRE_TABLA_2");

            entity.HasIndex(e => new { e.Empresa, e.OrigenContratoCompra, e.RegStatus }, "IDX_GRN_CONTRAT_ENTRE_TABLA");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegUnidad }, "UK_TRANSF_GRANOS")
                .IsUnique();

            entity.Property(e => e.IdTransfGranos).HasColumnName("ID_TRANSF_GRANOS");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.DestinoContratoCompra).HasColumnName("DESTINO_CONTRATO_COMPRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.OrigenContratoCompra).HasColumnName("ORIGEN_CONTRATO_COMPRA");

            entity.Property(e => e.OrigenSaldo)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ORIGEN_SALDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.DestinoContratoCompraNavigation)
                .WithMany(p => p.TransfGranoDestinoContratoCompraNavigations)
                .HasForeignKey(d => d.DestinoContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_CONTRATO_COMPRA1");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.TransfGranos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.TransfGranos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_ZAFRA");

            entity.HasOne(d => d.OrigenContratoCompraNavigation)
                .WithMany(p => p.TransfGranoOrigenContratoCompraNavigations)
                .HasForeignKey(d => d.OrigenContratoCompra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_CONTRATO_COMPRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TransfGranos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransfGranosRomaneo>(entity =>
        {
            entity.HasKey(e => e.IdTransfGranosRomaneo);

            entity.ToTable("TRANSF_GRANOS_ROMANEO", "dbo");

            entity.HasIndex(e => e.RegStatus, "IDX_ANALISIS_FIJACION");

            entity.HasIndex(e => e.IdTransfGranos, "IDX_ANALISIS_FIJACION_DEP");

            entity.HasIndex(e => e.IdTransfGranos, "IDX_LANZ_ROMAN");

            entity.Property(e => e.IdTransfGranosRomaneo).HasColumnName("ID_TRANSF_GRANOS_ROMANEO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdContratoCompraRomaneo).HasColumnName("ID_CONTRATO_COMPRA_ROMANEO");

            entity.Property(e => e.IdTransfGranos).HasColumnName("ID_TRANSF_GRANOS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdContratoCompraRomaneoNavigation)
                .WithMany(p => p.TransfGranosRomaneos)
                .HasForeignKey(d => d.IdContratoCompraRomaneo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_ROMANEO_CONTRATO_COMPRA_ROMANEO");

            entity.HasOne(d => d.IdTransfGranosNavigation)
                .WithMany(p => p.TransfGranosRomaneos)
                .HasForeignKey(d => d.IdTransfGranos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_GRANOS_ROMANEO_TRANSF_GRANOS");
        });

        modelBuilder.Entity<TransfZafra>(entity =>
        {
            entity.HasKey(e => e.IdTransfZafra);

            entity.ToTable("TRANSF_ZAFRA", "dbo");

            entity.Property(e => e.IdTransfZafra).HasColumnName("ID_TRANSF_ZAFRA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafraDestino).HasColumnName("ID_ZAFRA_DESTINO");

            entity.Property(e => e.IdZafraOrigen).HasColumnName("ID_ZAFRA_ORIGEN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransfZafras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_ZAFRA_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.TransfZafras)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_ZAFRA_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.TransfZafras)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_ZAFRA_PRODUCTO");

            entity.HasOne(d => d.IdZafraDestinoNavigation)
                .WithMany(p => p.TransfZafraIdZafraDestinoNavigations)
                .HasForeignKey(d => d.IdZafraDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_ZAFRA_ZAFRA");

            entity.HasOne(d => d.IdZafraOrigenNavigation)
                .WithMany(p => p.TransfZafraIdZafraOrigenNavigations)
                .HasForeignKey(d => d.IdZafraOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSF_ZAFRA_ZAFRA1");
        });

        modelBuilder.Entity<TransferenciaCuentum>(entity =>
        {
            entity.HasKey(e => e.IdTransferenciaCuenta);

            entity.ToTable("TRANSFERENCIA_CUENTA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_TRANSFERENCIA_CUENTA")
                .IsUnique();

            entity.Property(e => e.IdTransferenciaCuenta).HasColumnName("ID_TRANSFERENCIA_CUENTA");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequeNro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_NRO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.CotizacionDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION_DOLAR");

            entity.Property(e => e.CuentaDestino).HasColumnName("CUENTA_DESTINO");

            entity.Property(e => e.CuentaOrigen).HasColumnName("CUENTA_ORIGEN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MonedaDestino).HasColumnName("MONEDA_DESTINO");

            entity.Property(e => e.MonedaOrigen).HasColumnName("MONEDA_ORIGEN");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorAjustadoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO_DOLAR");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorConvertidoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO_DOLAR");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");

            entity.HasOne(d => d.CuentaDestinoNavigation)
                .WithMany(p => p.TransferenciaCuentumCuentaDestinoNavigations)
                .HasForeignKey(d => d.CuentaDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFERENCIA_CUENTA_CUENTA_CORRIENTE1");

            entity.HasOne(d => d.CuentaOrigenNavigation)
                .WithMany(p => p.TransferenciaCuentumCuentaOrigenNavigations)
                .HasForeignKey(d => d.CuentaOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFERENCIA_CUENTA_CUENTA_CORRIENTE");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransferenciaCuenta)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFERENCIA_CUENTA_EMPRESA");

            entity.HasOne(d => d.IdChequeraNavigation)
                .WithMany(p => p.TransferenciaCuenta)
                .HasForeignKey(d => d.IdChequera)
                .HasConstraintName("FK_TRANSFERENCIA_CUENTA_CHEQUERA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.TransferenciaCuenta)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFERENCIA_CUENTA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Transformacion>(entity =>
        {
            entity.HasKey(e => e.IdTransformacion);

            entity.ToTable("TRANSFORMACION", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.Nro }, "UK_TRANSFORMACION")
                .IsUnique();

            entity.Property(e => e.IdTransformacion).HasColumnName("ID_TRANSFORMACION");

            entity.Property(e => e.ConcentracionNominalLote).HasColumnName("CONCENTRACION_NOMINAL_LOTE");

            entity.Property(e => e.DescripcionLote)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_LOTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntradaCantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_CANTIDAD");

            entity.Property(e => e.EntradaCostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_COMPRA");

            entity.Property(e => e.EntradaCostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_CONTABLE");

            entity.Property(e => e.EntradaCostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_GERENCIAL");

            entity.Property(e => e.EntradaCostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_GUARANI");

            entity.Property(e => e.EntradaDeposito).HasColumnName("ENTRADA_DEPOSITO");

            entity.Property(e => e.EntradaLote).HasColumnName("ENTRADA_LOTE");

            entity.Property(e => e.EntradaProducto).HasColumnName("ENTRADA_PRODUCTO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCategoriaSemilla).HasColumnName("ID_CATEGORIA_SEMILLA");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.IdZaranda).HasColumnName("ID_ZARANDA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nro)
                .HasColumnName("NRO")
                .HasDefaultValueSql("((1))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.VencimientoLote)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_LOTE");

            entity.Property(e => e.VencimientoSemilla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VENCIMIENTO_SEMILLA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Transformacions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_EMPRESA");

            entity.HasOne(d => d.IdCompraLocalNavigation)
                .WithMany(p => p.Transformacions)
                .HasForeignKey(d => d.IdCompraLocal)
                .HasConstraintName("FK_TRANSFORMACION_COMPRA_LOCAL");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.Transformacions)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_USUARIO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.Transformacions)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_ZAFRA");

            entity.HasOne(d => d.IdZarandaNavigation)
                .WithMany(p => p.Transformacions)
                .HasForeignKey(d => d.IdZaranda)
                .HasConstraintName("FK_TRANSFORMACION_ZARANDA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Transformacions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransformacionProducto>(entity =>
        {
            entity.HasKey(e => e.IdTransformacionProducto);

            entity.ToTable("TRANSFORMACION_PRODUCTO", "dbo");

            entity.Property(e => e.IdTransformacionProducto).HasColumnName("ID_TRANSFORMACION_PRODUCTO");

            entity.Property(e => e.IdTransformacion).HasColumnName("ID_TRANSFORMACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SalidaCantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_CANTIDAD");

            entity.Property(e => e.SalidaCostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_COMPRA");

            entity.Property(e => e.SalidaCostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_CONTABLE");

            entity.Property(e => e.SalidaCostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_GERENCIAL");

            entity.Property(e => e.SalidaCostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_GUARANI");

            entity.Property(e => e.SalidaDeposito).HasColumnName("SALIDA_DEPOSITO");

            entity.Property(e => e.SalidaLote).HasColumnName("SALIDA_LOTE");

            entity.Property(e => e.SalidaProducto).HasColumnName("SALIDA_PRODUCTO");

            entity.HasOne(d => d.IdTransformacionNavigation)
                .WithMany(p => p.TransformacionProductos)
                .HasForeignKey(d => d.IdTransformacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_PRODUCTO_TRANSFORMACION");

            entity.HasOne(d => d.SalidaDepositoNavigation)
                .WithMany(p => p.TransformacionProductos)
                .HasForeignKey(d => d.SalidaDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_PRODUCTO_DEPOSITO");

            entity.HasOne(d => d.SalidaLoteNavigation)
                .WithMany(p => p.TransformacionProductos)
                .HasForeignKey(d => d.SalidaLote)
                .HasConstraintName("FK_TRANSFORMACION_PRODUCTO_LOTE");

            entity.HasOne(d => d.SalidaProductoNavigation)
                .WithMany(p => p.TransformacionProductos)
                .HasForeignKey(d => d.SalidaProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSFORMACION_PRODUCTO_PRODUCTO");
        });

        modelBuilder.Entity<Transportadora>(entity =>
        {
            entity.HasKey(e => e.IdTransportadora);

            entity.ToTable("TRANSPORTADORA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TRANSPORTADORA")
                .IsUnique();

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.AgenteTransporte)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("AGENTE_TRANSPORTE");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Contacto)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.Transportadoras)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTADORA_PROVEEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Transportadoras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTADORA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<TransportadoraAjuste>(entity =>
        {
            entity.HasKey(e => e.IdTransportadoraAjuste);

            entity.ToTable("TRANSPORTADORA_AJUSTE", "dbo");

            entity.Property(e => e.IdTransportadoraAjuste).HasColumnName("ID_TRANSPORTADORA_AJUSTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Nota)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoDocumento).HasColumnName("TIPO_DOCUMENTO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransportadoraAjustes)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_TRANSPORTADORA_AJUSTE_EMPRESA");

            entity.HasOne(d => d.IdTimbradoNavigation)
                .WithMany(p => p.TransportadoraAjustes)
                .HasForeignKey(d => d.IdTimbrado)
                .HasConstraintName("FK_TRANSPORTADORA_AJUSTE_TIMBRADO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.TransportadoraAjustes)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_TRANSPORTADORA_AJUSTE_TRANSPORTADORA");
        });

        modelBuilder.Entity<TransportadoraPrecio>(entity =>
        {
            entity.HasKey(e => e.IdTransportadoraPrecio);

            entity.ToTable("TRANSPORTADORA_PRECIO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_TRANSPORTADORA_PRECIO")
                .IsUnique();

            entity.Property(e => e.IdTransportadoraPrecio).HasColumnName("ID_TRANSPORTADORA_PRECIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0 = Listas viejas. 1 = Lista actual.");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda)
                .HasColumnName("MONEDA")
                .HasComment("Indica el tipo de moneda 0 = Dolar. 2 = Gs.");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransportadoraPrecios)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTADORA_PRECIO_EMPRESA");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.TransportadoraPrecios)
                .HasForeignKey(d => d.IdTransportadora)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTADORA_PRECIO_TRANSPORTADORA");
        });

        modelBuilder.Entity<TransportadoraPrecioDet>(entity =>
        {
            entity.HasKey(e => e.IdTransportadoraPrecioDet);

            entity.ToTable("TRANSPORTADORA_PRECIO_DET", "dbo");

            entity.Property(e => e.IdTransportadoraPrecioDet).HasColumnName("ID_TRANSPORTADORA_PRECIO_DET");

            entity.Property(e => e.Capacidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CAPACIDAD");

            entity.Property(e => e.Distancia)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DISTANCIA");

            entity.Property(e => e.IdTransportadoraPrecio).HasColumnName("ID_TRANSPORTADORA_PRECIO");

            entity.Property(e => e.PrecioKm)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PRECIO_KM")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.PrecioTotal)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PRECIO_TOTAL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdTransportadoraPrecioNavigation)
                .WithMany(p => p.TransportadoraPrecioDets)
                .HasForeignKey(d => d.IdTransportadoraPrecio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTADORA_PRECIO_DET_TRANSPORTADORA_PRECIO");
        });

        modelBuilder.Entity<TransporteComex>(entity =>
        {
            entity.HasKey(e => e.IdTransporteComex);

            entity.ToTable("TRANSPORTE_COMEX", "dbo");

            entity.Property(e => e.IdTransporteComex).HasColumnName("ID_TRANSPORTE_COMEX");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.TransporteComices)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTE_COMEX_EMPRESA");

            entity.HasOne(d => d.IdTipoTransporteNavigation)
                .WithMany(p => p.TransporteComices)
                .HasForeignKey(d => d.IdTipoTransporte)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRANSPORTE_COMEX_TIPO_TRANSPORTE");
        });

        modelBuilder.Entity<Turno>(entity =>
        {
            entity.HasKey(e => e.IdTurno);

            entity.ToTable("TURNO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_TURNO")
                .IsUnique();

            entity.Property(e => e.IdTurno).HasColumnName("ID_TURNO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FinalHora)
                .HasColumnType("datetime")
                .HasColumnName("FINAL_HORA");

            entity.Property(e => e.InicioHora)
                .HasColumnType("datetime")
                .HasColumnName("INICIO_HORA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Turnos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TURNO_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Turnos)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TURNO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<UbicarCarga>(entity =>
        {
            entity.HasKey(e => e.IdUbicarCarga);

            entity.ToTable("UBICAR_CARGA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus }, "UK_UBICAR_CARGA")
                .IsUnique();

            entity.Property(e => e.IdUbicarCarga).HasColumnName("ID_UBICAR_CARGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.UbicarCargas)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_CARGA_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.UbicarCargas)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_CARGA_DEPOSITO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.UbicarCargas)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_CARGA_FUNCIONARIO");
        });

        modelBuilder.Entity<UbicarCargaDet>(entity =>
        {
            entity.HasKey(e => e.IdUbicarCargaDet);

            entity.ToTable("UBICAR_CARGA_DET", "dbo");

            entity.Property(e => e.IdUbicarCargaDet).HasColumnName("ID_UBICAR_CARGA_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUbicarCarga).HasColumnName("ID_UBICAR_CARGA");

            entity.Property(e => e.OperacionOrigen).HasColumnName("OPERACION_ORIGEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdTablaNavigation)
                .WithMany(p => p.UbicarCargaDets)
                .HasForeignKey(d => d.IdTabla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_CARGA_DET_TABLA");

            entity.HasOne(d => d.IdUbicarCargaNavigation)
                .WithMany(p => p.UbicarCargaDets)
                .HasForeignKey(d => d.IdUbicarCarga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_CARGA_DET_UBICAR_CARGA");
        });

        modelBuilder.Entity<UbicarTransf>(entity =>
        {
            entity.HasKey(e => e.IdUbicarTransf);

            entity.ToTable("UBICAR_TRANSF", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento, e.RegStatus }, "IX_UBICAR_TRANSF")
                .IsUnique();

            entity.Property(e => e.IdUbicarTransf).HasColumnName("ID_UBICAR_TRANSF");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFabrilSolicitudTransf).HasColumnName("ID_FABRIL_SOLICITUD_TRANSF");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdOrdenCarga).HasColumnName("ID_ORDEN_CARGA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.UbicarTransfs)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_TRANSF_EMPRESA");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.UbicarTransfs)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_TRANSF_DEPOSITO");

            entity.HasOne(d => d.IdFabrilSolicitudTransfNavigation)
                .WithMany(p => p.UbicarTransfs)
                .HasForeignKey(d => d.IdFabrilSolicitudTransf)
                .HasConstraintName("FK_UBICAR_TRANSF_FABRIL_SOLICITUD_TRANSF");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.UbicarTransfs)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_TRANSF_FUNCIONARIO");

            entity.HasOne(d => d.IdOrdenCargaNavigation)
                .WithMany(p => p.UbicarTransfs)
                .HasForeignKey(d => d.IdOrdenCarga)
                .HasConstraintName("FK_UBICAR_TRANSF_ORDEN_CARGA");
        });

        modelBuilder.Entity<UbicarTransfDet>(entity =>
        {
            entity.HasKey(e => e.IdUbicarTransfDet);

            entity.ToTable("UBICAR_TRANSF_DET", "dbo");

            entity.HasIndex(e => new { e.IdUbicarTransf, e.IdLote, e.XOrig, e.YOrig, e.ZOrig, e.RegStatus }, "UK_UBICAR_TRANSF_DET")
                .IsUnique();

            entity.Property(e => e.IdUbicarTransfDet).HasColumnName("ID_UBICAR_TRANSF_DET");

            entity.Property(e => e.Cantidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdOrdenCargaDet).HasColumnName("ID_ORDEN_CARGA_DET");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUbicarTransf).HasColumnName("ID_UBICAR_TRANSF");

            entity.Property(e => e.Parcial)
                .HasColumnName("PARCIAL")
                .HasComment("0= Cantidad Total; 1= Cantidad Parcial");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.XDest).HasColumnName("X_DEST");

            entity.Property(e => e.XOrig).HasColumnName("X_ORIG");

            entity.Property(e => e.YDest).HasColumnName("Y_DEST");

            entity.Property(e => e.YOrig).HasColumnName("Y_ORIG");

            entity.Property(e => e.ZDest).HasColumnName("Z_DEST");

            entity.Property(e => e.ZOrig).HasColumnName("Z_ORIG");

            entity.HasOne(d => d.IdLoteNavigation)
                .WithMany(p => p.UbicarTransfDets)
                .HasForeignKey(d => d.IdLote)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_TRANSF_DET_LOTE");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.UbicarTransfDets)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_TRANSF_DET_PRODUCTO");

            entity.HasOne(d => d.IdUbicarTransfNavigation)
                .WithMany(p => p.UbicarTransfDets)
                .HasForeignKey(d => d.IdUbicarTransf)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UBICAR_TRANSF_DET_UBICAR_CARGA");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);

            entity.ToTable("USUARIO", "dbo");

            entity.HasIndex(e => new { e.Descripcion, e.IdFuncionario }, "UK_USUARIO")
                .IsUnique();

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.ClaveFecha)
                .HasColumnType("datetime")
                .HasColumnName("CLAVE_FECHA");

            entity.Property(e => e.ClaveWeb)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CLAVE_WEB");

            entity.Property(e => e.CreditoClave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CREDITO_CLAVE");

            entity.Property(e => e.CreditoClaveFecha)
                .HasColumnType("datetime")
                .HasColumnName("CREDITO_CLAVE_FECHA");

            entity.Property(e => e.CreditoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_VALOR");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdFuncionario)
                .HasConstraintName("FK_USUARIO_FUNCIONARIO");

            entity.HasOne(d => d.IdVendedorNavigation)
                .WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdVendedor)
                .HasConstraintName("FK_USUARIO_VENDEDOR");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_USUARIO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<UsuarioClave>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioClave);

            entity.ToTable("USUARIO_CLAVE", "dbo");

            entity.Property(e => e.IdUsuarioClave).HasColumnName("ID_USUARIO_CLAVE");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.UsuarioClaves)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_CLAVE_USUARIO");
        });

        modelBuilder.Entity<UsuarioEmpresa>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioEmpresa);

            entity.ToTable("USUARIO_EMPRESA", "dbo");

            entity.Property(e => e.IdUsuarioEmpresa).HasColumnName("ID_USUARIO_EMPRESA");

            entity.Property(e => e.Electronico).HasColumnName("ELECTRONICO");

            entity.Property(e => e.IdEmpresa).HasColumnName("ID_EMPRESA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.TipoVerificacionLiq)
                .HasColumnName("TIPO_VERIFICACION_LIQ")
                .HasComment("1: Granos, 2:Credito, 3:Contabilidad");

            entity.HasOne(d => d.IdEmpresaNavigation)
                .WithMany(p => p.UsuarioEmpresas)
                .HasForeignKey(d => d.IdEmpresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_EMPRESA_EMPRESA");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.UsuarioEmpresas)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_EMPRESA_USUARIO");
        });

        modelBuilder.Entity<UsuarioForm>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioForm);

            entity.ToTable("USUARIO_FORM", "dbo");

            entity.HasIndex(e => new { e.IdUsuario, e.IdUnidad, e.IdFormulario }, "UK_USUARIO_FORM")
                .IsUnique();

            entity.Property(e => e.IdUsuarioForm).HasColumnName("ID_USUARIO_FORM");

            entity.Property(e => e.Abrir).HasColumnName("ABRIR");

            entity.Property(e => e.Adm).HasColumnName("ADM");

            entity.Property(e => e.Alterar).HasColumnName("ALTERAR");

            entity.Property(e => e.Cancelar).HasColumnName("CANCELAR");

            entity.Property(e => e.Copiar).HasColumnName("COPIAR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Excluir).HasColumnName("EXCLUIR");

            entity.Property(e => e.IdFormulario).HasColumnName("ID_FORMULARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Imprimir).HasColumnName("IMPRIMIR");

            entity.Property(e => e.Incluir).HasColumnName("INCLUIR");

            entity.Property(e => e.Previa).HasColumnName("PREVIA");

            entity.Property(e => e.Visualizar).HasColumnName("VISUALIZAR");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.UsuarioForms)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_USUARIO_FORM_EMPRESA");

            entity.HasOne(d => d.IdFormularioNavigation)
                .WithMany(p => p.UsuarioForms)
                .HasForeignKey(d => d.IdFormulario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_FORM_FORMULARIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.UsuarioForms)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_FORM_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.UsuarioForms)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_FORM_USUARIO");
        });

        modelBuilder.Entity<UsuarioUnidad>(entity =>
        {
            entity.HasKey(e => e.IdUsuarioUnidad);

            entity.ToTable("USUARIO_UNIDAD", "dbo");

            entity.HasIndex(e => new { e.IdUsuario, e.IdUnidad }, "UK_USUARIO_UNIDAD")
                .IsUnique();

            entity.Property(e => e.IdUsuarioUnidad).HasColumnName("ID_USUARIO_UNIDAD");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.UsuarioUnidads)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_UNIDAD_EMPRESA_UNIDAD");

            entity.HasOne(d => d.IdUsuarioNavigation)
                .WithMany(p => p.UsuarioUnidads)
                .HasForeignKey(d => d.IdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USUARIO_UNIDAD_USUARIO");
        });

        modelBuilder.Entity<UtilesOficina>(entity =>
        {
            entity.HasKey(e => e.IdUtilesOficina);

            entity.ToTable("UTILES_OFICINA", "dbo");

            entity.Property(e => e.IdUtilesOficina).HasColumnName("ID_UTILES_OFICINA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<VAgricola>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_AGRICOLA", "dbo");

            entity.Property(e => e.AreaEstancia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_ESTANCIA");

            entity.Property(e => e.AreaGleba)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_GLEBA");

            entity.Property(e => e.AreaLote)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_LOTE");

            entity.Property(e => e.CodigoEstancia).HasColumnName("CODIGO_ESTANCIA");

            entity.Property(e => e.CodigoGleba).HasColumnName("CODIGO_GLEBA");

            entity.Property(e => e.CodigoLote).HasColumnName("CODIGO_LOTE");

            entity.Property(e => e.CodigoUnidadEstancia).HasColumnName("CODIGO_UNIDAD_ESTANCIA");

            entity.Property(e => e.DescripcionEstancia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTANCIA");

            entity.Property(e => e.DescripcionGleba)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GLEBA");

            entity.Property(e => e.DescripcionLote)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_LOTE");

            entity.Property(e => e.DescripcionUnidadEstancia)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_ESTANCIA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdAgricolaEstancia).HasColumnName("ID_AGRICOLA_ESTANCIA");

            entity.Property(e => e.IdAgricolaGleba).HasColumnName("ID_AGRICOLA_GLEBA");

            entity.Property(e => e.IdAgricolaLote).HasColumnName("ID_AGRICOLA_LOTE");

            entity.Property(e => e.IdUnidadEstancia).HasColumnName("ID_UNIDAD_ESTANCIA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VAgricolaDevolucion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_AGRICOLA_DEVOLUCION", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProductoDet)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO_DET");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProductoDet)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO_DET");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAgricolaDevolucion).HasColumnName("ID_AGRICOLA_DEVOLUCION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoFormacion).HasColumnName("LANZAMIENTO_FORMACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");
        });

        modelBuilder.Entity<VAgricolaFormacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_AGRICOLA_FORMACION", "dbo");

            entity.Property(e => e.AreaEstancia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_ESTANCIA");

            entity.Property(e => e.AreaFormacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_FORMACION");

            entity.Property(e => e.AreaGleba)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_GLEBA");

            entity.Property(e => e.AreaLote)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_LOTE");

            entity.Property(e => e.CantidadCerrada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_CERRADA");

            entity.Property(e => e.CantidadProducir)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_PRODUCIR");

            entity.Property(e => e.CodigoAgricolaLote).HasColumnName("CODIGO_AGRICOLA_LOTE");

            entity.Property(e => e.CodigoEstancia).HasColumnName("CODIGO_ESTANCIA");

            entity.Property(e => e.CodigoGleba).HasColumnName("CODIGO_GLEBA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CultivoFormacion).HasColumnName("CULTIVO_FORMACION");

            entity.Property(e => e.DescripcionAgricolaLote)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_AGRICOLA_LOTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEstancia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTANCIA");

            entity.Property(e => e.DescripcionFormacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FORMACION");

            entity.Property(e => e.DescripcionGleba)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GLEBA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFormacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FORMACION");

            entity.Property(e => e.IdAgricolaFormacion).HasColumnName("ID_AGRICOLA_FORMACION");

            entity.Property(e => e.IdCultivoFormacion).HasColumnName("ID_CULTIVO_FORMACION");

            entity.Property(e => e.IdZafraFormacion).HasColumnName("ID_ZAFRA_FORMACION");

            entity.Property(e => e.LanzamientoFormacion).HasColumnName("LANZAMIENTO_FORMACION");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ZafraFormacion).HasColumnName("ZAFRA_FORMACION");
        });

        modelBuilder.Entity<VAgricolaSolicitud>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_AGRICOLA_SOLICITUD", "dbo");

            entity.Property(e => e.AreaFormacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_FORMACION");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoEstancia).HasColumnName("CODIGO_ESTANCIA");

            entity.Property(e => e.CodigoGleba).HasColumnName("CODIGO_GLEBA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProductoDet)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO_DET");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionEstancia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTANCIA");

            entity.Property(e => e.DescripcionGleba)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GLEBA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProductoDet)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO_DET");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdAgricolaSolicitud).HasColumnName("ID_AGRICOLA_SOLICITUD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoFormacion).HasColumnName("LANZAMIENTO_FORMACION");
        });

        modelBuilder.Entity<VAnalisisFijacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ANALISIS_FIJACION", "dbo");

            entity.Property(e => e.Afijar)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("AFIJAR");

            entity.Property(e => e.AfijarCostos)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("AFIJAR_COSTOS");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProductor).HasColumnName("CODIGO_PRODUCTOR");

            entity.Property(e => e.Contratada)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("CONTRATADA");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProductor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fixada)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("FIXADA");

            entity.Property(e => e.FixadaCostos)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIXADA_COSTOS");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.Liquidada)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("LIQUIDADA");

            entity.Property(e => e.LiquidadaBushel)
                .HasColumnType("decimal(38, 7)")
                .HasColumnName("LIQUIDADA_BUSHEL");

            entity.Property(e => e.LiquidadaCostos)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LIQUIDADA_COSTOS");

            entity.Property(e => e.LiquidadaPrecio)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LIQUIDADA_PRECIO");

            entity.Property(e => e.QtdContrato)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("QTD_CONTRATO");

            entity.Property(e => e.Saldo)
                .HasColumnType("numeric(38, 3)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SinCosto)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("SIN_COSTO");

            entity.Property(e => e.SomaBushel)
                .HasColumnType("decimal(38, 7)")
                .HasColumnName("SOMA_BUSHEL");

            entity.Property(e => e.SomaCustosQtd)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("SOMA_CUSTOS_QTD");

            entity.Property(e => e.SomaCustosVlr)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_CUSTOS_VLR");

            entity.Property(e => e.SomaFleteVlr)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_FLETE_VLR");

            entity.Property(e => e.SomaPreco)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_PRECO");

            entity.Property(e => e.SomaRolloverVlr)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_ROLLOVER_VLR");

            entity.Property(e => e.ValorAdendo)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_ADENDO");
        });

        modelBuilder.Entity<VAnalisisFijacionDeposito>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ANALISIS_FIJACION_DEPOSITO", "dbo");

            entity.Property(e => e.Afijar)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("AFIJAR");

            entity.Property(e => e.AfijarCostos)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("AFIJAR_COSTOS");

            entity.Property(e => e.Anulado).HasColumnName("ANULADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProductor).HasColumnName("CODIGO_PRODUCTOR");

            entity.Property(e => e.Comprador).HasColumnName("COMPRADOR");

            entity.Property(e => e.Contratada)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("CONTRATADA");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProductor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Fixada)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("FIXADA");

            entity.Property(e => e.FixadaCostos)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("FIXADA_COSTOS");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Liquidada)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("LIQUIDADA");

            entity.Property(e => e.LiquidadaBushel)
                .HasColumnType("decimal(38, 7)")
                .HasColumnName("LIQUIDADA_BUSHEL");

            entity.Property(e => e.LiquidadaCostos)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LIQUIDADA_COSTOS");

            entity.Property(e => e.LiquidadaPrecio)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("LIQUIDADA_PRECIO");

            entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

            entity.Property(e => e.Productor).HasColumnName("PRODUCTOR");

            entity.Property(e => e.QtdContrato)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("QTD_CONTRATO");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Saldo)
                .HasColumnType("numeric(38, 3)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SinCosto)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("SIN_COSTO");

            entity.Property(e => e.SomaBushel)
                .HasColumnType("decimal(38, 7)")
                .HasColumnName("SOMA_BUSHEL");

            entity.Property(e => e.SomaCustosQtd)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("SOMA_CUSTOS_QTD");

            entity.Property(e => e.SomaCustosVlr)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_CUSTOS_VLR");

            entity.Property(e => e.SomaFleteVlr)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_FLETE_VLR");

            entity.Property(e => e.SomaPreco)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_PRECO");

            entity.Property(e => e.SomaRolloverVlr)
                .HasColumnType("decimal(38, 5)")
                .HasColumnName("SOMA_ROLLOVER_VLR");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.TipoDeposito).HasColumnName("TIPO_DEPOSITO");

            entity.Property(e => e.ValorAdendo)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_ADENDO");
        });

        modelBuilder.Entity<VAtcGerente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ATC_GERENTE", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdVendedorAtcGerente).HasColumnName("ID_VENDEDOR_ATC_GERENTE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VBiClientePrincipal>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_BI_CLIENTE_PRINCIPAL", "dbo");

            entity.Property(e => e.ClientePrincipal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_PRINCIPAL");

            entity.Property(e => e.CodigoClienteRelacionado).HasColumnName("CODIGO_CLIENTE_RELACIONADO");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.DescripcionClientePrincipal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE_PRINCIPAL");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionRelacionado)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_RELACIONADO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");
        });

        modelBuilder.Entity<VBiContratosDep>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_BI_CONTRATOS_DEP", "dbo");

            entity.Property(e => e.Contrato).HasColumnName("contrato");

            entity.Property(e => e.Empresa).HasColumnName("empresa");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

            entity.Property(e => e.Quantidade)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("QUANTIDADE");
        });

        modelBuilder.Entity<VBiContratosDepVenta>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_BI_CONTRATOS_DEP_VENTAS", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Contrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTRATO");

            entity.Property(e => e.Deposito).HasColumnName("DEPOSITO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");
        });

        modelBuilder.Entity<VBiDesarrollistaUlt>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_BI_DESARROLLISTA_ULT", "dbo");

            entity.Property(e => e.DescripcionDesarrollista)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DESARROLLISTA");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.TipoComision)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMISION");
        });

        modelBuilder.Entity<VCamion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CAMION", "dbo");

            entity.Property(e => e.Capacidad)
                .HasColumnType("numeric(18, 4)")
                .HasColumnName("CAPACIDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(202)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCamion).HasColumnName("ID_CAMION");

            entity.Property(e => e.IdTipoCamion).HasColumnName("ID_TIPO_CAMION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VCarga>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CARGA", "dbo");

            entity.Property(e => e.AutorizadoPor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("AUTORIZADO_POR");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.ChoferCi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_CI");

            entity.Property(e => e.ChoferCodigo).HasColumnName("CHOFER_CODIGO");

            entity.Property(e => e.ChoferNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHOFER_NOMBRE");

            entity.Property(e => e.ClienteBarrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_BARRIO");

            entity.Property(e => e.ClienteCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_CIUDAD");

            entity.Property(e => e.ClienteCodigo).HasColumnName("CLIENTE_CODIGO");

            entity.Property(e => e.ClienteDireccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DIRECCION");

            entity.Property(e => e.ClienteNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_NOMBRE");

            entity.Property(e => e.CodDeposito).HasColumnName("COD_DEPOSITO");

            entity.Property(e => e.ControladoPor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("CONTROLADO_POR");

            entity.Property(e => e.Controlador).HasColumnName("CONTROLADOR");

            entity.Property(e => e.Densidad)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("DENSIDAD");

            entity.Property(e => e.EmpresaCodigo).HasColumnName("EMPRESA_CODIGO");

            entity.Property(e => e.EmpresaNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("EMPRESA_NOMBRE");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.HoraLlegada)
                .HasColumnType("datetime")
                .HasColumnName("HORA_LLEGADA");

            entity.Property(e => e.HoraSalida)
                .HasColumnType("datetime")
                .HasColumnName("HORA_SALIDA");

            entity.Property(e => e.IdCarga).HasColumnName("ID_CARGA");

            entity.Property(e => e.IdCargaNotaRemision).HasColumnName("ID_CARGA_NOTA_REMISION");

            entity.Property(e => e.IdCargaProducto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ID_CARGA_PRODUCTO");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNota).HasColumnName("ID_NOTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.LanzVascula).HasColumnName("LANZ_VASCULA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NotaRemision)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_REMISION");

            entity.Property(e => e.Notas)
                .IsUnicode(false)
                .HasColumnName("NOTAS");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoEnvase).HasColumnName("PESO_ENVASE");

            entity.Property(e => e.PesoNetoVascula)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("PESO_NETO_VASCULA");

            entity.Property(e => e.ProductoCantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PRODUCTO_CANTIDAD");

            entity.Property(e => e.ProductoCodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_CODIGO");

            entity.Property(e => e.ProductoEmbalaje)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_EMBALAJE");

            entity.Property(e => e.ProductoLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_LOTE");

            entity.Property(e => e.ProductoNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_NOMBRE");

            entity.Property(e => e.Referencia)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoNota).HasColumnName("TIPO_NOTA");

            entity.Property(e => e.TotalCamion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TOTAL_CAMION");

            entity.Property(e => e.TransportadoraCodigo).HasColumnName("TRANSPORTADORA_CODIGO");

            entity.Property(e => e.TrasportadoraNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TRASPORTADORA_NOMBRE");

            entity.Property(e => e.UnidadCodigo).HasColumnName("UNIDAD_CODIGO");

            entity.Property(e => e.UnidadNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_NOMBRE");

            entity.Property(e => e.VehiculoChapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VEHICULO_CHAPA");

            entity.Property(e => e.VehiculoMarca)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO_MARCA");
        });

        modelBuilder.Entity<VCargo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CARGO", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
        });

        modelBuilder.Entity<VChofer>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CHOFER", "dbo");

            entity.Property(e => e.BarrioChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CHOFER");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CodigoChofer).HasColumnName("CODIGO_CHOFER");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Registro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REGISTRO");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");
        });

        modelBuilder.Entity<VCiudad>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CIUDAD", "dbo");

            entity.Property(e => e.CodDeCiudad).HasColumnName("COD_DE_CIUDAD");

            entity.Property(e => e.CodDeDepartamento).HasColumnName("COD_DE_DEPARTAMENTO");

            entity.Property(e => e.CodDeDistrito).HasColumnName("COD_DE_DISTRITO");

            entity.Property(e => e.CodDePais)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("COD_DE_PAIS");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoEstado).HasColumnName("CODIGO_ESTADO");

            entity.Property(e => e.CodigoMunicipio).HasColumnName("CODIGO_MUNICIPIO");

            entity.Property(e => e.CodigoPais).HasColumnName("CODIGO_PAIS");

            entity.Property(e => e.CodigoPaisTesaka)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PAIS_TESAKA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.DescripcionMunicipio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.DescripcionSet)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SET");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<VCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE", "dbo");

            entity.Property(e => e.AaCultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_CULTIVADA");

            entity.Property(e => e.AaNocultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_NOCULTIVADA");

            entity.Property(e => e.AaPastura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_PASTURA");

            entity.Property(e => e.AaTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_TOTAL");

            entity.Property(e => e.Actividad)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ACTIVIDAD");

            entity.Property(e => e.ApCultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_CULTIVADA");

            entity.Property(e => e.ApNocultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_NOCULTIVADA");

            entity.Property(e => e.ApPastura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_PASTURA");

            entity.Property(e => e.ApTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_TOTAL");

            entity.Property(e => e.Asistencia)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ASISTENCIA");

            entity.Property(e => e.Asociacion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ASOCIACION");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.BloqueoMotivo)
                .IsUnicode(false)
                .HasColumnName("BLOQUEO_MOTIVO");

            entity.Property(e => e.Capital)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPITAL");

            entity.Property(e => e.CarnetInmigrante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CARNET_INMIGRANTE");

            entity.Property(e => e.Categoria).HasColumnName("CATEGORIA");

            entity.Property(e => e.Celular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.ChkAmbiental).HasColumnName("CHK_AMBIENTAL");

            entity.Property(e => e.ChkArrendamiento).HasColumnName("CHK_ARRENDAMIENTO");

            entity.Property(e => e.ChkAta).HasColumnName("CHK_ATA");

            entity.Property(e => e.ChkBalance).HasColumnName("CHK_BALANCE");

            entity.Property(e => e.ChkCartaPoder).HasColumnName("CHK_CARTA_PODER");

            entity.Property(e => e.ChkDisolucion).HasColumnName("CHK_DISOLUCION");

            entity.Property(e => e.ChkEstatuto).HasColumnName("CHK_ESTATUTO");

            entity.Property(e => e.ChkEstatutoSrl).HasColumnName("CHK_ESTATUTO_SRL");

            entity.Property(e => e.ChkFirma).HasColumnName("CHK_FIRMA");

            entity.Property(e => e.ChkForm101).HasColumnName("CHK_FORM_101");

            entity.Property(e => e.ChkForm110).HasColumnName("CHK_FORM_110");

            entity.Property(e => e.ChkForm153).HasColumnName("CHK_FORM_153");

            entity.Property(e => e.ChkIdentidad).HasColumnName("CHK_IDENTIDAD");

            entity.Property(e => e.ChkIdentidadConyuge).HasColumnName("CHK_IDENTIDAD_CONYUGE");

            entity.Property(e => e.ChkInformconf).HasColumnName("CHK_INFORMCONF");

            entity.Property(e => e.ChkManifestEmp).HasColumnName("CHK_MANIFEST_EMP");

            entity.Property(e => e.ChkManifestacion).HasColumnName("CHK_MANIFESTACION");

            entity.Property(e => e.ChkMaquinaria).HasColumnName("CHK_MAQUINARIA");

            entity.Property(e => e.ChkPoder).HasColumnName("CHK_PODER");

            entity.Property(e => e.ChkRuc).HasColumnName("CHK_RUC");

            entity.Property(e => e.ChkTitulo).HasColumnName("CHK_TITULO");

            entity.Property(e => e.CiCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoEstado).HasColumnName("CODIGO_ESTADO");

            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.ComercializaProduccion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COMERCIALIZA_PRODUCCION");

            entity.Property(e => e.ConyugeCi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_CI");

            entity.Property(e => e.ConyugeNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("CONYUGE_NACIMIENTO");

            entity.Property(e => e.ConyugeNacionalidad)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_NACIONALIDAD");

            entity.Property(e => e.ConyugeNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_NOMBRE");

            entity.Property(e => e.Cooperativa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COOPERATIVA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.DescripcionMunicipio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.DescripcionRegion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_REGION");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.Distribuidor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DISTRIBUIDOR");

            entity.Property(e => e.EmailFirmaDigital)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("EMAIL_FIRMA_DIGITAL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil).HasColumnName("ESTADO_CIVIL");

            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ACTUALIZACION");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FirmaDigital).HasColumnName("FIRMA_DIGITAL");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdPaisCiudad).HasColumnName("ID_PAIS_CIUDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Imagro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IMAGRO");

            entity.Property(e => e.Intercompany).HasColumnName("INTERCOMPANY");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.Procesamiento).HasColumnName("PROCESAMIENTO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegimenCasamiento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGIMEN_CASAMIENTO");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TipoPersona).HasColumnName("TIPO_PERSONA");
        });

        modelBuilder.Entity<VClienteComercial>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_COMERCIAL", "dbo");

            entity.Property(e => e.AreaArrendada)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("AREA_ARRENDADA");

            entity.Property(e => e.AreaPotencial)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("AREA_POTENCIAL");

            entity.Property(e => e.AreaPropia)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("AREA_PROPIA");

            entity.Property(e => e.CapacidadSilo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPACIDAD_SILO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FechaServidor)
                .HasColumnType("date")
                .HasColumnName("FECHA_SERVIDOR");

            entity.Property(e => e.IdCliente)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.SituacionCredito)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SITUACION_CREDITO");

            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TipoCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TIPO_CLIENTE");
        });

        modelBuilder.Entity<VClienteComercialNPrincipal>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_COMERCIAL_N_PRINCIPAL", "dbo");

            entity.Property(e => e.AreaArrendada)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("AREA_ARRENDADA");

            entity.Property(e => e.AreaPropia)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("AREA_PROPIA");

            entity.Property(e => e.CapacidadSilo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPACIDAD_SILO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.IdCliente)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.SituacionCredito)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("SITUACION_CREDITO");

            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TipoCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TIPO_CLIENTE");
        });

        modelBuilder.Entity<VClienteContacto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_CONTACTO", "dbo");

            entity.Property(e => e.AficionContacto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("AFICION_CONTACTO");

            entity.Property(e => e.AreaArrendada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_ARRENDADA");

            entity.Property(e => e.AreaPropia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AREA_PROPIA");

            entity.Property(e => e.CargoContacto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("CARGO_CONTACTO");

            entity.Property(e => e.DescripcionContacto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CONTACTO");

            entity.Property(e => e.EMailContacto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("E_MAIL_CONTACTO");

            entity.Property(e => e.FechaNacimientoContacto)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO_CONTACTO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
        });

        modelBuilder.Entity<VClienteLocalEntrega>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.AnalisisComercial).HasColumnName("ANALISIS_COMERCIAL");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoEstado).HasColumnName("CODIGO_ESTADO");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoUnidadVendedor).HasColumnName("CODIGO_UNIDAD_VENDEDOR");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionUnidadVendedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_VENDEDOR");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaUltimaFacturacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ULTIMA_FACTURACION");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdPaisCiudad).HasColumnName("ID_PAIS_CIUDAD");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdVendedorAtcGerente).HasColumnName("ID_VENDEDOR_ATC_GERENTE");
        });

        modelBuilder.Entity<VClienteLocalEntregaHa>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_LOCAL_ENTREGA_HA", "dbo");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.DescUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_UNIDAD");

            entity.Property(e => e.DescVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_VENDEDOR");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.HectareasArrendadas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_ARRENDADAS");

            entity.Property(e => e.HectareasPotenciales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_POTENCIALES");

            entity.Property(e => e.HectareasPropias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_PROPIAS");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
        });

        modelBuilder.Entity<VClienteRelacionado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_RELACIONADO", "dbo");

            entity.Property(e => e.CodigoRelacionado).HasColumnName("CODIGO_RELACIONADO");

            entity.Property(e => e.DescripcionRelacionado)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_RELACIONADO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteComercial).HasColumnName("ID_CLIENTE_COMERCIAL");

            entity.Property(e => e.IdClienteRelacion).HasColumnName("ID_CLIENTE_RELACION");
        });

        modelBuilder.Entity<VClienteTotalFacturado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_TOTAL_FACTURADO", "dbo");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.TotalFacturado)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("TOTAL_FACTURADO");
        });

        modelBuilder.Entity<VClienteVendedorLocalEntrega>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CLIENTE_VENDEDOR_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");
        });

        modelBuilder.Entity<VCmdb>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CMDB", "dbo");

            entity.Property(e => e.DescripcionIc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_IC");

            entity.Property(e => e.DescripcionLocal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_LOCAL");

            entity.Property(e => e.DescripcionTipoIc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TIPO_IC");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.IdIc).HasColumnName("ID_IC");

            entity.Property(e => e.SnPn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SN_PN");
        });

        modelBuilder.Entity<VComisionDesarrollistaAjusteVendedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMISION_DESARROLLISTA_AJUSTE_VENDEDOR", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDesarrollista).HasColumnName("CODIGO_DESARROLLISTA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.ComisionPorcentajePro).HasColumnName("COMISION_PORCENTAJE_PRO");

            entity.Property(e => e.ComisionTarifaPro)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMISION_TARIFA_PRO");

            entity.Property(e => e.Contador).HasColumnName("CONTADOR");

            entity.Property(e => e.ContadorProducto).HasColumnName("CONTADOR_PRODUCTO");

            entity.Property(e => e.CostoMedio).HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDesarrollista)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DESARROLLISTA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidadFactura).HasColumnName("ID_UNIDAD_FACTURA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorIva)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("POR_IVA");

            entity.Property(e => e.TipoComisionDesarrollista).HasColumnName("TIPO_COMISION_DESARROLLISTA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(22, 11)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VComisionDesarrollistaAjusteVendedorTipoVenta1>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMISION_DESARROLLISTA_AJUSTE_VENDEDOR_TIPO_VENTA_1", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDesarrollista).HasColumnName("CODIGO_DESARROLLISTA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.ComisionPorcentajePro).HasColumnName("COMISION_PORCENTAJE_PRO");

            entity.Property(e => e.ComisionTarifaPro)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMISION_TARIFA_PRO");

            entity.Property(e => e.ContadorProducto).HasColumnName("CONTADOR_PRODUCTO");

            entity.Property(e => e.CostoMedio).HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDesarrollista)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DESARROLLISTA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidadFactura).HasColumnName("ID_UNIDAD_FACTURA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorIva)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("POR_IVA");

            entity.Property(e => e.TipoComisionDesarrollista).HasColumnName("TIPO_COMISION_DESARROLLISTA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(22, 11)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VComisionDesarrollistaTipoVenta1>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMISION_DESARROLLISTA_TIPO_VENTA_1", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDesarrollista).HasColumnName("CODIGO_DESARROLLISTA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.ComisionPorcentajePro).HasColumnName("COMISION_PORCENTAJE_PRO");

            entity.Property(e => e.ComisionTarifaPro)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMISION_TARIFA_PRO");

            entity.Property(e => e.ContadorProducto).HasColumnName("CONTADOR_PRODUCTO");

            entity.Property(e => e.CostoMedio).HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDesarrollista)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DESARROLLISTA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidadFactura).HasColumnName("ID_UNIDAD_FACTURA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorIva)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("POR_IVA");

            entity.Property(e => e.TipoComisionDesarrollista).HasColumnName("TIPO_COMISION_DESARROLLISTA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(22, 11)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VComisionDesarrollistum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMISION_DESARROLLISTA", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDesarrollista).HasColumnName("CODIGO_DESARROLLISTA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.ComisionPorcentajePro).HasColumnName("COMISION_PORCENTAJE_PRO");

            entity.Property(e => e.ComisionTarifaPro)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMISION_TARIFA_PRO");

            entity.Property(e => e.Contador).HasColumnName("CONTADOR");

            entity.Property(e => e.ContadorProducto).HasColumnName("CONTADOR_PRODUCTO");

            entity.Property(e => e.CostoMedio).HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDesarrollista)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DESARROLLISTA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDesarrollista).HasColumnName("ID_DESARROLLISTA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidadFactura).HasColumnName("ID_UNIDAD_FACTURA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorIva)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("POR_IVA");

            entity.Property(e => e.TipoComisionDesarrollista).HasColumnName("TIPO_COMISION_DESARROLLISTA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(22, 11)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VComisionVendedore>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMISION_VENDEDORES", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.Contador).HasColumnName("CONTADOR");

            entity.Property(e => e.CostoMedio).HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.FechaPedido)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PEDIDO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidadFactura).HasColumnName("ID_UNIDAD_FACTURA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdVendedorAtcGerente).HasColumnName("ID_VENDEDOR_ATC_GERENTE");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.LiquidacionFinal).HasColumnName("liquidacion_final");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorIva)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("POR_IVA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(22, 11)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VComisionVendedoresTipoVenta1>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMISION_VENDEDORES_TIPO_VENTA_1", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Cobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("COBRO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CostoMedio).HasColumnName("COSTO_MEDIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaCobro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COBRO");

            entity.Property(e => e.FechaPedido)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_PEDIDO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdUnidadFactura).HasColumnName("ID_UNIDAD_FACTURA");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdVendedorAtcGerente).HasColumnName("ID_VENDEDOR_ATC_GERENTE");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorIva)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("POR_IVA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(22, 11)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VComparativoIvaOperativo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMPARATIVO_IVA_OPERATIVO", "dbo");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.CodigoCentroCosto).HasColumnName("CODIGO_CENTRO_COSTO");

            entity.Property(e => e.Comercial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMERCIAL");

            entity.Property(e => e.Complemento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COMPLEMENTO");

            entity.Property(e => e.Contabilidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTABILIDAD");

            entity.Property(e => e.Cotacao).HasColumnName("COTACAO");

            entity.Property(e => e.CotacaoData)
                .HasColumnType("datetime")
                .HasColumnName("COTACAO_DATA");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");

            entity.Property(e => e.DataDespacho)
                .HasColumnType("datetime")
                .HasColumnName("DATA_DESPACHO");

            entity.Property(e => e.Descricao)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");

            entity.Property(e => e.Despacho)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.DocumentoTipo).HasColumnName("DOCUMENTO_TIPO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exentas)
                .HasColumnType("decimal(37, 6)")
                .HasColumnName("EXENTAS");

            entity.Property(e => e.Fornecedor).HasColumnName("FORNECEDOR");

            entity.Property(e => e.FornecedorOriginal).HasColumnName("FORNECEDOR_ORIGINAL");

            entity.Property(e => e.Gravadas10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("GRAVADAS_10");

            entity.Property(e => e.Gravadas5)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("GRAVADAS_5");

            entity.Property(e => e.Grupo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRUPO");

            entity.Property(e => e.IdProcedureContable).HasColumnName("ID_PROCEDURE_CONTABLE");

            entity.Property(e => e.Imponible)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("IMPONIBLE");

            entity.Property(e => e.Impostos10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IMPOSTOS_10");

            entity.Property(e => e.Impostos5)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("IMPOSTOS_5");

            entity.Property(e => e.Lancamento).HasColumnName("LANCAMENTO");

            entity.Property(e => e.Moeda).HasColumnName("MOEDA");

            entity.Property(e => e.Operacao).HasColumnName("OPERACAO");

            entity.Property(e => e.Ordem).HasColumnName("ORDEM");

            entity.Property(e => e.Producto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");

            entity.Property(e => e.Registro)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRO");

            entity.Property(e => e.RegistroControl).HasColumnName("REGISTRO_CONTROL");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacao).HasColumnName("TRIBUTACAO");

            entity.Property(e => e.Unidade).HasColumnName("UNIDADE");

            entity.Property(e => e.ValorAduanero)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_ADUANERO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("numeric(37, 4)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VCompraComplemento>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMPRA_COMPLEMENTO", "dbo");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.DecripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCompraComplemento).HasColumnName("ID_COMPRA_COMPLEMENTO");

            entity.Property(e => e.IdCompraComplementoFactura).HasColumnName("ID_COMPRA_COMPLEMENTO_FACTURA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.OperacionOrigen).HasColumnName("OPERACION_ORIGEN");

            entity.Property(e => e.Remision)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.ValorTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TOTAL");
        });

        modelBuilder.Entity<VCompraExterior>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMPRA_EXTERIOR", "dbo");

            entity.Property(e => e.BarrioProveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_PROVEEDOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CiudadProveedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_PROVEEDOR");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CodigoProveedorFactura).HasColumnName("CODIGO_PROVEEDOR_FACTURA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoDespacho)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_DESPACHO");

            entity.Property(e => e.CostoFlete)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_FLETE");

            entity.Property(e => e.CostoIva)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_IVA");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionDespachante)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DESPACHANTE");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MONEDA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionProveedorFactura)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR_FACTURA");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DespachoCierre)
                .HasColumnType("datetime")
                .HasColumnName("DESPACHO_CIERRE");

            entity.Property(e => e.DespachoCrt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_CRT");

            entity.Property(e => e.DespachoIvaDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_IVA_DOLAR");

            entity.Property(e => e.DespachoIvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_IVA_GUARANI");

            entity.Property(e => e.DespachoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_NUMERO");

            entity.Property(e => e.DireccionProveedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PROVEEDOR");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.DocumentoVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_VENCIMIENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Grabada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRABADA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdCompraExteriorFactura).HasColumnName("ID_COMPRA_EXTERIOR_FACTURA");

            entity.Property(e => e.IdCompraExteriorProducto).HasColumnName("ID_COMPRA_EXTERIOR_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.IvaDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_DOLAR");

            entity.Property(e => e.IvaDolarDespacho)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_DOLAR_DESPACHO");

            entity.Property(e => e.IvaDolarFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_DOLAR_FLETE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.PaisProveedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS_PROVEEDOR");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDocComercial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOC_COMERCIAL");

            entity.Property(e => e.TotalDocContable)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TOTAL_DOC_CONTABLE");

            entity.Property(e => e.TotalDocDespacho)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOC_DESPACHO");

            entity.Property(e => e.TotalDocFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOC_FLETE");

            entity.Property(e => e.TotalRetencion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_RETENCION");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<VCompraLocal>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COMPRA_LOCAL", "dbo");

            entity.Property(e => e.BarrioProveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_PROVEEDOR");

            entity.Property(e => e.CiudadProveedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_PROVEEDOR");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DireccionProveedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.PaisProveedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS_PROVEEDOR");

            entity.Property(e => e.RegStatus).HasColumnName("reg_status");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");
        });

        modelBuilder.Entity<VContratoCompra>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_COMPRA", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.BarrioClienteRef)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE_REF");

            entity.Property(e => e.BarrioProductor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BARRIO_PRODUCTOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadExtenso)
                .HasMaxLength(1003)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD_EXTENSO");

            entity.Property(e => e.Ci)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CiClienteRef)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE_REF");

            entity.Property(e => e.CodClienteRef).HasColumnName("COD_CLIENTE_REF");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoGrupoClase)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CODIGO_GRUPO_CLASE");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.ContratoObs)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("CONTRATO_OBS");

            entity.Property(e => e.Conyuge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONYUGE");

            entity.Property(e => e.ConyugeCi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_CI");

            entity.Property(e => e.DepositoDesc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPOSITO_DESC");

            entity.Property(e => e.DescClienteRef)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE_REF");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DirecClienteRef)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIREC_CLIENTE_REF");

            entity.Property(e => e.DireccionProductor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntregaObs)
                .IsUnicode(false)
                .HasColumnName("ENTREGA_OBS");

            entity.Property(e => e.EstadoCivil).HasColumnName("ESTADO_CIVIL");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(98)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.FirmadoMonsanto).HasColumnName("FIRMADO_MONSANTO");

            entity.Property(e => e.Flete)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FLETE");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.ImpresionPrecio)
                .IsUnicode(false)
                .HasColumnName("IMPRESION_PRECIO");

            entity.Property(e => e.NroLicencia)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("NRO_LICENCIA");

            entity.Property(e => e.PagoObs)
                .IsUnicode(false)
                .HasColumnName("PAGO_OBS");

            entity.Property(e => e.Peso)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PESO");

            entity.Property(e => e.PrecioObs)
                .IsUnicode(false)
                .HasColumnName("PRECIO_OBS");

            entity.Property(e => e.ProductoDesc)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_DESC");

            entity.Property(e => e.Productor).HasColumnName("PRODUCTOR");

            entity.Property(e => e.ProductorDesc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PRODUCTOR_DESC");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucClienteRef)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE_REF");

            entity.Property(e => e.SemAnticipo)
                .IsUnicode(false)
                .HasColumnName("SEM_ANTICIPO");

            entity.Property(e => e.SemChicago)
                .IsUnicode(false)
                .HasColumnName("SEM_CHICAGO");

            entity.Property(e => e.SemDescHumedad)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("SEM_DESC_HUMEDAD");

            entity.Property(e => e.SemPago)
                .IsUnicode(false)
                .HasColumnName("SEM_PAGO");

            entity.Property(e => e.Tasa)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("TASA");

            entity.Property(e => e.TipoPersona).HasColumnName("TIPO_PERSONA");
        });

        modelBuilder.Entity<VContratoCompraCosto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_COMPRA_COSTO", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadContratada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_CONTRATADA");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DescripcionBolsaValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_BOLSA_VALOR");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProductor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdContratoCompraCosto).HasColumnName("ID_CONTRATO_COMPRA_COSTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MesBase).HasColumnName("MES_BASE");

            entity.Property(e => e.MesBaseExtenso)
                .HasMaxLength(30)
                .HasColumnName("MES_BASE_EXTENSO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");
        });

        modelBuilder.Entity<VContratoCompraLiq>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_COMPRA_LIQ", "dbo");

            entity.Property(e => e.Anticipo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANTICIPO");

            entity.Property(e => e.AnticipoRet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANTICIPO_RET");

            entity.Property(e => e.Banco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("BANCO");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.CantContCompLiqPre)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANT_CONT_COMP_LIQ_PRE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadContCompLiqRom)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_CONT_COMP_LIQ_ROM");

            entity.Property(e => e.CantidadEntregada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_ENTREGADA");

            entity.Property(e => e.CiCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE");

            entity.Property(e => e.CiProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_PROVEEDOR");

            entity.Property(e => e.CiudadCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE");

            entity.Property(e => e.CiudadProveedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_PROVEEDOR");

            entity.Property(e => e.CiudadUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_UNIDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.ContratoCantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CONTRATO_CANTIDAD");

            entity.Property(e => e.ContratoProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONTRATO_PRODUCTO");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.DescripUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIP_USUARIO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEncargadoUnidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENCARGADO_UNIDAD");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescuentoContCompLiqPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO_CONT_COMP_LIQ_PRE");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.DocDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DOC_DESCRIPCION");

            entity.Property(e => e.DocumentoCompl)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_COMPL");

            entity.Property(e => e.DocumentoEncargadoUnidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_ENCARGADO_UNIDAD");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.FechaComplemento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COMPLEMENTO");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.FijacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("FIJACION_FECHA");

            entity.Property(e => e.FijacionPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FIJACION_PRECIO");

            entity.Property(e => e.FormaPago).HasColumnName("FORMA_PAGO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraLiq).HasColumnName("ID_CONTRATO_COMPRA_LIQ");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.Insumos)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMOS");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.LanzContCompPrecio).HasColumnName("LANZ_CONT_COMP_PRECIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NacionalidadCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD_CLIENTE");

            entity.Property(e => e.NotaServicio)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_SERVICIO");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.NumeroComplemento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_COMPLEMENTO");

            entity.Property(e => e.NumeroNota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_NOTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Prestamo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRESTAMO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Representante)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE");

            entity.Property(e => e.RepresentanteDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DIRECCION");

            entity.Property(e => e.RepresentanteDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REPRESENTANTE_DOCUMENTO");

            entity.Property(e => e.RestaFijacionDescuento)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("RESTA_FIJACION_DESCUENTO");

            entity.Property(e => e.Retencion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION");

            entity.Property(e => e.RetencionIragro)
                .HasColumnType("numeric(23, 5)")
                .HasColumnName("RETENCION_IRAGRO");

            entity.Property(e => e.RomAplicado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ROM_APLICADO");

            entity.Property(e => e.Romaneo).HasColumnName("ROMANEO");

            entity.Property(e => e.Royalties)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ROYALTIES");

            entity.Property(e => e.RoyaltiesContCompLiqRom)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ROYALTIES_CONT_COMP_LIQ_ROM");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.Sucursal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SUCURSAL");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoCompl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_COMPL");

            entity.Property(e => e.TimbradoProveedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_PROVEEDOR");

            entity.Property(e => e.TimbradoValidez)
                .HasMaxLength(41)
                .HasColumnName("TIMBRADO_VALIDEZ");

            entity.Property(e => e.TipoContrato).HasColumnName("TIPO_CONTRATO");

            entity.Property(e => e.TipoLiquidacion).HasColumnName("TIPO_LIQUIDACION");

            entity.Property(e => e.Titular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TITULAR");

            entity.Property(e => e.TributacionProducto).HasColumnName("TRIBUTACION_PRODUCTO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorContCompLiqPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONT_COMP_LIQ_PRE");

            entity.Property(e => e.ValorExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("VALOR_EXTENSO");

            entity.Property(e => e.ValorLiquido)
                .HasColumnType("numeric(28, 5)")
                .HasColumnName("VALOR_LIQUIDO");

            entity.Property(e => e.ValorLiquidoContCompLiqPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LIQUIDO_CONT_COMP_LIQ_PRE");

            entity.Property(e => e.ValorTotal)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_TOTAL");
        });

        modelBuilder.Entity<VContratoCompraPrecio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_COMPRA_PRECIO", "dbo");

            entity.Property(e => e.Bushel)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("BUSHEL");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Comprador)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("COMPRADOR");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.ContratoCosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CONTRATO_COSTO");

            entity.Property(e => e.DescripcionBolsaValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_BOLSA_VALOR");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DireccionComprador)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_COMPRADOR");

            entity.Property(e => e.DireccionProductor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.Fijacion).HasColumnName("FIJACION");

            entity.Property(e => e.FijacionFecha)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("FIJACION_FECHA");

            entity.Property(e => e.FijacionHora)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FIJACION_HORA");

            entity.Property(e => e.FijacionIva)
                .HasColumnType("decimal(22, 6)")
                .HasColumnName("FIJACION_IVA");

            entity.Property(e => e.FijacionPrecio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FIJACION_PRECIO");

            entity.Property(e => e.IdContratoCompraPrecio).HasColumnName("ID_CONTRATO_COMPRA_PRECIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LOCAL_ENTREGA");

            entity.Property(e => e.MesBase).HasColumnName("MES_BASE");

            entity.Property(e => e.MesBaseExtenso)
                .HasMaxLength(30)
                .HasColumnName("MES_BASE_EXTENSO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.PrecioPromocion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_PROMOCION");

            entity.Property(e => e.PrecioSIva)
                .HasColumnType("decimal(23, 6)")
                .HasColumnName("PRECIO_S_IVA");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucComprador)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_COMPRADOR");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.Tributacion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("TRIBUTACION");
        });

        modelBuilder.Entity<VContratoCompraRollover>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_COMPRA_ROLLOVER", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DescripcionBolsaValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_BOLSA_VALOR");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.FijaCosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("FIJA_COSTO");

            entity.Property(e => e.IdContratoCompra).HasColumnName("ID_CONTRATO_COMPRA");

            entity.Property(e => e.IdContratoCompraRollover).HasColumnName("ID_CONTRATO_COMPRA_ROLLOVER");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MesBase).HasColumnName("MES_BASE");

            entity.Property(e => e.MesBaseExtenso)
                .HasMaxLength(35)
                .HasColumnName("MES_BASE_EXTENSO");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.SumCostoValorCosto)
                .HasColumnType("decimal(20, 3)")
                .HasColumnName("SUM_COSTO_VALOR_COSTO");

            entity.Property(e => e.ValorCosto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("VALOR_COSTO");
        });

        modelBuilder.Entity<VContratoCompraVendedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_COMPRA_VENDEDOR", "dbo");

            entity.Property(e => e.CantidadGranosTn)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("CANTIDAD_GRANOS_TN");

            entity.Property(e => e.CodigoCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.Contrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTRATO");

            entity.Property(e => e.Cultivo).HasColumnName("CULTIVO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.IdCliente)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Pedido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PEDIDO");

            entity.Property(e => e.ValorInsumoU)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("VALOR_INSUMO_U$");

            entity.Property(e => e.Zafra).HasColumnName("ZAFRA");
        });

        modelBuilder.Entity<VContratoVentaCosto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_VENTA_COSTO", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadContratada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_CONTRATADA");

            entity.Property(e => e.Contrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTRATO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DescripcionBolsaValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_BOLSA_VALOR");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProductor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdContratoVentaCosto).HasColumnName("ID_CONTRATO_VENTA_COSTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MesBase).HasColumnName("MES_BASE");

            entity.Property(e => e.MesBaseExtenso)
                .HasMaxLength(30)
                .HasColumnName("MES_BASE_EXTENSO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");
        });

        modelBuilder.Entity<VContratoVentaLiq>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_VENTA_LIQ", "dbo");

            entity.Property(e => e.Anticipo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ANTICIPO");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CiCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE");

            entity.Property(e => e.CiudadCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Contrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTRATO");

            entity.Property(e => e.ContratoCantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CONTRATO_CANTIDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.DocDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DOC_DESCRIPCION");

            entity.Property(e => e.DocumentoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOCUMENTO_FECHA");

            entity.Property(e => e.DocumentoNumero).HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.FijacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("FIJACION_FECHA");

            entity.Property(e => e.FijacionPrecio)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FIJACION_PRECIO");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdContratoVentaLiq).HasColumnName("ID_CONTRATO_VENTA_LIQ");

            entity.Property(e => e.Insumo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INSUMO");

            entity.Property(e => e.Interes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("INTERES");

            entity.Property(e => e.LanzConVenPrecio).HasColumnName("LANZ_CON_VEN_PRECIO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RestFijPreDes)
                .HasColumnType("decimal(21, 4)")
                .HasColumnName("REST_FIJ_PRE_DES");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorConVenLiqPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CON_VEN_LIQ_PRE");

            entity.Property(e => e.ValorLiquido)
                .HasColumnType("decimal(21, 2)")
                .HasColumnName("VALOR_LIQUIDO");

            entity.Property(e => e.ValorLiquidoConVenLiqPre)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LIQUIDO_CON_VEN_LIQ_PRE");
        });

        modelBuilder.Entity<VContratoVentaRollover>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATO_VENTA_ROLLOVER", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Contrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTRATO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DescripcionBolsaValor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_BOLSA_VALOR");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaBase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE");

            entity.Property(e => e.FechaBaseCosto)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_BASE_COSTO");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdContratoVentaRollover).HasColumnName("ID_CONTRATO_VENTA_ROLLOVER");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MesBase).HasColumnName("MES_BASE");

            entity.Property(e => e.MesBaseExtenso)
                .HasMaxLength(30)
                .HasColumnName("MES_BASE_EXTENSO");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.SumCostoValorCosto)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("SUM_COSTO_VALOR_COSTO");

            entity.Property(e => e.ValorCosto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COSTO");
        });

        modelBuilder.Entity<VContratosDep>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATOS_DEP", "dbo");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.Deposito).HasColumnName("DEPOSITO");

            entity.Property(e => e.DescDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_DEPOSITO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Quantidade)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("QUANTIDADE");

            entity.Property(e => e.ValorAdendo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ADENDO");
        });

        modelBuilder.Entity<VContratosVentaDep>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CONTRATOS_VENTA_DEP", "dbo");

            entity.Property(e => e.Contrato)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONTRATO");

            entity.Property(e => e.Deposito).HasColumnName("DEPOSITO");

            entity.Property(e => e.DescDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_DEPOSITO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.Quantidade)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("QUANTIDADE");
        });

        modelBuilder.Entity<VCostosComprasExp>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COSTOS_COMPRAS_EXP", "dbo");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(26, 4)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(24, 4)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoDespacho)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_DESPACHO");

            entity.Property(e => e.CostoFinanciero)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_FINANCIERO");

            entity.Property(e => e.CostoFlete)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_FLETE");

            entity.Property(e => e.CostoFleteInterno)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_FLETE_INTERNO");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani).HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoIva)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_IVA");

            entity.Property(e => e.CostoOperacional)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("COSTO_OPERACIONAL");

            entity.Property(e => e.CostoUnitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COSTO_UNITARIO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.PorcCostoDespacho)
                .HasColumnType("decimal(38, 15)")
                .HasColumnName("PORC_COSTO_DESPACHO");

            entity.Property(e => e.PorcCostoFinanciero)
                .HasColumnType("decimal(38, 15)")
                .HasColumnName("PORC_COSTO_FINANCIERO");

            entity.Property(e => e.PorcCostoFlete)
                .HasColumnType("decimal(38, 15)")
                .HasColumnName("PORC_COSTO_FLETE");

            entity.Property(e => e.PorcCostoIva)
                .HasColumnType("decimal(38, 15)")
                .HasColumnName("PORC_COSTO_IVA");

            entity.Property(e => e.PorcCostoOperacional)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORC_COSTO_OPERACIONAL");
        });

        modelBuilder.Entity<VCotum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_COTA", "dbo");

            entity.Property(e => e.Aentregar)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("AENTREGAR");

            entity.Property(e => e.Clase)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CLASE");

            entity.Property(e => e.ClaseDescricao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CLASE_DESCRICAO");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Cota)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COTA");

            entity.Property(e => e.CotaCanola)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_CANOLA");

            entity.Property(e => e.CotaCentral)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_CENTRAL");

            entity.Property(e => e.CotaGirasol)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_GIRASOL");

            entity.Property(e => e.CotaMaiz)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_MAIZ");

            entity.Property(e => e.CotaMaizSafrina)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_MAIZ_SAFRINA");

            entity.Property(e => e.CotaNorte)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_NORTE");

            entity.Property(e => e.CotaSoja)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_SOJA");

            entity.Property(e => e.CotaSorgo)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_SORGO");

            entity.Property(e => e.CotaSur)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_SUR");

            entity.Property(e => e.CotaTrigo)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("COTA_TRIGO");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Entregado)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("ENTREGADO");

            entity.Property(e => e.Grupo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GRUPO");

            entity.Property(e => e.GrupoDescricao)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("GRUPO_DESCRICAO");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("SALDO");

            entity.Property(e => e.SaldoCanola)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_CANOLA");

            entity.Property(e => e.SaldoCentral)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_CENTRAL");

            entity.Property(e => e.SaldoGirasol)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_GIRASOL");

            entity.Property(e => e.SaldoMaiz)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_MAIZ");

            entity.Property(e => e.SaldoMaizSafrina)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_MAIZ_SAFRINA");

            entity.Property(e => e.SaldoNorte)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_NORTE");

            entity.Property(e => e.SaldoSoja)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_SOJA");

            entity.Property(e => e.SaldoSorgo)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_SORGO");

            entity.Property(e => e.SaldoSur)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_SUR");

            entity.Property(e => e.SaldoTrigo)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("SALDO_TRIGO");

            entity.Property(e => e.Vendido)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("VENDIDO");

            entity.Property(e => e.VentaCanola)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_CANOLA");

            entity.Property(e => e.VentaCentral)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_CENTRAL");

            entity.Property(e => e.VentaGirasol)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_GIRASOL");

            entity.Property(e => e.VentaMaiz)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_MAIZ");

            entity.Property(e => e.VentaMaizSafrina)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_MAIZ_SAFRINA");

            entity.Property(e => e.VentaNorte)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_NORTE");

            entity.Property(e => e.VentaSoja)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_SOJA");

            entity.Property(e => e.VentaSorgo)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_SORGO");

            entity.Property(e => e.VentaSur)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_SUR");

            entity.Property(e => e.VentaTrigo)
                .HasColumnType("numeric(2, 2)")
                .HasColumnName("VENTA_TRIGO");
        });

        modelBuilder.Entity<VCrmCiudad>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_CIUDAD", "dbo");

            entity.Property(e => e.ClaveCiudad).HasColumnName("CLAVE_CIUDAD");

            entity.Property(e => e.ClaveEstado).HasColumnName("CLAVE_ESTADO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");
        });

        modelBuilder.Entity<VCrmCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_CLIENTE", "dbo");

            entity.Property(e => e.Activo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVO");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.ClaveClienteSuperior).HasColumnName("CLAVE_CLIENTE_SUPERIOR");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Contribuyente).HasColumnName("CONTRIBUYENTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Eliminado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ELIMINADO");

            entity.Property(e => e.FechaRegistro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.FechaUltimaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ULTIMA_ACTUALIZACION");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.NombreCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CLIENTE");

            entity.Property(e => e.TipoPersona).HasColumnName("TIPO_PERSONA");
        });

        modelBuilder.Entity<VCrmClienteLocalEntrega>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_CLIENTE_LOCAL_ENTREGA", "dbo");

            entity.Property(e => e.Activo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVO");

            entity.Property(e => e.Bloqueado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BLOQUEADO");

            entity.Property(e => e.ClaveCiudad).HasColumnName("CLAVE_CIUDAD");

            entity.Property(e => e.ClaveParcero).HasColumnName("CLAVE_PARCERO");

            entity.Property(e => e.ClaveUsuario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_USUARIO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.FechaRegistro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.FechaUltimaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ULTIMA_ACTUALIZACION");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");
        });

        modelBuilder.Entity<VCrmCultivo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_CULTIVO", "dbo");

            entity.Property(e => e.Activo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVO");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdCultivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CULTIVO");
        });

        modelBuilder.Entity<VCrmDepartamento>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_DEPARTAMENTO", "dbo");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.Sigla)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SIGLA");
        });

        modelBuilder.Entity<VCrmEmpresa>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_EMPRESA", "dbo");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.Cooperativa)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("COOPERATIVA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdEmpresa).HasColumnName("ID_EMPRESA");
        });

        modelBuilder.Entity<VCrmPai>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_PAIS", "dbo");

            entity.Property(e => e.Activo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVO");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.ClavePais)
                .ValueGeneratedOnAdd()
                .HasColumnName("CLAVE_PAIS");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.Sigla)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SIGLA");
        });

        modelBuilder.Entity<VCrmProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_PRODUCTO", "dbo");

            entity.Property(e => e.Activo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVO");

            entity.Property(e => e.Bloqueado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BLOQUEADO");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.ClaveUnidadMedida).HasColumnName("CLAVE_UNIDAD_MEDIDA");

            entity.Property(e => e.Codigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");
        });

        modelBuilder.Entity<VCrmProductoClase>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_PRODUCTO_CLASE", "dbo");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");
        });

        modelBuilder.Entity<VCrmProductoGrupo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_PRODUCTO_GRUPO", "dbo");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdProductoGrupo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PRODUCTO_GRUPO");
        });

        modelBuilder.Entity<VCrmProveedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_PROVEEDOR", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdProveedor)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");
        });

        modelBuilder.Entity<VCrmRegion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_REGION", "dbo");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.FechaInicioVigencia)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_VIGENCIA");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.Regional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("REGIONAL");
        });

        modelBuilder.Entity<VCrmRegionLocal>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_REGION_LOCAL", "dbo");

            entity.Property(e => e.ClaveUnidadEmpresa).HasColumnName("CLAVE_UNIDAD_EMPRESA");

            entity.Property(e => e.FechaInicioVigencia)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_VIGENCIA");

            entity.Property(e => e.IdRegion).HasColumnName("ID_REGION");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<VCrmUnidadCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_UNIDAD_CLIENTE", "dbo");

            entity.Property(e => e.ClaveUnidad).HasColumnName("CLAVE_UNIDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");
        });

        modelBuilder.Entity<VCrmUnidadMedidum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_UNIDAD_MEDIDA", "dbo");

            entity.Property(e => e.ClaveEnvase)
                .ValueGeneratedOnAdd()
                .HasColumnName("CLAVE_ENVASE");

            entity.Property(e => e.ClaveGrupoEmpresarial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLAVE_GRUPO_EMPRESARIAL");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.Sigla)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("SIGLA");
        });

        modelBuilder.Entity<VCrmUsuario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_USUARIO", "dbo");

            entity.Property(e => e.Activo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ACTIVO");

            entity.Property(e => e.Clave)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.Departamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DEPARTAMENTO");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.FechaRegistroClave)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO_CLAVE");

            entity.Property(e => e.FechaVencimientoClave)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("FECHA_VENCIMIENTO_CLAVE");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.Login)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("LOGIN");

            entity.Property(e => e.NombreFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FUNCIONARIO");
        });

        modelBuilder.Entity<VCrmUsuarioRegion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CRM_USUARIO_REGION", "dbo");

            entity.Property(e => e.FechaInicioVigencia)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO_VIGENCIA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdUsuarioUnidad).HasColumnName("ID_USUARIO_UNIDAD");
        });

        modelBuilder.Entity<VCrosoftenCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_CLIENTE", "dbo");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.IdCliente)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CLIENTE");
        });

        modelBuilder.Entity<VCrosoftenCultivo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_CULTIVO", "dbo");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.IdCultivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_CULTIVO");
        });

        modelBuilder.Entity<VCrosoftenDac>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_DAC", "dbo");

            entity.Property(e => e.Aprobado)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("APROBADO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.EmailCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL_CLIENTE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("SALDO");

            entity.Property(e => e.Utilizado)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("UTILIZADO");
        });

        modelBuilder.Entity<VCrosoftenDacTm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_DAC_TM", "dbo");

            entity.Property(e => e.Aprobado).HasColumnType("decimal(38, 2)");

            entity.Property(e => e.CodigoCliente).HasColumnName("Codigo_Cliente");

            entity.Property(e => e.CodigoVendedor).HasColumnName("Codigo_Vendedor");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Descripcion_Ciudad");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Descripcion_Cliente");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Descripcion_Vendedor");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.Property(e => e.EmailCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Email_Cliente");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
        });

        modelBuilder.Entity<VCrosoftenFichaStockPorLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_FICHA_STOCK_POR_LOTE", "dbo");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Entrada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");

            entity.Property(e => e.LoteVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("LOTE_VENCIMIENTO");

            entity.Property(e => e.NumeroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_LOTE");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.Salida)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("SALIDA");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Stock)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("STOCK");
        });

        modelBuilder.Entity<VCrosoftenProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_PRODUCTO", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.CodDeUnidadMedida).HasColumnName("COD_DE_UNIDAD_MEDIDA");

            entity.Property(e => e.CodProductoGrupo).HasColumnName("COD_PRODUCTO_GRUPO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidadMedida).HasColumnName("CODIGO_UNIDAD_MEDIDA");

            entity.Property(e => e.DesDeUnidadMedida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DES_DE_UNIDAD_MEDIDA");

            entity.Property(e => e.DescGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_GRUPO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.PrecioMax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MIN");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");
        });

        modelBuilder.Entity<VCrosoftenProductoTm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_PRODUCTO_TM", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.CodDeUnidadMedida).HasColumnName("COD_DE_UNIDAD_MEDIDA");

            entity.Property(e => e.CodProductoGrupo).HasColumnName("COD_PRODUCTO_GRUPO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidadMedida).HasColumnName("CODIGO_UNIDAD_MEDIDA");

            entity.Property(e => e.DesDeUnidadMedida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DES_DE_UNIDAD_MEDIDA");

            entity.Property(e => e.DescGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_GRUPO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.PrecioMax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MIN");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");
        });

        modelBuilder.Entity<VCrosoftenVendedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_VENDEDOR", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.VendedorActivo).HasColumnName("VENDEDOR_ACTIVO");
        });

        modelBuilder.Entity<VCrosoftenZafra>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CROSOFTEN_ZAFRA", "dbo");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdZafra)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ZAFRA");
        });

        modelBuilder.Entity<VCuboAnalisisFacturaVentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CUBO_ANALISIS_FACTURA_VENTA", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadNeta)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD_NETA");

            entity.Property(e => e.ClaseProducto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CLASE_PRODUCTO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoIngrediente)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INGREDIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCiudadEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD_ENTREGA");

            entity.Property(e => e.DescripcionClaseProducto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE_PRODUCTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGrupoProducto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO_PRODUCTO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DevolucionCantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DEVOLUCION_CANTIDAD");

            entity.Property(e => e.DevolucionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DEVOLUCION_TOTAL");

            entity.Property(e => e.Direccion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.GrupoProducto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("GRUPO_PRODUCTO");

            entity.Property(e => e.Ingrediente)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("INGREDIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaRemision)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NOTA_REMISION");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalNeto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_NETO");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("date")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VCuboPedidoClienteTm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CUBO_PEDIDO_CLIENTE_TM", "dbo");

            entity.Property(e => e.CantidadFacturada).HasColumnName("CANTIDAD_FACTURADA");

            entity.Property(e => e.CantidadPedido).HasColumnName("CANTIDAD_PEDIDO");

            entity.Property(e => e.CantidadPendiente).HasColumnName("CANTIDAD_PENDIENTE");

            entity.Property(e => e.CodCliente).HasColumnName("COD_CLIENTE");

            entity.Property(e => e.CodEnvase).HasColumnName("COD_ENVASE");

            entity.Property(e => e.CodIngrediente).HasColumnName("COD_INGREDIENTE");

            entity.Property(e => e.CodProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("COD_PRODUCTO");

            entity.Property(e => e.CodProductoGrupo).HasColumnName("COD_PRODUCTO_GRUPO");

            entity.Property(e => e.CodVendedor).HasColumnName("COD_VENDEDOR");

            entity.Property(e => e.DescCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_CLIENTE");

            entity.Property(e => e.DescEnvase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_ENVASE");

            entity.Property(e => e.DescIngrediente)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_INGREDIENTE");

            entity.Property(e => e.DescProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");

            entity.Property(e => e.DescProductoGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO_GRUPO");

            entity.Property(e => e.DescVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESC_VENDEDOR");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");
        });

        modelBuilder.Entity<VCuboSaldoFisicoStock>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CUBO_SALDO_FISICO_STOCK", "dbo");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoGrupo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoGrupoClase)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_GRUPO_CLASE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Stock)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("STOCK");

            entity.Property(e => e.VencimientoLote)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_LOTE");
        });

        modelBuilder.Entity<VCuentaChe>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CUENTA_CHE", "dbo");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoTalonario).HasColumnName("CODIGO_TALONARIO");

            entity.Property(e => e.DescripcionCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FechaRetirada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RETIRADA");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.TablaOrigen)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TABLA_ORIGEN");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VCuentaCorriente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CUENTA_CORRIENTE", "dbo");

            entity.Property(e => e.CaracterPulgada).HasColumnName("CARACTER_PULGADA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoPlanCuenta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PLAN_CUENTA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionPlanCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PLAN_CUENTA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.LineaPulgada).HasColumnName("LINEA_PULGADA");

            entity.Property(e => e.Modelo)
                .IsUnicode(false)
                .HasColumnName("MODELO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_1");

            entity.Property(e => e.Observacion2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_2");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Situacion).HasColumnName("SITUACION");

            entity.Property(e => e.TipoCuenta).HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");
        });

        modelBuilder.Entity<VCuentaPre>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_CUENTA_PRE", "dbo");

            entity.Property(e => e.CodigoCuentaCorrienteDestino).HasColumnName("CODIGO_CUENTA_CORRIENTE_DESTINO");

            entity.Property(e => e.CodigoCuentaCorrienteOrigen).HasColumnName("CODIGO_CUENTA_CORRIENTE_ORIGEN");

            entity.Property(e => e.CodigoFavorecido).HasColumnName("CODIGO_FAVORECIDO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionCuentaCorrienteDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_CORRIENTE_DESTINO");

            entity.Property(e => e.DescripcionCuentaCorrienteOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_CORRIENTE_ORIGEN");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Destino).HasColumnName("DESTINO");

            entity.Property(e => e.DestinoAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESTINO_AJUSTADO");

            entity.Property(e => e.DestinoConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESTINO_CONVERTIDO");

            entity.Property(e => e.DestinoCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESTINO_COTIZACION");

            entity.Property(e => e.DestinoFecha)
                .HasColumnType("datetime")
                .HasColumnName("DESTINO_FECHA");

            entity.Property(e => e.DestinoMoneda).HasColumnName("DESTINO_MONEDA");

            entity.Property(e => e.Documento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdCuentaPre).HasColumnName("ID_CUENTA_PRE");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NombreFavorecido)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FAVORECIDO");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.OrigenProveedorCliente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ORIGEN_PROVEEDOR_CLIENTE")
                .IsFixedLength();

            entity.Property(e => e.ProveedorCliente).HasColumnName("PROVEEDOR_CLIENTE");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Unidad).HasColumnName("UNIDAD");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VDac>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_DAC", "dbo");

            entity.Property(e => e.AnalisisAreaArrendada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ANALISIS_AREA_ARRENDADA");

            entity.Property(e => e.AnalisisAreaPropia)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ANALISIS_AREA_PROPIA");

            entity.Property(e => e.AnalisisAreaTotal)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("ANALISIS_AREA_TOTAL");

            entity.Property(e => e.AnalisisComite)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_COMITE");

            entity.Property(e => e.AnalisisComiteDirectores)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_COMITE_DIRECTORES");

            entity.Property(e => e.AnalisisComiteFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_COMITE_FECHA");

            entity.Property(e => e.AnalisisCredito)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_CREDITO");

            entity.Property(e => e.AnalisisCreditoFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_CREDITO_FECHA");

            entity.Property(e => e.AnalisisCreditoUsuario).HasColumnName("ANALISIS_CREDITO_USUARIO");

            entity.Property(e => e.AnalisisGerencia)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_GERENCIA");

            entity.Property(e => e.AnalisisGerenciaFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_GERENCIA_FECHA");

            entity.Property(e => e.AnalisisGerenciaUsuario).HasColumnName("ANALISIS_GERENCIA_USUARIO");

            entity.Property(e => e.AnalisisVendedor)
                .IsUnicode(false)
                .HasColumnName("ANALISIS_VENDEDOR");

            entity.Property(e => e.AnalisisVendedorFecha)
                .HasColumnType("datetime")
                .HasColumnName("ANALISIS_VENDEDOR_FECHA");

            entity.Property(e => e.AnalisisVendedorUsuario).HasColumnName("ANALISIS_VENDEDOR_USUARIO");

            entity.Property(e => e.Analista).HasColumnName("ANALISTA");

            entity.Property(e => e.Calificacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("CALIFICACION");

            entity.Property(e => e.Cancelacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANCELACION");

            entity.Property(e => e.ChkAnalisis).HasColumnName("CHK_ANALISIS");

            entity.Property(e => e.ChkIdentidad).HasColumnName("CHK_IDENTIDAD");

            entity.Property(e => e.ChkInformconf).HasColumnName("CHK_INFORMCONF");

            entity.Property(e => e.ChkManifest).HasColumnName("CHK_MANIFEST");

            entity.Property(e => e.ChkTitulo).HasColumnName("CHK_TITULO");

            entity.Property(e => e.CiCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE");

            entity.Property(e => e.CodigoAnalista).HasColumnName("CODIGO_ANALISTA");

            entity.Property(e => e.CodigoAprobador).HasColumnName("CODIGO_APROBADOR");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoPendenciaFuncionario).HasColumnName("CODIGO_PENDENCIA_FUNCIONARIO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.CostoArrendamientoHaKgs)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("COSTO_ARRENDAMIENTO_HA_KGS");

            entity.Property(e => e.CostoArrendamientoHaUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_ARRENDAMIENTO_HA_US");

            entity.Property(e => e.CostoArrendamientoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_ARRENDAMIENTO_TOTAL");

            entity.Property(e => e.CostoOtros)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_OTROS");

            entity.Property(e => e.CostoOtrosDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("COSTO_OTROS_DESCRIPCION");

            entity.Property(e => e.CostoProduccionHa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_PRODUCCION_HA");

            entity.Property(e => e.CostoProduccionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_PRODUCCION_TOTAL");

            entity.Property(e => e.CreditoAprobador).HasColumnName("CREDITO_APROBADOR");

            entity.Property(e => e.CreditoFecha)
                .HasColumnType("datetime")
                .HasColumnName("CREDITO_FECHA");

            entity.Property(e => e.CreditoInsumo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_INSUMO");

            entity.Property(e => e.DescripcionAnalista)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ANALISTA");

            entity.Property(e => e.DescripcionAprobador)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_APROBADOR");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionFuncionarioPendencia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO_PENDENCIA");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DetalleCalificacion).HasColumnName("DETALLE_CALIFICACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ACTUALIZACION");

            entity.Property(e => e.FechaCancelacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CANCELACION");

            entity.Property(e => e.GarantiaAnegociar).HasColumnName("GARANTIA_ANEGOCIAR");

            entity.Property(e => e.GarantiaAnegociarTon)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("GARANTIA_ANEGOCIAR_TON");

            entity.Property(e => e.GarantiaCheque).HasColumnName("GARANTIA_CHEQUE");

            entity.Property(e => e.GarantiaContrato).HasColumnName("GARANTIA_CONTRATO");

            entity.Property(e => e.GarantiaFacturaCredito).HasColumnName("GARANTIA_FACTURA_CREDITO");

            entity.Property(e => e.GarantiaHipoteca).HasColumnName("GARANTIA_HIPOTECA");

            entity.Property(e => e.GarantiaPagTer).HasColumnName("GARANTIA_PAG_TER");

            entity.Property(e => e.GarantiaPagTerValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GARANTIA_PAG_TER_VALOR");

            entity.Property(e => e.GarantiaPagare).HasColumnName("GARANTIA_PAGARE");

            entity.Property(e => e.GarantiaPagareAval).HasColumnName("GARANTIA_PAGARE_AVAL");

            entity.Property(e => e.GarantiaPrenda).HasColumnName("GARANTIA_PRENDA");

            entity.Property(e => e.Gerente).HasColumnName("GERENTE");

            entity.Property(e => e.HipotecaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HIPOTECA_MONTO");

            entity.Property(e => e.HistoricoAtraso)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_ATRASO");

            entity.Property(e => e.HistoricoGrano)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_GRANO");

            entity.Property(e => e.HistoricoInsumo)
                .IsUnicode(false)
                .HasColumnName("HISTORICO_INSUMO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDac).HasColumnName("ID_DAC");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Pendencia)
                .IsUnicode(false)
                .HasColumnName("PENDENCIA");

            entity.Property(e => e.PendenciaFecha)
                .HasColumnType("datetime")
                .HasColumnName("PENDENCIA_FECHA");

            entity.Property(e => e.PendenciaUsuario).HasColumnName("PENDENCIA_USUARIO");

            entity.Property(e => e.PrecioProyectado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_PROYECTADO");

            entity.Property(e => e.PrendaMonto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRENDA_MONTO");

            entity.Property(e => e.ProduccionIndice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRODUCCION_INDICE");

            entity.Property(e => e.ProduccionTonelada)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PRODUCCION_TONELADA");

            entity.Property(e => e.RatCoef)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_COEF");

            entity.Property(e => e.RatEnd)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_END");

            entity.Property(e => e.RatLiq)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_LIQ");

            entity.Property(e => e.RatLiqInm)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_LIQ_INM");

            entity.Property(e => e.RatSolv)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RAT_SOLV");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RentaBruta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_BRUTA");

            entity.Property(e => e.RentaLiquida)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_LIQUIDA");

            entity.Property(e => e.RentaOtras)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RENTA_OTRAS");

            entity.Property(e => e.RentaOtrasDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RENTA_OTRAS_DESCRIPCION");

            entity.Property(e => e.Restriccion)
                .IsUnicode(false)
                .HasColumnName("RESTRICCION");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.SituacionCuenta)
                .IsUnicode(false)
                .HasColumnName("SITUACION_CUENTA");

            entity.Property(e => e.TotalGasto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GASTO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VDeCiudad>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_DE_CIUDAD", "dbo");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoDepartamento).HasColumnName("CODIGO_DEPARTAMENTO");

            entity.Property(e => e.CodigoDistrito).HasColumnName("CODIGO_DISTRITO");

            entity.Property(e => e.DecripcionDepartamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DecripcionDistrito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_DISTRITO");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.IdDeCiudad).HasColumnName("ID_DE_CIUDAD");

            entity.Property(e => e.IdDeDepartamento).HasColumnName("ID_DE_DEPARTAMENTO");

            entity.Property(e => e.IdDeDistrito).HasColumnName("ID_DE_DISTRITO");
        });

        modelBuilder.Entity<VDeResultado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_DE_RESULTADO", "dbo");

            entity.Property(e => e.DCodRes).HasColumnName("dCodRes");

            entity.Property(e => e.DMsgRes)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("dMsgRes");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDe).HasColumnName("ID_DE");
        });

        modelBuilder.Entity<VDeposito>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_DEPOSITO", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoEstado).HasColumnName("CODIGO_ESTADO");

            entity.Property(e => e.CodigoMunicipio).HasColumnName("CODIGO_MUNICIPIO");

            entity.Property(e => e.CodigoPais).HasColumnName("CODIGO_PAIS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.DescripcionMunicipio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EnvioPedido).HasColumnName("ENVIO_PEDIDO");

            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Responsable).HasColumnName("RESPONSABLE");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.StockMinimo).HasColumnName("STOCK_MINIMO");

            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.TipoProduccion).HasColumnName("TIPO_PRODUCCION");
        });

        modelBuilder.Entity<VEmpresaUnidad>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_EMPRESA_UNIDAD", "dbo");

            entity.Property(e => e.CodDeCiudad).HasColumnName("COD_DE_CIUDAD");

            entity.Property(e => e.CodDeDepartamento).HasColumnName("COD_DE_DEPARTAMENTO");

            entity.Property(e => e.CodDeDistrito).HasColumnName("COD_DE_DISTRITO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoSet).HasColumnName("CODIGO_SET");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionDistrito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DISTRITO");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Gerencia).HasColumnName("GERENCIA");

            entity.Property(e => e.Habilitado).HasColumnName("HABILITADO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Patronal).HasColumnName("PATRONAL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VEncargadoSucursal>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ENCARGADO_SUCURSAL", "dbo");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.DescripcionCargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARGO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCargo).HasColumnName("ID_CARGO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<VEnvase>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ENVASE", "dbo");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdEnvase)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_ENVASE");

            entity.Property(e => e.Peso).HasColumnName("PESO");

            entity.Property(e => e.Referencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("REFERENCIA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Verifica).HasColumnName("VERIFICA");

            entity.Property(e => e.Volumen).HasColumnName("VOLUMEN");
        });

        modelBuilder.Entity<VFabricaEquipoDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FABRICA_EQUIPO_DET", "dbo");

            entity.Property(e => e.Codigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFabricaEquipo).HasColumnName("ID_FABRICA_EQUIPO");

            entity.Property(e => e.IdFabricaEquipoDet).HasColumnName("ID_FABRICA_EQUIPO_DET");

            entity.Property(e => e.IdFabricaEquipoParte).HasColumnName("ID_FABRICA_EQUIPO_PARTE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VFabricanteExt>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FABRICANTE_EXT", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoEstado).HasColumnName("CODIGO_ESTADO");

            entity.Property(e => e.CodigoMunicipio).HasColumnName("CODIGO_MUNICIPIO");

            entity.Property(e => e.CodigoPais).HasColumnName("CODIGO_PAIS");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.DescripcionMunicipio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdEstado).HasColumnName("ID_ESTADO");

            entity.Property(e => e.IdFabricanteExt).HasColumnName("ID_FABRICANTE_EXT");

            entity.Property(e => e.IdMunicipio).HasColumnName("ID_MUNICIPIO");

            entity.Property(e => e.IdPais).HasColumnName("ID_PAIS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<VFacturaCrecon>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FACTURA_CRECON", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioClienteLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ChoferChapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_CHAPA");

            entity.Property(e => e.ChoferDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHOFER_DESCRIPCION");

            entity.Property(e => e.ChoferVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_VEHICULO");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadClienteLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.CiudadDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DESCRIPCION");

            entity.Property(e => e.ClienteDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DESCRIPCION");

            entity.Property(e => e.CodigoCiudadCliente).HasColumnName("CODIGO_CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Condicion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DepositoDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPOSITO_DESCRIPCION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.DireccionClienteLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAnticipo)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ANTICIPO");

            entity.Property(e => e.Gravadas10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("GRAVADAS10");

            entity.Property(e => e.Gravadas10Guarani)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("GRAVADAS10_GUARANI");

            entity.Property(e => e.Gravadas5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("GRAVADAS5");

            entity.Property(e => e.Gravadas5Guarani)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("GRAVADAS5_GUARANI");

            entity.Property(e => e.GteComercial)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("GTE_COMERCIAL");

            entity.Property(e => e.Hectarea)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HECTAREA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdFacturaCreconProducto).HasColumnName("ID_FACTURA_CRECON_PRODUCTO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdServicio).HasColumnName("ID_SERVICIO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Iva10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA10");

            entity.Property(e => e.Iva10Guarani)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("IVA10_GUARANI");

            entity.Property(e => e.Iva5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA5");

            entity.Property(e => e.Iva5Guarani)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("IVA5_GUARANI");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaAnticipo)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_ANTICIPO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(741)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionFacturaCrecon)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_FACTURA_CRECON");

            entity.Property(e => e.Pago)
                .HasMaxLength(181)
                .IsUnicode(false)
                .HasColumnName("PAGO");

            entity.Property(e => e.PedidoBonificacion)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PEDIDO_BONIFICACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.TelefonoCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CLIENTE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoFactura).HasColumnName("TIPO_FACTURA");

            entity.Property(e => e.TipoPedido).HasColumnName("TIPO_PEDIDO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.TipoSalida).HasColumnName("TIPO_SALIDA");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.TributacionAnticipo).HasColumnName("TRIBUTACION_ANTICIPO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioGuarani)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UNITARIO_GUARANI");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAnticipo)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR_ANTICIPO");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorExentaGuarani)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("VALOR_EXENTA_GUARANI");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva10Guarani)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("VALOR_IVA10_GUARANI");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA5");

            entity.Property(e => e.ValorIva5Guarani)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("VALOR_IVA5_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VFacturaCreconEliminado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FACTURA_CRECON_ELIMINADOS", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioClienteLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ChoferChapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_CHAPA");

            entity.Property(e => e.ChoferDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHOFER_DESCRIPCION");

            entity.Property(e => e.ChoferVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_VEHICULO");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadClienteLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.CiudadDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DESCRIPCION");

            entity.Property(e => e.ClienteDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DESCRIPCION");

            entity.Property(e => e.CodigoCiudadCliente).HasColumnName("CODIGO_CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Condicion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DepositoDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPOSITO_DESCRIPCION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.DireccionClienteLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.GteComercial)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("GTE_COMERCIAL");

            entity.Property(e => e.Hectarea)
                .HasColumnType("decimal(15, 2)")
                .HasColumnName("HECTAREA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdFacturaCreconProducto).HasColumnName("ID_FACTURA_CRECON_PRODUCTO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Iva10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA10");

            entity.Property(e => e.Iva5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(741)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionFacturaCrecon)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_FACTURA_CRECON");

            entity.Property(e => e.Pago)
                .HasMaxLength(69)
                .IsUnicode(false)
                .HasColumnName("PAGO");

            entity.Property(e => e.PedidoBonificacion)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PEDIDO_BONIFICACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.TelefonoCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CLIENTE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoFactura).HasColumnName("TIPO_FACTURA");

            entity.Property(e => e.TipoPedido).HasColumnName("TIPO_PEDIDO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.TipoSalida).HasColumnName("TIPO_SALIDA");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA5");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VFacturaCreconImpresion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FACTURA_CRECON_IMPRESION", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioClienteLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ChoferChapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_CHAPA");

            entity.Property(e => e.ChoferDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHOFER_DESCRIPCION");

            entity.Property(e => e.ChoferVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_VEHICULO");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadClienteLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.CiudadDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DESCRIPCION");

            entity.Property(e => e.ClienteDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DESCRIPCION");

            entity.Property(e => e.CodigoCiudadCliente).HasColumnName("CODIGO_CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Condicion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DepositoDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPOSITO_DESCRIPCION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.DireccionClienteLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdFacturaCreconProducto).HasColumnName("ID_FACTURA_CRECON_PRODUCTO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Iva10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA10");

            entity.Property(e => e.Iva5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(741)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionFacturaCrecon)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_FACTURA_CRECON");

            entity.Property(e => e.Pago)
                .HasMaxLength(69)
                .IsUnicode(false)
                .HasColumnName("PAGO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.TelefonoCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CLIENTE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoFactura).HasColumnName("TIPO_FACTURA");

            entity.Property(e => e.TipoPedido).HasColumnName("TIPO_PEDIDO");

            entity.Property(e => e.TipoSalida).HasColumnName("TIPO_SALIDA");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA5");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VFacturaExportacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FACTURA_EXPORTACION", "dbo");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CiCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE");

            entity.Property(e => e.CiudadCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Condicion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Condicion2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("CONDICION2");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTm)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TM");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DespachoCotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESPACHO_COTIZACION");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FeRegStatus).HasColumnName("FE_REG_STATUS");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFacturaExportacion).HasColumnName("ID_FACTURA_EXPORTACION");

            entity.Property(e => e.IdFacturaExportacionProducto).HasColumnName("ID_FACTURA_EXPORTACION_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Negociacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEGOCIACION");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.PaisCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS_CLIENTE");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.Secuencia).HasColumnName("SECUENCIA");

            entity.Property(e => e.TelefonoCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CLIENTE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoDetalle).HasColumnName("TIPO_DETALLE");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VFacturaUnificadum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FACTURA_UNIFICADA", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");
        });

        modelBuilder.Entity<VFechaFactura>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FECHA_FACTURA", "dbo");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioGuarani)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UNITARIO_GUARANI");
        });

        modelBuilder.Entity<VFichaCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FICHA_CLIENTE", "dbo");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.Credito)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("decimal(24, 8)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaOrigen)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ORIGEN");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdRecibir).HasColumnName("ID_RECIBIR");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<VForwarder>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FORWARDER", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdForwarder).HasColumnName("ID_FORWARDER");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VFuncionario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FUNCIONARIO", "dbo");

            entity.Property(e => e.Antiguedad)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("ANTIGUEDAD");

            entity.Property(e => e.Cargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Carrera)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CARRERA");

            entity.Property(e => e.Celular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Ci)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Departamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DEPARTAMENTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ESTADO_CIVIL");

            entity.Property(e => e.EstadoVigencia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ESTADO_VIGENCIA");

            entity.Property(e => e.FechaEntrada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTRADA");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FechaSalida)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA");

            entity.Property(e => e.FechaTerminoTemp)
                .HasColumnType("date")
                .HasColumnName("FECHA_TERMINO_TEMP");

            entity.Property(e => e.Genero)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("GENERO");

            entity.Property(e => e.GrupoSanguineo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRUPO_SANGUINEO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Mail)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("MAIL");

            entity.Property(e => e.Modalidad)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MODALIDAD");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.NombreFuncionario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FUNCIONARIO");
        });

        modelBuilder.Entity<VFuncionarioBi>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FUNCIONARIO_BI", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Celular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil).HasColumnName("ESTADO_CIVIL");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.IdCategoria).HasColumnName("ID_CATEGORIA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Sexo).HasColumnName("SEXO");

            entity.Property(e => e.Telefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<VFuncionarioGrupoSarabium>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FUNCIONARIO_GRUPO_SARABIA", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<VFuncionarioWeb>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_FUNCIONARIO_WEB", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.DescripcionCargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARGO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaAdmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION");

            entity.Property(e => e.FechaAdmision1)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION1");

            entity.Property(e => e.FechaAdmision2)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION2");

            entity.Property(e => e.FechaRescision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION");

            entity.Property(e => e.FechaRescision1)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION1");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.NombreFuncionario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FUNCIONARIO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<VGarante>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GARANTE", "dbo");

            entity.Property(e => e.AaCultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_CULTIVADA");

            entity.Property(e => e.AaNocultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_NOCULTIVADA");

            entity.Property(e => e.AaPastura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_PASTURA");

            entity.Property(e => e.AaTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AA_TOTAL");

            entity.Property(e => e.Actividad)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ACTIVIDAD");

            entity.Property(e => e.ApCultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_CULTIVADA");

            entity.Property(e => e.ApNocultivada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_NOCULTIVADA");

            entity.Property(e => e.ApPastura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_PASTURA");

            entity.Property(e => e.ApTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AP_TOTAL");

            entity.Property(e => e.Asistencia)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ASISTENCIA");

            entity.Property(e => e.Asociacion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("ASOCIACION");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Capital)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPITAL");

            entity.Property(e => e.CarnetInmigrante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CARNET_INMIGRANTE");

            entity.Property(e => e.Celular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.ChkAmbiental).HasColumnName("CHK_AMBIENTAL");

            entity.Property(e => e.ChkArrendamiento).HasColumnName("CHK_ARRENDAMIENTO");

            entity.Property(e => e.ChkAta).HasColumnName("CHK_ATA");

            entity.Property(e => e.ChkBalance).HasColumnName("CHK_BALANCE");

            entity.Property(e => e.ChkCartaPoder).HasColumnName("CHK_CARTA_PODER");

            entity.Property(e => e.ChkDisolucion).HasColumnName("CHK_DISOLUCION");

            entity.Property(e => e.ChkEstatuto).HasColumnName("CHK_ESTATUTO");

            entity.Property(e => e.ChkEstatutoSrl).HasColumnName("CHK_ESTATUTO_SRL");

            entity.Property(e => e.ChkFirma).HasColumnName("CHK_FIRMA");

            entity.Property(e => e.ChkForm101).HasColumnName("CHK_FORM_101");

            entity.Property(e => e.ChkForm110).HasColumnName("CHK_FORM_110");

            entity.Property(e => e.ChkForm153).HasColumnName("CHK_FORM_153");

            entity.Property(e => e.ChkIdentidad).HasColumnName("CHK_IDENTIDAD");

            entity.Property(e => e.ChkIdentidadConyuge).HasColumnName("CHK_IDENTIDAD_CONYUGE");

            entity.Property(e => e.ChkInformconf).HasColumnName("CHK_INFORMCONF");

            entity.Property(e => e.ChkManifestEmp).HasColumnName("CHK_MANIFEST_EMP");

            entity.Property(e => e.ChkManifestacion).HasColumnName("CHK_MANIFESTACION");

            entity.Property(e => e.ChkMaquinaria).HasColumnName("CHK_MAQUINARIA");

            entity.Property(e => e.ChkPoder).HasColumnName("CHK_PODER");

            entity.Property(e => e.ChkRuc).HasColumnName("CHK_RUC");

            entity.Property(e => e.ChkTitulo).HasColumnName("CHK_TITULO");

            entity.Property(e => e.CiCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI_CLIENTE");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoEstado).HasColumnName("CODIGO_ESTADO");

            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.ComercializaProduccion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COMERCIALIZA_PRODUCCION");

            entity.Property(e => e.ConyugeCi)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_CI");

            entity.Property(e => e.ConyugeNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("CONYUGE_NACIMIENTO");

            entity.Property(e => e.ConyugeNacionalidad)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_NACIONALIDAD");

            entity.Property(e => e.ConyugeNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CONYUGE_NOMBRE");

            entity.Property(e => e.Cooperativa)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("COOPERATIVA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEstado)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO");

            entity.Property(e => e.DescripcionMunicipio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.Distribuidor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DISTRIBUIDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil).HasColumnName("ESTADO_CIVIL");

            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ACTUALIZACION");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdGarante).HasColumnName("ID_GARANTE");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Imagro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IMAGRO");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegimenCasamiento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REGIMEN_CASAMIENTO");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TipoPersona).HasColumnName("TIPO_PERSONA");
        });

        modelBuilder.Entity<VGasto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GASTO", "dbo");

            entity.Property(e => e.CiProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_PROVEEDOR");

            entity.Property(e => e.CodigoCc).HasColumnName("CODIGO_CC");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoDptoClasi).HasColumnName("CODIGO_DPTO_CLASI");

            entity.Property(e => e.CodigoPlan)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PLAN");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Condicion).HasColumnName("CONDICION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.CuentaProveedor).HasColumnName("CUENTA_PROVEEDOR");

            entity.Property(e => e.DescEntidadFinanciera)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESC_ENTIDAD_FINANCIERA");

            entity.Property(e => e.DescripcionCc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CC");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCondicion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CONDICION");

            entity.Property(e => e.DescripcionCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionDptoClasi)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DPTO_CLASI");

            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MONEDA");

            entity.Property(e => e.DescripcionPlan)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PLAN");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionTributacion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRIBUTACION");

            entity.Property(e => e.DescripcionUnidadCosto)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_COSTO");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDocumento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DOCUMENTO");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(98)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTimbradoAut).HasColumnName("ID_TIMBRADO_AUT");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_10");

            entity.Property(e => e.IvaGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IVA_GUARANI_5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_DOCUMENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Porcentaje)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegStatusClasificacion).HasColumnName("REG_STATUS_CLASIFICACION");

            entity.Property(e => e.RegStatusDocumento).HasColumnName("REG_STATUS_DOCUMENTO");

            entity.Property(e => e.RegStatusRetencion).HasColumnName("REG_STATUS_RETENCION");

            entity.Property(e => e.RetencionTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL");

            entity.Property(e => e.RetencionTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL_US");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.TelProveedor)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TEL_PROVEEDOR");

            entity.Property(e => e.TimbradoAutofactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_AUTOFACTURA");

            entity.Property(e => e.TimbradoRetencion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_RETENCION");

            entity.Property(e => e.TipoCuenta).HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.TipoGasto).HasColumnName("TIPO_GASTO");

            entity.Property(e => e.TipoPago).HasColumnName("TIPO_PAGO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDocumento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOCUMENTO");

            entity.Property(e => e.TotalDocumentoExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("TOTAL_DOCUMENTO_EXTENSO");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadCosto).HasColumnName("UNIDAD_COSTO");

            entity.Property(e => e.ValidezTimbradoAutofactura)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO_AUTOFACTURA");

            entity.Property(e => e.ValidezTimbradoRetencion)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO_RETENCION");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("VALOR_EXTENSO");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorGuarani10)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_10");

            entity.Property(e => e.ValorGuarani5)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI_5");
        });

        modelBuilder.Entity<VGastoDocumento>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GASTO_DOCUMENTO", "dbo");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.ExpedidorAut)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR_AUT");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdGasto).HasColumnName("ID__GASTO");

            entity.Property(e => e.IdGastoDocumento)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID__GASTO_DOCUMENTO");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.Impuesto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUESTO");

            entity.Property(e => e.Impuesto10)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUESTO_10");

            entity.Property(e => e.Impuesto5)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("IMPUESTO_5");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Numero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoImpresionAut)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION_AUT")
                .IsFixedLength();

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VGastoRetencionTm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GASTO_RETENCION_TM", "dbo");

            entity.Property(e => e.CiProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_PROVEEDOR");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Condicion).HasColumnName("CONDICION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDocumento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DOCUMENTO");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(98)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdGasto).HasColumnName("ID_GASTO");

            entity.Property(e => e.IdGastoDocumento).HasColumnName("ID_GASTO_DOCUMENTO");

            entity.Property(e => e.IdGastoRetencionDet).HasColumnName("ID_GASTO_RETENCION_DET");

            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IVA");

            entity.Property(e => e.ImporteRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_RENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_DOCUMENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PorcentajeIva)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE_IVA");

            entity.Property(e => e.PorcentajeRenta)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE_RENTA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.TelProveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TEL_PROVEEDOR");

            entity.Property(e => e.TimbradoAutofactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_AUTOFACTURA");

            entity.Property(e => e.TimbradoRetencion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_RETENCION");

            entity.Property(e => e.TotalDocumentoExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("TOTAL_DOCUMENTO_EXTENSO");

            entity.Property(e => e.TotalIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_IVA");

            entity.Property(e => e.TotalRetencion)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TOTAL_RETENCION");

            entity.Property(e => e.TotalTransaccion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_TRANSACCION");

            entity.Property(e => e.TotalTransaccionSinIva)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TOTAL_TRANSACCION_SIN_IVA");

            entity.Property(e => e.ValidezTimbradoAutofactura)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO_AUTOFACTURA");

            entity.Property(e => e.ValidezTimbradoRetencion)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO_RETENCION");
        });

        modelBuilder.Entity<VGastosRodado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GASTOS_RODADOS", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.CodigoPlanCuenta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PLAN_CUENTA");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.DescTipoVehiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_VEHICULO");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO");

            entity.Property(e => e.DescripcionMaterial)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MATERIAL");

            entity.Property(e => e.DescripcionPlanCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PLAN_CUENTA");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionSucursal)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SUCURSAL");

            entity.Property(e => e.DescripcionVehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VEHICULO");

            entity.Property(e => e.FechaGasto)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_GASTO");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdMaterial).HasColumnName("ID_MATERIAL");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Kilometraje).HasColumnName("KILOMETRAJE");

            entity.Property(e => e.LanzamientoGasto).HasColumnName("LANZAMIENTO_GASTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_DOLAR");
        });

        modelBuilder.Entity<VGerenciaCrm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GERENCIA_CRM", "dbo");

            entity.Property(e => e.CapacidadSilo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPACIDAD_SILO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoClientePrincipal).HasColumnName("CODIGO_CLIENTE_PRINCIPAL");

            entity.Property(e => e.CodigoClienteRelacion).HasColumnName("CODIGO_CLIENTE_RELACION");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoGerenteLocalEntrega).HasColumnName("CODIGO_GERENTE_LOCAL_ENTREGA");

            entity.Property(e => e.CodigoGerentePrincipal).HasColumnName("CODIGO_GERENTE_PRINCIPAL");

            entity.Property(e => e.CodigoVendedorLocalEntrega).HasColumnName("CODIGO_VENDEDOR_LOCAL_ENTREGA");

            entity.Property(e => e.CodigoVendedorPrincipal).HasColumnName("CODIGO_VENDEDOR_PRINCIPAL");

            entity.Property(e => e.Comportamiento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("COMPORTAMIENTO");

            entity.Property(e => e.ConAnalisisComercial)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("CON_ANALISIS_COMERCIAL");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionClientePrincipal)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE_PRINCIPAL");

            entity.Property(e => e.DescripcionClienteRelacion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE_RELACION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionGerenteLocalEntrega)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE_LOCAL_ENTREGA");

            entity.Property(e => e.DescripcionGerentePrincipal)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE_PRINCIPAL");

            entity.Property(e => e.DescripcionVendedorLocalEntrega)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR_LOCAL_ENTREGA");

            entity.Property(e => e.DescripcionVendedorPrincipal)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR_PRINCIPAL");

            entity.Property(e => e.HectareasArrendadas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_ARRENDADAS");

            entity.Property(e => e.HectareasPotenciales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_POTENCIALES");

            entity.Property(e => e.HectareasPropias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_PROPIAS");

            entity.Property(e => e.IdClienteComercial).HasColumnName("ID_CLIENTE_COMERCIAL");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdClientePrincipal).HasColumnName("ID_CLIENTE_PRINCIPAL");

            entity.Property(e => e.IdClienteRelacion).HasColumnName("ID_CLIENTE_RELACION");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdVendedorLocalEntrega).HasColumnName("ID_VENDEDOR_LOCAL_ENTREGA");

            entity.Property(e => e.IdVendedorPrincipal).HasColumnName("ID_VENDEDOR_PRINCIPAL");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.NivelTecnologico)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NIVEL_TECNOLOGICO");

            entity.Property(e => e.Perfil)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("PERFIL");

            entity.Property(e => e.TipoCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIPO_CLIENTE");
        });

        modelBuilder.Entity<VGerenteUnidad>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_GERENTE_UNIDAD", "dbo");

            entity.Property(e => e.AtcGerente).HasColumnName("ATC_GERENTE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");
        });

        modelBuilder.Entity<VImpresionDocumentoFacturaCrecon>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_IMPRESION_DOCUMENTO_FACTURA_CRECON", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioClienteLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ChoferChapa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_CHAPA");

            entity.Property(e => e.ChoferDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHOFER_DESCRIPCION");

            entity.Property(e => e.ChoferVehiculo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHOFER_VEHICULO");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadClienteLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.CiudadDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DESCRIPCION");

            entity.Property(e => e.ClienteDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DESCRIPCION");

            entity.Property(e => e.CodigoCiudadCliente).HasColumnName("CODIGO_CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Condicion)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CONDICION");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DepositoDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPOSITO_DESCRIPCION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.DireccionClienteLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdFacturaCreconProducto).HasColumnName("ID_FACTURA_CRECON_PRODUCTO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Iva10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA10");

            entity.Property(e => e.Iva10Guarani)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("IVA10_GUARANI");

            entity.Property(e => e.Iva5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA5");

            entity.Property(e => e.Iva5Guarani)
                .HasColumnType("numeric(38, 6)")
                .HasColumnName("IVA5_GUARANI");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(741)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionFacturaCrecon)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_FACTURA_CRECON");

            entity.Property(e => e.Pago)
                .HasMaxLength(69)
                .IsUnicode(false)
                .HasColumnName("PAGO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.TelefonoCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CLIENTE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoFactura).HasColumnName("TIPO_FACTURA");

            entity.Property(e => e.TipoPedido).HasColumnName("TIPO_PEDIDO");

            entity.Property(e => e.TipoSalida).HasColumnName("TIPO_SALIDA");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioGuarani)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UNITARIO_GUARANI");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorExentaGuarani)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("VALOR_EXENTA_GUARANI");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva10Guarani)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("VALOR_IVA10_GUARANI");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA5");

            entity.Property(e => e.ValorIva5Guarani)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("VALOR_IVA5_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VImpresionDocumentoNotaEnvio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_IMPRESION_DOCUMENTO_NOTA_ENVIO", "dbo");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.BarrioDepositoDestino)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPOSITO_DESTINO");

            entity.Property(e => e.BarrioDepositoOrigen)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPOSITO_ORIGEN");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DEPOSITO_DESTINO");

            entity.Property(e => e.CiudadDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DEPOSITO_ORIGEN");

            entity.Property(e => e.CodigoDepositoDestino).HasColumnName("CODIGO_DEPOSITO_DESTINO");

            entity.Property(e => e.CodigoDepositoOrigen).HasColumnName("CODIGO_DEPOSITO_ORIGEN");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DepositoDestino).HasColumnName("DEPOSITO_DESTINO");

            entity.Property(e => e.DepositoOrigen).HasColumnName("DEPOSITO_ORIGEN");

            entity.Property(e => e.DescripcionDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_DESTINO");

            entity.Property(e => e.DescripcionDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_ORIGEN");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionMotorista)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MOTORISTA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DireccionDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPOSITO_DESTINO");

            entity.Property(e => e.DireccionDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPOSITO_ORIGEN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DEPOSITO_DESTINO");

            entity.Property(e => e.EstadoDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DEPOSITO_ORIGEN");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.IdNotaEnvioProducto).HasColumnName("ID_NOTA_ENVIO_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");

            entity.Property(e => e.MotivoDescr)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_DESCR");

            entity.Property(e => e.MunicipioDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_DEPOSITO_DESTINO");

            entity.Property(e => e.MunicipioDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_DEPOSITO_ORIGEN");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_DEPOSITO_DESTINO");

            entity.Property(e => e.RucTransportadora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_TRANSPORTADORA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");
        });

        modelBuilder.Entity<VImpresionDocumentoNotaRemision>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_IMPRESION_DOCUMENTO_NOTA_REMISION", "dbo");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.BarrioConsignatario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CONSIGNATARIO");

            entity.Property(e => e.BarrioDeposito)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPOSITO");

            entity.Property(e => e.BarrioLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_LOCAL_ENTREGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ChapaCarreta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_CARRETA");

            entity.Property(e => e.ChapaVehiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_VEHICULO");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadConsignatario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CONSIGNATARIO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionCarreta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARRETA");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionCiudadDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD_DEPOSITO");

            entity.Property(e => e.DescripcionCiudadLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD_LOCAL_ENTREGA");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionConsignatario)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CONSIGNATARIO");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionEstadoDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO_DEPOSITO");

            entity.Property(e => e.DescripcionMunicipioDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO_DEPOSITO");

            entity.Property(e => e.DescripcionPaisDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionVehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VEHICULO");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DireccionConsignatario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CONSIGNATARIO");

            entity.Property(e => e.DireccionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPOSITO");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DESCRIPCION");

            entity.Property(e => e.EstadoLocalEntreda)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_LOCAL_ENTREDA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdConsignatario).HasColumnName("ID_CONSIGNATARIO");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdNotaRemisionProducto).HasColumnName("ID_NOTA_REMISION_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.InicioTimbrado)
                .HasColumnType("datetime")
                .HasColumnName("INICIO_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MotivoDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_DESCRIPCION");

            entity.Property(e => e.MunicipioDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_DESCRIPCION");

            entity.Property(e => e.MunicipioLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_LOCAL_ENTREGA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucConsignatario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CONSIGNATARIO");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucTransportadora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_TRANSPORTADORA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.VencimientoTimbrado)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_TIMBRADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");
        });

        modelBuilder.Entity<VImprimeDocumentoNotaRemisionExp>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_IMPRIME_DOCUMENTO_NOTA_REMISION_EXP", "dbo");

            entity.Property(e => e.BarrioChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CHOFER");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Certificado).HasColumnName("CERTIFICADO");

            entity.Property(e => e.Chapa1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA_1");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Crt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CRT");

            entity.Property(e => e.Declarador).HasColumnName("DECLARADOR");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.Despacho)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Fitosanitario).HasColumnName("FITOSANITARIO");

            entity.Property(e => e.Gopi).HasColumnName("GOPI");

            entity.Property(e => e.HabilitacionChofer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("HABILITACION_CHOFER");

            entity.Property(e => e.IdNotaRemisionExp).HasColumnName("ID_NOTA_REMISION_EXP");

            entity.Property(e => e.IdNotaRemisionExpProducto).HasColumnName("ID_NOTA_REMISION_EXP_PRODUCTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaExportacion)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_EXPORTACION");

            entity.Property(e => e.PaisCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS_CLIENTE");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");
        });

        modelBuilder.Entity<VIncidenteUsuario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_INCIDENTE_USUARIO", "dbo");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdIncidente).HasColumnName("ID_INCIDENTE");

            entity.Property(e => e.Status).HasColumnName("STATUS");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<VIngrediente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_INGREDIENTE", "dbo");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO")
                .IsFixedLength();
        });

        modelBuilder.Entity<VIngredienteProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_INGREDIENTE_PRODUCTO", "dbo");

            entity.Property(e => e.Codigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdPkIngrediente).HasColumnName("ID_PK_INGREDIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VIngreso>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_INGRESO", "dbo");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.CodigoCentroCosto).HasColumnName("CODIGO_CENTRO_COSTO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoFavorecido).HasColumnName("CODIGO_FAVORECIDO");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCentroCosto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CENTRO_COSTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCuentaCorriente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_CORRIENTE");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionFavorecido)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FAVORECIDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdChequeraDetalle).HasColumnName("ID_CHEQUERA_DETALLE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCuentaCorriente).HasColumnName("ID_CUENTA_CORRIENTE");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdIngreso).HasColumnName("ID_INGRESO");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("VALOR_EXTENSO");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");
        });

        modelBuilder.Entity<VLecomCargo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_CARGO", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Funcion)
                .IsUnicode(false)
                .HasColumnName("FUNCION");

            entity.Property(e => e.Habilidad)
                .IsUnicode(false)
                .HasColumnName("HABILIDAD");

            entity.Property(e => e.Resultado)
                .IsUnicode(false)
                .HasColumnName("RESULTADO");
        });

        modelBuilder.Entity<VLecomCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_CLIENTE", "dbo");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
        });

        modelBuilder.Entity<VLecomConsultaCheque>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_CONSULTA_CHEQUE", "dbo");

            entity.Property(e => e.CuentaCorriente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA_CORRIENTE");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.ValorPago)
                .HasColumnType("numeric(19, 2)")
                .HasColumnName("VALOR_PAGO");
        });

        modelBuilder.Entity<VLecomCotizacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_COTIZACION", "dbo");

            entity.Property(e => e.Año).HasColumnName("AÑO");

            entity.Property(e => e.CompraDolarGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPRA_DOLAR_GUARANI");

            entity.Property(e => e.CompraDolarReal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPRA_DOLAR_REAL");

            entity.Property(e => e.CompraRealGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMPRA_REAL_GUARANI");

            entity.Property(e => e.Dia).HasColumnName("DIA");

            entity.Property(e => e.Fecha)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FECHA");

            entity.Property(e => e.Mes).HasColumnName("MES");

            entity.Property(e => e.Orden)
                .ValueGeneratedOnAdd()
                .HasColumnName("ORDEN");

            entity.Property(e => e.VentaDolarGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VENTA_DOLAR_GUARANI");

            entity.Property(e => e.VentaDolarReal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VENTA_DOLAR_REAL");

            entity.Property(e => e.VentaRealGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VENTA_REAL_GUARANI");
        });

        modelBuilder.Entity<VLecomCuentaPre>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_CUENTA_PRE", "dbo");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Cuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.FechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENCIMIENTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("MONEDA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");
        });

        modelBuilder.Entity<VLecomEmpresaUnidad>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_EMPRESA_UNIDAD", "dbo");

            entity.Property(e => e.CodDeDepartamento).HasColumnName("COD_DE_DEPARTAMENTO");

            entity.Property(e => e.CodDeDistrito).HasColumnName("COD_DE_DISTRITO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionDistrito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DISTRITO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Direccion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");
        });

        modelBuilder.Entity<VLecomFuncionario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_FUNCIONARIO", "dbo");

            entity.Property(e => e.Cargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Ci)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Departamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DEPARTAMENTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.FechaEntrada)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTRADA");

            entity.Property(e => e.FechaSalida)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_SALIDA");

            entity.Property(e => e.NombreFuncionario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FUNCIONARIO");

            entity.Property(e => e.SalarioGs).HasColumnName("SALARIO_GS");

            entity.Property(e => e.SalarioUs).HasColumnName("SALARIO_US");
        });

        modelBuilder.Entity<VLecomGasto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_GASTO", "dbo");

            entity.Property(e => e.CentroCosto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.CodigoCentroCosto).HasColumnName("CODIGO_CENTRO_COSTO");

            entity.Property(e => e.CodigoCuentaContable)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO_CUENTA_CONTABLE");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.ConceptoGasto)
                .IsUnicode(false)
                .HasColumnName("CONCEPTO_GASTO");

            entity.Property(e => e.CuentaContable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA_CONTABLE");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.FechaEmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_EMISION");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TipoFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_FACTURA");

            entity.Property(e => e.TipoMoneda)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("TIPO_MONEDA");

            entity.Property(e => e.Tributacion)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("TRIBUTACION");

            entity.Property(e => e.ValorTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TOTAL_US");

            entity.Property(e => e.VencimientoGasto)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_GASTO");
        });

        modelBuilder.Entity<VLecomPagarPago>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PAGAR_PAGO", "dbo");

            entity.Property(e => e.CuentaCorriente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CUENTA_CORRIENTE");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("MONEDA");

            entity.Property(e => e.ValorPago)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO");
        });

        modelBuilder.Entity<VLecomPedido>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PEDIDO", "dbo");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VLecomPedidoDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PEDIDO_DET", "dbo");

            entity.Property(e => e.Cancelado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANCELADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ClieVenc2Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_2_MAX");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoUnidadSalida).HasColumnName("CODIGO_UNIDAD_SALIDA");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUnidadSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_SALIDA");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DescrpcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRPCION_VENDEDOR");

            entity.Property(e => e.Devuelto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DEVUELTO");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.DistVenc1Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_1_MIN");

            entity.Property(e => e.Entrega)
                .HasColumnType("datetime")
                .HasColumnName("ENTREGA");

            entity.Property(e => e.Facturado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("FACTURADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.Remitido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("REMITIDO");

            entity.Property(e => e.Saldo)
                .HasColumnType("decimal(21, 3)")
                .HasColumnName("SALDO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorAprobacion)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_APROBACION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VLecomPedidoFacturadoListaPrecio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PEDIDO_FACTURADO_LISTA_PRECIO", "dbo");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdFacturaCreconProducto).HasColumnName("ID_FACTURA_CRECON_PRODUCTO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.PrecioMax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MIN");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<VLecomPedidoListaPrecio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PEDIDO_LISTA_PRECIO", "dbo");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.PrecioMax)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MIN");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<VLecomPrecioAutoriza>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PRECIO_AUTORIZA", "dbo");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.EmailVendedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL_VENDEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAut)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUT");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPrecioAutorizar).HasColumnName("ID_PRECIO_AUTORIZAR");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NoAprobado).HasColumnName("NO_APROBADO");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PrecioIngresado).HasColumnName("PRECIO_INGRESADO");

            entity.Property(e => e.PrecioMax).HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin).HasColumnName("PRECIO_MIN");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Vbdir).HasColumnName("VBDIR");

            entity.Property(e => e.VencimientoPedido)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_PEDIDO");
        });

        modelBuilder.Entity<VLecomPrecioAutorizaCte>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PRECIO_AUTORIZA_CTE", "dbo");

            entity.Property(e => e.Autorizador).HasColumnName("AUTORIZADOR");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.EmailVendedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL_VENDEDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAut)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUT");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.IdPrecioAutorizar).HasColumnName("ID_PRECIO_AUTORIZAR");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.NoAprobado).HasColumnName("NO_APROBADO");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PrecioIngresado).HasColumnName("PRECIO_INGRESADO");

            entity.Property(e => e.PrecioMax).HasColumnName("PRECIO_MAX");

            entity.Property(e => e.PrecioMin).HasColumnName("PRECIO_MIN");

            entity.Property(e => e.VencimientoPedido)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_PEDIDO");
        });

        modelBuilder.Entity<VLecomProveedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_PROVEEDOR", "dbo");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");
        });

        modelBuilder.Entity<VLecomVehiculo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LECOM_VEHICULO", "dbo");

            entity.Property(e => e.Chapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.CodigoVehiculo).HasColumnName("CODIGO_VEHICULO");

            entity.Property(e => e.DescripcionVehiculo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VEHICULO");

            entity.Property(e => e.Marca)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.TipoVehiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_VEHICULO");
        });

        modelBuilder.Entity<VLibroCompra>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LIBRO_COMPRA", "dbo");

            entity.Property(e => e.CentroCosto).HasColumnName("CENTRO_COSTO");

            entity.Property(e => e.CodigoCentroCosto).HasColumnName("CODIGO_CENTRO_COSTO");

            entity.Property(e => e.Comercial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COMERCIAL");

            entity.Property(e => e.Complemento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COMPLEMENTO");

            entity.Property(e => e.Contabilidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CONTABILIDAD");

            entity.Property(e => e.Cotacao).HasColumnName("COTACAO");

            entity.Property(e => e.CotacaoData)
                .HasColumnType("datetime")
                .HasColumnName("COTACAO_DATA");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");

            entity.Property(e => e.DataDespacho)
                .HasColumnType("datetime")
                .HasColumnName("DATA_DESPACHO");

            entity.Property(e => e.Descricao)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");

            entity.Property(e => e.Despacho)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.DocumentoTipo).HasColumnName("DOCUMENTO_TIPO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exentas)
                .HasColumnType("decimal(37, 6)")
                .HasColumnName("EXENTAS");

            entity.Property(e => e.Fornecedor).HasColumnName("FORNECEDOR");

            entity.Property(e => e.FornecedorOriginal).HasColumnName("FORNECEDOR_ORIGINAL");

            entity.Property(e => e.Gravadas10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("GRAVADAS_10");

            entity.Property(e => e.Gravadas5)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("GRAVADAS_5");

            entity.Property(e => e.Grupo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRUPO");

            entity.Property(e => e.IdMaterial).HasColumnName("ID_MATERIAL");

            entity.Property(e => e.Imponible)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("IMPONIBLE");

            entity.Property(e => e.Impostos10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IMPOSTOS_10");

            entity.Property(e => e.Impostos5)
                .HasColumnType("numeric(38, 2)")
                .HasColumnName("IMPOSTOS_5");

            entity.Property(e => e.Lancamento).HasColumnName("LANCAMENTO");

            entity.Property(e => e.Moeda).HasColumnName("MOEDA");

            entity.Property(e => e.Nacionalidad).HasColumnName("NACIONALIDAD");

            entity.Property(e => e.NotaComprAsoc)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA_COMPR_ASOC");

            entity.Property(e => e.Operacao).HasColumnName("OPERACAO");

            entity.Property(e => e.Ordem).HasColumnName("ORDEM");

            entity.Property(e => e.Producto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO");

            entity.Property(e => e.Registro)
                .HasColumnType("datetime")
                .HasColumnName("REGISTRO");

            entity.Property(e => e.RegistroControl).HasColumnName("REGISTRO_CONTROL");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoComprAsoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_COMPR_ASOC");

            entity.Property(e => e.TipoImpresion).HasColumnName("TIPO_IMPRESION");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacao).HasColumnName("TRIBUTACAO");

            entity.Property(e => e.Unidade).HasColumnName("UNIDADE");

            entity.Property(e => e.Usuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("USUARIO");

            entity.Property(e => e.ValorAduanero)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_ADUANERO");

            entity.Property(e => e.ValorFactura)
                .HasColumnType("numeric(37, 4)")
                .HasColumnName("VALOR_FACTURA");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VLibroVentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LIBRO_VENTA", "dbo");

            entity.Property(e => e.AnticipoProducto)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("ANTICIPO_PRODUCTO");

            entity.Property(e => e.Cliente).HasColumnName("CLIENTE");

            entity.Property(e => e.Complemento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("COMPLEMENTO");

            entity.Property(e => e.CotacaoData)
                .HasColumnType("datetime")
                .HasColumnName("COTACAO_DATA");

            entity.Property(e => e.CotacaoDataDocumento)
                .HasColumnType("datetime")
                .HasColumnName("COTACAO_DATA_DOCUMENTO");

            entity.Property(e => e.CotacaoDocumento).HasColumnName("COTACAO_DOCUMENTO");

            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("DATA");

            entity.Property(e => e.Descricao)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRICAO");

            entity.Property(e => e.DespachoCotacao)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DESPACHO_COTACAO");

            entity.Property(e => e.Documento).HasColumnName("DOCUMENTO");

            entity.Property(e => e.DocumentoTipo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_TIPO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fatura).HasColumnName("FATURA");

            entity.Property(e => e.Lancamento)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("LANCAMENTO");

            entity.Property(e => e.Moeda).HasColumnName("MOEDA");

            entity.Property(e => e.NotaComprAsoc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NOTA_COMPR_ASOC");

            entity.Property(e => e.Ordem).HasColumnName("ORDEM");

            entity.Property(e => e.Pais).HasColumnName("PAIS");

            entity.Property(e => e.Produto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PRODUTO");

            entity.Property(e => e.Quantidade)
                .HasColumnType("decimal(20, 4)")
                .HasColumnName("QUANTIDADE");

            entity.Property(e => e.Registro).HasColumnName("REGISTRO");

            entity.Property(e => e.Registro1).HasColumnName("REGISTRO1");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA");

            entity.Property(e => e.Serie)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoComprAsoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_COMPR_ASOC");

            entity.Property(e => e.Tipo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO")
                .IsFixedLength();

            entity.Property(e => e.TipoImpresion).HasColumnName("TIPO_IMPRESION");

            entity.Property(e => e.Tributacao).HasColumnName("TRIBUTACAO");

            entity.Property(e => e.Unidade).HasColumnName("UNIDADE");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(26, 9)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioGuarani)
                .HasColumnType("decimal(19, 3)")
                .HasColumnName("UNITARIO_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VListadoComercialPrevisionVsPedido>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LISTADO_COMERCIAL_PREVISION_VS_PEDIDO", "dbo");

            entity.Property(e => e.Anho).HasColumnName("anho");

            entity.Property(e => e.CantEntregado).HasColumnName("cant_entregado");

            entity.Property(e => e.CantPedido).HasColumnName("cant_pedido");

            entity.Property(e => e.CantPendiente).HasColumnName("cant_pendiente");

            entity.Property(e => e.CantPrevision).HasColumnName("cant_prevision");

            entity.Property(e => e.CodProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("cod_producto");

            entity.Property(e => e.CodVendedor).HasColumnName("cod_vendedor");

            entity.Property(e => e.Costo).HasColumnName("costo");

            entity.Property(e => e.DescCultivo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("desc_cultivo");

            entity.Property(e => e.DescEnvase)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("desc_envase");

            entity.Property(e => e.DescPrincipio)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Desc_Principio");

            entity.Property(e => e.DescProducto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("desc_producto");

            entity.Property(e => e.DescVendedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("desc_vendedor");

            entity.Property(e => e.DescZafra)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("desc_zafra");

            entity.Property(e => e.DifPrevPedido).HasColumnName("dif_Prev_Pedido");

            entity.Property(e => e.Empresa).HasColumnName("empresa");

            entity.Property(e => e.MargenBruto).HasColumnName("margen_bruto");

            entity.Property(e => e.MargenNeto).HasColumnName("margen_neto");

            entity.Property(e => e.Mes).HasColumnName("mes");

            entity.Property(e => e.PrecioLista).HasColumnName("precio_lista");

            entity.Property(e => e.TipoProducto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo_producto");

            entity.Property(e => e.TotalCosto).HasColumnName("total_costo");

            entity.Property(e => e.TotalEntregado).HasColumnName("total_entregado");

            entity.Property(e => e.TotalPedido).HasColumnName("total_pedido");

            entity.Property(e => e.TotalPendiente).HasColumnName("total_pendiente");

            entity.Property(e => e.TotalPrevision).HasColumnName("total_prevision");
        });

        modelBuilder.Entity<VListadoEpi>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LISTADO_EPIS", "dbo");

            entity.Property(e => e.ActivoFijo)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("ACTIVO FIJO");

            entity.Property(e => e.BellaVista)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("BELLA VISTA");

            entity.Property(e => e.Campo9)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("CAMPO 9");

            entity.Property(e => e.Central)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("CENTRAL");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.EstanciaItakyry)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("ESTANCIA ITAKYRY");

            entity.Property(e => e.Financiero)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("FINANCIERO");

            entity.Property(e => e.Granos)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("GRANOS");

            entity.Property(e => e.Itakyry2)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("ITAKYRY 2");

            entity.Property(e => e.Katuete)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("KATUETE");

            entity.Property(e => e.Liberacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("LIBERACION");

            entity.Property(e => e.MingaPoraTroncal3)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("MINGA PORA (TRONCAL 3)");

            entity.Property(e => e.Naranjito)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("NARANJITO");

            entity.Property(e => e.NuevaEsperanza)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("NUEVA ESPERANZA");

            entity.Property(e => e.PuertoEncarnacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("PUERTO ENCARNACION");

            entity.Property(e => e.SanAlberto)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SAN ALBERTO");

            entity.Property(e => e.SanCristobal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SAN CRISTOBAL");

            entity.Property(e => e.SantaRita)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SANTA RITA");

            entity.Property(e => e.SiloKm19MingaGuazu)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO KM.19-MINGA GUAZU");

            entity.Property(e => e.SiloLaFortuna)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO LA FORTUNA");

            entity.Property(e => e.SiloLapacho)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO LAPACHO");

            entity.Property(e => e.SiloLiberacion)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO LIBERACION");

            entity.Property(e => e.SiloMarangatu)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO MARANGATU");

            entity.Property(e => e.SiloMorenaI)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO MORENA I");

            entity.Property(e => e.SiloNaranjal)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO NARANJAL");

            entity.Property(e => e.SiloNuevaDurango)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO NUEVA DURANGO");

            entity.Property(e => e.SiloNuevaEsperanzaTroncal4)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO NUEVA ESPERANZA (TRONCAL 4)");

            entity.Property(e => e.SiloPuenteKyjha)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO PUENTE KYJHA");

            entity.Property(e => e.SiloPykyry)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO PYKYRY");

            entity.Property(e => e.SiloSanAlberto)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO SAN ALBERTO");

            entity.Property(e => e.SiloSantaFe)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO SANTA FE");

            entity.Property(e => e.SiloSantaMaria)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO SANTA MARIA");

            entity.Property(e => e.SiloSantaRosa)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO SANTA ROSA");

            entity.Property(e => e.SiloTite)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO TITE");

            entity.Property(e => e.SiloYbypora)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("SILO YBYPORA");

            entity.Property(e => e.StandLaPaloma)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("STAND LA PALOMA");
        });

        modelBuilder.Entity<VListadoFichaStockPorLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LISTADO_FICHA_STOCK_POR_LOTE", "dbo");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Entrada)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");

            entity.Property(e => e.LoteVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("LOTE_VENCIMIENTO");

            entity.Property(e => e.NumeroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_LOTE");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.Salida)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("SALIDA");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.Stock)
                .HasColumnType("decimal(38, 8)")
                .HasColumnName("STOCK");
        });

        modelBuilder.Entity<VListadoOrdenCompraBi>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LISTADO_ORDEN_COMPRA_BI", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CotizacionDespacho)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("COTIZACION_DESPACHO");

            entity.Property(e => e.CotizacionDolarGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION_DOLAR_GUARANI");

            entity.Property(e => e.CotizacionDolarReal)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION_DOLAR_REAL");

            entity.Property(e => e.CotizacionRealGuarani)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION_REAL_GUARANI");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionEmbarque)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMBARQUE");

            entity.Property(e => e.DescripcionEntrada)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENTRADA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DespachoCrt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_CRT");

            entity.Property(e => e.DespachoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_NUMERO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Facturado).HasColumnName("FACTURADO");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedidoCompra).HasColumnName("LANZAMIENTO_PEDIDO_COMPRA");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.Pendiente).HasColumnName("PENDIENTE");

            entity.Property(e => e.Recibido).HasColumnName("RECIBIDO");

            entity.Property(e => e.TipoCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMPRA");

            entity.Property(e => e.TransportadoraDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TRANSPORTADORA_DESCRIPCION");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(38, 25)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorFlete)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("VALOR_FLETE");

            entity.Property(e => e.ValorRestante).HasColumnName("VALOR_RESTANTE");

            entity.Property(e => e.ValorTotal)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("VALOR_TOTAL");

            entity.Property(e => e.VencimientoPagar)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_PAGAR");
        });

        modelBuilder.Entity<VLocalEntregaCrm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LOCAL_ENTREGA_CRM", "dbo");

            entity.Property(e => e.ClientePrincipal)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_PRINCIPAL");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Comportamiento).HasColumnName("COMPORTAMIENTO");

            entity.Property(e => e.HectareasArrendadas)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_ARRENDADAS");

            entity.Property(e => e.HectareasPotenciales)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_POTENCIALES");

            entity.Property(e => e.HectareasPropias)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HECTAREAS_PROPIAS");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.NombreCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CLIENTE");

            entity.Property(e => e.NombreGerente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_GERENTE");

            entity.Property(e => e.NombreVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_VENDEDOR");

            entity.Property(e => e.Perfil).HasColumnName("PERFIL");
        });

        modelBuilder.Entity<VLogMovCuentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LOG_MOV_CUENTA", "dbo");

            entity.Property(e => e.Accion).HasColumnName("ACCION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("date")
                .HasColumnName("FECHA");

            entity.Property(e => e.Hora).HasColumnName("HORA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.Lanzamiento)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LANZAMIENTO");
        });

        modelBuilder.Entity<VLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_LOTE", "dbo");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_PRODUCTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Serie).HasColumnName("SERIE");

            entity.Property(e => e.Tipo)
                .HasMaxLength(1)
                .HasColumnName("TIPO")
                .IsFixedLength();
        });

        modelBuilder.Entity<VMail>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_MAIL", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VMaterialesEspeciale>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_MATERIALES_ESPECIALES", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFabrilMaterialEspecial).HasColumnName("ID_FABRIL_MATERIAL_ESPECIAL");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Peso).HasColumnName("PESO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VMovimientoBascula>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_MOVIMIENTO_BASCULA", "dbo");

            entity.Property(e => e.Ardido)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("ARDIDO");

            entity.Property(e => e.Averiado)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("AVERIADO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntradaSalida)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("ENTRADA_SALIDA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.PesoLiquido)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("PESO_LIQUIDO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.Phe)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("PHE");

            entity.Property(e => e.Promedio)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("PROMEDIO");

            entity.Property(e => e.Quebrado)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("QUEBRADO");

            entity.Property(e => e.Tabla)
                .HasMaxLength(27)
                .IsUnicode(false)
                .HasColumnName("TABLA");

            entity.Property(e => e.Tipo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("TIPO");

            entity.Property(e => e.TipoDeposito).HasColumnName("TIPO_DEPOSITO");

            entity.Property(e => e.Umidade)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("UMIDADE");

            entity.Property(e => e.Verdoso)
                .HasColumnType("decimal(38, 3)")
                .HasColumnName("VERDOSO");
        });

        modelBuilder.Entity<VNotaCredito>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_CREDITO", "dbo");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CiudadCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionNotaCredito)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_NOTA_CREDITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravadas10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("GRAVADAS10");

            entity.Property(e => e.Gravadas5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("GRAVADAS5");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.IdNotaCreditoProducto).HasColumnName("ID_NOTA_CREDITO_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTimbradoFactura).HasColumnName("ID_TIMBRADO_FACTURA");

            entity.Property(e => e.ImpresionObs).HasColumnName("IMPRESION_OBS");

            entity.Property(e => e.Iva10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA10");

            entity.Property(e => e.Iva5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA5");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaFactura)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_FACTURA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroRegistro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_REGISTRO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.TelefonoCliente)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_CLIENTE");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoOperacion).HasColumnName("TIPO_OPERACION");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(38, 12)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida).HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA5");
        });

        modelBuilder.Entity<VNotaDebito>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_DEBITO", "dbo");

            entity.Property(e => e.BarrioFavorecido)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_FAVORECIDO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CiudadFavorecido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_FAVORECIDO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoFavorecido).HasColumnName("CODIGO_FAVORECIDO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Compra).HasColumnName("COMPRA");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionFavorecido)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FAVORECIDO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DireccionFavorecido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_FAVORECIDO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Factura)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Gravadas10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("GRAVADAS10");

            entity.Property(e => e.Gravadas5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("GRAVADAS5");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaDebito).HasColumnName("ID_NOTA_DEBITO");

            entity.Property(e => e.IdNotaDebitoProducto).HasColumnName("ID_NOTA_DEBITO_PRODUCTO");

            entity.Property(e => e.Iva10)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA10");

            entity.Property(e => e.Iva5)
                .HasColumnType("numeric(38, 11)")
                .HasColumnName("IVA5");

            entity.Property(e => e.LanzamientoFactura).HasColumnName("LANZAMIENTO_FACTURA");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Naturaleza).HasColumnName("NATURALEZA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucFavorecido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_FAVORECIDO");

            entity.Property(e => e.TelefonoFavorecido)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO_FAVORECIDO");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorExenta)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_EXENTA");

            entity.Property(e => e.ValorIva10)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA10");

            entity.Property(e => e.ValorIva5)
                .HasColumnType("decimal(37, 12)")
                .HasColumnName("VALOR_IVA5");
        });

        modelBuilder.Entity<VNotaDevolucion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_DEVOLUCION", "dbo");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.ClienteDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DESCRIPCION");

            entity.Property(e => e.CodigoChofer).HasColumnName("CODIGO_CHOFER");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdNotaDevolucion).HasColumnName("ID_NOTA_DEVOLUCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NumeroDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NUMERO_DOCUMENTO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOCUMENTO");
        });

        modelBuilder.Entity<VNotaEnvio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_ENVIO", "dbo");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.BarrioDepositoDestino)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPOSITO_DESTINO");

            entity.Property(e => e.BarrioDepositoOrigen)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPOSITO_ORIGEN");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DEPOSITO_DESTINO");

            entity.Property(e => e.CiudadDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DEPOSITO_ORIGEN");

            entity.Property(e => e.CodigoDepositoDestino).HasColumnName("CODIGO_DEPOSITO_DESTINO");

            entity.Property(e => e.CodigoDepositoOrigen).HasColumnName("CODIGO_DEPOSITO_ORIGEN");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DepositoDestino).HasColumnName("DEPOSITO_DESTINO");

            entity.Property(e => e.DepositoOrigen).HasColumnName("DEPOSITO_ORIGEN");

            entity.Property(e => e.DescripcionDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_DESTINO");

            entity.Property(e => e.DescripcionDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_ORIGEN");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(69)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionMotorista)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MOTORISTA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DireccionDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPOSITO_DESTINO");

            entity.Property(e => e.DireccionDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPOSITO_ORIGEN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EmpresaRegistroSenave)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("EMPRESA_REGISTRO_SENAVE");

            entity.Property(e => e.EstadoDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DEPOSITO_DESTINO");

            entity.Property(e => e.EstadoDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DEPOSITO_ORIGEN");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.IdNotaEnvioProducto).HasColumnName("ID_NOTA_ENVIO_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");

            entity.Property(e => e.MotivoDescr)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_DESCR");

            entity.Property(e => e.MunicipioDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_DEPOSITO_DESTINO");

            entity.Property(e => e.MunicipioDepositoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_DEPOSITO_ORIGEN");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroRegistroProducto)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_REGISTRO_PRODUCTO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFaltante)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FALTANTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucDepositoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_DEPOSITO_DESTINO");

            entity.Property(e => e.RucTransportadora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_TRANSPORTADORA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");
        });

        modelBuilder.Entity<VNotaEnvioProvision>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_ENVIO_PROVISION", "dbo");

            entity.Property(e => e.Ajuste).HasColumnName("AJUSTE");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.CodigoChofer).HasColumnName("CODIGO_CHOFER");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DestinoDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESTINO_DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDocumentoOrigen)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DOCUMENTO_ORIGEN");

            entity.Property(e => e.IdNotaEnvio).HasColumnName("ID_NOTA_ENVIO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PesoCantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_CANTIDAD");

            entity.Property(e => e.PesoEnviado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_ENVIADO");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.PrecioFleteAjuste)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("PRECIO_FLETE_AJUSTE");

            entity.Property(e => e.PrecioFleteDs)
                .HasColumnType("numeric(36, 14)")
                .HasColumnName("PRECIO_FLETE_DS");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.Responsable)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");

            entity.Property(e => e.TablaOrigen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TABLA_ORIGEN");
        });

        modelBuilder.Entity<VNotaRemision>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_REMISION", "dbo");

            entity.Property(e => e.ArdidoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARDIDO_INFORMADO");

            entity.Property(e => e.AveriadoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVERIADO_INFORMADO");

            entity.Property(e => e.BarrioConsignatario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CONSIGNATARIO");

            entity.Property(e => e.BarrioDeposito)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPOSITO");

            entity.Property(e => e.BarrioLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_LOCAL_ENTREGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ChapaCarreta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_CARRETA");

            entity.Property(e => e.ChapaVehiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_VEHICULO");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadConsignatario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CONSIGNATARIO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.DescripcionCarreta)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARRETA");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionCiudadDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD_DEPOSITO");

            entity.Property(e => e.DescripcionCiudadLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD_LOCAL_ENTREGA");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionConsignatario)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CONSIGNATARIO");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionEstadoDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ESTADO_DEPOSITO");

            entity.Property(e => e.DescripcionMunicipioDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO_DEPOSITO");

            entity.Property(e => e.DescripcionPaisDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionVehiculo)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VEHICULO");

            entity.Property(e => e.DescripcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VENDEDOR");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DireccionConsignatario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CONSIGNATARIO");

            entity.Property(e => e.DireccionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPOSITO");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_DESCRIPCION");

            entity.Property(e => e.EstadoLocalEntreda)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESTADO_LOCAL_ENTREDA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaTermino)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_TERMINO");

            entity.Property(e => e.HumedadInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD_INFORMADA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLocalEntrega).HasColumnName("ID_CLIENTE_LOCAL_ENTREGA");

            entity.Property(e => e.IdConsignatario).HasColumnName("ID_CONSIGNATARIO");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdNotaRemisionProducto).HasColumnName("ID_NOTA_REMISION_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpurezaInformada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPUREZA_INFORMADA");

            entity.Property(e => e.InicioTimbrado)
                .HasColumnType("datetime")
                .HasColumnName("INICIO_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MotivoDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_DESCRIPCION");

            entity.Property(e => e.MotivoDescripcionTm)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_DESCRIPCION_TM");

            entity.Property(e => e.MunicipioDescripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_DESCRIPCION");

            entity.Property(e => e.MunicipioLocalEntrega)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MUNICIPIO_LOCAL_ENTREGA");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.NroPedido).HasColumnName("NRO_PEDIDO");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PesoBascula)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PESO_BASCULA");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.PheInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PHE_INFORMADO");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFaltante)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FALTANTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.QuebradoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUEBRADO_INFORMADO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucConsignatario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CONSIGNATARIO");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucTransportadora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_TRANSPORTADORA");

            entity.Property(e => e.TicketBascula)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TICKET_BASCULA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioPedido)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO_PEDIDO");

            entity.Property(e => e.VencimientoTimbrado)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_TIMBRADO");

            entity.Property(e => e.VerdosoInformado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VERDOSO_INFORMADO");
        });

        modelBuilder.Entity<VNotaRemisionExp>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_REMISION_EXP", "dbo");

            entity.Property(e => e.BarrioChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CHOFER");

            entity.Property(e => e.BarrioCliente)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_CLIENTE");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Certificado).HasColumnName("CERTIFICADO");

            entity.Property(e => e.Chapa1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA_1");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_CLIENTE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Crt)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CRT");

            entity.Property(e => e.Declarador).HasColumnName("DECLARADOR");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.Despacho)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESPACHO");

            entity.Property(e => e.DireccionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CHOFER");

            entity.Property(e => e.DireccionCliente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_CLIENTE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Fitosanitario).HasColumnName("FITOSANITARIO");

            entity.Property(e => e.Gopi).HasColumnName("GOPI");

            entity.Property(e => e.HabilitacionChofer)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("HABILITACION_CHOFER");

            entity.Property(e => e.IdNotaRemisionExp).HasColumnName("ID_NOTA_REMISION_EXP");

            entity.Property(e => e.IdNotaRemisionExpProducto).HasColumnName("ID_NOTA_REMISION_EXP_PRODUCTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NotaExportacion)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_EXPORTACION");

            entity.Property(e => e.PaisCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS_CLIENTE");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RucCliente)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC_CLIENTE");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TimbradoFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_FIN");

            entity.Property(e => e.TimbradoFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("TIMBRADO_FECHA_INICIO");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");
        });

        modelBuilder.Entity<VNotaRemisionProvision>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_REMISION_PROVISION", "dbo");

            entity.Property(e => e.Ajuste).HasColumnName("AJUSTE");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chapa2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA_2");

            entity.Property(e => e.CodigoChofer).HasColumnName("CODIGO_CHOFER");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DestinoDocumento)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESTINO_DOCUMENTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDocumentoOrigen)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DOCUMENTO_ORIGEN");

            entity.Property(e => e.IdNotaRemision).HasColumnName("ID_NOTA_REMISION");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PesoCantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_CANTIDAD");

            entity.Property(e => e.PesoEnviado)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_ENVIADO");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.PrecioFleteAjuste)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("PRECIO_FLETE_AJUSTE");

            entity.Property(e => e.PrecioFleteDs)
                .HasColumnType("numeric(36, 14)")
                .HasColumnName("PRECIO_FLETE_DS");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.Responsable)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");

            entity.Property(e => e.TablaOrigen)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("TABLA_ORIGEN");
        });

        modelBuilder.Entity<VNotaRemisionVentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_NOTA_REMISION_VENTA", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ClienteDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("CLIENTE_DESCRIPCION");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdNotaRemisionProducto).HasColumnName("ID_NOTA_REMISION_PRODUCTO");

            entity.Property(e => e.IdNotaRemisionVenta).HasColumnName("ID_NOTA_REMISION_VENTA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroNotaRemision)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NRO_NOTA_REMISION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<VOrdenCompra>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ORDEN_COMPRA", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadPedido)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD_PEDIDO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoIva).HasColumnName("COSTO_IVA");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(37, 15)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalContable).HasColumnName("TOTAL_CONTABLE");

            entity.Property(e => e.TotalIva).HasColumnName("TOTAL_IVA");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.UnitarioPedido)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("UNITARIO_PEDIDO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VOrdenCompraDetalle>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ORDEN_COMPRA_DETALLE", "dbo");

            entity.Property(e => e.BloqueoPago).HasColumnName("BLOQUEO_PAGO");

            entity.Property(e => e.Calculo).HasColumnName("CALCULO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoEmbarque).HasColumnName("CODIGO_EMBARQUE");

            entity.Property(e => e.CodigoEmpresaCentroCosto).HasColumnName("CODIGO_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.CodigoEntrada).HasColumnName("CODIGO_ENTRADA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CostoAjuste).HasColumnName("COSTO_AJUSTE");

            entity.Property(e => e.CostoCompra).HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoFinanciero).HasColumnName("COSTO_FINANCIERO");

            entity.Property(e => e.CostoGerencial).HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani).HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoIva).HasColumnName("COSTO_IVA");

            entity.Property(e => e.CostoOperacional).HasColumnName("COSTO_OPERACIONAL");

            entity.Property(e => e.Cotizacion).HasColumnName("COTIZACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionEmbarque)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMBARQUE");

            entity.Property(e => e.DescripcionEmpresaCentroCosto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.DescripcionEntrada)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENTRADA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DespachoCrt).HasColumnName("DESPACHO_CRT");

            entity.Property(e => e.DespachoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_NUMERO");

            entity.Property(e => e.Devolucion)
                .HasColumnType("decimal(38, 4)")
                .HasColumnName("DEVOLUCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.Facturado).HasColumnName("FACTURADO");

            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ENTREGA");

            entity.Property(e => e.FechaFactura)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FACTURA");

            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");

            entity.Property(e => e.Gravada)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("GRAVADA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.IdCompraLocalProducto).HasColumnName("ID_COMPRA_LOCAL_PRODUCTO");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdEmpresaCentroCosto).HasColumnName("ID_EMPRESA_CENTRO_COSTO");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdProveedorTimbrado).HasColumnName("ID_PROVEEDOR_TIMBRADO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Iva)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("IVA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NroFactura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NRO_FACTURA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.PorcAjuste).HasColumnName("PORC_AJUSTE");

            entity.Property(e => e.PorcFinanciero).HasColumnName("PORC_FINANCIERO");

            entity.Property(e => e.PorcIva).HasColumnName("PORC_IVA");

            entity.Property(e => e.PorcOperacional).HasColumnName("PORC_OPERACIONAL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TipoCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMPRA");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(38, 15)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalContable).HasColumnName("TOTAL_CONTABLE");

            entity.Property(e => e.TotalIva).HasColumnName("TOTAL_IVA");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.TributacionProducto).HasColumnName("TRIBUTACION_PRODUCTO");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(19, 7)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");

            entity.Property(e => e.VencimientoPagar)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_PAGAR");
        });

        modelBuilder.Entity<VPagarPago>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PAGAR_PAGO", "dbo");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.CiProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_PROVEEDOR");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionMoneda)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MONEDA");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.FacturaRemesa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_REMESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdPagarPago).HasColumnName("ID_PAGAR_PAGO");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.IdPagarPagoRetencion).HasColumnName("ID_PAGAR_PAGO_RETENCION");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaGuarani10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IVA_GUARANI_10");

            entity.Property(e => e.IvaGuarani5)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IVA_GUARANI_5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.Porcentaje)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegStatusFactura).HasColumnName("REG_STATUS_FACTURA");

            entity.Property(e => e.RegStatusRetencion).HasColumnName("REG_STATUS_RETENCION");

            entity.Property(e => e.RetencionIraGs)
                .HasColumnType("decimal(37, 4)")
                .HasColumnName("RETENCION_IRA_GS");

            entity.Property(e => e.RetencionIraUs)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENCION_IRA_US");

            entity.Property(e => e.RetencionTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL_US");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.TelProveedor)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TEL_PROVEEDOR");

            entity.Property(e => e.TimbradoRetencion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_RETENCION");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValidezTimbradoRetencion)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO_RETENCION");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorCheque)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CHEQUE");

            entity.Property(e => e.ValorExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("VALOR_EXTENSO");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorGuarani10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_GUARANI_10");

            entity.Property(e => e.ValorGuarani5)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_GUARANI_5");

            entity.Property(e => e.ValorPago)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("VALOR_PAGO");

            entity.Property(e => e.ValorPagoExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("VALOR_PAGO_EXTENSO");

            entity.Property(e => e.ValorPagoFactura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO_FACTURA");

            entity.Property(e => e.ValorPagoGuaraniFactura)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO_GUARANI_FACTURA");

            entity.Property(e => e.ValorRetenido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_RETENIDO");
        });

        modelBuilder.Entity<VPagarPagoFactura>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PAGAR_PAGO_FACTURA", "dbo");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.FacturaRemesa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_REMESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdPagarPago).HasColumnName("ID__PAGAR_PAGO");

            entity.Property(e => e.IdPagarPagoFactura)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID__PAGAR_PAGO_FACTURA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO");

            entity.Property(e => e.ValorDescuentoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO_GUARANI");

            entity.Property(e => e.ValorInteres)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES");

            entity.Property(e => e.ValorInteresGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES_GUARANI");

            entity.Property(e => e.ValorOriginal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL");

            entity.Property(e => e.ValorOriginalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL_GUARANI");

            entity.Property(e => e.ValorPagado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO");

            entity.Property(e => e.ValorPagadoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_GUARANI");

            entity.Property(e => e.ValorPago)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO");

            entity.Property(e => e.ValorPagoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGO_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPagarPagoRentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PAGAR_PAGO_RENTA", "dbo");

            entity.Property(e => e.CiProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_PROVEEDOR");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPagarPago).HasColumnName("ID_PAGAR_PAGO");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.IdPagarPagoRetencionIra).HasColumnName("ID_PAGAR_PAGO_RETENCION_IRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RetencionIraGs)
                .HasColumnType("decimal(37, 4)")
                .HasColumnName("RETENCION_IRA_GS");

            entity.Property(e => e.RetencionIraUs)
                .HasColumnType("decimal(18, 9)")
                .HasColumnName("RETENCION_IRA_US");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");
        });

        modelBuilder.Entity<VPagarRetencionTm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PAGAR_RETENCION_TM", "dbo");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Exenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("EXENTA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.FacturaRemesa)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_REMESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdPagarPago).HasColumnName("ID_PAGAR_PAGO");

            entity.Property(e => e.IdPagarPagoFactura).HasColumnName("ID_PAGAR_PAGO_FACTURA");

            entity.Property(e => e.IdPagarPagoRetencion).HasColumnName("ID_PAGAR_PAGO_RETENCION");

            entity.Property(e => e.IdPagarPagoRetencionDet).HasColumnName("ID_PAGAR_PAGO_RETENCION_DET");

            entity.Property(e => e.ImporteIrp)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IRP");

            entity.Property(e => e.ImporteIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_IVA");

            entity.Property(e => e.ImporteRenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMPORTE_RENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PorcentajeIrp)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE_IRP");

            entity.Property(e => e.PorcentajeIva)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE_IVA");

            entity.Property(e => e.PorcentajeRenta)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE_RENTA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.TelProveedor)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TEL_PROVEEDOR");

            entity.Property(e => e.TimbradoRetencion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO_RETENCION");

            entity.Property(e => e.TotalIva)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_IVA");

            entity.Property(e => e.TotalRetencion)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("TOTAL_RETENCION");

            entity.Property(e => e.TotalRetencionExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("TOTAL_RETENCION_EXTENSO");

            entity.Property(e => e.TotalTransaccion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL_TRANSACCION");

            entity.Property(e => e.TotalTransaccionSinIva)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("TOTAL_TRANSACCION_SIN_IVA");

            entity.Property(e => e.ValidezTimbradoRetencion)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO_RETENCION");
        });

        modelBuilder.Entity<VPedido>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_LOCAL_ENTREGA");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoUnidadSalida).HasColumnName("CODIGO_UNIDAD_SALIDA");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUnidadSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_SALIDA");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DescrpcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRPCION_VENDEDOR");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdLista).HasColumnName("ID_LISTA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");

            entity.Property(e => e.IdUnidadVendedor).HasColumnName("ID_UNIDAD_VENDEDOR");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroContrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTRATO");

            entity.Property(e => e.NroLista).HasColumnName("NRO_LISTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Reserva).HasColumnName("RESERVA");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPedidoCancelacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO_CANCELACION", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoCancelacion).HasColumnName("ID_PEDIDO_CANCELACION");

            entity.Property(e => e.IdPedidoCancelacionProducto).HasColumnName("ID_PEDIDO_CANCELACION_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedido).HasColumnName("LANZAMIENTO_PEDIDO");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(37, 7)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<VPedidoCompra>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO_COMPRA", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.IdPedidoCompraProducto).HasColumnName("ID_PEDIDO_COMPRA_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PedidoProveedor).HasColumnName("PEDIDO_PROVEEDOR");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(37, 11)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPedidoCompraCan>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO_COMPRA_CAN", "dbo");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPedidoCompra).HasColumnName("ID_PEDIDO_COMPRA");

            entity.Property(e => e.IdPedidoCompraCan).HasColumnName("ID_PEDIDO_COMPRA_CAN");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoPedidoCompra).HasColumnName("LANZAMIENTO_PEDIDO_COMPRA");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Simbolo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("SIMBOLO");

            entity.Property(e => e.Total).HasColumnName("TOTAL");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 7)")
                .HasColumnName("UNITARIO");
        });

        modelBuilder.Entity<VPedidoDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO_DET", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_LOCAL_ENTREGA");

            entity.Property(e => e.BloqueoCliente).HasColumnName("BLOQUEO_CLIENTE");

            entity.Property(e => e.BonificacionServicio)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("BONIFICACION_SERVICIO");

            entity.Property(e => e.Cancelado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANCELADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ClieVenc2Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_2_MAX");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoIngrediente).HasColumnName("CODIGO_INGREDIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoUnidadSalida).HasColumnName("CODIGO_UNIDAD_SALIDA");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionServicio)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SERVICIO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUnidadSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_SALIDA");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DescrpcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRPCION_VENDEDOR");

            entity.Property(e => e.Devuelto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DEVUELTO");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.DistVenc1Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_1_MIN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrega)
                .HasColumnType("datetime")
                .HasColumnName("ENTREGA");

            entity.Property(e => e.Facturado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("FACTURADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdGerente).HasColumnName("ID_GERENTE");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdLista).HasColumnName("ID_LISTA");

            entity.Property(e => e.IdListaPrecio).HasColumnName("ID_LISTA_PRECIO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoProducto).HasColumnName("ID_PEDIDO_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");

            entity.Property(e => e.IdUnidadVendedor).HasColumnName("ID_UNIDAD_VENDEDOR");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdVendedorLe).HasColumnName("ID_VENDEDOR_LE");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Ingrediente)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("INGREDIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.ListaServicio).HasColumnName("LISTA_SERVICIO");

            entity.Property(e => e.NroContrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTRATO");

            entity.Property(e => e.NroLista).HasColumnName("NRO_LISTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionPedidoProducto)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_PEDIDO_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remitido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("REMITIDO");

            entity.Property(e => e.Reserva).HasColumnName("RESERVA");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorAprobacion)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_APROBACION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPedidoDetHist>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO_DET_HIST", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_LOCAL_ENTREGA");

            entity.Property(e => e.BloqueoCliente).HasColumnName("BLOQUEO_CLIENTE");

            entity.Property(e => e.Cancelado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANCELADO");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.ClieVenc2Max)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CLIE_VENC_2_MAX");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoIngrediente).HasColumnName("CODIGO_INGREDIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoUnidadSalida).HasColumnName("CODIGO_UNIDAD_SALIDA");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoVersion).HasColumnName("CODIGO_VERSION");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUnidadSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_SALIDA");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DescrpcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRPCION_VENDEDOR");

            entity.Property(e => e.Devuelto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DEVUELTO");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.DistVenc1Min)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DIST_VENC_1_MIN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrega)
                .HasColumnType("datetime")
                .HasColumnName("ENTREGA");

            entity.Property(e => e.Facturado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("FACTURADO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_APROBACION");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdGerente).HasColumnName("ID_GERENTE");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdLista).HasColumnName("ID_LISTA");

            entity.Property(e => e.IdListaPrecio).HasColumnName("ID_LISTA_PRECIO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdPedidoProducto).HasColumnName("ID_PEDIDO_PRODUCTO");

            entity.Property(e => e.IdPedidoVersion).HasColumnName("ID_PEDIDO_VERSION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");

            entity.Property(e => e.IdUnidadVendedor).HasColumnName("ID_UNIDAD_VENDEDOR");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdVendedorLe).HasColumnName("ID_VENDEDOR_LE");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Ingrediente)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("INGREDIENTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroContrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTRATO");

            entity.Property(e => e.NroLista).HasColumnName("NRO_LISTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.ObservacionPedidoProducto)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION_PEDIDO_PRODUCTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Remitido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("REMITIDO");

            entity.Property(e => e.Reserva).HasColumnName("RESERVA");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Unitario)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("UNITARIO");

            entity.Property(e => e.ValorAprobacion)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_APROBACION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPedidoTm>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PEDIDO_TM", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BarrioLocalEntrega)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_LOCAL_ENTREGA");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCultivo).HasColumnName("CODIGO_CULTIVO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoUnidadSalida).HasColumnName("CODIGO_UNIDAD_SALIDA");

            entity.Property(e => e.CodigoVendedor).HasColumnName("CODIGO_VENDEDOR");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.Cor1Fecha)
                .HasColumnType("datetime")
                .HasColumnName("COR1_FECHA");

            entity.Property(e => e.Cor1Tasa)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COR1_TASA");

            entity.Property(e => e.DescripcionCarpeta)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARPETA");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCultivo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CULTIVO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUnidadSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD_SALIDA");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.DescrpcionVendedor)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRPCION_VENDEDOR");

            entity.Property(e => e.DireccionLocalEntrega)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_LOCAL_ENTREGA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Firmado).HasColumnName("FIRMADO");

            entity.Property(e => e.IdAprobador).HasColumnName("ID_APROBADOR");

            entity.Property(e => e.IdCarpeta).HasColumnName("ID_CARPETA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdClienteLe).HasColumnName("ID_CLIENTE_LE");

            entity.Property(e => e.IdContratoVenta).HasColumnName("ID_CONTRATO_VENTA");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdLista).HasColumnName("ID_LISTA");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUnidadSalida).HasColumnName("ID_UNIDAD_SALIDA");

            entity.Property(e => e.IdUnidadVendedor).HasColumnName("ID_UNIDAD_VENDEDOR");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroContrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_CONTRATO");

            entity.Property(e => e.NroLista).HasColumnName("NRO_LISTA");

            entity.Property(e => e.Observacion).HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Reserva).HasColumnName("RESERVA");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Total)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TOTAL");

            entity.Property(e => e.TotalKilos).HasColumnName("TOTAL_KILOS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPlanCuentaSet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PLAN_CUENTA_SET", "dbo");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoCuentaSet).HasColumnName("CODIGO_CUENTA_SET");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoPreSet).HasColumnName("CODIGO_PRE_SET");

            entity.Property(e => e.CodigoSubgrupo).HasColumnName("CODIGO_SUBGRUPO");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionCuentaSet)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_SET");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionPreSet)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRE_SET");

            entity.Property(e => e.DescripcionSubgrupo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SUBGRUPO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdPlanCuentaSet).HasColumnName("ID_PLAN_CUENTA_SET");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");
        });

        modelBuilder.Entity<VPlanCuentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PLAN_CUENTA", "dbo");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoCuentaSet).HasColumnName("CODIGO_CUENTA_SET");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoPlanCuenta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PLAN_CUENTA");

            entity.Property(e => e.CodigoPreSet).HasColumnName("CODIGO_PRE_SET");

            entity.Property(e => e.CodigoSubgrupo).HasColumnName("CODIGO_SUBGRUPO");

            entity.Property(e => e.Credito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("CREDITO");

            entity.Property(e => e.Debito)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("DEBITO");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionCuentaSet)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_SET");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionPlanCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PLAN_CUENTA");

            entity.Property(e => e.DescripcionPreSet)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRE_SET");

            entity.Property(e => e.DescripcionSubgrupo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SUBGRUPO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdPlanCuenta).HasColumnName("ID_PLAN_CUENTA");

            entity.Property(e => e.IdPlanCuentaClase).HasColumnName("ID_PLAN_CUENTA_CLASE");

            entity.Property(e => e.IdPlanCuentaGrupo).HasColumnName("ID_PLAN_CUENTA_GRUPO");

            entity.Property(e => e.IdPlanCuentaPreSet).HasColumnName("ID_PLAN_CUENTA_PRE_SET");

            entity.Property(e => e.IdPlanCuentaSet).HasColumnName("ID_PLAN_CUENTA_SET");

            entity.Property(e => e.IdPlanCuentaSubgrupo).HasColumnName("ID_PLAN_CUENTA_SUBGRUPO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");
        });

        modelBuilder.Entity<VPrestamoBancario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRESTAMO_BANCARIO", "dbo");

            entity.Property(e => e.CodigoCtaCte).HasColumnName("CODIGO_CTA_CTE");

            entity.Property(e => e.CodigoPlanCuenta)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PLAN_CUENTA");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCtaCte)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CTA_CTE");

            entity.Property(e => e.DescripcionPlanCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PLAN_CUENTA");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DocumentoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DOCUMENTO_NUMERO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(140)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdPrestamoBancario).HasColumnName("ID_PRESTAMO_BANCARIO");

            entity.Property(e => e.IdPrestamoBancarioDet).HasColumnName("ID_PRESTAMO_BANCARIO_DET");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("STATUS");

            entity.Property(e => e.TotalValorDolarDes)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_VALOR_DOLAR_DES");

            entity.Property(e => e.TotalValorDolarDeu)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_VALOR_DOLAR_DEU");

            entity.Property(e => e.TotalValorGuaraniesDes)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_VALOR_GUARANIES_DES");

            entity.Property(e => e.TotalValorGuaraniesDeu)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_VALOR_GUARANIES_DEU");

            entity.Property(e => e.ValorCuenta)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CUENTA");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VProduccionAbiertum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCCION_ABIERTA", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProduccion).HasColumnName("ID_PRODUCCION");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Serie).HasColumnName("SERIE");
        });

        modelBuilder.Entity<VProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCTO", "dbo");

            entity.Property(e => e.CodDeUnidadMedida).HasColumnName("COD_DE_UNIDAD_MEDIDA");

            entity.Property(e => e.CodProductoGrupo).HasColumnName("COD_PRODUCTO_GRUPO");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoEt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CODIGO_ET");

            entity.Property(e => e.CodigoGrupoClase)
                .HasMaxLength(32)
                .IsUnicode(false)
                .HasColumnName("CODIGO_GRUPO_CLASE");

            entity.Property(e => e.CodigoIngrediente).HasColumnName("CODIGO_INGREDIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProductoIngrediente)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO_INGREDIENTE");

            entity.Property(e => e.CodigoUnidadMedida).HasColumnName("CODIGO_UNIDAD_MEDIDA");

            entity.Property(e => e.ComisionPorcentaje).HasColumnName("COMISION_PORCENTAJE");

            entity.Property(e => e.ComisionTarifa)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("COMISION_TARIFA");

            entity.Property(e => e.ConversionTonelada)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CONVERSION_TONELADA");

            entity.Property(e => e.DesDeUnidadMedida)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DES_DE_UNIDAD_MEDIDA");

            entity.Property(e => e.DescGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESC_GRUPO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(188)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionMarca)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MARCA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DireccionProveedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.IdEspecificacionTecnica).HasColumnName("ID_ESPECIFICACION_TECNICA");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdMarcaProducto).HasColumnName("ID_MARCA_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.Ingrediente)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("INGREDIENTE");

            entity.Property(e => e.NroRegistro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_REGISTRO");

            entity.Property(e => e.Peso).HasColumnName("PESO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.StockNegativo).HasColumnName("STOCK_NEGATIVO");

            entity.Property(e => e.TablaDescuento).HasColumnName("TABLA_DESCUENTO");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");

            entity.Property(e => e.Volumen).HasColumnName("VOLUMEN");
        });

        modelBuilder.Entity<VProductoClase>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCTO_CLASE", "dbo");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoClasePadre).HasColumnName("CODIGO_CLASE_PADRE");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoGrupoPadre).HasColumnName("CODIGO_GRUPO_PADRE");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionClasePadre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE_PADRE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionGrupoPadre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO_PADRE");

            entity.Property(e => e.EmpresaClase).HasColumnName("EMPRESA_CLASE");

            entity.Property(e => e.FechaClase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CLASE");

            entity.Property(e => e.FechaClasePadre)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CLASE_PADRE");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.IdProductoClasePadre).HasColumnName("ID_PRODUCTO_CLASE_PADRE");

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");

            entity.Property(e => e.IdProductoGrupoGrupo).HasColumnName("ID_PRODUCTO_GRUPO_GRUPO");

            entity.Property(e => e.IdProductoGrupoPadre).HasColumnName("ID_PRODUCTO_GRUPO_PADRE");

            entity.Property(e => e.RegDataClase)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA_CLASE");

            entity.Property(e => e.RegStatusClase).HasColumnName("REG_STATUS_CLASE");

            entity.Property(e => e.RegStatusClasePadre).HasColumnName("REG_STATUS_CLASE_PADRE");

            entity.Property(e => e.RegUnidadClase).HasColumnName("REG_UNIDAD_CLASE");

            entity.Property(e => e.RegUnidadClasePadre).HasColumnName("REG_UNIDAD_CLASE_PADRE");

            entity.Property(e => e.ValidoClase)
                .HasMaxLength(1)
                .HasColumnName("VALIDO_CLASE")
                .IsFixedLength();

            entity.Property(e => e.ValidoClasePadre)
                .HasMaxLength(1)
                .HasColumnName("VALIDO_CLASE_PADRE")
                .IsFixedLength();
        });

        modelBuilder.Entity<VProductoFormula>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCTO_FORMULA", "dbo");

            entity.Property(e => e.Aporte)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("APORTE");

            entity.Property(e => e.BalanceoCarga).HasColumnName("BALANCEO_CARGA");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoEt)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CODIGO_ET");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.ConcAporte).HasColumnName("CONC_APORTE");

            entity.Property(e => e.ConcDtEstandar)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CONC_DT_ESTANDAR");

            entity.Property(e => e.ConcDtFormulado)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CONC_DT_FORMULADO");

            entity.Property(e => e.ControlProceso)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CONTROL_PROCESO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estandar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ESTANDAR");

            entity.Property(e => e.IdEspecificacionTecnica).HasColumnName("ID_ESPECIFICACION_TECNICA");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.IdProductoFormulaComp).HasColumnName("ID_PRODUCTO_FORMULA_COMP");

            entity.Property(e => e.Item).HasColumnName("ITEM");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<VProductoFormula02>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCTO_FORMULA_02", "dbo");

            entity.Property(e => e.Codigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estandar).HasColumnName("estandar");

            entity.Property(e => e.FechaCarga)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CARGA");

            entity.Property(e => e.IdProduccionEtapa).HasColumnName("ID_PRODUCCION_ETAPA");

            entity.Property(e => e.IdProductoFormula).HasColumnName("ID_PRODUCTO_FORMULA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Valido).HasColumnName("VALIDO");
        });

        modelBuilder.Entity<VProductoGral>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCTO_GRAL", "dbo");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoClasePadre).HasColumnName("CODIGO_CLASE_PADRE");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoGrupo).HasColumnName("CODIGO_GRUPO");

            entity.Property(e => e.CodigoGrupoPadre).HasColumnName("CODIGO_GRUPO_PADRE");

            entity.Property(e => e.CodigoIngrediente).HasColumnName("CODIGO_INGREDIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidadMedida).HasColumnName("CODIGO_UNIDAD_MEDIDA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(182)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionClasePadre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE_PADRE");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionGrupo)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO");

            entity.Property(e => e.DescripcionGrupoPadre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GRUPO_PADRE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EmpresaClase).HasColumnName("EMPRESA_CLASE");

            entity.Property(e => e.FechaClase)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CLASE");

            entity.Property(e => e.FechaClasePadre)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_CLASE_PADRE");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.IdProductoClasePadre).HasColumnName("ID_PRODUCTO_CLASE_PADRE");

            entity.Property(e => e.IdProductoGrupo).HasColumnName("ID_PRODUCTO_GRUPO");

            entity.Property(e => e.IdProductoGrupoGrupo).HasColumnName("ID_PRODUCTO_GRUPO_GRUPO");

            entity.Property(e => e.IdProductoGrupoPadre).HasColumnName("ID_PRODUCTO_GRUPO_PADRE");

            entity.Property(e => e.Ingrediente)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("INGREDIENTE");

            entity.Property(e => e.NroRegistro)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_REGISTRO");

            entity.Property(e => e.Peso).HasColumnName("PESO");

            entity.Property(e => e.RegDataClase)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA_CLASE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegStatusClase).HasColumnName("REG_STATUS_CLASE");

            entity.Property(e => e.RegStatusClasePadre).HasColumnName("REG_STATUS_CLASE_PADRE");

            entity.Property(e => e.RegUnidadClase).HasColumnName("REG_UNIDAD_CLASE");

            entity.Property(e => e.RegUnidadClasePadre).HasColumnName("REG_UNIDAD_CLASE_PADRE");

            entity.Property(e => e.StockNegativo).HasColumnName("STOCK_NEGATIVO");

            entity.Property(e => e.TablaDescuento).HasColumnName("TABLA_DESCUENTO");

            entity.Property(e => e.Terrex).HasColumnName("TERREX");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.UnidadMedida)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDIDA");

            entity.Property(e => e.ValidoClase)
                .HasMaxLength(1)
                .HasColumnName("VALIDO_CLASE")
                .IsFixedLength();

            entity.Property(e => e.ValidoClasePadre)
                .HasMaxLength(1)
                .HasColumnName("VALIDO_CLASE_PADRE")
                .IsFixedLength();
        });

        modelBuilder.Entity<VProductoIngrediente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PRODUCTO_INGREDIENTE", "dbo");

            entity.Property(e => e.CodigoEnvase).HasColumnName("CODIGO_ENVASE");

            entity.Property(e => e.CodigoIngrediente).HasColumnName("CODIGO_INGREDIENTE");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdEnvase).HasColumnName("ID_ENVASE");

            entity.Property(e => e.IdIngrediente).HasColumnName("ID_INGREDIENTE");

            entity.Property(e => e.IdIngredienteProducto).HasColumnName("ID_INGREDIENTE_PRODUCTO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProductoClase).HasColumnName("ID_PRODUCTO_CLASE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoIngrediente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("TIPO_INGREDIENTE")
                .IsFixedLength();

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");
        });

        modelBuilder.Entity<VProveedorClase>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PROVEEDOR_CLASE", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Celular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CodSet).HasColumnName("COD_SET");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoCiudad).HasColumnName("CODIGO_CIUDAD");

            entity.Property(e => e.CodigoClase).HasColumnName("CODIGO_CLASE");

            entity.Property(e => e.CodigoPais).HasColumnName("CODIGO_PAIS");

            entity.Property(e => e.CodigoPostal)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CODIGO_POSTAL");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionClase)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLASE");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.EMail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("E_MAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fantasia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FANTASIA");

            entity.Property(e => e.Fax)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FAX");

            entity.Property(e => e.Financiero)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("FINANCIERO");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdClase).HasColumnName("ID_CLASE");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.RetencionIragro).HasColumnName("RETENCION_IRAGRO");

            entity.Property(e => e.RetencionIva).HasColumnName("RETENCION_IVA");

            entity.Property(e => e.RetencionRenta).HasColumnName("RETENCION_RENTA");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.RucHechauka)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_HECHAUKA");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.Tipo).HasColumnName("TIPO");

            entity.Property(e => e.TipoGasto).HasColumnName("TIPO_GASTO");

            entity.Property(e => e.TipoNacionalidad).HasColumnName("TIPO_NACIONALIDAD");

            entity.Property(e => e.Vendedor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VENDEDOR");

            entity.Property(e => e.Verificado).HasColumnName("VERIFICADO");
        });

        modelBuilder.Entity<VProvisionFlete>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PROVISION_FLETE", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHOFER");

            entity.Property(e => e.Ciudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.Crt)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CRT");

            entity.Property(e => e.DescrDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCR_DOCUMENTO");

            entity.Property(e => e.DescrTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCR_TRANSPORTADORA");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DespachoCrt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_CRT");

            entity.Property(e => e.DespachoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DESPACHO_NUMERO");

            entity.Property(e => e.Destinatario)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESTINATARIO");

            entity.Property(e => e.Diferencia)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("DIFERENCIA");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.DocFecha)
                .HasColumnType("datetime")
                .HasColumnName("DOC_FECHA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDocDetalle)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DOC_DETALLE");

            entity.Property(e => e.IdProvisionFlete).HasColumnName("ID_PROVISION_FLETE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.PesoEnviado)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_ENVIADO");

            entity.Property(e => e.PesoRecibido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_RECIBIDO");

            entity.Property(e => e.PrecioAjuste)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_AJUSTE");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.PrecioFleteAjuste)
                .HasColumnType("numeric(20, 3)")
                .HasColumnName("PRECIO_FLETE_AJUSTE");

            entity.Property(e => e.PrecioFleteU)
                .HasColumnType("numeric(38, 16)")
                .HasColumnName("PRECIO_FLETE_U$");

            entity.Property(e => e.Remitente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("REMITENTE");

            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOCUMENTO");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Tolerancia)
                .HasColumnType("numeric(30, 9)")
                .HasColumnName("TOLERANCIA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorDescontadoGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCONTADO_GS");

            entity.Property(e => e.ValorDescontadoUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCONTADO_US");

            entity.Property(e => e.ValorDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DOLAR");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VPuerto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_PUERTO", "dbo");

            entity.Property(e => e.CodCiudad).HasColumnName("COD_CIUDAD");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoMunicipio).HasColumnName("CODIGO_MUNICIPIO");

            entity.Property(e => e.DescCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_CIUDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionMunicipio)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_MUNICIPIO");

            entity.Property(e => e.DescripcionPais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PAIS");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdCiudad).HasColumnName("ID_CIUDAD");

            entity.Property(e => e.IdPuerto).HasColumnName("ID_PUERTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VRecepEnvio>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RECEP_ENVIO", "dbo");

            entity.Property(e => e.BarrioDepoOrigen)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_DEPO_ORIGEN");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.CiChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI_CHOFER");

            entity.Property(e => e.CiudadDepoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD_DEPO_ORIGEN");

            entity.Property(e => e.CodigoDepoDestino).HasColumnName("CODIGO_DEPO_DESTINO");

            entity.Property(e => e.CodigoDepoOrigen).HasColumnName("CODIGO_DEPO_ORIGEN");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionDepoDestino)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPO_DESTINO");

            entity.Property(e => e.DescripcionDepoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPO_ORIGEN");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.DireccionDepoOrigen)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_DEPO_ORIGEN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdRecepEnvio).HasColumnName("ID_RECEP_ENVIO");

            entity.Property(e => e.IdRecepEnvioProducto).HasColumnName("ID_RECEP_ENVIO_PRODUCTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.PesoBruto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_BRUTO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.PesoTara)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PESO_TARA");

            entity.Property(e => e.RucChofer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_CHOFER");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");
        });

        modelBuilder.Entity<VRecepcionSolicitudProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RECEPCION_SOLICITUD_PRODUCTO", "dbo");

            entity.Property(e => e.CantidadRecepcion).HasColumnName("CANTIDAD_RECEPCION");

            entity.Property(e => e.CodigoEmpresa).HasColumnName("CODIGO_EMPRESA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionResponsable)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_RESPONSABLE");

            entity.Property(e => e.LanzamientoSolicitud).HasColumnName("LANZAMIENTO_SOLICITUD");

            entity.Property(e => e.RecepcionFecha)
                .HasColumnType("datetime")
                .HasColumnName("RECEPCION_FECHA");
        });

        modelBuilder.Entity<VRecibirCobro>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RECIBIR_COBRO", "dbo");

            entity.Property(e => e.ChequeBanco)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_BANCO");

            entity.Property(e => e.ChequePredatado)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_PREDATADO");

            entity.Property(e => e.ChequeTitular)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_TITULAR");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescCuentaCorriente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESC_CUENTA_CORRIENTE");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaExtenso)
                .HasMaxLength(134)
                .HasColumnName("FECHA_EXTENSO");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdRecibirCobro).HasColumnName("ID_RECIBIR_COBRO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.NumeroCheque)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CHEQUE");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegStatusFat).HasColumnName("REG_STATUS_FAT");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorCobro)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COBRO");

            entity.Property(e => e.ValorCobroExtenso)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("VALOR_COBRO_EXTENSO");

            entity.Property(e => e.ValorCobroFat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_COBRO_FAT");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorCorregidoFat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO_FAT");

            entity.Property(e => e.ValorOriginalFat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL_FAT");

            entity.Property(e => e.ValorRecibidoFat)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_RECIBIDO_FAT");

            entity.Property(e => e.Valordescuento)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("VALORDESCUENTO");

            entity.Property(e => e.Valorintereses)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("VALORINTERESES");
        });

        modelBuilder.Entity<VRegClaseClaseusoDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_REG_CLASE_CLASEUSO_DET", "dbo");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.IdRegClaseMarca).HasColumnName("ID_REG_CLASE_MARCA");

            entity.Property(e => e.IdRegClaseUso).HasColumnName("ID_REG_CLASE_USO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VRegMarca>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_REG_MARCA", "dbo");

            entity.Property(e => e.Clase)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CLASE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdRegMarca).HasColumnName("ID_REG_MARCA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<VRemisionCompra>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_REMISION_COMPRA", "dbo");

            entity.Property(e => e.BarrioProveedor)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO_PROVEEDOR");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.Chapa)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CodigoChofer).HasColumnName("CODIGO_CHOFER");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CodigoTransportadora).HasColumnName("CODIGO_TRANSPORTADORA");

            entity.Property(e => e.CostoContable).HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DescripcionChofer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CHOFER");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionTransportadora)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TRANSPORTADORA");

            entity.Property(e => e.DireccionProveedor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Factura)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCompraExterior).HasColumnName("ID_COMPRA_EXTERIOR");

            entity.Property(e => e.IdCompraLocal).HasColumnName("ID_COMPRA_LOCAL");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdFabrilLiquidoLavado).HasColumnName("ID_FABRIL_LIQUIDO_LAVADO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdRemisionCompra).HasColumnName("ID_REMISION_COMPRA");

            entity.Property(e => e.IdRemisionCompraProducto).HasColumnName("ID_REMISION_COMPRA_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoCompraExterior).HasColumnName("LANZAMIENTO_COMPRA_EXTERIOR");

            entity.Property(e => e.LanzamientoCompraLocal).HasColumnName("LANZAMIENTO_COMPRA_LOCAL");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Operacion).HasColumnName("OPERACION");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Remision)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("REMISION");

            entity.Property(e => e.Responsable)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RESPONSABLE");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Tributacion).HasColumnName("TRIBUTACION");

            entity.Property(e => e.Vehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("VEHICULO");
        });

        modelBuilder.Entity<VRemisionUnificadum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_REMISION_UNIFICADA", "dbo");

            entity.Property(e => e.Completa).HasColumnName("COMPLETA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("EXPEDIDOR");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.IdChofer).HasColumnName("ID_CHOFER");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdDestino).HasColumnName("ID_DESTINO");

            entity.Property(e => e.IdPedido).HasColumnName("ID_PEDIDO");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpCompSalida).HasColumnName("IMP_COMP_SALIDA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Motivo).HasColumnName("MOTIVO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoImpresion)
                .HasMaxLength(1)
                .HasColumnName("TIPO_IMPRESION")
                .IsFixedLength();

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");
        });

        modelBuilder.Entity<VRendicion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RENDICION", "dbo");

            entity.Property(e => e.CantidadRf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD_RF");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.CodigoVehiculo).HasColumnName("CODIGO_VEHICULO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO");

            entity.Property(e => e.CostoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_TOTAL");

            entity.Property(e => e.DescripcionFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO");

            entity.Property(e => e.DescripcionVehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VEHICULO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FacturaRf)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_RF");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaRf)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RF");

            entity.Property(e => e.IdRendicion).HasColumnName("ID_RENDICION");

            entity.Property(e => e.IdRendicionFactura).HasColumnName("ID_RENDICION_FACTURA");

            entity.Property(e => e.KmRf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("KM_RF");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MediaComb)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MEDIA_COMB");

            entity.Property(e => e.MontoRf)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_RF");

            entity.Property(e => e.MontoTotal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO_TOTAL");

            entity.Property(e => e.PetroflotaRf).HasColumnName("PETROFLOTA_RF");

            entity.Property(e => e.Recorrido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RECORRIDO");

            entity.Property(e => e.SumaMonto)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("SUMA_MONTO");

            entity.Property(e => e.TipoRf).HasColumnName("TIPO_RF");
        });

        modelBuilder.Entity<VRendicionGasto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RENDICION_GASTOS", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CantidadTotal)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("CANTIDAD_TOTAL");

            entity.Property(e => e.CodigoCentroCosto).HasColumnName("CODIGO_CENTRO_COSTO");

            entity.Property(e => e.CodigoDepartamento).HasColumnName("CODIGO_DEPARTAMENTO");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.Costo)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("COSTO");

            entity.Property(e => e.DecripcionTipoGasto)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_TIPO_GASTO");

            entity.Property(e => e.DescripcionCentroCosto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CENTRO_COSTO");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO");

            entity.Property(e => e.DescripcionPetroflota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PETROFLOTA");

            entity.Property(e => e.DescripcionVehiculo)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_VEHICULO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Km)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("KM");

            entity.Property(e => e.LanzamientoRendicion).HasColumnName("LANZAMIENTO_RENDICION");

            entity.Property(e => e.Media)
                .HasColumnType("decimal(38, 19)")
                .HasColumnName("MEDIA");

            entity.Property(e => e.Media2)
                .HasColumnType("decimal(38, 20)")
                .HasColumnName("MEDIA2");

            entity.Property(e => e.Monto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("MONTO");
        });

        modelBuilder.Entity<VRequisicion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_REQUISICION", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoZafra).HasColumnName("CODIGO_ZAFRA");

            entity.Property(e => e.CostoDolar)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_DOLAR");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdRequisicion).HasColumnName("ID_REQUISICION");

            entity.Property(e => e.IdRequisicionProducto).HasColumnName("ID_REQUISICION_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");
        });

        modelBuilder.Entity<VRetencionUnificadum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RETENCION_UNIFICADA", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Id).HasColumnName("ID");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Nota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA");
        });

        modelBuilder.Entity<VRodado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RODADOS", "dbo");

            entity.Property(e => e.Ano).HasColumnName("ANO");

            entity.Property(e => e.Aseguradora)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ASEGURADORA");

            entity.Property(e => e.Chapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chasis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHASIS");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COLOR");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionTipoVehiculo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_TIPO_VEHICULO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Escribania)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESCRIBANIA");

            entity.Property(e => e.FechaVenta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENTA");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.Motor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MOTOR");

            entity.Property(e => e.Poliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("POLIZA");

            entity.Property(e => e.Tarjeta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TARJETA");

            entity.Property(e => e.TipoVehiculo).HasColumnName("TIPO_VEHICULO");

            entity.Property(e => e.ValorAsegurado).HasColumnName("VALOR_ASEGURADO");

            entity.Property(e => e.ValorMercado).HasColumnName("VALOR_MERCADO");

            entity.Property(e => e.ValorSeguro).HasColumnName("VALOR_SEGURO");

            entity.Property(e => e.VencHabilitacion)
                .HasColumnType("datetime")
                .HasColumnName("VENC_HABILITACION");

            entity.Property(e => e.VencRegistro)
                .HasColumnType("datetime")
                .HasColumnName("VENC_REGISTRO");

            entity.Property(e => e.VencSeguro)
                .HasColumnType("datetime")
                .HasColumnName("VENC_SEGURO");
        });

        modelBuilder.Entity<VRomaneosLiquidado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_ROMANEOS_LIQUIDADOS", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Romaneo).HasColumnName("ROMANEO");
        });

        modelBuilder.Entity<VRrhhFuncionario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RRHH_FUNCIONARIOS", "dbo");

            entity.Property(e => e.Ayuda)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AYUDA");

            entity.Property(e => e.Barrio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.BonificacionFamiliar)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("BONIFICACION_FAMILIAR");

            entity.Property(e => e.Categoria)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA");

            entity.Property(e => e.Celular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Ciudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");

            entity.Property(e => e.CodigoCentroCosto).HasColumnName("CODIGO_CENTRO_COSTO");

            entity.Property(e => e.CodigoCliente).HasColumnName("CODIGO_CLIENTE");

            entity.Property(e => e.CodigoCuentaCorriente).HasColumnName("CODIGO_CUENTA_CORRIENTE");

            entity.Property(e => e.CodigoDepartamento).HasColumnName("CODIGO_DEPARTAMENTO");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.CodigoSubUnidad).HasColumnName("CODIGO_SUB_UNIDAD");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Contrato).HasColumnName("CONTRATO");

            entity.Property(e => e.DecripcionSubUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_SUB_UNIDAD");

            entity.Property(e => e.DescripcionCargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CARGO");

            entity.Property(e => e.DescripcionCentroCosto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CENTRO_COSTO");

            entity.Property(e => e.DescripcionCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CLIENTE");

            entity.Property(e => e.DescripcionCuentaCorriente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_CORRIENTE");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Edad).HasColumnName("EDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EstadoCivil)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("ESTADO_CIVIL");

            entity.Property(e => e.Estudio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTUDIO");

            entity.Property(e => e.FechaAdmision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION");

            entity.Property(e => e.FechaAdmision1)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION1");

            entity.Property(e => e.FechaAdmision2)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_ADMISION2");

            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO");

            entity.Property(e => e.FechaRescision)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION");

            entity.Property(e => e.FechaRescision1)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION1");

            entity.Property(e => e.FechaRescision2)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESCISION2");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Inmigrante)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("INMIGRANTE");

            entity.Property(e => e.Irp)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IRP");

            entity.Property(e => e.Jubilado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("JUBILADO");

            entity.Property(e => e.LugarNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("LUGAR_NACIMIENTO");

            entity.Property(e => e.Mail)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("MAIL");

            entity.Property(e => e.Matricula).HasColumnName("MATRICULA");

            entity.Property(e => e.MotivoRescision)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MOTIVO_RESCISION");

            entity.Property(e => e.Nacionalidad)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.NumeroCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NUMERO_CUENTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.PlanSaludGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLAN_SALUD_GS");

            entity.Property(e => e.PlanSaludPorcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLAN_SALUD_PORCENTAJE");

            entity.Property(e => e.PlanSaludUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PLAN_SALUD_US");

            entity.Property(e => e.Profesion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PROFESION");

            entity.Property(e => e.RetencionGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_GS");

            entity.Property(e => e.RetencionUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_US");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.SalarioGs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_GS");

            entity.Property(e => e.SalarioUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SALARIO_US");

            entity.Property(e => e.Sexo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("SEXO");

            entity.Property(e => e.Telefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");

            entity.Property(e => e.TipoCargo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("TIPO_CARGO");

            entity.Property(e => e.TipoCuenta)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("TIPO_CUENTA");

            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOCUMENTO");

            entity.Property(e => e.TipoPago)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("TIPO_PAGO");

            entity.Property(e => e.TipoPorcentajeIrp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_PORCENTAJE_IRP");

            entity.Property(e => e.TipoSangre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_SANGRE");

            entity.Property(e => e.VencimientoCi)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO_CI");

            entity.Property(e => e.Vigencia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VIGENCIA");
        });

        modelBuilder.Entity<VRrhhFuncionariosFamiliare>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RRHH_FUNCIONARIOS_FAMILIARES", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaNacimientoFamiliar)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_NACIMIENTO_FAMILIAR");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.NacionalidadFuncionario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NACIONALIDAD_FUNCIONARIO");

            entity.Property(e => e.NombreFamiliar)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FAMILIAR");

            entity.Property(e => e.VinculoFamiliar)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("VINCULO_FAMILIAR");
        });

        modelBuilder.Entity<VRrhhHojaPago>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_RRHH_HOJA_PAGO", "dbo");

            entity.Property(e => e.CodigoEvento).HasColumnName("CODIGO_EVENTO");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.DecripcionEvento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_EVENTO");

            entity.Property(e => e.DescripcionFuncionario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.FechaHojaPago)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_HOJA_PAGO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");
        });

        modelBuilder.Entity<VSemillasCliente>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_CLIENTES", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Ci)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Ciudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");

            entity.Property(e => e.Departamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPARTAMENTO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.NombreCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CLIENTE");

            entity.Property(e => e.Pais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<VSemillasDevolucion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_DEVOLUCION", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Ci)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Ciudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");

            entity.Property(e => e.Departamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPARTAMENTO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");

            entity.Property(e => e.NombreCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CLIENTE");

            entity.Property(e => e.NotaFiscal)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_FISCAL");

            entity.Property(e => e.Pais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<VSemillasExpedicion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_EXPEDICION", "dbo");

            entity.Property(e => e.Barrio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BARRIO");

            entity.Property(e => e.Ci)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.Ciudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CIUDAD");

            entity.Property(e => e.Departamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DEPARTAMENTO");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.NombreCliente)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_CLIENTE");

            entity.Property(e => e.NotaFiscal)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("NOTA_FISCAL");

            entity.Property(e => e.Pais)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("PAIS");

            entity.Property(e => e.Ruc)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("RUC");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION");

            entity.Property(e => e.Telefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TELEFONO");
        });

        modelBuilder.Entity<VSemillasLote>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_LOTE", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_LOTE");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");
        });

        modelBuilder.Entity<VSemillasLoteDevolucion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_LOTE_DEVOLUCION", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_LOTE");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdNotaCredito).HasColumnName("ID_NOTA_CREDITO");
        });

        modelBuilder.Entity<VSemillasLoteExpedicion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_LOTE_EXPEDICION", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_LOTE");

            entity.Property(e => e.IdFacturaCrecon).HasColumnName("ID_FACTURA_CRECON");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");
        });

        modelBuilder.Entity<VSemillasProduccionCierre>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_PRODUCCION_CIERRE", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Categoria)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA");

            entity.Property(e => e.CodigoZaranda).HasColumnName("CODIGO_ZARANDA");

            entity.Property(e => e.CultivarIntegracion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CULTIVAR_INTEGRACION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdProduccionCierre).HasColumnName("ID_PRODUCCION_CIERRE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdentificadorIntegracion).HasColumnName("IDENTIFICADOR_INTEGRACION");

            entity.Property(e => e.LocalAlmacenamiento).HasColumnName("LOCAL_ALMACENAMIENTO");

            entity.Property(e => e.Lote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LOTE");

            entity.Property(e => e.ProductoFinalizado)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_FINALIZADO");

            entity.Property(e => e.Rastreabilidad)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RASTREABILIDAD");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION");

            entity.Property(e => e.Ubs).HasColumnName("UBS");

            entity.Property(e => e.Zaranda)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ZARANDA");
        });

        modelBuilder.Entity<VSemillasRomaneo>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_ROMANEO", "dbo");

            entity.Property(e => e.CodigoIntegracion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CODIGO_INTEGRACION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.IdPesaje).HasColumnName("ID_PESAJE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.Impureza)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("IMPUREZA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LocalAlmacenamiento).HasColumnName("LOCAL_ALMACENAMIENTO");

            entity.Property(e => e.PesoLiquido)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_LIQUIDO");

            entity.Property(e => e.PesoNeto)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("PESO_NETO");

            entity.Property(e => e.Romaneo).HasColumnName("ROMANEO");

            entity.Property(e => e.Sincronizacion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("SINCRONIZACION");

            entity.Property(e => e.Ubs).HasColumnName("UBS");
        });

        modelBuilder.Entity<VSemillasTransformacionProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SEMILLAS_TRANSFORMACION_PRODUCTO", "dbo");

            entity.Property(e => e.Cantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("CANTIDAD");

            entity.Property(e => e.Categoria)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CATEGORIA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTransformacion).HasColumnName("ID_TRANSFORMACION");

            entity.Property(e => e.IdentificadorIntegracion).HasColumnName("IDENTIFICADOR_INTEGRACION");

            entity.Property(e => e.LocalAlmacenamiento).HasColumnName("LOCAL_ALMACENAMIENTO");

            entity.Property(e => e.Lote)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("LOTE");

            entity.Property(e => e.ProductoFinalizado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("PRODUCTO_FINALIZADO");

            entity.Property(e => e.Rastreabilidad)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RASTREABILIDAD");

            entity.Property(e => e.Ubs).HasColumnName("UBS");

            entity.Property(e => e.Zaranda)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ZARANDA");
        });

        modelBuilder.Entity<VSolicitudProducto>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SOLICITUD_PRODUCTO", "dbo");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDepartamento).HasColumnName("CODIGO_DEPARTAMENTO");

            entity.Property(e => e.CodigoDeposito).HasColumnName("CODIGO_DEPOSITO");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionResponsable)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_RESPONSABLE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilSolicitud).HasColumnName("ID_FABRIL_SOLICITUD");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegStatusdet).HasColumnName("REG_STATUSDET");
        });

        modelBuilder.Entity<VSolicitudTransf>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_SOLICITUD_TRANSF", "dbo");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDepositoEntrada).HasColumnName("CODIGO_DEPOSITO_ENTRADA");

            entity.Property(e => e.CodigoDepositoSalida).HasColumnName("CODIGO_DEPOSITO_SALIDA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DescripcionDepositoEntrada)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_ENTRADA");

            entity.Property(e => e.DescripcionDepositoSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_SALIDA");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionResponsable)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_RESPONSABLE");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdFabrilSolicitudTransf).HasColumnName("ID_FABRIL_SOLICITUD_TRANSF");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.RegStatusCab).HasColumnName("REG_STATUS_CAB");

            entity.Property(e => e.RegStatusDet).HasColumnName("REG_STATUS_DET");
        });

        modelBuilder.Entity<VStock>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_STOCK", "dbo");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.Comprobante).HasColumnName("COMPROBANTE");

            entity.Property(e => e.Contable).HasColumnName("CONTABLE");

            entity.Property(e => e.CostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_COMPRA");

            entity.Property(e => e.CostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_CONTABLE");

            entity.Property(e => e.CostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_GERENCIAL");

            entity.Property(e => e.CostoGuarani)
                .HasColumnType("decimal(21, 8)")
                .HasColumnName("COSTO_GUARANI");

            entity.Property(e => e.CostoMedioCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MEDIO_COMPRA");

            entity.Property(e => e.CostoMedioContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MEDIO_CONTABLE");

            entity.Property(e => e.CostoMedioGerencial).HasColumnName("COSTO_MEDIO_GERENCIAL");

            entity.Property(e => e.CostoMedioGuarani)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("COSTO_MEDIO_GUARANI");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PRODUCTO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Entrada)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA");

            entity.Property(e => e.Expr1)
                .HasMaxLength(80)
                .IsUnicode(false);

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Fisico).HasColumnName("FISICO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdEstadoOperacion).HasColumnName("ID_ESTADO_OPERACION");

            entity.Property(e => e.IdLote).HasColumnName("ID_LOTE");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdStock).HasColumnName("ID_STOCK");

            entity.Property(e => e.IdStockReserva).HasColumnName("ID_STOCK_RESERVA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.OperacionOrigen).HasColumnName("OPERACION_ORIGEN");

            entity.Property(e => e.RefLanzamiento).HasColumnName("REF_LANZAMIENTO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Salida)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");
        });

        modelBuilder.Entity<VTimbrado>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TIMBRADO", "dbo");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Establecimiento).HasColumnName("ESTABLECIMIENTO");

            entity.Property(e => e.Expedidor).HasColumnName("EXPEDIDOR");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTimbradoExpedidor).HasColumnName("ID_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.RangoFin).HasColumnName("RANGO_FIN");

            entity.Property(e => e.RangoIni).HasColumnName("RANGO_INI");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TipoEmision).HasColumnName("TIPO_EMISION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VTimbradoDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TIMBRADO_DET", "dbo");

            entity.Property(e => e.CodigoSet).HasColumnName("CODIGO_SET");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Expedidor).HasColumnName("EXPEDIDOR");

            entity.Property(e => e.IdDocumento).HasColumnName("ID_DOCUMENTO");

            entity.Property(e => e.IdResponsable).HasColumnName("ID_RESPONSABLE");

            entity.Property(e => e.IdTimbrado).HasColumnName("ID_TIMBRADO");

            entity.Property(e => e.IdTimbradoExpedidor).HasColumnName("ID_TIMBRADO_EXPEDIDOR");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.RangoFin).HasColumnName("RANGO_FIN");

            entity.Property(e => e.RangoIni).HasColumnName("RANGO_INI");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TipoEmision).HasColumnName("TIPO_EMISION");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VTransfCreditoProveedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSF_CREDITO_PROVEEDOR", "dbo");

            entity.Property(e => e.AdelantoFecha)
                .HasColumnType("datetime")
                .HasColumnName("ADELANTO_FECHA");

            entity.Property(e => e.AdelantoLanzamiento).HasColumnName("ADELANTO_LANZAMIENTO");

            entity.Property(e => e.AdelantoSaldoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ADELANTO_SALDO_DOLAR");

            entity.Property(e => e.CodigoDocumento).HasColumnName("CODIGO_DOCUMENTO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.DescripcionDocumento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DOCUMENTO");

            entity.Property(e => e.DescripcionProveedor)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_PROVEEDOR");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.FacturaCompraDet)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA_DET");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaDet)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_DET");

            entity.Property(e => e.Historico)
                .IsUnicode(false)
                .HasColumnName("HISTORICO");

            entity.Property(e => e.IdTransfCreditoProveedor).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdTransfCreditoProveedorDet).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR_DET");

            entity.Property(e => e.IdTransfCreditoProveedorRetencion).HasColumnName("ID_TRANSF_CREDITO_PROVEEDOR_RETENCION");

            entity.Property(e => e.IvaGuarani)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IVA_GUARANI");

            entity.Property(e => e.IvaGuarani10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IVA_GUARANI_10");

            entity.Property(e => e.IvaGuarani5)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("IVA_GUARANI_5");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.LiquidacionTransf).HasColumnName("LIQUIDACION_TRANSF");

            entity.Property(e => e.MonedaAdelanto).HasColumnName("MONEDA_ADELANTO");

            entity.Property(e => e.PedidoDet).HasColumnName("PEDIDO_DET");

            entity.Property(e => e.Porcentaje)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RetencionNota)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RETENCION_NOTA");

            entity.Property(e => e.RetencionTotalUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("RETENCION_TOTAL_US");

            entity.Property(e => e.RucEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_EMPRESA");

            entity.Property(e => e.RucProveedor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC_PROVEEDOR");

            entity.Property(e => e.SerieDet)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE_DET");

            entity.Property(e => e.Timbrado)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TIMBRADO");

            entity.Property(e => e.TotalGuarani)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("TOTAL_GUARANI");

            entity.Property(e => e.ValidezTimbrado)
                .HasMaxLength(41)
                .HasColumnName("VALIDEZ_TIMBRADO");

            entity.Property(e => e.ValorDescuentoDet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO_DET");

            entity.Property(e => e.ValorDescuentoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO_GUARANI");

            entity.Property(e => e.ValorGuarani)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_GUARANI");

            entity.Property(e => e.ValorGuarani10)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_GUARANI_10");

            entity.Property(e => e.ValorGuarani5)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("VALOR_GUARANI_5");

            entity.Property(e => e.ValorInteresDet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES_DET");

            entity.Property(e => e.ValorInteresGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES_GUARANI");

            entity.Property(e => e.ValorLanzaAdelanto)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZA_ADELANTO");

            entity.Property(e => e.ValorPagadoDet)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_DET");

            entity.Property(e => e.ValorPagadoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_GUARANI");
        });

        modelBuilder.Entity<VTransfCreditoProveedorDet>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSF_CREDITO_PROVEEDOR_DET", "dbo");

            entity.Property(e => e.Factura).HasColumnName("FACTURA");

            entity.Property(e => e.FacturaCompra)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("FACTURA_COMPRA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTabla).HasColumnName("ID_TABLA");

            entity.Property(e => e.IdTransfCreditoProveedor).HasColumnName("ID__TRANSF_CREDITO_PROVEEDOR");

            entity.Property(e => e.IdTransfCreditoProveedorDet)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID__TRANSF_CREDITO_PROVEEDOR_DET");

            entity.Property(e => e.Liquidacion).HasColumnName("LIQUIDACION");

            entity.Property(e => e.Orden).HasColumnName("ORDEN");

            entity.Property(e => e.Pedido).HasColumnName("PEDIDO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Serie)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SERIE");

            entity.Property(e => e.ValorCorregido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO");

            entity.Property(e => e.ValorCorregidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CORREGIDO_GUARANI");

            entity.Property(e => e.ValorDescuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO");

            entity.Property(e => e.ValorDescuentoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_DESCUENTO_GUARANI");

            entity.Property(e => e.ValorInteres)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES");

            entity.Property(e => e.ValorInteresGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INTERES_GUARANI");

            entity.Property(e => e.ValorOriginal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL");

            entity.Property(e => e.ValorOriginalGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_ORIGINAL_GUARANI");

            entity.Property(e => e.ValorPagado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO");

            entity.Property(e => e.ValorPagadoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_PAGADO_GUARANI");

            entity.Property(e => e.ValorTransferido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRANSFERIDO");

            entity.Property(e => e.ValorTransferidoGuarani)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_TRANSFERIDO_GUARANI");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("datetime")
                .HasColumnName("VENCIMIENTO");
        });

        modelBuilder.Entity<VTransferenciaCuentum>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSFERENCIA_CUENTA", "dbo");

            entity.Property(e => e.ChequeFecha)
                .HasColumnType("datetime")
                .HasColumnName("CHEQUE_FECHA");

            entity.Property(e => e.ChequeNro)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHEQUE_NRO");

            entity.Property(e => e.CodigoCuentaDestino).HasColumnName("CODIGO_CUENTA_DESTINO");

            entity.Property(e => e.CodigoCuentaOrigen).HasColumnName("CODIGO_CUENTA_ORIGEN");

            entity.Property(e => e.Cotizacion)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION");

            entity.Property(e => e.CotizacionDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COTIZACION_DOLAR");

            entity.Property(e => e.CuentaDestino).HasColumnName("CUENTA_DESTINO");

            entity.Property(e => e.CuentaOrigen).HasColumnName("CUENTA_ORIGEN");

            entity.Property(e => e.DescripcionCuentaDestino)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_DESTINO");

            entity.Property(e => e.DescripcionCuentaOrigen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CUENTA_ORIGEN");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Favorecido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FAVORECIDO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdChequera).HasColumnName("ID_CHEQUERA");

            entity.Property(e => e.IdTransferenciaCuenta).HasColumnName("ID_TRANSFERENCIA_CUENTA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.MonedaDestino).HasColumnName("MONEDA_DESTINO");

            entity.Property(e => e.MonedaOrigen).HasColumnName("MONEDA_ORIGEN");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.ValorAjustado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO");

            entity.Property(e => e.ValorAjustadoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_AJUSTADO_DOLAR");

            entity.Property(e => e.ValorConvertido)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO");

            entity.Property(e => e.ValorConvertidoDolar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_CONVERTIDO_DOLAR");

            entity.Property(e => e.ValorLanzamiento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_LANZAMIENTO");
        });

        modelBuilder.Entity<VTransferenciaSolicitudDeposito>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSFERENCIA_SOLICITUD_DEPOSITO", "dbo");

            entity.Property(e => e.Anho).HasColumnName("ANHO");

            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");

            entity.Property(e => e.CodigoDepositoEntrada).HasColumnName("CODIGO_DEPOSITO_ENTRADA");

            entity.Property(e => e.CodigoDepositoSalida).HasColumnName("CODIGO_DEPOSITO_SALIDA");

            entity.Property(e => e.CodigoEmpresa).HasColumnName("CODIGO_EMPRESA");

            entity.Property(e => e.CodigoProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_PRODUCTO");

            entity.Property(e => e.DecripcionProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DECRIPCION_PRODUCTO");

            entity.Property(e => e.DescripcionDepositoEntrada)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_ENTRADA");

            entity.Property(e => e.DescripcionDepositoSalida)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPOSITO_SALIDA");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionEnvase)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENVASE");

            entity.Property(e => e.DescripcionResponsable)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_RESPONSABLE");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.LanzamientoSolicitud).HasColumnName("LANZAMIENTO_SOLICITUD");

            entity.Property(e => e.NroLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NRO_LOTE");

            entity.Property(e => e.Serie).HasColumnName("SERIE");
        });

        modelBuilder.Entity<VTransformacion>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSFORMACION", "dbo");

            entity.Property(e => e.CodigoEntDeposito).HasColumnName("CODIGO_ENT_DEPOSITO");

            entity.Property(e => e.CodigoEntProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_ENT_PRODUCTO");

            entity.Property(e => e.CodigoSalDeposito).HasColumnName("CODIGO_SAL_DEPOSITO");

            entity.Property(e => e.CodigoSalProducto)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("CODIGO_SAL_PRODUCTO");

            entity.Property(e => e.DescripcionEntDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENT_DEPOSITO");

            entity.Property(e => e.DescripcionEntProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ENT_PRODUCTO");

            entity.Property(e => e.DescripcionSalDeposito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SAL_DEPOSITO");

            entity.Property(e => e.DescripcionSalProducto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_SAL_PRODUCTO");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.DescripcionZafra)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_ZAFRA");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.EntradaCantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_CANTIDAD");

            entity.Property(e => e.EntradaCostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_COMPRA");

            entity.Property(e => e.EntradaCostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_CONTABLE");

            entity.Property(e => e.EntradaCostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("ENTRADA_COSTO_GERENCIAL");

            entity.Property(e => e.EntradaLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ENTRADA_LOTE");

            entity.Property(e => e.EntradaLoteConcNominal).HasColumnName("ENTRADA_LOTE_CONC_NOMINAL");

            entity.Property(e => e.EntradaTotalCompra)
                .HasColumnType("decimal(37, 16)")
                .HasColumnName("ENTRADA_TOTAL_COMPRA");

            entity.Property(e => e.EntradaTotalGerencial)
                .HasColumnType("decimal(37, 16)")
                .HasColumnName("ENTRADA_TOTAL_GERENCIAL");

            entity.Property(e => e.EnvaseEntProducto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ENVASE_ENT_PRODUCTO");

            entity.Property(e => e.EnvaseSalProducto)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ENVASE_SAL_PRODUCTO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdTransformacion).HasColumnName("ID_TRANSFORMACION");

            entity.Property(e => e.IdTransformacionProducto).HasColumnName("ID_TRANSFORMACION_PRODUCTO");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.SalidaCantidad)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_CANTIDAD");

            entity.Property(e => e.SalidaCostoCompra)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_COMPRA");

            entity.Property(e => e.SalidaCostoContable)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_CONTABLE");

            entity.Property(e => e.SalidaCostoGerencial)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("SALIDA_COSTO_GERENCIAL");

            entity.Property(e => e.SalidaLote)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SALIDA_LOTE");

            entity.Property(e => e.SalidaLoteConcNominal).HasColumnName("SALIDA_LOTE_CONC_NOMINAL");

            entity.Property(e => e.SalidaTotalCompra)
                .HasColumnType("decimal(37, 16)")
                .HasColumnName("SALIDA_TOTAL_COMPRA");

            entity.Property(e => e.SalidaTotalGerencial)
                .HasColumnType("decimal(37, 16)")
                .HasColumnName("SALIDA_TOTAL_GERENCIAL");

            entity.Property(e => e.TotalEntrada)
                .HasColumnType("decimal(37, 16)")
                .HasColumnName("TOTAL_ENTRADA");

            entity.Property(e => e.TotalSalida)
                .HasColumnType("decimal(37, 16)")
                .HasColumnName("TOTAL_SALIDA");

            entity.Property(e => e.UnidadMedidEntProducto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDID_ENT_PRODUCTO");

            entity.Property(e => e.UnidadMedidSalProducto)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("UNIDAD_MEDID_SAL_PRODUCTO");
        });

        modelBuilder.Entity<VTransportadora>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSPORTADORA", "dbo");

            entity.Property(e => e.AgenteTransporte)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("AGENTE_TRANSPORTE");

            entity.Property(e => e.Celular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CELULAR");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoProveedor).HasColumnName("CODIGO_PROVEEDOR");

            entity.Property(e => e.Contacto)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CONTACTO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Ruc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("RUC");
        });

        modelBuilder.Entity<VTransporteComex>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_TRANSPORTE_COMEX", "dbo");

            entity.Property(e => e.CodTipoTransporte).HasColumnName("COD_TIPO_TRANSPORTE");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.DescTipoTransporte)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_TIPO_TRANSPORTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(403)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdTipoTransporte).HasColumnName("ID_TIPO_TRANSPORTE");

            entity.Property(e => e.IdTransporteComex).HasColumnName("ID_TRANSPORTE_COMEX");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VUsuario>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_USUARIO", "dbo");

            entity.Property(e => e.Cargo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CARGO");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.ClaveFecha)
                .HasColumnType("datetime")
                .HasColumnName("CLAVE_FECHA");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.CreditoClave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CREDITO_CLAVE");

            entity.Property(e => e.CreditoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_VALOR");

            entity.Property(e => e.DescDepartamento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESC_DEPARTAMENTO");

            entity.Property(e => e.DescUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESC_UNIDAD");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionFuncionario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_FUNCIONARIO");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.TipoFuncionario).HasColumnName("TIPO_FUNCIONARIO");
        });

        modelBuilder.Entity<VUsuarioAcceso>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_USUARIO_ACCESO", "dbo");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.ClaveFecha)
                .HasColumnType("datetime")
                .HasColumnName("CLAVE_FECHA");

            entity.Property(e => e.CodigoFuncionario).HasColumnName("CODIGO_FUNCIONARIO");

            entity.Property(e => e.CreditoClave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CREDITO_CLAVE");

            entity.Property(e => e.CreditoValor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CREDITO_VALOR");

            entity.Property(e => e.DescCargo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("DESC_CARGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");
        });

        modelBuilder.Entity<VUsuarioGrupoSarabium>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_USUARIO_GRUPO_SARABIA", "dbo");

            entity.Property(e => e.Clave)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CLAVE");

            entity.Property(e => e.ClaveWeb)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CLAVE_WEB");

            entity.Property(e => e.DescripcionEmpresa)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_EMPRESA");

            entity.Property(e => e.DescripcionUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_USUARIO");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");
        });

        modelBuilder.Entity<VUtilesOficina>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_UTILES_OFICINA", "dbo");

            entity.Property(e => e.CodigoUnidad).HasColumnName("CODIGO_UNIDAD");

            entity.Property(e => e.CodigoUtiles).HasColumnName("CODIGO_UTILES");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");
        });

        modelBuilder.Entity<VVendedor>(entity =>
        {
            entity.HasNoKey();

            entity.ToView("V_VENDEDOR", "dbo");

            entity.Property(e => e.ActivoCota).HasColumnName("ACTIVO_COTA");

            entity.Property(e => e.Ci)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CI");

            entity.Property(e => e.CodDeCiudad).HasColumnName("COD_DE_CIUDAD");

            entity.Property(e => e.CodDeDepartamento).HasColumnName("COD_DE_DEPARTAMENTO");

            entity.Property(e => e.CodDeDistrito).HasColumnName("COD_DE_DISTRITO");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.CodigoGerente).HasColumnName("CODIGO_GERENTE");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.DescripcionCiudad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_CIUDAD");

            entity.Property(e => e.DescripcionDepartamento)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DEPARTAMENTO");

            entity.Property(e => e.DescripcionDistrito)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_DISTRITO");

            entity.Property(e => e.DescripcionGerente)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_GERENTE");

            entity.Property(e => e.DescripcionUnidad)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION_UNIDAD");

            entity.Property(e => e.Direccion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DIRECCION");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EMAIL");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.IdVendedorAtcGerente).HasColumnName("ID_VENDEDOR_ATC_GERENTE");

            entity.Property(e => e.NombreFuncionario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_FUNCIONARIO");

            entity.Property(e => e.NombreGerente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_GERENTE");

            entity.Property(e => e.RecibeEmail).HasColumnName("RECIBE_EMAIL");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.VendedorActivo).HasColumnName("VENDEDOR_ACTIVO");
        });

        modelBuilder.Entity<ValeSolicitud>(entity =>
        {
            entity.HasKey(e => e.IdValeSolicitud);

            entity.ToTable("VALE_SOLICITUD", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Lanzamiento }, "UK_VALE_SOLICITUD")
                .IsUnique();

            entity.Property(e => e.IdValeSolicitud).HasColumnName("ID_VALE_SOLICITUD");

            entity.Property(e => e.Aprovacion).HasColumnName("APROVACION");

            entity.Property(e => e.Autorizado).HasColumnName("AUTORIZADO");

            entity.Property(e => e.Autorizador)
                .HasColumnName("AUTORIZADOR")
                .HasComment("ID_FUNCIONARIO");

            entity.Property(e => e.Emisor)
                .HasColumnName("EMISOR")
                .HasComment("ID_USUARIO");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.FechaAutorizacion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION");

            entity.Property(e => e.FechaAutorizacionFinanciero)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_AUTORIZACION_FINANCIERO");

            entity.Property(e => e.FechaRecibidoUsuario)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RECIBIDO_USUARIO");

            entity.Property(e => e.FechaRendicion)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RENDICION");

            entity.Property(e => e.IdAutorizadorFinanciero).HasColumnName("ID_AUTORIZADOR_FINANCIERO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUsuarioAutorizador).HasColumnName("ID_USUARIO_AUTORIZADOR");

            entity.Property(e => e.Lanzamiento).HasColumnName("LANZAMIENTO");

            entity.Property(e => e.Moneda).HasColumnName("MONEDA");

            entity.Property(e => e.Motivo)
                .IsUnicode(false)
                .HasColumnName("MOTIVO");

            entity.Property(e => e.Obs)
                .IsUnicode(false)
                .HasColumnName("OBS");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Rendicion).HasColumnName("RENDICION");

            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TOKEN");

            entity.Property(e => e.Valor)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR");

            entity.Property(e => e.ValorUs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_US");

            entity.HasOne(d => d.AutorizadorNavigation)
                .WithMany(p => p.ValeSolicitudAutorizadorNavigations)
                .HasForeignKey(d => d.Autorizador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_FUNCIONARIO1");

            entity.HasOne(d => d.Autorizador1)
                .WithMany(p => p.ValeSolicitudAutorizador1s)
                .HasForeignKey(d => d.Autorizador)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_PROVEEDOR1");

            entity.HasOne(d => d.EmisorNavigation)
                .WithMany(p => p.ValeSolicitudEmisorNavigations)
                .HasForeignKey(d => d.Emisor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_USUARIO");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ValeSolicituds)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.ValeSolicitudIdFuncionarioNavigations)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_FUNCIONARIO");

            entity.HasOne(d => d.IdFuncionario1)
                .WithMany(p => p.ValeSolicitudIdFuncionario1s)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_PROVEEDOR");

            entity.HasOne(d => d.IdUsuarioAutorizadorNavigation)
                .WithMany(p => p.ValeSolicitudIdUsuarioAutorizadorNavigations)
                .HasForeignKey(d => d.IdUsuarioAutorizador)
                .HasConstraintName("FK_VALE_SOLICITUD_USUARIO1");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ValeSolicituds)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VALE_SOLICITUD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<Vehiculo>(entity =>
        {
            entity.HasKey(e => e.IdVehiculoPk);

            entity.ToTable("VEHICULO", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.IdVehiculo }, "UK_VEHICULO")
                .IsUnique();

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.Ano).HasColumnName("ANO");

            entity.Property(e => e.AnoFabricacion).HasColumnName("ANO_FABRICACION");

            entity.Property(e => e.Aseguradora)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ASEGURADORA");

            entity.Property(e => e.Capacidad).HasColumnName("CAPACIDAD");

            entity.Property(e => e.CapacidadArrastre)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("CAPACIDAD_ARRASTRE");

            entity.Property(e => e.CapacidadMaxima)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CAPACIDAD_MAXIMA");

            entity.Property(e => e.CapacidadPrecio)
                .HasColumnType("numeric(18, 8)")
                .HasColumnName("CAPACIDAD_PRECIO");

            entity.Property(e => e.CapacidadTanque)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("CAPACIDAD_TANQUE");

            entity.Property(e => e.Chapa)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CHAPA");

            entity.Property(e => e.Chasis)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CHASIS");

            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("COLOR");

            entity.Property(e => e.Combustible)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("COMBUSTIBLE");

            entity.Property(e => e.Concesionaria)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("CONCESIONARIA");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Escribania)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ESCRIBANIA");

            entity.Property(e => e.FechaCompra)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_COMPRA");

            entity.Property(e => e.FechaResetKm)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESET_KM");

            entity.Property(e => e.FechaVenta)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_VENTA");

            entity.Property(e => e.HabilitaGasto).HasColumnName("HABILITA_GASTO");

            entity.Property(e => e.IdCentroCosto).HasColumnName("ID_CENTRO_COSTO");

            entity.Property(e => e.IdDepartamento).HasColumnName("ID_DEPARTAMENTO");

            entity.Property(e => e.IdTipoVehiculo).HasColumnName("ID_TIPO_VEHICULO");

            entity.Property(e => e.IdTransportadora).HasColumnName("ID_TRANSPORTADORA");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.KmInicial).HasColumnName("KM_INICIAL");

            entity.Property(e => e.Marca)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MARCA");

            entity.Property(e => e.Modelo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MODELO");

            entity.Property(e => e.Motor)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("MOTOR");

            entity.Property(e => e.ObsVenta)
                .IsUnicode(false)
                .HasColumnName("OBS_VENTA");

            entity.Property(e => e.Observacion)
                .IsUnicode(false)
                .HasColumnName("OBSERVACION");

            entity.Property(e => e.Poliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("POLIZA");

            entity.Property(e => e.Propietario)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO");

            entity.Property(e => e.PropietarioDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO_DIRECCION");

            entity.Property(e => e.PropietarioRuc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PROPIETARIO_RUC");

            entity.Property(e => e.Propio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PROPIO")
                .IsFixedLength();

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Tarjeta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TARJETA");

            entity.Property(e => e.Titulo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TITULO");

            entity.Property(e => e.ValorAsegurado).HasColumnName("VALOR_ASEGURADO");

            entity.Property(e => e.ValorCompra).HasColumnName("VALOR_COMPRA");

            entity.Property(e => e.ValorMercado).HasColumnName("VALOR_MERCADO");

            entity.Property(e => e.ValorSeguro).HasColumnName("VALOR_SEGURO");

            entity.Property(e => e.ValorVenta).HasColumnName("VALOR_VENTA");

            entity.Property(e => e.VencHabilitacion)
                .HasColumnType("datetime")
                .HasColumnName("VENC_HABILITACION");

            entity.Property(e => e.VencRegistro)
                .HasColumnType("datetime")
                .HasColumnName("VENC_REGISTRO");

            entity.Property(e => e.VencSeguro)
                .HasColumnType("datetime")
                .HasColumnName("VENC_SEGURO");

            entity.Property(e => e.VencTarjeta)
                .HasColumnType("datetime")
                .HasColumnName("VENC_TARJETA");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VEHICULO_EMPRESA");

            entity.HasOne(d => d.IdCentroCostoNavigation)
                .WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.IdCentroCosto)
                .HasConstraintName("FK_VEHICULO_EMPRESA_CENTRO_COSTO");

            entity.HasOne(d => d.IdDepartamentoNavigation)
                .WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.IdDepartamento)
                .HasConstraintName("FK_VEHICULO_DEPARTAMENTO");

            entity.HasOne(d => d.IdTipoVehiculoNavigation)
                .WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.IdTipoVehiculo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VEHICULO_TIPO_VEHICULO");

            entity.HasOne(d => d.IdTransportadoraNavigation)
                .WithMany(p => p.Vehiculos)
                .HasForeignKey(d => d.IdTransportadora)
                .HasConstraintName("FK_VEHICULO_TRANSPORTADORA");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.VehiculoIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .HasConstraintName("FK_VEHICULO_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.VehiculoRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VEHICULO_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<VehiculoFuncionario>(entity =>
        {
            entity.HasKey(e => e.IdVehiculoFuncionario);

            entity.ToTable("VEHICULO_FUNCIONARIO", "dbo");

            entity.Property(e => e.IdVehiculoFuncionario).HasColumnName("ID_VEHICULO_FUNCIONARIO");

            entity.Property(e => e.Final)
                .HasColumnType("datetime")
                .HasColumnName("FINAL");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Verificado).HasColumnName("VERIFICADO");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.VehiculoFuncionarios)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VEHICULO_FUNCIONARIO_FUNCIONARIO");

            entity.HasOne(d => d.IdVehiculoPkNavigation)
                .WithMany(p => p.VehiculoFuncionarios)
                .HasForeignKey(d => d.IdVehiculoPk)
                .HasConstraintName("FK_VEHICULO_FUNCIONARIO_VEHICULO");
        });

        modelBuilder.Entity<VehiculoTarjetum>(entity =>
        {
            entity.HasKey(e => e.IdVehiculoTarjeta);

            entity.ToTable("VEHICULO_TARJETA", "dbo");

            entity.HasIndex(e => new { e.IdProveedor, e.NumeroTarjeta }, "UK_VEHICULO_TARJETA")
                .IsUnique();

            entity.Property(e => e.IdVehiculoTarjeta).HasColumnName("ID_VEHICULO_TARJETA");

            entity.Property(e => e.IdProveedor).HasColumnName("ID_PROVEEDOR");

            entity.Property(e => e.IdVehiculo).HasColumnName("ID_VEHICULO");

            entity.Property(e => e.IdVehiculoPk).HasColumnName("ID_VEHICULO_PK");

            entity.Property(e => e.NumeroTarjeta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NUMERO_TARJETA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.Vencimiento)
                .HasColumnType("date")
                .HasColumnName("VENCIMIENTO");

            entity.HasOne(d => d.IdProveedorNavigation)
                .WithMany(p => p.VehiculoTarjeta)
                .HasForeignKey(d => d.IdProveedor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VEHICULO_TARJETA_PROVEEDOR");

            entity.HasOne(d => d.IdVehiculoNavigation)
                .WithMany(p => p.VehiculoTarjeta)
                .HasForeignKey(d => d.IdVehiculo)
                .HasConstraintName("FK_VEHICULO_TARJETA_VEHICULO");
        });

        modelBuilder.Entity<Vendedor>(entity =>
        {
            entity.HasKey(e => e.IdVendedor);

            entity.ToTable("VENDEDOR", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_VENDEDOR")
                .IsUnique();

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Activo)
                .HasColumnName("ACTIVO")
                .HasComment("0 = Inactivo, 1 = Activo.");

            entity.Property(e => e.ActivoCota).HasColumnName("ACTIVO_COTA");

            entity.Property(e => e.AtcGerente)
                .HasColumnName("ATC_GERENTE")
                .HasComment("ID_FUNCIONARIO de cargos gerencia o atc");

            entity.Property(e => e.Codigo)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.IdFuncionario).HasColumnName("ID_FUNCIONARIO");

            entity.Property(e => e.IdUnidad).HasColumnName("ID_UNIDAD");

            entity.Property(e => e.NroProfesional)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NRO_PROFESIONAL");

            entity.Property(e => e.RecibeEmail)
                .HasColumnName("RECIBE_EMAIL")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Vendedors)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VENDEDOR_EMPRESA");

            entity.HasOne(d => d.IdFuncionarioNavigation)
                .WithMany(p => p.Vendedors)
                .HasForeignKey(d => d.IdFuncionario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VENDEDOR_FUNCIONARIO");

            entity.HasOne(d => d.IdUnidadNavigation)
                .WithMany(p => p.VendedorIdUnidadNavigations)
                .HasForeignKey(d => d.IdUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VENDEDOR_EMPRESA_UNIDAD");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.VendedorRegUnidadNavigations)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VENDEDOR_EMPRESA_UNIDAD1");
        });

        modelBuilder.Entity<VendedorGerente>(entity =>
        {
            entity.HasKey(e => e.IdVendedorGerente);

            entity.ToTable("VENDEDOR_GERENTE", "dbo");

            entity.Property(e => e.IdVendedorGerente).HasColumnName("ID_VENDEDOR_GERENTE");

            entity.Property(e => e.AtcGerente)
                .HasColumnName("ATC_GERENTE")
                .HasComment("Guarda el id_funcionario");

            entity.Property(e => e.Final)
                .HasColumnType("datetime")
                .HasColumnName("FINAL");

            entity.Property(e => e.IdVendedor).HasColumnName("ID_VENDEDOR");

            entity.Property(e => e.Inicio)
                .HasColumnType("datetime")
                .HasColumnName("INICIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VersionSistema>(entity =>
        {
            entity.HasKey(e => e.IdVersionSistema);

            entity.ToTable("VERSION_SISTEMA", "dbo");

            entity.Property(e => e.IdVersionSistema).HasColumnName("ID_VERSION_SISTEMA");

            entity.Property(e => e.Bloqueo)
                .HasColumnName("BLOQUEO")
                .HasComment("bloque el acceso a Sophos. 0 = No esta bloqueado. 1 = Bloqueado.");

            entity.Property(e => e.CodigoVersion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CODIGO_VERSION");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.NroVersion).HasColumnName("NRO_VERSION");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");
        });

        modelBuilder.Entity<VisualizadorSolicitudProducto>(entity =>
        {
            entity.HasKey(e => e.IdSolicitudProductosPen);

            entity.ToTable("VISUALIZADOR_SOLICITUD_PRODUCTO", "dbo");

            entity.Property(e => e.IdSolicitudProductosPen).HasColumnName("ID_SOLICITUD_PRODUCTOS_PEN");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.Estado)
                .HasColumnName("ESTADO")
                .HasComment("0=Inactivo ; 1=Activo");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdUsuario).HasColumnName("ID_USUARIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.VisualizadorSolicitudProductos)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_VISUALIZADOR_SOLICITUD_PRODUCTO_EMPRESA");
        });

        modelBuilder.Entity<WebTrabajo>(entity =>
        {
            entity.ToTable("WEB_TRABAJO", "dbo");

            entity.Property(e => e.Id).HasColumnName("id");

            entity.Property(e => e.Attempts).HasColumnName("attempts");

            entity.Property(e => e.AvailableAt).HasColumnName("available_at");

            entity.Property(e => e.CreatedAt).HasColumnName("created_at");

            entity.Property(e => e.Payload).HasColumnName("payload");

            entity.Property(e => e.Queue)
                .HasMaxLength(255)
                .HasColumnName("queue");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.ReservedAt).HasColumnName("reserved_at");
        });

        modelBuilder.Entity<WebTrabajoError>(entity =>
        {
            entity.ToTable("WEB_TRABAJO_ERROR", "dbo");

            entity.Property(e => e.Id).HasColumnName("id");

            entity.Property(e => e.Connection).HasColumnName("connection");

            entity.Property(e => e.Exception).HasColumnName("exception");

            entity.Property(e => e.FailedAt)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("failed_at")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.Payload).HasColumnName("payload");

            entity.Property(e => e.Queue).HasColumnName("queue");

            entity.Property(e => e.Uuid)
                .HasMaxLength(255)
                .HasColumnName("uuid");
        });

        modelBuilder.Entity<Zafra>(entity =>
        {
            entity.HasKey(e => e.IdZafra);

            entity.ToTable("ZAFRA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "UK_ZAFRA")
                .IsUnique();

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Codigo)
                .HasColumnName("CODIGO")
                .HasDefaultValueSql("((0))");

            entity.Property(e => e.CodigoIntegracion).HasColumnName("CODIGO_INTEGRACION");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.FechaFin)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_FIN");

            entity.Property(e => e.FechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_INICIO");

            entity.Property(e => e.PrecioMaxFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_MAX_FLETE");

            entity.Property(e => e.PrecioMinFlete)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_MIN_FLETE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.Royalties).HasColumnName("ROYALTIES");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Zafras)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.Zafras)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ZafraCostoPrecio>(entity =>
        {
            entity.HasKey(e => e.IdZafraCostoPrecio);

            entity.ToTable("ZAFRA_COSTO_PRECIO", "dbo");

            entity.HasIndex(e => new { e.IdZafra, e.Fecha, e.IdProducto, e.IdDeposito }, "IX_ZAFRA_COSTO_PRECIO")
                .IsUnique();

            entity.Property(e => e.IdZafraCostoPrecio).HasColumnName("ID_ZAFRA_COSTO_PRECIO");

            entity.Property(e => e.CostoMinimo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_MINIMO");

            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("FECHA");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.PrecioFlete)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_FLETE");

            entity.Property(e => e.PrecioMaxAprocesar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX_APROCESAR");

            entity.Property(e => e.PrecioMaxProcesado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX_PROCESADO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ZafraCostoPrecios)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_COSTO_PRECIO_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraCostoPrecios)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_COSTO_PRECIO_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraCostoPrecios)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_COSTO_PRECIO_ZAFRA");
        });

        modelBuilder.Entity<ZafraDescuento>(entity =>
        {
            entity.HasKey(e => e.IdZafraDescuento);

            entity.ToTable("ZAFRA_DESCUENTO", "dbo");

            entity.HasIndex(e => new { e.IdZafra, e.IdProducto, e.IdDeposito }, "UK_ZAFRA_DESCUENTO")
                .IsUnique();

            entity.Property(e => e.IdZafraDescuento).HasColumnName("ID_ZAFRA_DESCUENTO");

            entity.Property(e => e.ArdDes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARD_DES");

            entity.Property(e => e.ArdTol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("ARD_TOL");

            entity.Property(e => e.AveDes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVE_DES");

            entity.Property(e => e.AveTol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("AVE_TOL");

            entity.Property(e => e.Bloqueo).HasColumnName("BLOQUEO");

            entity.Property(e => e.CostoMinimo)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("COSTO_MINIMO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto)
                .HasColumnName("ID_PRODUCTO")
                .HasDefaultValueSql("('')");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.ImpDes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMP_DES");

            entity.Property(e => e.ImpTol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("IMP_TOL");

            entity.Property(e => e.NivelChicago)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("NIVEL_CHICAGO");

            entity.Property(e => e.OutDes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OUT_DES");

            entity.Property(e => e.OutTol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("OUT_TOL");

            entity.Property(e => e.PrecioMaxAprocesar)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX_APROCESAR");

            entity.Property(e => e.PrecioMaxProcesado)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_MAX_PROCESADO");

            entity.Property(e => e.PrecioReferencia)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PRECIO_REFERENCIA");

            entity.Property(e => e.QueDes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUE_DES");

            entity.Property(e => e.QueTol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("QUE_TOL");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.Property(e => e.VerDes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VER_DES");

            entity.Property(e => e.VerTol)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VER_TOL");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ZafraDescuentos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_DESCUENTO_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraDescuentos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_DESCUENTO_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraDescuentos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_DESCUENTO_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ZafraDescuentos)
                .HasForeignKey(d => d.RegUnidad)
                .HasConstraintName("FK_ZAFRA_DESCUENTO_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ZafraHumedad>(entity =>
        {
            entity.HasKey(e => e.IdZafraHumedad);

            entity.ToTable("ZAFRA_HUMEDAD", "dbo");

            entity.Property(e => e.IdZafraHumedad).HasColumnName("ID_ZAFRA_HUMEDAD");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.Humedad)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HUMEDAD");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ZafraHumedads)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraHumedads)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraHumedads)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ZafraHumedads)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ZafraHumedadRango>(entity =>
        {
            entity.HasKey(e => e.IdZafraHumedadRango);

            entity.ToTable("ZAFRA_HUMEDAD_RANGO", "dbo");

            entity.Property(e => e.IdZafraHumedadRango).HasColumnName("ID_ZAFRA_HUMEDAD_RANGO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Porcentaje)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PORCENTAJE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.ValorFinal)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_FINAL");

            entity.Property(e => e.ValorInicial)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("VALOR_INICIAL");

            entity.HasOne(d => d.IdDepositoNavigation)
                .WithMany(p => p.ZafraHumedadRangos)
                .HasForeignKey(d => d.IdDeposito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_RANGO_DEPOSITO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraHumedadRangos)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_RANGO_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraHumedadRangos)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_HUMEDAD_RANGO_ZAFRA");
        });

        modelBuilder.Entity<ZafraPh>(entity =>
        {
            entity.HasKey(e => e.IdZafraPh);

            entity.ToTable("ZAFRA_PH", "dbo");

            entity.Property(e => e.IdZafraPh).HasColumnName("ID_ZAFRA_PH");

            entity.Property(e => e.Descuento)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("DESCUENTO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Ph)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("PH");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraPhs)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PH_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraPhs)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PH_ZAFRA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ZafraPhs)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PH_EMPRESA_UNIDAD");
        });

        modelBuilder.Entity<ZafraPrecioProv>(entity =>
        {
            entity.HasKey(e => e.IdZafraPrecioProv);

            entity.ToTable("ZAFRA_PRECIO_PROV", "dbo");

            entity.Property(e => e.IdZafraPrecioProv).HasColumnName("ID_ZAFRA_PRECIO_PROV");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.PrecioFaltante)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("PRECIO_FALTANTE");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraPrecioProvs)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PRECIO_PROV_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraPrecioProvs)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PRECIO_PROV_ZAFRA");
        });

        modelBuilder.Entity<ZafraPrecioTrueque>(entity =>
        {
            entity.HasKey(e => e.IdZafraPrecioTrueque);

            entity.ToTable("ZAFRA_PRECIO_TRUEQUE", "dbo");

            entity.Property(e => e.IdZafraPrecioTrueque).HasColumnName("ID_ZAFRA_PRECIO_TRUEQUE");

            entity.Property(e => e.IdCultivo).HasColumnName("ID_CULTIVO");

            entity.Property(e => e.IdDeposito).HasColumnName("ID_DEPOSITO");

            entity.Property(e => e.IdProducto).HasColumnName("ID_PRODUCTO");

            entity.Property(e => e.IdZafra).HasColumnName("ID_ZAFRA");

            entity.Property(e => e.Precio)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("PRECIO");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.TipoProducto).HasColumnName("TIPO_PRODUCTO");

            entity.HasOne(d => d.IdCultivoNavigation)
                .WithMany(p => p.ZafraPrecioTrueques)
                .HasForeignKey(d => d.IdCultivo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PRECIO_TRUEQUE_CULTIVO");

            entity.HasOne(d => d.IdProductoNavigation)
                .WithMany(p => p.ZafraPrecioTrueques)
                .HasForeignKey(d => d.IdProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PRECIO_TRUEQUE_PRODUCTO");

            entity.HasOne(d => d.IdZafraNavigation)
                .WithMany(p => p.ZafraPrecioTrueques)
                .HasForeignKey(d => d.IdZafra)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ZAFRA_PRECIO_TRUEQUE_ZAFRA");
        });

        modelBuilder.Entity<Zarandum>(entity =>
        {
            entity.HasKey(e => e.IdZaranda);

            entity.ToTable("ZARANDA", "dbo");

            entity.HasIndex(e => new { e.Empresa, e.Codigo }, "IX_ZARANDA")
                .IsUnique();

            entity.Property(e => e.IdZaranda).HasColumnName("ID_ZARANDA");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.Zaranda)
                .HasForeignKey(d => d.Empresa)
                .HasConstraintName("FK_ZARANDA_EMPRESA");
        });

        modelBuilder.Entity<ZonaDistribucion>(entity =>
        {
            entity.HasKey(e => e.IdZonaDistribucion);

            entity.ToTable("ZONA_DISTRIBUCION", "dbo");

            entity.HasIndex(e => new { e.Codigo, e.Empresa, e.RegStatus }, "UK_ZONA_DISTRIBUCION")
                .IsUnique();

            entity.Property(e => e.IdZonaDistribucion).HasColumnName("ID_ZONA_DISTRIBUCION");

            entity.Property(e => e.Codigo).HasColumnName("CODIGO");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DESCRIPCION");

            entity.Property(e => e.Empresa).HasColumnName("EMPRESA");

            entity.Property(e => e.RegData)
                .HasColumnType("datetime")
                .HasColumnName("REG_DATA")
                .HasDefaultValueSql("(getdate())");

            entity.Property(e => e.RegStatus).HasColumnName("REG_STATUS");

            entity.Property(e => e.RegUnidad).HasColumnName("REG_UNIDAD");

            entity.HasOne(d => d.EmpresaNavigation)
                .WithMany(p => p.ZonaDistribucions)
                .HasForeignKey(d => d.Empresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA");

            entity.HasOne(d => d.RegUnidadNavigation)
                .WithMany(p => p.ZonaDistribucions)
                .HasForeignKey(d => d.RegUnidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EMPRESA_UNIDAD");
        });

        modelBuilder.HasSequence("producto_sq", "dbo");

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

